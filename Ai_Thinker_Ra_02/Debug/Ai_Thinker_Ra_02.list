
Ai_Thinker_Ra_02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030f4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  0800327c  0800327c  0001327c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080032ac  080032ac  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080032ac  080032ac  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080032ac  080032ac  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080032ac  080032ac  000132ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080032b0  080032b0  000132b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080032b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000b4  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000c0  200000c0  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007b01  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000016ad  00000000  00000000  00027b3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006b0  00000000  00000000  000291f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000005e8  00000000  00000000  000298a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c3dc  00000000  00000000  00029e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000898a  00000000  00000000  00046264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a7136  00000000  00000000  0004ebee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000f5d24  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000194c  00000000  00000000  000f5d78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003264 	.word	0x08003264

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003264 	.word	0x08003264

080001c8 <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 80001c8:	b4b0      	push	{r4, r5, r7}
 80001ca:	b08f      	sub	sp, #60	; 0x3c
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 80001d0:	f240 13b1 	movw	r3, #433	; 0x1b1
 80001d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	new_LoRa.spredingFactor        = SF_7      ;
 80001d6:	2307      	movs	r3, #7
 80001d8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 80001dc:	2307      	movs	r3, #7
 80001de:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 80001e2:	2301      	movs	r3, #1
 80001e4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	new_LoRa.power				   = POWER_20db;
 80001e8:	23ff      	movs	r3, #255	; 0xff
 80001ea:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	new_LoRa.overCurrentProtection = 100       ;
 80001ee:	2364      	movs	r3, #100	; 0x64
 80001f0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	new_LoRa.preamble			   = 8         ;
 80001f4:	2308      	movs	r3, #8
 80001f6:	86bb      	strh	r3, [r7, #52]	; 0x34

	return new_LoRa;
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	461d      	mov	r5, r3
 80001fc:	f107 040c 	add.w	r4, r7, #12
 8000200:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000202:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000204:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000206:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000208:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800020c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8000210:	6878      	ldr	r0, [r7, #4]
 8000212:	373c      	adds	r7, #60	; 0x3c
 8000214:	46bd      	mov	sp, r7
 8000216:	bcb0      	pop	{r4, r5, r7}
 8000218:	4770      	bx	lr

0800021a <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 800021a:	b580      	push	{r7, lr}
 800021c:	b084      	sub	sp, #16
 800021e:	af00      	add	r7, sp, #0
 8000220:	6078      	str	r0, [r7, #4]
 8000222:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8000224:	2101      	movs	r1, #1
 8000226:	6878      	ldr	r0, [r7, #4]
 8000228:	f000 f99f 	bl	800056a <LoRa_read>
 800022c:	4603      	mov	r3, r0
 800022e:	73bb      	strb	r3, [r7, #14]
	data = read;
 8000230:	7bbb      	ldrb	r3, [r7, #14]
 8000232:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8000234:	683b      	ldr	r3, [r7, #0]
 8000236:	2b00      	cmp	r3, #0
 8000238:	d107      	bne.n	800024a <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 800023a:	7bbb      	ldrb	r3, [r7, #14]
 800023c:	f023 0307 	bic.w	r3, r3, #7
 8000240:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	2200      	movs	r2, #0
 8000246:	61da      	str	r2, [r3, #28]
 8000248:	e03e      	b.n	80002c8 <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 800024a:	683b      	ldr	r3, [r7, #0]
 800024c:	2b01      	cmp	r3, #1
 800024e:	d10c      	bne.n	800026a <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 8000250:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000254:	f023 0307 	bic.w	r3, r3, #7
 8000258:	b25b      	sxtb	r3, r3
 800025a:	f043 0301 	orr.w	r3, r3, #1
 800025e:	b25b      	sxtb	r3, r3
 8000260:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	2201      	movs	r2, #1
 8000266:	61da      	str	r2, [r3, #28]
 8000268:	e02e      	b.n	80002c8 <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 800026a:	683b      	ldr	r3, [r7, #0]
 800026c:	2b03      	cmp	r3, #3
 800026e:	d10c      	bne.n	800028a <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 8000270:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000274:	f023 0307 	bic.w	r3, r3, #7
 8000278:	b25b      	sxtb	r3, r3
 800027a:	f043 0303 	orr.w	r3, r3, #3
 800027e:	b25b      	sxtb	r3, r3
 8000280:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	2203      	movs	r2, #3
 8000286:	61da      	str	r2, [r3, #28]
 8000288:	e01e      	b.n	80002c8 <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 800028a:	683b      	ldr	r3, [r7, #0]
 800028c:	2b05      	cmp	r3, #5
 800028e:	d10c      	bne.n	80002aa <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 8000290:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000294:	f023 0307 	bic.w	r3, r3, #7
 8000298:	b25b      	sxtb	r3, r3
 800029a:	f043 0305 	orr.w	r3, r3, #5
 800029e:	b25b      	sxtb	r3, r3
 80002a0:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	2205      	movs	r2, #5
 80002a6:	61da      	str	r2, [r3, #28]
 80002a8:	e00e      	b.n	80002c8 <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 80002aa:	683b      	ldr	r3, [r7, #0]
 80002ac:	2b06      	cmp	r3, #6
 80002ae:	d10b      	bne.n	80002c8 <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 80002b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80002b4:	f023 0307 	bic.w	r3, r3, #7
 80002b8:	b25b      	sxtb	r3, r3
 80002ba:	f043 0306 	orr.w	r3, r3, #6
 80002be:	b25b      	sxtb	r3, r3
 80002c0:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	2206      	movs	r2, #6
 80002c6:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 80002c8:	7bfb      	ldrb	r3, [r7, #15]
 80002ca:	461a      	mov	r2, r3
 80002cc:	2101      	movs	r1, #1
 80002ce:	6878      	ldr	r0, [r7, #4]
 80002d0:	f000 f965 	bl	800059e <LoRa_write>
	//HAL_Delay(10);
}
 80002d4:	bf00      	nop
 80002d6:	3710      	adds	r7, #16
 80002d8:	46bd      	mov	sp, r7
 80002da:	bd80      	pop	{r7, pc}

080002dc <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 80002dc:	b580      	push	{r7, lr}
 80002de:	b084      	sub	sp, #16
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	60f8      	str	r0, [r7, #12]
 80002e4:	60b9      	str	r1, [r7, #8]
 80002e6:	603b      	str	r3, [r7, #0]
 80002e8:	4613      	mov	r3, r2
 80002ea:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 80002ec:	68fb      	ldr	r3, [r7, #12]
 80002ee:	6818      	ldr	r0, [r3, #0]
 80002f0:	68fb      	ldr	r3, [r7, #12]
 80002f2:	889b      	ldrh	r3, [r3, #4]
 80002f4:	2200      	movs	r2, #0
 80002f6:	4619      	mov	r1, r3
 80002f8:	f000 ff5c 	bl	80011b4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 80002fc:	68fb      	ldr	r3, [r7, #12]
 80002fe:	6998      	ldr	r0, [r3, #24]
 8000300:	88fa      	ldrh	r2, [r7, #6]
 8000302:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000306:	68b9      	ldr	r1, [r7, #8]
 8000308:	f002 f905 	bl	8002516 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800030c:	bf00      	nop
 800030e:	68fb      	ldr	r3, [r7, #12]
 8000310:	699b      	ldr	r3, [r3, #24]
 8000312:	4618      	mov	r0, r3
 8000314:	f002 fdb0 	bl	8002e78 <HAL_SPI_GetState>
 8000318:	4603      	mov	r3, r0
 800031a:	2b01      	cmp	r3, #1
 800031c:	d1f7      	bne.n	800030e <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 800031e:	68fb      	ldr	r3, [r7, #12]
 8000320:	6998      	ldr	r0, [r3, #24]
 8000322:	8b3a      	ldrh	r2, [r7, #24]
 8000324:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000328:	6839      	ldr	r1, [r7, #0]
 800032a:	f002 fa62 	bl	80027f2 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800032e:	bf00      	nop
 8000330:	68fb      	ldr	r3, [r7, #12]
 8000332:	699b      	ldr	r3, [r3, #24]
 8000334:	4618      	mov	r0, r3
 8000336:	f002 fd9f 	bl	8002e78 <HAL_SPI_GetState>
 800033a:	4603      	mov	r3, r0
 800033c:	2b01      	cmp	r3, #1
 800033e:	d1f7      	bne.n	8000330 <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000340:	68fb      	ldr	r3, [r7, #12]
 8000342:	6818      	ldr	r0, [r3, #0]
 8000344:	68fb      	ldr	r3, [r7, #12]
 8000346:	889b      	ldrh	r3, [r3, #4]
 8000348:	2201      	movs	r2, #1
 800034a:	4619      	mov	r1, r3
 800034c:	f000 ff32 	bl	80011b4 <HAL_GPIO_WritePin>
}
 8000350:	bf00      	nop
 8000352:	3710      	adds	r7, #16
 8000354:	46bd      	mov	sp, r7
 8000356:	bd80      	pop	{r7, pc}

08000358 <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 8000358:	b580      	push	{r7, lr}
 800035a:	b084      	sub	sp, #16
 800035c:	af00      	add	r7, sp, #0
 800035e:	60f8      	str	r0, [r7, #12]
 8000360:	60b9      	str	r1, [r7, #8]
 8000362:	603b      	str	r3, [r7, #0]
 8000364:	4613      	mov	r3, r2
 8000366:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000368:	68fb      	ldr	r3, [r7, #12]
 800036a:	6818      	ldr	r0, [r3, #0]
 800036c:	68fb      	ldr	r3, [r7, #12]
 800036e:	889b      	ldrh	r3, [r3, #4]
 8000370:	2200      	movs	r2, #0
 8000372:	4619      	mov	r1, r3
 8000374:	f000 ff1e 	bl	80011b4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000378:	68fb      	ldr	r3, [r7, #12]
 800037a:	6998      	ldr	r0, [r3, #24]
 800037c:	88fa      	ldrh	r2, [r7, #6]
 800037e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000382:	68b9      	ldr	r1, [r7, #8]
 8000384:	f002 f8c7 	bl	8002516 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000388:	bf00      	nop
 800038a:	68fb      	ldr	r3, [r7, #12]
 800038c:	699b      	ldr	r3, [r3, #24]
 800038e:	4618      	mov	r0, r3
 8000390:	f002 fd72 	bl	8002e78 <HAL_SPI_GetState>
 8000394:	4603      	mov	r3, r0
 8000396:	2b01      	cmp	r3, #1
 8000398:	d1f7      	bne.n	800038a <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 800039a:	68fb      	ldr	r3, [r7, #12]
 800039c:	6998      	ldr	r0, [r3, #24]
 800039e:	8b3a      	ldrh	r2, [r7, #24]
 80003a0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80003a4:	6839      	ldr	r1, [r7, #0]
 80003a6:	f002 f8b6 	bl	8002516 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80003aa:	bf00      	nop
 80003ac:	68fb      	ldr	r3, [r7, #12]
 80003ae:	699b      	ldr	r3, [r3, #24]
 80003b0:	4618      	mov	r0, r3
 80003b2:	f002 fd61 	bl	8002e78 <HAL_SPI_GetState>
 80003b6:	4603      	mov	r3, r0
 80003b8:	2b01      	cmp	r3, #1
 80003ba:	d1f7      	bne.n	80003ac <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80003bc:	68fb      	ldr	r3, [r7, #12]
 80003be:	6818      	ldr	r0, [r3, #0]
 80003c0:	68fb      	ldr	r3, [r7, #12]
 80003c2:	889b      	ldrh	r3, [r3, #4]
 80003c4:	2201      	movs	r2, #1
 80003c6:	4619      	mov	r1, r3
 80003c8:	f000 fef4 	bl	80011b4 <HAL_GPIO_WritePin>
}
 80003cc:	bf00      	nop
 80003ce:	3710      	adds	r7, #16
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bd80      	pop	{r7, pc}

080003d4 <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b084      	sub	sp, #16
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
 80003dc:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 80003de:	683b      	ldr	r3, [r7, #0]
 80003e0:	04db      	lsls	r3, r3, #19
 80003e2:	115b      	asrs	r3, r3, #5
 80003e4:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 80003e6:	68fb      	ldr	r3, [r7, #12]
 80003e8:	0c1b      	lsrs	r3, r3, #16
 80003ea:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 80003ec:	7afb      	ldrb	r3, [r7, #11]
 80003ee:	461a      	mov	r2, r3
 80003f0:	2106      	movs	r1, #6
 80003f2:	6878      	ldr	r0, [r7, #4]
 80003f4:	f000 f8d3 	bl	800059e <LoRa_write>
	HAL_Delay(5);
 80003f8:	2005      	movs	r0, #5
 80003fa:	f000 fc57 	bl	8000cac <HAL_Delay>

	// write Mid:
	data = F >> 8;
 80003fe:	68fb      	ldr	r3, [r7, #12]
 8000400:	0a1b      	lsrs	r3, r3, #8
 8000402:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 8000404:	7afb      	ldrb	r3, [r7, #11]
 8000406:	461a      	mov	r2, r3
 8000408:	2107      	movs	r1, #7
 800040a:	6878      	ldr	r0, [r7, #4]
 800040c:	f000 f8c7 	bl	800059e <LoRa_write>
	HAL_Delay(5);
 8000410:	2005      	movs	r0, #5
 8000412:	f000 fc4b 	bl	8000cac <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 8000416:	68fb      	ldr	r3, [r7, #12]
 8000418:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 800041a:	7afb      	ldrb	r3, [r7, #11]
 800041c:	461a      	mov	r2, r3
 800041e:	2108      	movs	r1, #8
 8000420:	6878      	ldr	r0, [r7, #4]
 8000422:	f000 f8bc 	bl	800059e <LoRa_write>
	HAL_Delay(5);
 8000426:	2005      	movs	r0, #5
 8000428:	f000 fc40 	bl	8000cac <HAL_Delay>
}
 800042c:	bf00      	nop
 800042e:	3710      	adds	r7, #16
 8000430:	46bd      	mov	sp, r7
 8000432:	bd80      	pop	{r7, pc}

08000434 <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 8000434:	b580      	push	{r7, lr}
 8000436:	b084      	sub	sp, #16
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
 800043c:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 800043e:	683b      	ldr	r3, [r7, #0]
 8000440:	2b0c      	cmp	r3, #12
 8000442:	dd01      	ble.n	8000448 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 8000444:	230c      	movs	r3, #12
 8000446:	603b      	str	r3, [r7, #0]
	if(SF<7)
 8000448:	683b      	ldr	r3, [r7, #0]
 800044a:	2b06      	cmp	r3, #6
 800044c:	dc01      	bgt.n	8000452 <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 800044e:	2307      	movs	r3, #7
 8000450:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 8000452:	211e      	movs	r1, #30
 8000454:	6878      	ldr	r0, [r7, #4]
 8000456:	f000 f888 	bl	800056a <LoRa_read>
 800045a:	4603      	mov	r3, r0
 800045c:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 800045e:	200a      	movs	r0, #10
 8000460:	f000 fc24 	bl	8000cac <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 8000464:	683b      	ldr	r3, [r7, #0]
 8000466:	b2db      	uxtb	r3, r3
 8000468:	011b      	lsls	r3, r3, #4
 800046a:	b2da      	uxtb	r2, r3
 800046c:	7bfb      	ldrb	r3, [r7, #15]
 800046e:	f003 030f 	and.w	r3, r3, #15
 8000472:	b2db      	uxtb	r3, r3
 8000474:	4413      	add	r3, r2
 8000476:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 8000478:	7bbb      	ldrb	r3, [r7, #14]
 800047a:	461a      	mov	r2, r3
 800047c:	211e      	movs	r1, #30
 800047e:	6878      	ldr	r0, [r7, #4]
 8000480:	f000 f88d 	bl	800059e <LoRa_write>
	HAL_Delay(10);
 8000484:	200a      	movs	r0, #10
 8000486:	f000 fc11 	bl	8000cac <HAL_Delay>
}
 800048a:	bf00      	nop
 800048c:	3710      	adds	r7, #16
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}

08000492 <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power e.g POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 8000492:	b580      	push	{r7, lr}
 8000494:	b082      	sub	sp, #8
 8000496:	af00      	add	r7, sp, #0
 8000498:	6078      	str	r0, [r7, #4]
 800049a:	460b      	mov	r3, r1
 800049c:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 800049e:	78fb      	ldrb	r3, [r7, #3]
 80004a0:	461a      	mov	r2, r3
 80004a2:	2109      	movs	r1, #9
 80004a4:	6878      	ldr	r0, [r7, #4]
 80004a6:	f000 f87a 	bl	800059e <LoRa_write>
	HAL_Delay(10);
 80004aa:	200a      	movs	r0, #10
 80004ac:	f000 fbfe 	bl	8000cac <HAL_Delay>
}
 80004b0:	bf00      	nop
 80004b2:	3708      	adds	r7, #8
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}

080004b8 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b084      	sub	sp, #16
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
 80004c0:	460b      	mov	r3, r1
 80004c2:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 80004c4:	2300      	movs	r3, #0
 80004c6:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 80004c8:	78fb      	ldrb	r3, [r7, #3]
 80004ca:	2b2c      	cmp	r3, #44	; 0x2c
 80004cc:	d801      	bhi.n	80004d2 <LoRa_setOCP+0x1a>
		current = 45;
 80004ce:	232d      	movs	r3, #45	; 0x2d
 80004d0:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 80004d2:	78fb      	ldrb	r3, [r7, #3]
 80004d4:	2bf0      	cmp	r3, #240	; 0xf0
 80004d6:	d901      	bls.n	80004dc <LoRa_setOCP+0x24>
		current = 240;
 80004d8:	23f0      	movs	r3, #240	; 0xf0
 80004da:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 80004dc:	78fb      	ldrb	r3, [r7, #3]
 80004de:	2b78      	cmp	r3, #120	; 0x78
 80004e0:	d809      	bhi.n	80004f6 <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 80004e2:	78fb      	ldrb	r3, [r7, #3]
 80004e4:	3b2d      	subs	r3, #45	; 0x2d
 80004e6:	4a12      	ldr	r2, [pc, #72]	; (8000530 <LoRa_setOCP+0x78>)
 80004e8:	fb82 1203 	smull	r1, r2, r2, r3
 80004ec:	1052      	asrs	r2, r2, #1
 80004ee:	17db      	asrs	r3, r3, #31
 80004f0:	1ad3      	subs	r3, r2, r3
 80004f2:	73fb      	strb	r3, [r7, #15]
 80004f4:	e00b      	b.n	800050e <LoRa_setOCP+0x56>
	else if(current <= 240)
 80004f6:	78fb      	ldrb	r3, [r7, #3]
 80004f8:	2bf0      	cmp	r3, #240	; 0xf0
 80004fa:	d808      	bhi.n	800050e <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 80004fc:	78fb      	ldrb	r3, [r7, #3]
 80004fe:	331e      	adds	r3, #30
 8000500:	4a0b      	ldr	r2, [pc, #44]	; (8000530 <LoRa_setOCP+0x78>)
 8000502:	fb82 1203 	smull	r1, r2, r2, r3
 8000506:	1092      	asrs	r2, r2, #2
 8000508:	17db      	asrs	r3, r3, #31
 800050a:	1ad3      	subs	r3, r2, r3
 800050c:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 800050e:	7bfb      	ldrb	r3, [r7, #15]
 8000510:	3320      	adds	r3, #32
 8000512:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 8000514:	7bfb      	ldrb	r3, [r7, #15]
 8000516:	461a      	mov	r2, r3
 8000518:	210b      	movs	r1, #11
 800051a:	6878      	ldr	r0, [r7, #4]
 800051c:	f000 f83f 	bl	800059e <LoRa_write>
	HAL_Delay(10);
 8000520:	200a      	movs	r0, #10
 8000522:	f000 fbc3 	bl	8000cac <HAL_Delay>
}
 8000526:	bf00      	nop
 8000528:	3710      	adds	r7, #16
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	66666667 	.word	0x66666667

08000534 <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 8000534:	b580      	push	{r7, lr}
 8000536:	b084      	sub	sp, #16
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 800053c:	211e      	movs	r1, #30
 800053e:	6878      	ldr	r0, [r7, #4]
 8000540:	f000 f813 	bl	800056a <LoRa_read>
 8000544:	4603      	mov	r3, r0
 8000546:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 8000548:	7bfb      	ldrb	r3, [r7, #15]
 800054a:	f043 0307 	orr.w	r3, r3, #7
 800054e:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 8000550:	7bbb      	ldrb	r3, [r7, #14]
 8000552:	461a      	mov	r2, r3
 8000554:	211e      	movs	r1, #30
 8000556:	6878      	ldr	r0, [r7, #4]
 8000558:	f000 f821 	bl	800059e <LoRa_write>
	HAL_Delay(10);
 800055c:	200a      	movs	r0, #10
 800055e:	f000 fba5 	bl	8000cac <HAL_Delay>
}
 8000562:	bf00      	nop
 8000564:	3710      	adds	r7, #16
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}

0800056a <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 800056a:	b580      	push	{r7, lr}
 800056c:	b086      	sub	sp, #24
 800056e:	af02      	add	r7, sp, #8
 8000570:	6078      	str	r0, [r7, #4]
 8000572:	460b      	mov	r3, r1
 8000574:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 8000576:	78fb      	ldrb	r3, [r7, #3]
 8000578:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800057c:	b2db      	uxtb	r3, r3
 800057e:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 8000580:	f107 030f 	add.w	r3, r7, #15
 8000584:	f107 010e 	add.w	r1, r7, #14
 8000588:	2201      	movs	r2, #1
 800058a:	9200      	str	r2, [sp, #0]
 800058c:	2201      	movs	r2, #1
 800058e:	6878      	ldr	r0, [r7, #4]
 8000590:	f7ff fea4 	bl	80002dc <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 8000594:	7bfb      	ldrb	r3, [r7, #15]
}
 8000596:	4618      	mov	r0, r3
 8000598:	3710      	adds	r7, #16
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}

0800059e <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 800059e:	b580      	push	{r7, lr}
 80005a0:	b086      	sub	sp, #24
 80005a2:	af02      	add	r7, sp, #8
 80005a4:	6078      	str	r0, [r7, #4]
 80005a6:	460b      	mov	r3, r1
 80005a8:	70fb      	strb	r3, [r7, #3]
 80005aa:	4613      	mov	r3, r2
 80005ac:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 80005ae:	78fb      	ldrb	r3, [r7, #3]
 80005b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80005b4:	b2db      	uxtb	r3, r3
 80005b6:	73bb      	strb	r3, [r7, #14]
	data = value;
 80005b8:	78bb      	ldrb	r3, [r7, #2]
 80005ba:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 80005bc:	f107 030f 	add.w	r3, r7, #15
 80005c0:	f107 010e 	add.w	r1, r7, #14
 80005c4:	2201      	movs	r2, #1
 80005c6:	9200      	str	r2, [sp, #0]
 80005c8:	2201      	movs	r2, #1
 80005ca:	6878      	ldr	r0, [r7, #4]
 80005cc:	f7ff fec4 	bl	8000358 <LoRa_writeReg>
	//HAL_Delay(5);
}
 80005d0:	bf00      	nop
 80005d2:	3710      	adds	r7, #16
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}

080005d8 <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]

	return 1;
 80005e0:	2301      	movs	r3, #1
}
 80005e2:	4618      	mov	r0, r3
 80005e4:	370c      	adds	r7, #12
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr

080005ee <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 80005ee:	b580      	push	{r7, lr}
 80005f0:	b084      	sub	sp, #16
 80005f2:	af00      	add	r7, sp, #0
 80005f4:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 80005f6:	6878      	ldr	r0, [r7, #4]
 80005f8:	f7ff ffee 	bl	80005d8 <LoRa_isvalid>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	f000 8093 	beq.w	800072a <LoRa_init+0x13c>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8000604:	2100      	movs	r1, #0
 8000606:	6878      	ldr	r0, [r7, #4]
 8000608:	f7ff fe07 	bl	800021a <LoRa_gotoMode>
			HAL_Delay(10);
 800060c:	200a      	movs	r0, #10
 800060e:	f000 fb4d 	bl	8000cac <HAL_Delay>

		// turn on lora mode:
			read = LoRa_read(_LoRa, RegOpMode);
 8000612:	2101      	movs	r1, #1
 8000614:	6878      	ldr	r0, [r7, #4]
 8000616:	f7ff ffa8 	bl	800056a <LoRa_read>
 800061a:	4603      	mov	r3, r0
 800061c:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 800061e:	200a      	movs	r0, #10
 8000620:	f000 fb44 	bl	8000cac <HAL_Delay>
			data = read | 0x80;
 8000624:	7bfb      	ldrb	r3, [r7, #15]
 8000626:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800062a:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 800062c:	7bbb      	ldrb	r3, [r7, #14]
 800062e:	461a      	mov	r2, r3
 8000630:	2101      	movs	r1, #1
 8000632:	6878      	ldr	r0, [r7, #4]
 8000634:	f7ff ffb3 	bl	800059e <LoRa_write>
			HAL_Delay(100);
 8000638:	2064      	movs	r0, #100	; 0x64
 800063a:	f000 fb37 	bl	8000cac <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	6a1b      	ldr	r3, [r3, #32]
 8000642:	4619      	mov	r1, r3
 8000644:	6878      	ldr	r0, [r7, #4]
 8000646:	f7ff fec5 	bl	80003d4 <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8000650:	4619      	mov	r1, r3
 8000652:	6878      	ldr	r0, [r7, #4]
 8000654:	f7ff ff1d 	bl	8000492 <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800065e:	4619      	mov	r1, r3
 8000660:	6878      	ldr	r0, [r7, #4]
 8000662:	f7ff ff29 	bl	80004b8 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 8000666:	2223      	movs	r2, #35	; 0x23
 8000668:	210c      	movs	r1, #12
 800066a:	6878      	ldr	r0, [r7, #4]
 800066c:	f7ff ff97 	bl	800059e <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 8000670:	6878      	ldr	r0, [r7, #4]
 8000672:	f7ff ff5f 	bl	8000534 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800067c:	4619      	mov	r1, r3
 800067e:	6878      	ldr	r0, [r7, #4]
 8000680:	f7ff fed8 	bl	8000434 <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 8000684:	22ff      	movs	r2, #255	; 0xff
 8000686:	211f      	movs	r1, #31
 8000688:	6878      	ldr	r0, [r7, #4]
 800068a:	f7ff ff88 	bl	800059e <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 800068e:	2300      	movs	r3, #0
 8000690:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000698:	011b      	lsls	r3, r3, #4
 800069a:	b2da      	uxtb	r2, r3
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80006a2:	005b      	lsls	r3, r3, #1
 80006a4:	b2db      	uxtb	r3, r3
 80006a6:	4413      	add	r3, r2
 80006a8:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 80006aa:	7bbb      	ldrb	r3, [r7, #14]
 80006ac:	461a      	mov	r2, r3
 80006ae:	211d      	movs	r1, #29
 80006b0:	6878      	ldr	r0, [r7, #4]
 80006b2:	f7ff ff74 	bl	800059e <LoRa_write>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80006ba:	0a1b      	lsrs	r3, r3, #8
 80006bc:	b29b      	uxth	r3, r3
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	461a      	mov	r2, r3
 80006c2:	2120      	movs	r1, #32
 80006c4:	6878      	ldr	r0, [r7, #4]
 80006c6:	f7ff ff6a 	bl	800059e <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80006ce:	b2db      	uxtb	r3, r3
 80006d0:	461a      	mov	r2, r3
 80006d2:	2121      	movs	r1, #33	; 0x21
 80006d4:	6878      	ldr	r0, [r7, #4]
 80006d6:	f7ff ff62 	bl	800059e <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 80006da:	2140      	movs	r1, #64	; 0x40
 80006dc:	6878      	ldr	r0, [r7, #4]
 80006de:	f7ff ff44 	bl	800056a <LoRa_read>
 80006e2:	4603      	mov	r3, r0
 80006e4:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 80006e6:	7bfb      	ldrb	r3, [r7, #15]
 80006e8:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 80006ec:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 80006ee:	7bbb      	ldrb	r3, [r7, #14]
 80006f0:	461a      	mov	r2, r3
 80006f2:	2140      	movs	r1, #64	; 0x40
 80006f4:	6878      	ldr	r0, [r7, #4]
 80006f6:	f7ff ff52 	bl	800059e <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 80006fa:	2101      	movs	r1, #1
 80006fc:	6878      	ldr	r0, [r7, #4]
 80006fe:	f7ff fd8c 	bl	800021a <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	2201      	movs	r2, #1
 8000706:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 8000708:	200a      	movs	r0, #10
 800070a:	f000 facf 	bl	8000cac <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 800070e:	2142      	movs	r1, #66	; 0x42
 8000710:	6878      	ldr	r0, [r7, #4]
 8000712:	f7ff ff2a 	bl	800056a <LoRa_read>
 8000716:	4603      	mov	r3, r0
 8000718:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 800071a:	7bfb      	ldrb	r3, [r7, #15]
 800071c:	2b12      	cmp	r3, #18
 800071e:	d101      	bne.n	8000724 <LoRa_init+0x136>
				return LORA_OK;
 8000720:	23c8      	movs	r3, #200	; 0xc8
 8000722:	e004      	b.n	800072e <LoRa_init+0x140>
			else
				return LORA_NOT_FOUND;
 8000724:	f44f 73ca 	mov.w	r3, #404	; 0x194
 8000728:	e001      	b.n	800072e <LoRa_init+0x140>
	}
	else {
		return LORA_UNAVAILABLE;
 800072a:	f240 13f7 	movw	r3, #503	; 0x1f7
	}
}
 800072e:	4618      	mov	r0, r3
 8000730:	3710      	adds	r7, #16
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
	...

08000738 <MX_GPIO_Init>:
     PA12   ------> USB_DP
     PB6   ------> I2C1_SCL
     PB7   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b08a      	sub	sp, #40	; 0x28
 800073c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073e:	f107 0314 	add.w	r3, r7, #20
 8000742:	2200      	movs	r2, #0
 8000744:	601a      	str	r2, [r3, #0]
 8000746:	605a      	str	r2, [r3, #4]
 8000748:	609a      	str	r2, [r3, #8]
 800074a:	60da      	str	r2, [r3, #12]
 800074c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800074e:	4b58      	ldr	r3, [pc, #352]	; (80008b0 <MX_GPIO_Init+0x178>)
 8000750:	695b      	ldr	r3, [r3, #20]
 8000752:	4a57      	ldr	r2, [pc, #348]	; (80008b0 <MX_GPIO_Init+0x178>)
 8000754:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000758:	6153      	str	r3, [r2, #20]
 800075a:	4b55      	ldr	r3, [pc, #340]	; (80008b0 <MX_GPIO_Init+0x178>)
 800075c:	695b      	ldr	r3, [r3, #20]
 800075e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000762:	613b      	str	r3, [r7, #16]
 8000764:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000766:	4b52      	ldr	r3, [pc, #328]	; (80008b0 <MX_GPIO_Init+0x178>)
 8000768:	695b      	ldr	r3, [r3, #20]
 800076a:	4a51      	ldr	r2, [pc, #324]	; (80008b0 <MX_GPIO_Init+0x178>)
 800076c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000770:	6153      	str	r3, [r2, #20]
 8000772:	4b4f      	ldr	r3, [pc, #316]	; (80008b0 <MX_GPIO_Init+0x178>)
 8000774:	695b      	ldr	r3, [r3, #20]
 8000776:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800077e:	4b4c      	ldr	r3, [pc, #304]	; (80008b0 <MX_GPIO_Init+0x178>)
 8000780:	695b      	ldr	r3, [r3, #20]
 8000782:	4a4b      	ldr	r2, [pc, #300]	; (80008b0 <MX_GPIO_Init+0x178>)
 8000784:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000788:	6153      	str	r3, [r2, #20]
 800078a:	4b49      	ldr	r3, [pc, #292]	; (80008b0 <MX_GPIO_Init+0x178>)
 800078c:	695b      	ldr	r3, [r3, #20]
 800078e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000792:	60bb      	str	r3, [r7, #8]
 8000794:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000796:	4b46      	ldr	r3, [pc, #280]	; (80008b0 <MX_GPIO_Init+0x178>)
 8000798:	695b      	ldr	r3, [r3, #20]
 800079a:	4a45      	ldr	r2, [pc, #276]	; (80008b0 <MX_GPIO_Init+0x178>)
 800079c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007a0:	6153      	str	r3, [r2, #20]
 80007a2:	4b43      	ldr	r3, [pc, #268]	; (80008b0 <MX_GPIO_Init+0x178>)
 80007a4:	695b      	ldr	r3, [r3, #20]
 80007a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ae:	4b40      	ldr	r3, [pc, #256]	; (80008b0 <MX_GPIO_Init+0x178>)
 80007b0:	695b      	ldr	r3, [r3, #20]
 80007b2:	4a3f      	ldr	r2, [pc, #252]	; (80008b0 <MX_GPIO_Init+0x178>)
 80007b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007b8:	6153      	str	r3, [r2, #20]
 80007ba:	4b3d      	ldr	r3, [pc, #244]	; (80008b0 <MX_GPIO_Init+0x178>)
 80007bc:	695b      	ldr	r3, [r3, #20]
 80007be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80007c2:	603b      	str	r3, [r7, #0]
 80007c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80007c6:	2200      	movs	r2, #0
 80007c8:	f64f 7108 	movw	r1, #65288	; 0xff08
 80007cc:	4839      	ldr	r0, [pc, #228]	; (80008b4 <MX_GPIO_Init+0x17c>)
 80007ce:	f000 fcf1 	bl	80011b4 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NSS_Pin|RST_Pin, GPIO_PIN_SET);
 80007d2:	2201      	movs	r2, #1
 80007d4:	2103      	movs	r1, #3
 80007d6:	4838      	ldr	r0, [pc, #224]	; (80008b8 <MX_GPIO_Init+0x180>)
 80007d8:	f000 fcec 	bl	80011b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80007dc:	f64f 7308 	movw	r3, #65288	; 0xff08
 80007e0:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e2:	2301      	movs	r3, #1
 80007e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ea:	2300      	movs	r3, #0
 80007ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007ee:	f107 0314 	add.w	r3, r7, #20
 80007f2:	4619      	mov	r1, r3
 80007f4:	482f      	ldr	r0, [pc, #188]	; (80008b4 <MX_GPIO_Init+0x17c>)
 80007f6:	f000 fb63 	bl	8000ec0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin;
 80007fa:	2333      	movs	r3, #51	; 0x33
 80007fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80007fe:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000802:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	2300      	movs	r3, #0
 8000806:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000808:	f107 0314 	add.w	r3, r7, #20
 800080c:	4619      	mov	r1, r3
 800080e:	4829      	ldr	r0, [pc, #164]	; (80008b4 <MX_GPIO_Init+0x17c>)
 8000810:	f000 fb56 	bl	8000ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000814:	2301      	movs	r3, #1
 8000816:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000818:	2300      	movs	r3, #0
 800081a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	2300      	movs	r3, #0
 800081e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000820:	f107 0314 	add.w	r3, r7, #20
 8000824:	4619      	mov	r1, r3
 8000826:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800082a:	f000 fb49 	bl	8000ec0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = NSS_Pin|RST_Pin;
 800082e:	2303      	movs	r3, #3
 8000830:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000832:	2301      	movs	r3, #1
 8000834:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083a:	2300      	movs	r3, #0
 800083c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800083e:	f107 0314 	add.w	r3, r7, #20
 8000842:	4619      	mov	r1, r3
 8000844:	481c      	ldr	r0, [pc, #112]	; (80008b8 <MX_GPIO_Init+0x180>)
 8000846:	f000 fb3b 	bl	8000ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 800084a:	2304      	movs	r3, #4
 800084c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800084e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000852:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 8000858:	f107 0314 	add.w	r3, r7, #20
 800085c:	4619      	mov	r1, r3
 800085e:	4816      	ldr	r0, [pc, #88]	; (80008b8 <MX_GPIO_Init+0x180>)
 8000860:	f000 fb2e 	bl	8000ec0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8000864:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000868:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086a:	2302      	movs	r3, #2
 800086c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000872:	2303      	movs	r3, #3
 8000874:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8000876:	230e      	movs	r3, #14
 8000878:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800087a:	f107 0314 	add.w	r3, r7, #20
 800087e:	4619      	mov	r1, r3
 8000880:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000884:	f000 fb1c 	bl	8000ec0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000888:	23c0      	movs	r3, #192	; 0xc0
 800088a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800088c:	2312      	movs	r3, #18
 800088e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000894:	2300      	movs	r3, #0
 8000896:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000898:	2304      	movs	r3, #4
 800089a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800089c:	f107 0314 	add.w	r3, r7, #20
 80008a0:	4619      	mov	r1, r3
 80008a2:	4805      	ldr	r0, [pc, #20]	; (80008b8 <MX_GPIO_Init+0x180>)
 80008a4:	f000 fb0c 	bl	8000ec0 <HAL_GPIO_Init>

}
 80008a8:	bf00      	nop
 80008aa:	3728      	adds	r7, #40	; 0x28
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	40021000 	.word	0x40021000
 80008b4:	48001000 	.word	0x48001000
 80008b8:	48000400 	.word	0x48000400

080008bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008bc:	b5b0      	push	{r4, r5, r7, lr}
 80008be:	b08c      	sub	sp, #48	; 0x30
 80008c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008c2:	f000 f98d 	bl	8000be0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008c6:	f000 f83b 	bl	8000940 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008ca:	f7ff ff35 	bl	8000738 <MX_GPIO_Init>
  MX_SPI1_Init();
 80008ce:	f000 f87d 	bl	80009cc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  myLoRa = newLoRa();
 80008d2:	4c17      	ldr	r4, [pc, #92]	; (8000930 <main+0x74>)
 80008d4:	463b      	mov	r3, r7
 80008d6:	4618      	mov	r0, r3
 80008d8:	f7ff fc76 	bl	80001c8 <newLoRa>
 80008dc:	4625      	mov	r5, r4
 80008de:	463c      	mov	r4, r7
 80008e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008e8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80008ec:	e885 0007 	stmia.w	r5, {r0, r1, r2}

  myLoRa.CS_port         = NSS_GPIO_Port;
 80008f0:	4b0f      	ldr	r3, [pc, #60]	; (8000930 <main+0x74>)
 80008f2:	4a10      	ldr	r2, [pc, #64]	; (8000934 <main+0x78>)
 80008f4:	601a      	str	r2, [r3, #0]
  myLoRa.CS_pin          = NSS_Pin;
 80008f6:	4b0e      	ldr	r3, [pc, #56]	; (8000930 <main+0x74>)
 80008f8:	2201      	movs	r2, #1
 80008fa:	809a      	strh	r2, [r3, #4]
  myLoRa.reset_port      = RST_GPIO_Port;
 80008fc:	4b0c      	ldr	r3, [pc, #48]	; (8000930 <main+0x74>)
 80008fe:	4a0d      	ldr	r2, [pc, #52]	; (8000934 <main+0x78>)
 8000900:	609a      	str	r2, [r3, #8]
  myLoRa.reset_pin       = RST_Pin;
 8000902:	4b0b      	ldr	r3, [pc, #44]	; (8000930 <main+0x74>)
 8000904:	2202      	movs	r2, #2
 8000906:	819a      	strh	r2, [r3, #12]
  myLoRa.DIO0_port       = DIO0_GPIO_Port;
 8000908:	4b09      	ldr	r3, [pc, #36]	; (8000930 <main+0x74>)
 800090a:	4a0a      	ldr	r2, [pc, #40]	; (8000934 <main+0x78>)
 800090c:	611a      	str	r2, [r3, #16]
  myLoRa.DIO0_pin        = DIO0_Pin;
 800090e:	4b08      	ldr	r3, [pc, #32]	; (8000930 <main+0x74>)
 8000910:	2204      	movs	r2, #4
 8000912:	829a      	strh	r2, [r3, #20]
  myLoRa.hSPIx           = &hspi1;
 8000914:	4b06      	ldr	r3, [pc, #24]	; (8000930 <main+0x74>)
 8000916:	4a08      	ldr	r2, [pc, #32]	; (8000938 <main+0x7c>)
 8000918:	619a      	str	r2, [r3, #24]

  if(LoRa_init(&myLoRa) == LORA_OK) {
 800091a:	4805      	ldr	r0, [pc, #20]	; (8000930 <main+0x74>)
 800091c:	f7ff fe67 	bl	80005ee <LoRa_init>
 8000920:	4603      	mov	r3, r0
 8000922:	2bc8      	cmp	r3, #200	; 0xc8
 8000924:	d102      	bne.n	800092c <main+0x70>
	  LoRa_status = 1;
 8000926:	4b05      	ldr	r3, [pc, #20]	; (800093c <main+0x80>)
 8000928:	2201      	movs	r2, #1
 800092a:	701a      	strb	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800092c:	e7fe      	b.n	800092c <main+0x70>
 800092e:	bf00      	nop
 8000930:	2000002c 	.word	0x2000002c
 8000934:	48000400 	.word	0x48000400
 8000938:	20000058 	.word	0x20000058
 800093c:	20000028 	.word	0x20000028

08000940 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b090      	sub	sp, #64	; 0x40
 8000944:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000946:	f107 0318 	add.w	r3, r7, #24
 800094a:	2228      	movs	r2, #40	; 0x28
 800094c:	2100      	movs	r1, #0
 800094e:	4618      	mov	r0, r3
 8000950:	f002 fc80 	bl	8003254 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000954:	1d3b      	adds	r3, r7, #4
 8000956:	2200      	movs	r2, #0
 8000958:	601a      	str	r2, [r3, #0]
 800095a:	605a      	str	r2, [r3, #4]
 800095c:	609a      	str	r2, [r3, #8]
 800095e:	60da      	str	r2, [r3, #12]
 8000960:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000962:	2302      	movs	r3, #2
 8000964:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000966:	2301      	movs	r3, #1
 8000968:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800096a:	2310      	movs	r3, #16
 800096c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800096e:	2302      	movs	r3, #2
 8000970:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000972:	2300      	movs	r3, #0
 8000974:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000976:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800097a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800097c:	f107 0318 	add.w	r3, r7, #24
 8000980:	4618      	mov	r0, r3
 8000982:	f000 fc2f 	bl	80011e4 <HAL_RCC_OscConfig>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800098c:	f000 f819 	bl	80009c2 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000990:	230f      	movs	r3, #15
 8000992:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000994:	2302      	movs	r3, #2
 8000996:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000998:	2300      	movs	r3, #0
 800099a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800099c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009a2:	2300      	movs	r3, #0
 80009a4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009a6:	1d3b      	adds	r3, r7, #4
 80009a8:	2102      	movs	r1, #2
 80009aa:	4618      	mov	r0, r3
 80009ac:	f001 fb22 	bl	8001ff4 <HAL_RCC_ClockConfig>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80009b6:	f000 f804 	bl	80009c2 <Error_Handler>
  }
}
 80009ba:	bf00      	nop
 80009bc:	3740      	adds	r7, #64	; 0x40
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}

080009c2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009c6:	b672      	cpsid	i
}
 80009c8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009ca:	e7fe      	b.n	80009ca <Error_Handler+0x8>

080009cc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80009d0:	4b1b      	ldr	r3, [pc, #108]	; (8000a40 <MX_SPI1_Init+0x74>)
 80009d2:	4a1c      	ldr	r2, [pc, #112]	; (8000a44 <MX_SPI1_Init+0x78>)
 80009d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80009d6:	4b1a      	ldr	r3, [pc, #104]	; (8000a40 <MX_SPI1_Init+0x74>)
 80009d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009de:	4b18      	ldr	r3, [pc, #96]	; (8000a40 <MX_SPI1_Init+0x74>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80009e4:	4b16      	ldr	r3, [pc, #88]	; (8000a40 <MX_SPI1_Init+0x74>)
 80009e6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80009ea:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009ec:	4b14      	ldr	r3, [pc, #80]	; (8000a40 <MX_SPI1_Init+0x74>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009f2:	4b13      	ldr	r3, [pc, #76]	; (8000a40 <MX_SPI1_Init+0x74>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009f8:	4b11      	ldr	r3, [pc, #68]	; (8000a40 <MX_SPI1_Init+0x74>)
 80009fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009fe:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000a00:	4b0f      	ldr	r3, [pc, #60]	; (8000a40 <MX_SPI1_Init+0x74>)
 8000a02:	2210      	movs	r2, #16
 8000a04:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a06:	4b0e      	ldr	r3, [pc, #56]	; (8000a40 <MX_SPI1_Init+0x74>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a0c:	4b0c      	ldr	r3, [pc, #48]	; (8000a40 <MX_SPI1_Init+0x74>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a12:	4b0b      	ldr	r3, [pc, #44]	; (8000a40 <MX_SPI1_Init+0x74>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000a18:	4b09      	ldr	r3, [pc, #36]	; (8000a40 <MX_SPI1_Init+0x74>)
 8000a1a:	2207      	movs	r2, #7
 8000a1c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a1e:	4b08      	ldr	r3, [pc, #32]	; (8000a40 <MX_SPI1_Init+0x74>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a24:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <MX_SPI1_Init+0x74>)
 8000a26:	2208      	movs	r2, #8
 8000a28:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a2a:	4805      	ldr	r0, [pc, #20]	; (8000a40 <MX_SPI1_Init+0x74>)
 8000a2c:	f001 fcc8 	bl	80023c0 <HAL_SPI_Init>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000a36:	f7ff ffc4 	bl	80009c2 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a3a:	bf00      	nop
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	20000058 	.word	0x20000058
 8000a44:	40013000 	.word	0x40013000

08000a48 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b08a      	sub	sp, #40	; 0x28
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]
 8000a5a:	609a      	str	r2, [r3, #8]
 8000a5c:	60da      	str	r2, [r3, #12]
 8000a5e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a17      	ldr	r2, [pc, #92]	; (8000ac4 <HAL_SPI_MspInit+0x7c>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d128      	bne.n	8000abc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a6a:	4b17      	ldr	r3, [pc, #92]	; (8000ac8 <HAL_SPI_MspInit+0x80>)
 8000a6c:	699b      	ldr	r3, [r3, #24]
 8000a6e:	4a16      	ldr	r2, [pc, #88]	; (8000ac8 <HAL_SPI_MspInit+0x80>)
 8000a70:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a74:	6193      	str	r3, [r2, #24]
 8000a76:	4b14      	ldr	r3, [pc, #80]	; (8000ac8 <HAL_SPI_MspInit+0x80>)
 8000a78:	699b      	ldr	r3, [r3, #24]
 8000a7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a7e:	613b      	str	r3, [r7, #16]
 8000a80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a82:	4b11      	ldr	r3, [pc, #68]	; (8000ac8 <HAL_SPI_MspInit+0x80>)
 8000a84:	695b      	ldr	r3, [r3, #20]
 8000a86:	4a10      	ldr	r2, [pc, #64]	; (8000ac8 <HAL_SPI_MspInit+0x80>)
 8000a88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a8c:	6153      	str	r3, [r2, #20]
 8000a8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ac8 <HAL_SPI_MspInit+0x80>)
 8000a90:	695b      	ldr	r3, [r3, #20]
 8000a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a96:	60fb      	str	r3, [r7, #12]
 8000a98:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8000a9a:	23e0      	movs	r3, #224	; 0xe0
 8000a9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000aaa:	2305      	movs	r3, #5
 8000aac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aae:	f107 0314 	add.w	r3, r7, #20
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ab8:	f000 fa02 	bl	8000ec0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000abc:	bf00      	nop
 8000abe:	3728      	adds	r7, #40	; 0x28
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	40013000 	.word	0x40013000
 8000ac8:	40021000 	.word	0x40021000

08000acc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ad2:	4b0f      	ldr	r3, [pc, #60]	; (8000b10 <HAL_MspInit+0x44>)
 8000ad4:	699b      	ldr	r3, [r3, #24]
 8000ad6:	4a0e      	ldr	r2, [pc, #56]	; (8000b10 <HAL_MspInit+0x44>)
 8000ad8:	f043 0301 	orr.w	r3, r3, #1
 8000adc:	6193      	str	r3, [r2, #24]
 8000ade:	4b0c      	ldr	r3, [pc, #48]	; (8000b10 <HAL_MspInit+0x44>)
 8000ae0:	699b      	ldr	r3, [r3, #24]
 8000ae2:	f003 0301 	and.w	r3, r3, #1
 8000ae6:	607b      	str	r3, [r7, #4]
 8000ae8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aea:	4b09      	ldr	r3, [pc, #36]	; (8000b10 <HAL_MspInit+0x44>)
 8000aec:	69db      	ldr	r3, [r3, #28]
 8000aee:	4a08      	ldr	r2, [pc, #32]	; (8000b10 <HAL_MspInit+0x44>)
 8000af0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000af4:	61d3      	str	r3, [r2, #28]
 8000af6:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <HAL_MspInit+0x44>)
 8000af8:	69db      	ldr	r3, [r3, #28]
 8000afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000afe:	603b      	str	r3, [r7, #0]
 8000b00:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b02:	2007      	movs	r0, #7
 8000b04:	f000 f9a8 	bl	8000e58 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b08:	bf00      	nop
 8000b0a:	3708      	adds	r7, #8
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	40021000 	.word	0x40021000

08000b14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b18:	e7fe      	b.n	8000b18 <NMI_Handler+0x4>

08000b1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b1e:	e7fe      	b.n	8000b1e <HardFault_Handler+0x4>

08000b20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b24:	e7fe      	b.n	8000b24 <MemManage_Handler+0x4>

08000b26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b26:	b480      	push	{r7}
 8000b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b2a:	e7fe      	b.n	8000b2a <BusFault_Handler+0x4>

08000b2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b30:	e7fe      	b.n	8000b30 <UsageFault_Handler+0x4>

08000b32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b32:	b480      	push	{r7}
 8000b34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b36:	bf00      	nop
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr

08000b40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b44:	bf00      	nop
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr

08000b4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b52:	bf00      	nop
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr

08000b5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b60:	f000 f884 	bl	8000c6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b64:	bf00      	nop
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b6c:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <SystemInit+0x20>)
 8000b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b72:	4a05      	ldr	r2, [pc, #20]	; (8000b88 <SystemInit+0x20>)
 8000b74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	e000ed00 	.word	0xe000ed00

08000b8c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bc4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b90:	480d      	ldr	r0, [pc, #52]	; (8000bc8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b92:	490e      	ldr	r1, [pc, #56]	; (8000bcc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b94:	4a0e      	ldr	r2, [pc, #56]	; (8000bd0 <LoopForever+0xe>)
  movs r3, #0
 8000b96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b98:	e002      	b.n	8000ba0 <LoopCopyDataInit>

08000b9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b9e:	3304      	adds	r3, #4

08000ba0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ba0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ba2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba4:	d3f9      	bcc.n	8000b9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ba6:	4a0b      	ldr	r2, [pc, #44]	; (8000bd4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ba8:	4c0b      	ldr	r4, [pc, #44]	; (8000bd8 <LoopForever+0x16>)
  movs r3, #0
 8000baa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bac:	e001      	b.n	8000bb2 <LoopFillZerobss>

08000bae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bb0:	3204      	adds	r2, #4

08000bb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb4:	d3fb      	bcc.n	8000bae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000bb6:	f7ff ffd7 	bl	8000b68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bba:	f002 fb27 	bl	800320c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bbe:	f7ff fe7d 	bl	80008bc <main>

08000bc2 <LoopForever>:

LoopForever:
    b LoopForever
 8000bc2:	e7fe      	b.n	8000bc2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000bc4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000bc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bcc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000bd0:	080032b4 	.word	0x080032b4
  ldr r2, =_sbss
 8000bd4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000bd8:	200000c0 	.word	0x200000c0

08000bdc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bdc:	e7fe      	b.n	8000bdc <ADC1_2_IRQHandler>
	...

08000be0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000be4:	4b08      	ldr	r3, [pc, #32]	; (8000c08 <HAL_Init+0x28>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a07      	ldr	r2, [pc, #28]	; (8000c08 <HAL_Init+0x28>)
 8000bea:	f043 0310 	orr.w	r3, r3, #16
 8000bee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bf0:	2003      	movs	r0, #3
 8000bf2:	f000 f931 	bl	8000e58 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bf6:	2000      	movs	r0, #0
 8000bf8:	f000 f808 	bl	8000c0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bfc:	f7ff ff66 	bl	8000acc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c00:	2300      	movs	r3, #0
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	40022000 	.word	0x40022000

08000c0c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c14:	4b12      	ldr	r3, [pc, #72]	; (8000c60 <HAL_InitTick+0x54>)
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	4b12      	ldr	r3, [pc, #72]	; (8000c64 <HAL_InitTick+0x58>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f000 f93b 	bl	8000ea6 <HAL_SYSTICK_Config>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c36:	2301      	movs	r3, #1
 8000c38:	e00e      	b.n	8000c58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	2b0f      	cmp	r3, #15
 8000c3e:	d80a      	bhi.n	8000c56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c40:	2200      	movs	r2, #0
 8000c42:	6879      	ldr	r1, [r7, #4]
 8000c44:	f04f 30ff 	mov.w	r0, #4294967295
 8000c48:	f000 f911 	bl	8000e6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c4c:	4a06      	ldr	r2, [pc, #24]	; (8000c68 <HAL_InitTick+0x5c>)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000c52:	2300      	movs	r3, #0
 8000c54:	e000      	b.n	8000c58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c56:	2301      	movs	r3, #1
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	3708      	adds	r7, #8
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	20000000 	.word	0x20000000
 8000c64:	20000008 	.word	0x20000008
 8000c68:	20000004 	.word	0x20000004

08000c6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c70:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <HAL_IncTick+0x20>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	461a      	mov	r2, r3
 8000c76:	4b06      	ldr	r3, [pc, #24]	; (8000c90 <HAL_IncTick+0x24>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4413      	add	r3, r2
 8000c7c:	4a04      	ldr	r2, [pc, #16]	; (8000c90 <HAL_IncTick+0x24>)
 8000c7e:	6013      	str	r3, [r2, #0]
}
 8000c80:	bf00      	nop
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	20000008 	.word	0x20000008
 8000c90:	200000bc 	.word	0x200000bc

08000c94 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  return uwTick;  
 8000c98:	4b03      	ldr	r3, [pc, #12]	; (8000ca8 <HAL_GetTick+0x14>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	200000bc 	.word	0x200000bc

08000cac <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cb4:	f7ff ffee 	bl	8000c94 <HAL_GetTick>
 8000cb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cc4:	d005      	beq.n	8000cd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cc6:	4b0a      	ldr	r3, [pc, #40]	; (8000cf0 <HAL_Delay+0x44>)
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	461a      	mov	r2, r3
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	4413      	add	r3, r2
 8000cd0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000cd2:	bf00      	nop
 8000cd4:	f7ff ffde 	bl	8000c94 <HAL_GetTick>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	1ad3      	subs	r3, r2, r3
 8000cde:	68fa      	ldr	r2, [r7, #12]
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	d8f7      	bhi.n	8000cd4 <HAL_Delay+0x28>
  {
  }
}
 8000ce4:	bf00      	nop
 8000ce6:	bf00      	nop
 8000ce8:	3710      	adds	r7, #16
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	20000008 	.word	0x20000008

08000cf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b085      	sub	sp, #20
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	f003 0307 	and.w	r3, r3, #7
 8000d02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d04:	4b0c      	ldr	r3, [pc, #48]	; (8000d38 <__NVIC_SetPriorityGrouping+0x44>)
 8000d06:	68db      	ldr	r3, [r3, #12]
 8000d08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d0a:	68ba      	ldr	r2, [r7, #8]
 8000d0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d10:	4013      	ands	r3, r2
 8000d12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d26:	4a04      	ldr	r2, [pc, #16]	; (8000d38 <__NVIC_SetPriorityGrouping+0x44>)
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	60d3      	str	r3, [r2, #12]
}
 8000d2c:	bf00      	nop
 8000d2e:	3714      	adds	r7, #20
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr
 8000d38:	e000ed00 	.word	0xe000ed00

08000d3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d40:	4b04      	ldr	r3, [pc, #16]	; (8000d54 <__NVIC_GetPriorityGrouping+0x18>)
 8000d42:	68db      	ldr	r3, [r3, #12]
 8000d44:	0a1b      	lsrs	r3, r3, #8
 8000d46:	f003 0307 	and.w	r3, r3, #7
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr
 8000d54:	e000ed00 	.word	0xe000ed00

08000d58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	6039      	str	r1, [r7, #0]
 8000d62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	db0a      	blt.n	8000d82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	b2da      	uxtb	r2, r3
 8000d70:	490c      	ldr	r1, [pc, #48]	; (8000da4 <__NVIC_SetPriority+0x4c>)
 8000d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d76:	0112      	lsls	r2, r2, #4
 8000d78:	b2d2      	uxtb	r2, r2
 8000d7a:	440b      	add	r3, r1
 8000d7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d80:	e00a      	b.n	8000d98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	b2da      	uxtb	r2, r3
 8000d86:	4908      	ldr	r1, [pc, #32]	; (8000da8 <__NVIC_SetPriority+0x50>)
 8000d88:	79fb      	ldrb	r3, [r7, #7]
 8000d8a:	f003 030f 	and.w	r3, r3, #15
 8000d8e:	3b04      	subs	r3, #4
 8000d90:	0112      	lsls	r2, r2, #4
 8000d92:	b2d2      	uxtb	r2, r2
 8000d94:	440b      	add	r3, r1
 8000d96:	761a      	strb	r2, [r3, #24]
}
 8000d98:	bf00      	nop
 8000d9a:	370c      	adds	r7, #12
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr
 8000da4:	e000e100 	.word	0xe000e100
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b089      	sub	sp, #36	; 0x24
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	60f8      	str	r0, [r7, #12]
 8000db4:	60b9      	str	r1, [r7, #8]
 8000db6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	f003 0307 	and.w	r3, r3, #7
 8000dbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dc0:	69fb      	ldr	r3, [r7, #28]
 8000dc2:	f1c3 0307 	rsb	r3, r3, #7
 8000dc6:	2b04      	cmp	r3, #4
 8000dc8:	bf28      	it	cs
 8000dca:	2304      	movcs	r3, #4
 8000dcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	3304      	adds	r3, #4
 8000dd2:	2b06      	cmp	r3, #6
 8000dd4:	d902      	bls.n	8000ddc <NVIC_EncodePriority+0x30>
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	3b03      	subs	r3, #3
 8000dda:	e000      	b.n	8000dde <NVIC_EncodePriority+0x32>
 8000ddc:	2300      	movs	r3, #0
 8000dde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de0:	f04f 32ff 	mov.w	r2, #4294967295
 8000de4:	69bb      	ldr	r3, [r7, #24]
 8000de6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dea:	43da      	mvns	r2, r3
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	401a      	ands	r2, r3
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000df4:	f04f 31ff 	mov.w	r1, #4294967295
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8000dfe:	43d9      	mvns	r1, r3
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e04:	4313      	orrs	r3, r2
         );
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3724      	adds	r7, #36	; 0x24
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
	...

08000e14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	3b01      	subs	r3, #1
 8000e20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e24:	d301      	bcc.n	8000e2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e26:	2301      	movs	r3, #1
 8000e28:	e00f      	b.n	8000e4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e2a:	4a0a      	ldr	r2, [pc, #40]	; (8000e54 <SysTick_Config+0x40>)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	3b01      	subs	r3, #1
 8000e30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e32:	210f      	movs	r1, #15
 8000e34:	f04f 30ff 	mov.w	r0, #4294967295
 8000e38:	f7ff ff8e 	bl	8000d58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e3c:	4b05      	ldr	r3, [pc, #20]	; (8000e54 <SysTick_Config+0x40>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e42:	4b04      	ldr	r3, [pc, #16]	; (8000e54 <SysTick_Config+0x40>)
 8000e44:	2207      	movs	r2, #7
 8000e46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e48:	2300      	movs	r3, #0
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	e000e010 	.word	0xe000e010

08000e58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e60:	6878      	ldr	r0, [r7, #4]
 8000e62:	f7ff ff47 	bl	8000cf4 <__NVIC_SetPriorityGrouping>
}
 8000e66:	bf00      	nop
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}

08000e6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e6e:	b580      	push	{r7, lr}
 8000e70:	b086      	sub	sp, #24
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	4603      	mov	r3, r0
 8000e76:	60b9      	str	r1, [r7, #8]
 8000e78:	607a      	str	r2, [r7, #4]
 8000e7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e80:	f7ff ff5c 	bl	8000d3c <__NVIC_GetPriorityGrouping>
 8000e84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e86:	687a      	ldr	r2, [r7, #4]
 8000e88:	68b9      	ldr	r1, [r7, #8]
 8000e8a:	6978      	ldr	r0, [r7, #20]
 8000e8c:	f7ff ff8e 	bl	8000dac <NVIC_EncodePriority>
 8000e90:	4602      	mov	r2, r0
 8000e92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e96:	4611      	mov	r1, r2
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff ff5d 	bl	8000d58 <__NVIC_SetPriority>
}
 8000e9e:	bf00      	nop
 8000ea0:	3718      	adds	r7, #24
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b082      	sub	sp, #8
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	f7ff ffb0 	bl	8000e14 <SysTick_Config>
 8000eb4:	4603      	mov	r3, r0
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
	...

08000ec0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b087      	sub	sp, #28
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
 8000ec8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ece:	e154      	b.n	800117a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	2101      	movs	r1, #1
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	fa01 f303 	lsl.w	r3, r1, r3
 8000edc:	4013      	ands	r3, r2
 8000ede:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	f000 8146 	beq.w	8001174 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f003 0303 	and.w	r3, r3, #3
 8000ef0:	2b01      	cmp	r3, #1
 8000ef2:	d005      	beq.n	8000f00 <HAL_GPIO_Init+0x40>
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f003 0303 	and.w	r3, r3, #3
 8000efc:	2b02      	cmp	r3, #2
 8000efe:	d130      	bne.n	8000f62 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	689b      	ldr	r3, [r3, #8]
 8000f04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	2203      	movs	r2, #3
 8000f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f10:	43db      	mvns	r3, r3
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	4013      	ands	r3, r2
 8000f16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	68da      	ldr	r2, [r3, #12]
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	693a      	ldr	r2, [r7, #16]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	693a      	ldr	r2, [r7, #16]
 8000f2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f36:	2201      	movs	r2, #1
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	43db      	mvns	r3, r3
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	4013      	ands	r3, r2
 8000f44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	091b      	lsrs	r3, r3, #4
 8000f4c:	f003 0201 	and.w	r2, r3, #1
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	fa02 f303 	lsl.w	r3, r2, r3
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	f003 0303 	and.w	r3, r3, #3
 8000f6a:	2b03      	cmp	r3, #3
 8000f6c:	d017      	beq.n	8000f9e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	68db      	ldr	r3, [r3, #12]
 8000f72:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	2203      	movs	r2, #3
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	43db      	mvns	r3, r3
 8000f80:	693a      	ldr	r2, [r7, #16]
 8000f82:	4013      	ands	r3, r2
 8000f84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	689a      	ldr	r2, [r3, #8]
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	693a      	ldr	r2, [r7, #16]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	f003 0303 	and.w	r3, r3, #3
 8000fa6:	2b02      	cmp	r3, #2
 8000fa8:	d123      	bne.n	8000ff2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	08da      	lsrs	r2, r3, #3
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	3208      	adds	r2, #8
 8000fb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fb6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	f003 0307 	and.w	r3, r3, #7
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	220f      	movs	r2, #15
 8000fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc6:	43db      	mvns	r3, r3
 8000fc8:	693a      	ldr	r2, [r7, #16]
 8000fca:	4013      	ands	r3, r2
 8000fcc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	691a      	ldr	r2, [r3, #16]
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	f003 0307 	and.w	r3, r3, #7
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	08da      	lsrs	r2, r3, #3
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	3208      	adds	r2, #8
 8000fec:	6939      	ldr	r1, [r7, #16]
 8000fee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	2203      	movs	r2, #3
 8000ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8001002:	43db      	mvns	r3, r3
 8001004:	693a      	ldr	r2, [r7, #16]
 8001006:	4013      	ands	r3, r2
 8001008:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	f003 0203 	and.w	r2, r3, #3
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	fa02 f303 	lsl.w	r3, r2, r3
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	4313      	orrs	r3, r2
 800101e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800102e:	2b00      	cmp	r3, #0
 8001030:	f000 80a0 	beq.w	8001174 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001034:	4b58      	ldr	r3, [pc, #352]	; (8001198 <HAL_GPIO_Init+0x2d8>)
 8001036:	699b      	ldr	r3, [r3, #24]
 8001038:	4a57      	ldr	r2, [pc, #348]	; (8001198 <HAL_GPIO_Init+0x2d8>)
 800103a:	f043 0301 	orr.w	r3, r3, #1
 800103e:	6193      	str	r3, [r2, #24]
 8001040:	4b55      	ldr	r3, [pc, #340]	; (8001198 <HAL_GPIO_Init+0x2d8>)
 8001042:	699b      	ldr	r3, [r3, #24]
 8001044:	f003 0301 	and.w	r3, r3, #1
 8001048:	60bb      	str	r3, [r7, #8]
 800104a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800104c:	4a53      	ldr	r2, [pc, #332]	; (800119c <HAL_GPIO_Init+0x2dc>)
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	089b      	lsrs	r3, r3, #2
 8001052:	3302      	adds	r3, #2
 8001054:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001058:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	f003 0303 	and.w	r3, r3, #3
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	220f      	movs	r2, #15
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	43db      	mvns	r3, r3
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	4013      	ands	r3, r2
 800106e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001076:	d019      	beq.n	80010ac <HAL_GPIO_Init+0x1ec>
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	4a49      	ldr	r2, [pc, #292]	; (80011a0 <HAL_GPIO_Init+0x2e0>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d013      	beq.n	80010a8 <HAL_GPIO_Init+0x1e8>
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	4a48      	ldr	r2, [pc, #288]	; (80011a4 <HAL_GPIO_Init+0x2e4>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d00d      	beq.n	80010a4 <HAL_GPIO_Init+0x1e4>
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	4a47      	ldr	r2, [pc, #284]	; (80011a8 <HAL_GPIO_Init+0x2e8>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d007      	beq.n	80010a0 <HAL_GPIO_Init+0x1e0>
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	4a46      	ldr	r2, [pc, #280]	; (80011ac <HAL_GPIO_Init+0x2ec>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d101      	bne.n	800109c <HAL_GPIO_Init+0x1dc>
 8001098:	2304      	movs	r3, #4
 800109a:	e008      	b.n	80010ae <HAL_GPIO_Init+0x1ee>
 800109c:	2305      	movs	r3, #5
 800109e:	e006      	b.n	80010ae <HAL_GPIO_Init+0x1ee>
 80010a0:	2303      	movs	r3, #3
 80010a2:	e004      	b.n	80010ae <HAL_GPIO_Init+0x1ee>
 80010a4:	2302      	movs	r3, #2
 80010a6:	e002      	b.n	80010ae <HAL_GPIO_Init+0x1ee>
 80010a8:	2301      	movs	r3, #1
 80010aa:	e000      	b.n	80010ae <HAL_GPIO_Init+0x1ee>
 80010ac:	2300      	movs	r3, #0
 80010ae:	697a      	ldr	r2, [r7, #20]
 80010b0:	f002 0203 	and.w	r2, r2, #3
 80010b4:	0092      	lsls	r2, r2, #2
 80010b6:	4093      	lsls	r3, r2
 80010b8:	693a      	ldr	r2, [r7, #16]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010be:	4937      	ldr	r1, [pc, #220]	; (800119c <HAL_GPIO_Init+0x2dc>)
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	089b      	lsrs	r3, r3, #2
 80010c4:	3302      	adds	r3, #2
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010cc:	4b38      	ldr	r3, [pc, #224]	; (80011b0 <HAL_GPIO_Init+0x2f0>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	43db      	mvns	r3, r3
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	4013      	ands	r3, r2
 80010da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d003      	beq.n	80010f0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80010f0:	4a2f      	ldr	r2, [pc, #188]	; (80011b0 <HAL_GPIO_Init+0x2f0>)
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80010f6:	4b2e      	ldr	r3, [pc, #184]	; (80011b0 <HAL_GPIO_Init+0x2f0>)
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	43db      	mvns	r3, r3
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	4013      	ands	r3, r2
 8001104:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800110e:	2b00      	cmp	r3, #0
 8001110:	d003      	beq.n	800111a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	4313      	orrs	r3, r2
 8001118:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800111a:	4a25      	ldr	r2, [pc, #148]	; (80011b0 <HAL_GPIO_Init+0x2f0>)
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001120:	4b23      	ldr	r3, [pc, #140]	; (80011b0 <HAL_GPIO_Init+0x2f0>)
 8001122:	689b      	ldr	r3, [r3, #8]
 8001124:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	43db      	mvns	r3, r3
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	4013      	ands	r3, r2
 800112e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001138:	2b00      	cmp	r3, #0
 800113a:	d003      	beq.n	8001144 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800113c:	693a      	ldr	r2, [r7, #16]
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	4313      	orrs	r3, r2
 8001142:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001144:	4a1a      	ldr	r2, [pc, #104]	; (80011b0 <HAL_GPIO_Init+0x2f0>)
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800114a:	4b19      	ldr	r3, [pc, #100]	; (80011b0 <HAL_GPIO_Init+0x2f0>)
 800114c:	68db      	ldr	r3, [r3, #12]
 800114e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	43db      	mvns	r3, r3
 8001154:	693a      	ldr	r2, [r7, #16]
 8001156:	4013      	ands	r3, r2
 8001158:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001162:	2b00      	cmp	r3, #0
 8001164:	d003      	beq.n	800116e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	4313      	orrs	r3, r2
 800116c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800116e:	4a10      	ldr	r2, [pc, #64]	; (80011b0 <HAL_GPIO_Init+0x2f0>)
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	3301      	adds	r3, #1
 8001178:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	fa22 f303 	lsr.w	r3, r2, r3
 8001184:	2b00      	cmp	r3, #0
 8001186:	f47f aea3 	bne.w	8000ed0 <HAL_GPIO_Init+0x10>
  }
}
 800118a:	bf00      	nop
 800118c:	bf00      	nop
 800118e:	371c      	adds	r7, #28
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	40021000 	.word	0x40021000
 800119c:	40010000 	.word	0x40010000
 80011a0:	48000400 	.word	0x48000400
 80011a4:	48000800 	.word	0x48000800
 80011a8:	48000c00 	.word	0x48000c00
 80011ac:	48001000 	.word	0x48001000
 80011b0:	40010400 	.word	0x40010400

080011b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	460b      	mov	r3, r1
 80011be:	807b      	strh	r3, [r7, #2]
 80011c0:	4613      	mov	r3, r2
 80011c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011c4:	787b      	ldrb	r3, [r7, #1]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d003      	beq.n	80011d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011ca:	887a      	ldrh	r2, [r7, #2]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011d0:	e002      	b.n	80011d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011d2:	887a      	ldrh	r2, [r7, #2]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011d8:	bf00      	nop
 80011da:	370c      	adds	r7, #12
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	1d3b      	adds	r3, r7, #4
 80011ee:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011f0:	1d3b      	adds	r3, r7, #4
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d102      	bne.n	80011fe <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80011f8:	2301      	movs	r3, #1
 80011fa:	f000 bef4 	b.w	8001fe6 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011fe:	1d3b      	adds	r3, r7, #4
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f003 0301 	and.w	r3, r3, #1
 8001208:	2b00      	cmp	r3, #0
 800120a:	f000 816a 	beq.w	80014e2 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800120e:	4bb3      	ldr	r3, [pc, #716]	; (80014dc <HAL_RCC_OscConfig+0x2f8>)
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f003 030c 	and.w	r3, r3, #12
 8001216:	2b04      	cmp	r3, #4
 8001218:	d00c      	beq.n	8001234 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800121a:	4bb0      	ldr	r3, [pc, #704]	; (80014dc <HAL_RCC_OscConfig+0x2f8>)
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f003 030c 	and.w	r3, r3, #12
 8001222:	2b08      	cmp	r3, #8
 8001224:	d159      	bne.n	80012da <HAL_RCC_OscConfig+0xf6>
 8001226:	4bad      	ldr	r3, [pc, #692]	; (80014dc <HAL_RCC_OscConfig+0x2f8>)
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800122e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001232:	d152      	bne.n	80012da <HAL_RCC_OscConfig+0xf6>
 8001234:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001238:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800123c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001240:	fa93 f3a3 	rbit	r3, r3
 8001244:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001248:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800124c:	fab3 f383 	clz	r3, r3
 8001250:	b2db      	uxtb	r3, r3
 8001252:	095b      	lsrs	r3, r3, #5
 8001254:	b2db      	uxtb	r3, r3
 8001256:	f043 0301 	orr.w	r3, r3, #1
 800125a:	b2db      	uxtb	r3, r3
 800125c:	2b01      	cmp	r3, #1
 800125e:	d102      	bne.n	8001266 <HAL_RCC_OscConfig+0x82>
 8001260:	4b9e      	ldr	r3, [pc, #632]	; (80014dc <HAL_RCC_OscConfig+0x2f8>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	e015      	b.n	8001292 <HAL_RCC_OscConfig+0xae>
 8001266:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800126a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800126e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001272:	fa93 f3a3 	rbit	r3, r3
 8001276:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800127a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800127e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001282:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001286:	fa93 f3a3 	rbit	r3, r3
 800128a:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800128e:	4b93      	ldr	r3, [pc, #588]	; (80014dc <HAL_RCC_OscConfig+0x2f8>)
 8001290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001292:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001296:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800129a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800129e:	fa92 f2a2 	rbit	r2, r2
 80012a2:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80012a6:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80012aa:	fab2 f282 	clz	r2, r2
 80012ae:	b2d2      	uxtb	r2, r2
 80012b0:	f042 0220 	orr.w	r2, r2, #32
 80012b4:	b2d2      	uxtb	r2, r2
 80012b6:	f002 021f 	and.w	r2, r2, #31
 80012ba:	2101      	movs	r1, #1
 80012bc:	fa01 f202 	lsl.w	r2, r1, r2
 80012c0:	4013      	ands	r3, r2
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	f000 810c 	beq.w	80014e0 <HAL_RCC_OscConfig+0x2fc>
 80012c8:	1d3b      	adds	r3, r7, #4
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	f040 8106 	bne.w	80014e0 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80012d4:	2301      	movs	r3, #1
 80012d6:	f000 be86 	b.w	8001fe6 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012da:	1d3b      	adds	r3, r7, #4
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012e4:	d106      	bne.n	80012f4 <HAL_RCC_OscConfig+0x110>
 80012e6:	4b7d      	ldr	r3, [pc, #500]	; (80014dc <HAL_RCC_OscConfig+0x2f8>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a7c      	ldr	r2, [pc, #496]	; (80014dc <HAL_RCC_OscConfig+0x2f8>)
 80012ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012f0:	6013      	str	r3, [r2, #0]
 80012f2:	e030      	b.n	8001356 <HAL_RCC_OscConfig+0x172>
 80012f4:	1d3b      	adds	r3, r7, #4
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d10c      	bne.n	8001318 <HAL_RCC_OscConfig+0x134>
 80012fe:	4b77      	ldr	r3, [pc, #476]	; (80014dc <HAL_RCC_OscConfig+0x2f8>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a76      	ldr	r2, [pc, #472]	; (80014dc <HAL_RCC_OscConfig+0x2f8>)
 8001304:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001308:	6013      	str	r3, [r2, #0]
 800130a:	4b74      	ldr	r3, [pc, #464]	; (80014dc <HAL_RCC_OscConfig+0x2f8>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a73      	ldr	r2, [pc, #460]	; (80014dc <HAL_RCC_OscConfig+0x2f8>)
 8001310:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001314:	6013      	str	r3, [r2, #0]
 8001316:	e01e      	b.n	8001356 <HAL_RCC_OscConfig+0x172>
 8001318:	1d3b      	adds	r3, r7, #4
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001322:	d10c      	bne.n	800133e <HAL_RCC_OscConfig+0x15a>
 8001324:	4b6d      	ldr	r3, [pc, #436]	; (80014dc <HAL_RCC_OscConfig+0x2f8>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a6c      	ldr	r2, [pc, #432]	; (80014dc <HAL_RCC_OscConfig+0x2f8>)
 800132a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800132e:	6013      	str	r3, [r2, #0]
 8001330:	4b6a      	ldr	r3, [pc, #424]	; (80014dc <HAL_RCC_OscConfig+0x2f8>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a69      	ldr	r2, [pc, #420]	; (80014dc <HAL_RCC_OscConfig+0x2f8>)
 8001336:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800133a:	6013      	str	r3, [r2, #0]
 800133c:	e00b      	b.n	8001356 <HAL_RCC_OscConfig+0x172>
 800133e:	4b67      	ldr	r3, [pc, #412]	; (80014dc <HAL_RCC_OscConfig+0x2f8>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a66      	ldr	r2, [pc, #408]	; (80014dc <HAL_RCC_OscConfig+0x2f8>)
 8001344:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001348:	6013      	str	r3, [r2, #0]
 800134a:	4b64      	ldr	r3, [pc, #400]	; (80014dc <HAL_RCC_OscConfig+0x2f8>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a63      	ldr	r2, [pc, #396]	; (80014dc <HAL_RCC_OscConfig+0x2f8>)
 8001350:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001354:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001356:	4b61      	ldr	r3, [pc, #388]	; (80014dc <HAL_RCC_OscConfig+0x2f8>)
 8001358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800135a:	f023 020f 	bic.w	r2, r3, #15
 800135e:	1d3b      	adds	r3, r7, #4
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	495d      	ldr	r1, [pc, #372]	; (80014dc <HAL_RCC_OscConfig+0x2f8>)
 8001366:	4313      	orrs	r3, r2
 8001368:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800136a:	1d3b      	adds	r3, r7, #4
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d059      	beq.n	8001428 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001374:	f7ff fc8e 	bl	8000c94 <HAL_GetTick>
 8001378:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800137c:	e00a      	b.n	8001394 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800137e:	f7ff fc89 	bl	8000c94 <HAL_GetTick>
 8001382:	4602      	mov	r2, r0
 8001384:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	2b64      	cmp	r3, #100	; 0x64
 800138c:	d902      	bls.n	8001394 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800138e:	2303      	movs	r3, #3
 8001390:	f000 be29 	b.w	8001fe6 <HAL_RCC_OscConfig+0xe02>
 8001394:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001398:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800139c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80013a0:	fa93 f3a3 	rbit	r3, r3
 80013a4:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80013a8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ac:	fab3 f383 	clz	r3, r3
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	095b      	lsrs	r3, r3, #5
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	f043 0301 	orr.w	r3, r3, #1
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d102      	bne.n	80013c6 <HAL_RCC_OscConfig+0x1e2>
 80013c0:	4b46      	ldr	r3, [pc, #280]	; (80014dc <HAL_RCC_OscConfig+0x2f8>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	e015      	b.n	80013f2 <HAL_RCC_OscConfig+0x20e>
 80013c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013ca:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ce:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80013d2:	fa93 f3a3 	rbit	r3, r3
 80013d6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80013da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013de:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80013e2:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80013e6:	fa93 f3a3 	rbit	r3, r3
 80013ea:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80013ee:	4b3b      	ldr	r3, [pc, #236]	; (80014dc <HAL_RCC_OscConfig+0x2f8>)
 80013f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80013f6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80013fa:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80013fe:	fa92 f2a2 	rbit	r2, r2
 8001402:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001406:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800140a:	fab2 f282 	clz	r2, r2
 800140e:	b2d2      	uxtb	r2, r2
 8001410:	f042 0220 	orr.w	r2, r2, #32
 8001414:	b2d2      	uxtb	r2, r2
 8001416:	f002 021f 	and.w	r2, r2, #31
 800141a:	2101      	movs	r1, #1
 800141c:	fa01 f202 	lsl.w	r2, r1, r2
 8001420:	4013      	ands	r3, r2
 8001422:	2b00      	cmp	r3, #0
 8001424:	d0ab      	beq.n	800137e <HAL_RCC_OscConfig+0x19a>
 8001426:	e05c      	b.n	80014e2 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001428:	f7ff fc34 	bl	8000c94 <HAL_GetTick>
 800142c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001430:	e00a      	b.n	8001448 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001432:	f7ff fc2f 	bl	8000c94 <HAL_GetTick>
 8001436:	4602      	mov	r2, r0
 8001438:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	2b64      	cmp	r3, #100	; 0x64
 8001440:	d902      	bls.n	8001448 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	f000 bdcf 	b.w	8001fe6 <HAL_RCC_OscConfig+0xe02>
 8001448:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800144c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001450:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001454:	fa93 f3a3 	rbit	r3, r3
 8001458:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800145c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001460:	fab3 f383 	clz	r3, r3
 8001464:	b2db      	uxtb	r3, r3
 8001466:	095b      	lsrs	r3, r3, #5
 8001468:	b2db      	uxtb	r3, r3
 800146a:	f043 0301 	orr.w	r3, r3, #1
 800146e:	b2db      	uxtb	r3, r3
 8001470:	2b01      	cmp	r3, #1
 8001472:	d102      	bne.n	800147a <HAL_RCC_OscConfig+0x296>
 8001474:	4b19      	ldr	r3, [pc, #100]	; (80014dc <HAL_RCC_OscConfig+0x2f8>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	e015      	b.n	80014a6 <HAL_RCC_OscConfig+0x2c2>
 800147a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800147e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001482:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001486:	fa93 f3a3 	rbit	r3, r3
 800148a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800148e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001492:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001496:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800149a:	fa93 f3a3 	rbit	r3, r3
 800149e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80014a2:	4b0e      	ldr	r3, [pc, #56]	; (80014dc <HAL_RCC_OscConfig+0x2f8>)
 80014a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80014aa:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80014ae:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80014b2:	fa92 f2a2 	rbit	r2, r2
 80014b6:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80014ba:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80014be:	fab2 f282 	clz	r2, r2
 80014c2:	b2d2      	uxtb	r2, r2
 80014c4:	f042 0220 	orr.w	r2, r2, #32
 80014c8:	b2d2      	uxtb	r2, r2
 80014ca:	f002 021f 	and.w	r2, r2, #31
 80014ce:	2101      	movs	r1, #1
 80014d0:	fa01 f202 	lsl.w	r2, r1, r2
 80014d4:	4013      	ands	r3, r2
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d1ab      	bne.n	8001432 <HAL_RCC_OscConfig+0x24e>
 80014da:	e002      	b.n	80014e2 <HAL_RCC_OscConfig+0x2fe>
 80014dc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014e2:	1d3b      	adds	r3, r7, #4
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f003 0302 	and.w	r3, r3, #2
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	f000 816f 	beq.w	80017d0 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80014f2:	4bd0      	ldr	r3, [pc, #832]	; (8001834 <HAL_RCC_OscConfig+0x650>)
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f003 030c 	and.w	r3, r3, #12
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d00b      	beq.n	8001516 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80014fe:	4bcd      	ldr	r3, [pc, #820]	; (8001834 <HAL_RCC_OscConfig+0x650>)
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f003 030c 	and.w	r3, r3, #12
 8001506:	2b08      	cmp	r3, #8
 8001508:	d16c      	bne.n	80015e4 <HAL_RCC_OscConfig+0x400>
 800150a:	4bca      	ldr	r3, [pc, #808]	; (8001834 <HAL_RCC_OscConfig+0x650>)
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001512:	2b00      	cmp	r3, #0
 8001514:	d166      	bne.n	80015e4 <HAL_RCC_OscConfig+0x400>
 8001516:	2302      	movs	r3, #2
 8001518:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800151c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001520:	fa93 f3a3 	rbit	r3, r3
 8001524:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001528:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800152c:	fab3 f383 	clz	r3, r3
 8001530:	b2db      	uxtb	r3, r3
 8001532:	095b      	lsrs	r3, r3, #5
 8001534:	b2db      	uxtb	r3, r3
 8001536:	f043 0301 	orr.w	r3, r3, #1
 800153a:	b2db      	uxtb	r3, r3
 800153c:	2b01      	cmp	r3, #1
 800153e:	d102      	bne.n	8001546 <HAL_RCC_OscConfig+0x362>
 8001540:	4bbc      	ldr	r3, [pc, #752]	; (8001834 <HAL_RCC_OscConfig+0x650>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	e013      	b.n	800156e <HAL_RCC_OscConfig+0x38a>
 8001546:	2302      	movs	r3, #2
 8001548:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800154c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001550:	fa93 f3a3 	rbit	r3, r3
 8001554:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001558:	2302      	movs	r3, #2
 800155a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800155e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001562:	fa93 f3a3 	rbit	r3, r3
 8001566:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800156a:	4bb2      	ldr	r3, [pc, #712]	; (8001834 <HAL_RCC_OscConfig+0x650>)
 800156c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800156e:	2202      	movs	r2, #2
 8001570:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001574:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001578:	fa92 f2a2 	rbit	r2, r2
 800157c:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001580:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001584:	fab2 f282 	clz	r2, r2
 8001588:	b2d2      	uxtb	r2, r2
 800158a:	f042 0220 	orr.w	r2, r2, #32
 800158e:	b2d2      	uxtb	r2, r2
 8001590:	f002 021f 	and.w	r2, r2, #31
 8001594:	2101      	movs	r1, #1
 8001596:	fa01 f202 	lsl.w	r2, r1, r2
 800159a:	4013      	ands	r3, r2
 800159c:	2b00      	cmp	r3, #0
 800159e:	d007      	beq.n	80015b0 <HAL_RCC_OscConfig+0x3cc>
 80015a0:	1d3b      	adds	r3, r7, #4
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	691b      	ldr	r3, [r3, #16]
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d002      	beq.n	80015b0 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	f000 bd1b 	b.w	8001fe6 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015b0:	4ba0      	ldr	r3, [pc, #640]	; (8001834 <HAL_RCC_OscConfig+0x650>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015b8:	1d3b      	adds	r3, r7, #4
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	695b      	ldr	r3, [r3, #20]
 80015be:	21f8      	movs	r1, #248	; 0xf8
 80015c0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015c4:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80015c8:	fa91 f1a1 	rbit	r1, r1
 80015cc:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80015d0:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80015d4:	fab1 f181 	clz	r1, r1
 80015d8:	b2c9      	uxtb	r1, r1
 80015da:	408b      	lsls	r3, r1
 80015dc:	4995      	ldr	r1, [pc, #596]	; (8001834 <HAL_RCC_OscConfig+0x650>)
 80015de:	4313      	orrs	r3, r2
 80015e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015e2:	e0f5      	b.n	80017d0 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015e4:	1d3b      	adds	r3, r7, #4
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	691b      	ldr	r3, [r3, #16]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	f000 8085 	beq.w	80016fa <HAL_RCC_OscConfig+0x516>
 80015f0:	2301      	movs	r3, #1
 80015f2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015f6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80015fa:	fa93 f3a3 	rbit	r3, r3
 80015fe:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001602:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001606:	fab3 f383 	clz	r3, r3
 800160a:	b2db      	uxtb	r3, r3
 800160c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001610:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	461a      	mov	r2, r3
 8001618:	2301      	movs	r3, #1
 800161a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800161c:	f7ff fb3a 	bl	8000c94 <HAL_GetTick>
 8001620:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001624:	e00a      	b.n	800163c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001626:	f7ff fb35 	bl	8000c94 <HAL_GetTick>
 800162a:	4602      	mov	r2, r0
 800162c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	2b02      	cmp	r3, #2
 8001634:	d902      	bls.n	800163c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	f000 bcd5 	b.w	8001fe6 <HAL_RCC_OscConfig+0xe02>
 800163c:	2302      	movs	r3, #2
 800163e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001642:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001646:	fa93 f3a3 	rbit	r3, r3
 800164a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800164e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001652:	fab3 f383 	clz	r3, r3
 8001656:	b2db      	uxtb	r3, r3
 8001658:	095b      	lsrs	r3, r3, #5
 800165a:	b2db      	uxtb	r3, r3
 800165c:	f043 0301 	orr.w	r3, r3, #1
 8001660:	b2db      	uxtb	r3, r3
 8001662:	2b01      	cmp	r3, #1
 8001664:	d102      	bne.n	800166c <HAL_RCC_OscConfig+0x488>
 8001666:	4b73      	ldr	r3, [pc, #460]	; (8001834 <HAL_RCC_OscConfig+0x650>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	e013      	b.n	8001694 <HAL_RCC_OscConfig+0x4b0>
 800166c:	2302      	movs	r3, #2
 800166e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001672:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001676:	fa93 f3a3 	rbit	r3, r3
 800167a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800167e:	2302      	movs	r3, #2
 8001680:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001684:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001688:	fa93 f3a3 	rbit	r3, r3
 800168c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001690:	4b68      	ldr	r3, [pc, #416]	; (8001834 <HAL_RCC_OscConfig+0x650>)
 8001692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001694:	2202      	movs	r2, #2
 8001696:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800169a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800169e:	fa92 f2a2 	rbit	r2, r2
 80016a2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80016a6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80016aa:	fab2 f282 	clz	r2, r2
 80016ae:	b2d2      	uxtb	r2, r2
 80016b0:	f042 0220 	orr.w	r2, r2, #32
 80016b4:	b2d2      	uxtb	r2, r2
 80016b6:	f002 021f 	and.w	r2, r2, #31
 80016ba:	2101      	movs	r1, #1
 80016bc:	fa01 f202 	lsl.w	r2, r1, r2
 80016c0:	4013      	ands	r3, r2
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d0af      	beq.n	8001626 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016c6:	4b5b      	ldr	r3, [pc, #364]	; (8001834 <HAL_RCC_OscConfig+0x650>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016ce:	1d3b      	adds	r3, r7, #4
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	695b      	ldr	r3, [r3, #20]
 80016d4:	21f8      	movs	r1, #248	; 0xf8
 80016d6:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016da:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80016de:	fa91 f1a1 	rbit	r1, r1
 80016e2:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80016e6:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80016ea:	fab1 f181 	clz	r1, r1
 80016ee:	b2c9      	uxtb	r1, r1
 80016f0:	408b      	lsls	r3, r1
 80016f2:	4950      	ldr	r1, [pc, #320]	; (8001834 <HAL_RCC_OscConfig+0x650>)
 80016f4:	4313      	orrs	r3, r2
 80016f6:	600b      	str	r3, [r1, #0]
 80016f8:	e06a      	b.n	80017d0 <HAL_RCC_OscConfig+0x5ec>
 80016fa:	2301      	movs	r3, #1
 80016fc:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001700:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001704:	fa93 f3a3 	rbit	r3, r3
 8001708:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800170c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001710:	fab3 f383 	clz	r3, r3
 8001714:	b2db      	uxtb	r3, r3
 8001716:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800171a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	461a      	mov	r2, r3
 8001722:	2300      	movs	r3, #0
 8001724:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001726:	f7ff fab5 	bl	8000c94 <HAL_GetTick>
 800172a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800172e:	e00a      	b.n	8001746 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001730:	f7ff fab0 	bl	8000c94 <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	2b02      	cmp	r3, #2
 800173e:	d902      	bls.n	8001746 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001740:	2303      	movs	r3, #3
 8001742:	f000 bc50 	b.w	8001fe6 <HAL_RCC_OscConfig+0xe02>
 8001746:	2302      	movs	r3, #2
 8001748:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800174c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001750:	fa93 f3a3 	rbit	r3, r3
 8001754:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001758:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800175c:	fab3 f383 	clz	r3, r3
 8001760:	b2db      	uxtb	r3, r3
 8001762:	095b      	lsrs	r3, r3, #5
 8001764:	b2db      	uxtb	r3, r3
 8001766:	f043 0301 	orr.w	r3, r3, #1
 800176a:	b2db      	uxtb	r3, r3
 800176c:	2b01      	cmp	r3, #1
 800176e:	d102      	bne.n	8001776 <HAL_RCC_OscConfig+0x592>
 8001770:	4b30      	ldr	r3, [pc, #192]	; (8001834 <HAL_RCC_OscConfig+0x650>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	e013      	b.n	800179e <HAL_RCC_OscConfig+0x5ba>
 8001776:	2302      	movs	r3, #2
 8001778:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800177c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001780:	fa93 f3a3 	rbit	r3, r3
 8001784:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001788:	2302      	movs	r3, #2
 800178a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800178e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001792:	fa93 f3a3 	rbit	r3, r3
 8001796:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800179a:	4b26      	ldr	r3, [pc, #152]	; (8001834 <HAL_RCC_OscConfig+0x650>)
 800179c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800179e:	2202      	movs	r2, #2
 80017a0:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80017a4:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80017a8:	fa92 f2a2 	rbit	r2, r2
 80017ac:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80017b0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80017b4:	fab2 f282 	clz	r2, r2
 80017b8:	b2d2      	uxtb	r2, r2
 80017ba:	f042 0220 	orr.w	r2, r2, #32
 80017be:	b2d2      	uxtb	r2, r2
 80017c0:	f002 021f 	and.w	r2, r2, #31
 80017c4:	2101      	movs	r1, #1
 80017c6:	fa01 f202 	lsl.w	r2, r1, r2
 80017ca:	4013      	ands	r3, r2
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d1af      	bne.n	8001730 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017d0:	1d3b      	adds	r3, r7, #4
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0308 	and.w	r3, r3, #8
 80017da:	2b00      	cmp	r3, #0
 80017dc:	f000 80da 	beq.w	8001994 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017e0:	1d3b      	adds	r3, r7, #4
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	699b      	ldr	r3, [r3, #24]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d069      	beq.n	80018be <HAL_RCC_OscConfig+0x6da>
 80017ea:	2301      	movs	r3, #1
 80017ec:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017f0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80017f4:	fa93 f3a3 	rbit	r3, r3
 80017f8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80017fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001800:	fab3 f383 	clz	r3, r3
 8001804:	b2db      	uxtb	r3, r3
 8001806:	461a      	mov	r2, r3
 8001808:	4b0b      	ldr	r3, [pc, #44]	; (8001838 <HAL_RCC_OscConfig+0x654>)
 800180a:	4413      	add	r3, r2
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	461a      	mov	r2, r3
 8001810:	2301      	movs	r3, #1
 8001812:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001814:	f7ff fa3e 	bl	8000c94 <HAL_GetTick>
 8001818:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800181c:	e00e      	b.n	800183c <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800181e:	f7ff fa39 	bl	8000c94 <HAL_GetTick>
 8001822:	4602      	mov	r2, r0
 8001824:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	2b02      	cmp	r3, #2
 800182c:	d906      	bls.n	800183c <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e3d9      	b.n	8001fe6 <HAL_RCC_OscConfig+0xe02>
 8001832:	bf00      	nop
 8001834:	40021000 	.word	0x40021000
 8001838:	10908120 	.word	0x10908120
 800183c:	2302      	movs	r3, #2
 800183e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001842:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001846:	fa93 f3a3 	rbit	r3, r3
 800184a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800184e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001852:	2202      	movs	r2, #2
 8001854:	601a      	str	r2, [r3, #0]
 8001856:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	fa93 f2a3 	rbit	r2, r3
 8001860:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001864:	601a      	str	r2, [r3, #0]
 8001866:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800186a:	2202      	movs	r2, #2
 800186c:	601a      	str	r2, [r3, #0]
 800186e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	fa93 f2a3 	rbit	r2, r3
 8001878:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800187c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800187e:	4ba5      	ldr	r3, [pc, #660]	; (8001b14 <HAL_RCC_OscConfig+0x930>)
 8001880:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001882:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001886:	2102      	movs	r1, #2
 8001888:	6019      	str	r1, [r3, #0]
 800188a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	fa93 f1a3 	rbit	r1, r3
 8001894:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001898:	6019      	str	r1, [r3, #0]
  return result;
 800189a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	fab3 f383 	clz	r3, r3
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	f003 031f 	and.w	r3, r3, #31
 80018b0:	2101      	movs	r1, #1
 80018b2:	fa01 f303 	lsl.w	r3, r1, r3
 80018b6:	4013      	ands	r3, r2
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d0b0      	beq.n	800181e <HAL_RCC_OscConfig+0x63a>
 80018bc:	e06a      	b.n	8001994 <HAL_RCC_OscConfig+0x7b0>
 80018be:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80018c2:	2201      	movs	r2, #1
 80018c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	fa93 f2a3 	rbit	r2, r3
 80018d0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80018d4:	601a      	str	r2, [r3, #0]
  return result;
 80018d6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80018da:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018dc:	fab3 f383 	clz	r3, r3
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	461a      	mov	r2, r3
 80018e4:	4b8c      	ldr	r3, [pc, #560]	; (8001b18 <HAL_RCC_OscConfig+0x934>)
 80018e6:	4413      	add	r3, r2
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	461a      	mov	r2, r3
 80018ec:	2300      	movs	r3, #0
 80018ee:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018f0:	f7ff f9d0 	bl	8000c94 <HAL_GetTick>
 80018f4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018f8:	e009      	b.n	800190e <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018fa:	f7ff f9cb 	bl	8000c94 <HAL_GetTick>
 80018fe:	4602      	mov	r2, r0
 8001900:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	2b02      	cmp	r3, #2
 8001908:	d901      	bls.n	800190e <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	e36b      	b.n	8001fe6 <HAL_RCC_OscConfig+0xe02>
 800190e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001912:	2202      	movs	r2, #2
 8001914:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001916:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	fa93 f2a3 	rbit	r2, r3
 8001920:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001924:	601a      	str	r2, [r3, #0]
 8001926:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800192a:	2202      	movs	r2, #2
 800192c:	601a      	str	r2, [r3, #0]
 800192e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	fa93 f2a3 	rbit	r2, r3
 8001938:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800193c:	601a      	str	r2, [r3, #0]
 800193e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001942:	2202      	movs	r2, #2
 8001944:	601a      	str	r2, [r3, #0]
 8001946:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	fa93 f2a3 	rbit	r2, r3
 8001950:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001954:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001956:	4b6f      	ldr	r3, [pc, #444]	; (8001b14 <HAL_RCC_OscConfig+0x930>)
 8001958:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800195a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800195e:	2102      	movs	r1, #2
 8001960:	6019      	str	r1, [r3, #0]
 8001962:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	fa93 f1a3 	rbit	r1, r3
 800196c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001970:	6019      	str	r1, [r3, #0]
  return result;
 8001972:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	fab3 f383 	clz	r3, r3
 800197c:	b2db      	uxtb	r3, r3
 800197e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001982:	b2db      	uxtb	r3, r3
 8001984:	f003 031f 	and.w	r3, r3, #31
 8001988:	2101      	movs	r1, #1
 800198a:	fa01 f303 	lsl.w	r3, r1, r3
 800198e:	4013      	ands	r3, r2
 8001990:	2b00      	cmp	r3, #0
 8001992:	d1b2      	bne.n	80018fa <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001994:	1d3b      	adds	r3, r7, #4
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0304 	and.w	r3, r3, #4
 800199e:	2b00      	cmp	r3, #0
 80019a0:	f000 8158 	beq.w	8001c54 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019a4:	2300      	movs	r3, #0
 80019a6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019aa:	4b5a      	ldr	r3, [pc, #360]	; (8001b14 <HAL_RCC_OscConfig+0x930>)
 80019ac:	69db      	ldr	r3, [r3, #28]
 80019ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d112      	bne.n	80019dc <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019b6:	4b57      	ldr	r3, [pc, #348]	; (8001b14 <HAL_RCC_OscConfig+0x930>)
 80019b8:	69db      	ldr	r3, [r3, #28]
 80019ba:	4a56      	ldr	r2, [pc, #344]	; (8001b14 <HAL_RCC_OscConfig+0x930>)
 80019bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019c0:	61d3      	str	r3, [r2, #28]
 80019c2:	4b54      	ldr	r3, [pc, #336]	; (8001b14 <HAL_RCC_OscConfig+0x930>)
 80019c4:	69db      	ldr	r3, [r3, #28]
 80019c6:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80019ca:	f107 0308 	add.w	r3, r7, #8
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	f107 0308 	add.w	r3, r7, #8
 80019d4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80019d6:	2301      	movs	r3, #1
 80019d8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019dc:	4b4f      	ldr	r3, [pc, #316]	; (8001b1c <HAL_RCC_OscConfig+0x938>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d11a      	bne.n	8001a1e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019e8:	4b4c      	ldr	r3, [pc, #304]	; (8001b1c <HAL_RCC_OscConfig+0x938>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a4b      	ldr	r2, [pc, #300]	; (8001b1c <HAL_RCC_OscConfig+0x938>)
 80019ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019f2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019f4:	f7ff f94e 	bl	8000c94 <HAL_GetTick>
 80019f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019fc:	e009      	b.n	8001a12 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019fe:	f7ff f949 	bl	8000c94 <HAL_GetTick>
 8001a02:	4602      	mov	r2, r0
 8001a04:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	2b64      	cmp	r3, #100	; 0x64
 8001a0c:	d901      	bls.n	8001a12 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e2e9      	b.n	8001fe6 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a12:	4b42      	ldr	r3, [pc, #264]	; (8001b1c <HAL_RCC_OscConfig+0x938>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d0ef      	beq.n	80019fe <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a1e:	1d3b      	adds	r3, r7, #4
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d106      	bne.n	8001a36 <HAL_RCC_OscConfig+0x852>
 8001a28:	4b3a      	ldr	r3, [pc, #232]	; (8001b14 <HAL_RCC_OscConfig+0x930>)
 8001a2a:	6a1b      	ldr	r3, [r3, #32]
 8001a2c:	4a39      	ldr	r2, [pc, #228]	; (8001b14 <HAL_RCC_OscConfig+0x930>)
 8001a2e:	f043 0301 	orr.w	r3, r3, #1
 8001a32:	6213      	str	r3, [r2, #32]
 8001a34:	e02f      	b.n	8001a96 <HAL_RCC_OscConfig+0x8b2>
 8001a36:	1d3b      	adds	r3, r7, #4
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d10c      	bne.n	8001a5a <HAL_RCC_OscConfig+0x876>
 8001a40:	4b34      	ldr	r3, [pc, #208]	; (8001b14 <HAL_RCC_OscConfig+0x930>)
 8001a42:	6a1b      	ldr	r3, [r3, #32]
 8001a44:	4a33      	ldr	r2, [pc, #204]	; (8001b14 <HAL_RCC_OscConfig+0x930>)
 8001a46:	f023 0301 	bic.w	r3, r3, #1
 8001a4a:	6213      	str	r3, [r2, #32]
 8001a4c:	4b31      	ldr	r3, [pc, #196]	; (8001b14 <HAL_RCC_OscConfig+0x930>)
 8001a4e:	6a1b      	ldr	r3, [r3, #32]
 8001a50:	4a30      	ldr	r2, [pc, #192]	; (8001b14 <HAL_RCC_OscConfig+0x930>)
 8001a52:	f023 0304 	bic.w	r3, r3, #4
 8001a56:	6213      	str	r3, [r2, #32]
 8001a58:	e01d      	b.n	8001a96 <HAL_RCC_OscConfig+0x8b2>
 8001a5a:	1d3b      	adds	r3, r7, #4
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	2b05      	cmp	r3, #5
 8001a62:	d10c      	bne.n	8001a7e <HAL_RCC_OscConfig+0x89a>
 8001a64:	4b2b      	ldr	r3, [pc, #172]	; (8001b14 <HAL_RCC_OscConfig+0x930>)
 8001a66:	6a1b      	ldr	r3, [r3, #32]
 8001a68:	4a2a      	ldr	r2, [pc, #168]	; (8001b14 <HAL_RCC_OscConfig+0x930>)
 8001a6a:	f043 0304 	orr.w	r3, r3, #4
 8001a6e:	6213      	str	r3, [r2, #32]
 8001a70:	4b28      	ldr	r3, [pc, #160]	; (8001b14 <HAL_RCC_OscConfig+0x930>)
 8001a72:	6a1b      	ldr	r3, [r3, #32]
 8001a74:	4a27      	ldr	r2, [pc, #156]	; (8001b14 <HAL_RCC_OscConfig+0x930>)
 8001a76:	f043 0301 	orr.w	r3, r3, #1
 8001a7a:	6213      	str	r3, [r2, #32]
 8001a7c:	e00b      	b.n	8001a96 <HAL_RCC_OscConfig+0x8b2>
 8001a7e:	4b25      	ldr	r3, [pc, #148]	; (8001b14 <HAL_RCC_OscConfig+0x930>)
 8001a80:	6a1b      	ldr	r3, [r3, #32]
 8001a82:	4a24      	ldr	r2, [pc, #144]	; (8001b14 <HAL_RCC_OscConfig+0x930>)
 8001a84:	f023 0301 	bic.w	r3, r3, #1
 8001a88:	6213      	str	r3, [r2, #32]
 8001a8a:	4b22      	ldr	r3, [pc, #136]	; (8001b14 <HAL_RCC_OscConfig+0x930>)
 8001a8c:	6a1b      	ldr	r3, [r3, #32]
 8001a8e:	4a21      	ldr	r2, [pc, #132]	; (8001b14 <HAL_RCC_OscConfig+0x930>)
 8001a90:	f023 0304 	bic.w	r3, r3, #4
 8001a94:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a96:	1d3b      	adds	r3, r7, #4
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d06b      	beq.n	8001b78 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aa0:	f7ff f8f8 	bl	8000c94 <HAL_GetTick>
 8001aa4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aa8:	e00b      	b.n	8001ac2 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001aaa:	f7ff f8f3 	bl	8000c94 <HAL_GetTick>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e291      	b.n	8001fe6 <HAL_RCC_OscConfig+0xe02>
 8001ac2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001ac6:	2202      	movs	r2, #2
 8001ac8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aca:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	fa93 f2a3 	rbit	r2, r3
 8001ad4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001ad8:	601a      	str	r2, [r3, #0]
 8001ada:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001ade:	2202      	movs	r2, #2
 8001ae0:	601a      	str	r2, [r3, #0]
 8001ae2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	fa93 f2a3 	rbit	r2, r3
 8001aec:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001af0:	601a      	str	r2, [r3, #0]
  return result;
 8001af2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001af6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001af8:	fab3 f383 	clz	r3, r3
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	095b      	lsrs	r3, r3, #5
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	f043 0302 	orr.w	r3, r3, #2
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d109      	bne.n	8001b20 <HAL_RCC_OscConfig+0x93c>
 8001b0c:	4b01      	ldr	r3, [pc, #4]	; (8001b14 <HAL_RCC_OscConfig+0x930>)
 8001b0e:	6a1b      	ldr	r3, [r3, #32]
 8001b10:	e014      	b.n	8001b3c <HAL_RCC_OscConfig+0x958>
 8001b12:	bf00      	nop
 8001b14:	40021000 	.word	0x40021000
 8001b18:	10908120 	.word	0x10908120
 8001b1c:	40007000 	.word	0x40007000
 8001b20:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001b24:	2202      	movs	r2, #2
 8001b26:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b28:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	fa93 f2a3 	rbit	r2, r3
 8001b32:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	4bbb      	ldr	r3, [pc, #748]	; (8001e28 <HAL_RCC_OscConfig+0xc44>)
 8001b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001b40:	2102      	movs	r1, #2
 8001b42:	6011      	str	r1, [r2, #0]
 8001b44:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001b48:	6812      	ldr	r2, [r2, #0]
 8001b4a:	fa92 f1a2 	rbit	r1, r2
 8001b4e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001b52:	6011      	str	r1, [r2, #0]
  return result;
 8001b54:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001b58:	6812      	ldr	r2, [r2, #0]
 8001b5a:	fab2 f282 	clz	r2, r2
 8001b5e:	b2d2      	uxtb	r2, r2
 8001b60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b64:	b2d2      	uxtb	r2, r2
 8001b66:	f002 021f 	and.w	r2, r2, #31
 8001b6a:	2101      	movs	r1, #1
 8001b6c:	fa01 f202 	lsl.w	r2, r1, r2
 8001b70:	4013      	ands	r3, r2
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d099      	beq.n	8001aaa <HAL_RCC_OscConfig+0x8c6>
 8001b76:	e063      	b.n	8001c40 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b78:	f7ff f88c 	bl	8000c94 <HAL_GetTick>
 8001b7c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b80:	e00b      	b.n	8001b9a <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b82:	f7ff f887 	bl	8000c94 <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e225      	b.n	8001fe6 <HAL_RCC_OscConfig+0xe02>
 8001b9a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001b9e:	2202      	movs	r2, #2
 8001ba0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	fa93 f2a3 	rbit	r2, r3
 8001bac:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001bb0:	601a      	str	r2, [r3, #0]
 8001bb2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001bb6:	2202      	movs	r2, #2
 8001bb8:	601a      	str	r2, [r3, #0]
 8001bba:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	fa93 f2a3 	rbit	r2, r3
 8001bc4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001bc8:	601a      	str	r2, [r3, #0]
  return result;
 8001bca:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001bce:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bd0:	fab3 f383 	clz	r3, r3
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	095b      	lsrs	r3, r3, #5
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	f043 0302 	orr.w	r3, r3, #2
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d102      	bne.n	8001bea <HAL_RCC_OscConfig+0xa06>
 8001be4:	4b90      	ldr	r3, [pc, #576]	; (8001e28 <HAL_RCC_OscConfig+0xc44>)
 8001be6:	6a1b      	ldr	r3, [r3, #32]
 8001be8:	e00d      	b.n	8001c06 <HAL_RCC_OscConfig+0xa22>
 8001bea:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001bee:	2202      	movs	r2, #2
 8001bf0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	fa93 f2a3 	rbit	r2, r3
 8001bfc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001c00:	601a      	str	r2, [r3, #0]
 8001c02:	4b89      	ldr	r3, [pc, #548]	; (8001e28 <HAL_RCC_OscConfig+0xc44>)
 8001c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c06:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001c0a:	2102      	movs	r1, #2
 8001c0c:	6011      	str	r1, [r2, #0]
 8001c0e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001c12:	6812      	ldr	r2, [r2, #0]
 8001c14:	fa92 f1a2 	rbit	r1, r2
 8001c18:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001c1c:	6011      	str	r1, [r2, #0]
  return result;
 8001c1e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001c22:	6812      	ldr	r2, [r2, #0]
 8001c24:	fab2 f282 	clz	r2, r2
 8001c28:	b2d2      	uxtb	r2, r2
 8001c2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c2e:	b2d2      	uxtb	r2, r2
 8001c30:	f002 021f 	and.w	r2, r2, #31
 8001c34:	2101      	movs	r1, #1
 8001c36:	fa01 f202 	lsl.w	r2, r1, r2
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d1a0      	bne.n	8001b82 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001c40:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d105      	bne.n	8001c54 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c48:	4b77      	ldr	r3, [pc, #476]	; (8001e28 <HAL_RCC_OscConfig+0xc44>)
 8001c4a:	69db      	ldr	r3, [r3, #28]
 8001c4c:	4a76      	ldr	r2, [pc, #472]	; (8001e28 <HAL_RCC_OscConfig+0xc44>)
 8001c4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c52:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c54:	1d3b      	adds	r3, r7, #4
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	69db      	ldr	r3, [r3, #28]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	f000 81c2 	beq.w	8001fe4 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c60:	4b71      	ldr	r3, [pc, #452]	; (8001e28 <HAL_RCC_OscConfig+0xc44>)
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f003 030c 	and.w	r3, r3, #12
 8001c68:	2b08      	cmp	r3, #8
 8001c6a:	f000 819c 	beq.w	8001fa6 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c6e:	1d3b      	adds	r3, r7, #4
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	69db      	ldr	r3, [r3, #28]
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	f040 8114 	bne.w	8001ea2 <HAL_RCC_OscConfig+0xcbe>
 8001c7a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001c7e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c84:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	fa93 f2a3 	rbit	r2, r3
 8001c8e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001c92:	601a      	str	r2, [r3, #0]
  return result;
 8001c94:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001c98:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c9a:	fab3 f383 	clz	r3, r3
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ca4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	461a      	mov	r2, r3
 8001cac:	2300      	movs	r3, #0
 8001cae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb0:	f7fe fff0 	bl	8000c94 <HAL_GetTick>
 8001cb4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cb8:	e009      	b.n	8001cce <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cba:	f7fe ffeb 	bl	8000c94 <HAL_GetTick>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d901      	bls.n	8001cce <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e18b      	b.n	8001fe6 <HAL_RCC_OscConfig+0xe02>
 8001cce:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001cd2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cd6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	fa93 f2a3 	rbit	r2, r3
 8001ce2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001ce6:	601a      	str	r2, [r3, #0]
  return result;
 8001ce8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001cec:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cee:	fab3 f383 	clz	r3, r3
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	095b      	lsrs	r3, r3, #5
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	f043 0301 	orr.w	r3, r3, #1
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d102      	bne.n	8001d08 <HAL_RCC_OscConfig+0xb24>
 8001d02:	4b49      	ldr	r3, [pc, #292]	; (8001e28 <HAL_RCC_OscConfig+0xc44>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	e01b      	b.n	8001d40 <HAL_RCC_OscConfig+0xb5c>
 8001d08:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001d0c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d12:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	fa93 f2a3 	rbit	r2, r3
 8001d1c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001d20:	601a      	str	r2, [r3, #0]
 8001d22:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001d26:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d2a:	601a      	str	r2, [r3, #0]
 8001d2c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	fa93 f2a3 	rbit	r2, r3
 8001d36:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001d3a:	601a      	str	r2, [r3, #0]
 8001d3c:	4b3a      	ldr	r3, [pc, #232]	; (8001e28 <HAL_RCC_OscConfig+0xc44>)
 8001d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d40:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001d44:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001d48:	6011      	str	r1, [r2, #0]
 8001d4a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001d4e:	6812      	ldr	r2, [r2, #0]
 8001d50:	fa92 f1a2 	rbit	r1, r2
 8001d54:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001d58:	6011      	str	r1, [r2, #0]
  return result;
 8001d5a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001d5e:	6812      	ldr	r2, [r2, #0]
 8001d60:	fab2 f282 	clz	r2, r2
 8001d64:	b2d2      	uxtb	r2, r2
 8001d66:	f042 0220 	orr.w	r2, r2, #32
 8001d6a:	b2d2      	uxtb	r2, r2
 8001d6c:	f002 021f 	and.w	r2, r2, #31
 8001d70:	2101      	movs	r1, #1
 8001d72:	fa01 f202 	lsl.w	r2, r1, r2
 8001d76:	4013      	ands	r3, r2
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d19e      	bne.n	8001cba <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d7c:	4b2a      	ldr	r3, [pc, #168]	; (8001e28 <HAL_RCC_OscConfig+0xc44>)
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d84:	1d3b      	adds	r3, r7, #4
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001d8a:	1d3b      	adds	r3, r7, #4
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	6a1b      	ldr	r3, [r3, #32]
 8001d90:	430b      	orrs	r3, r1
 8001d92:	4925      	ldr	r1, [pc, #148]	; (8001e28 <HAL_RCC_OscConfig+0xc44>)
 8001d94:	4313      	orrs	r3, r2
 8001d96:	604b      	str	r3, [r1, #4]
 8001d98:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001d9c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001da0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	fa93 f2a3 	rbit	r2, r3
 8001dac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001db0:	601a      	str	r2, [r3, #0]
  return result;
 8001db2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001db6:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001db8:	fab3 f383 	clz	r3, r3
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001dc2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	461a      	mov	r2, r3
 8001dca:	2301      	movs	r3, #1
 8001dcc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dce:	f7fe ff61 	bl	8000c94 <HAL_GetTick>
 8001dd2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dd6:	e009      	b.n	8001dec <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dd8:	f7fe ff5c 	bl	8000c94 <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d901      	bls.n	8001dec <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001de8:	2303      	movs	r3, #3
 8001dea:	e0fc      	b.n	8001fe6 <HAL_RCC_OscConfig+0xe02>
 8001dec:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001df0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001df4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	fa93 f2a3 	rbit	r2, r3
 8001e00:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001e04:	601a      	str	r2, [r3, #0]
  return result;
 8001e06:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001e0a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e0c:	fab3 f383 	clz	r3, r3
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	095b      	lsrs	r3, r3, #5
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	f043 0301 	orr.w	r3, r3, #1
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d105      	bne.n	8001e2c <HAL_RCC_OscConfig+0xc48>
 8001e20:	4b01      	ldr	r3, [pc, #4]	; (8001e28 <HAL_RCC_OscConfig+0xc44>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	e01e      	b.n	8001e64 <HAL_RCC_OscConfig+0xc80>
 8001e26:	bf00      	nop
 8001e28:	40021000 	.word	0x40021000
 8001e2c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e30:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e36:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	fa93 f2a3 	rbit	r2, r3
 8001e40:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001e44:	601a      	str	r2, [r3, #0]
 8001e46:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e4a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e4e:	601a      	str	r2, [r3, #0]
 8001e50:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	fa93 f2a3 	rbit	r2, r3
 8001e5a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001e5e:	601a      	str	r2, [r3, #0]
 8001e60:	4b63      	ldr	r3, [pc, #396]	; (8001ff0 <HAL_RCC_OscConfig+0xe0c>)
 8001e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e64:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001e68:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001e6c:	6011      	str	r1, [r2, #0]
 8001e6e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001e72:	6812      	ldr	r2, [r2, #0]
 8001e74:	fa92 f1a2 	rbit	r1, r2
 8001e78:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001e7c:	6011      	str	r1, [r2, #0]
  return result;
 8001e7e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001e82:	6812      	ldr	r2, [r2, #0]
 8001e84:	fab2 f282 	clz	r2, r2
 8001e88:	b2d2      	uxtb	r2, r2
 8001e8a:	f042 0220 	orr.w	r2, r2, #32
 8001e8e:	b2d2      	uxtb	r2, r2
 8001e90:	f002 021f 	and.w	r2, r2, #31
 8001e94:	2101      	movs	r1, #1
 8001e96:	fa01 f202 	lsl.w	r2, r1, r2
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d09b      	beq.n	8001dd8 <HAL_RCC_OscConfig+0xbf4>
 8001ea0:	e0a0      	b.n	8001fe4 <HAL_RCC_OscConfig+0xe00>
 8001ea2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ea6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001eaa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	fa93 f2a3 	rbit	r2, r3
 8001eb6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001eba:	601a      	str	r2, [r3, #0]
  return result;
 8001ebc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ec0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ec2:	fab3 f383 	clz	r3, r3
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ecc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed8:	f7fe fedc 	bl	8000c94 <HAL_GetTick>
 8001edc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ee0:	e009      	b.n	8001ef6 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ee2:	f7fe fed7 	bl	8000c94 <HAL_GetTick>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e077      	b.n	8001fe6 <HAL_RCC_OscConfig+0xe02>
 8001ef6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001efa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001efe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f00:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	fa93 f2a3 	rbit	r2, r3
 8001f0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f0e:	601a      	str	r2, [r3, #0]
  return result;
 8001f10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f14:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f16:	fab3 f383 	clz	r3, r3
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	095b      	lsrs	r3, r3, #5
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	f043 0301 	orr.w	r3, r3, #1
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d102      	bne.n	8001f30 <HAL_RCC_OscConfig+0xd4c>
 8001f2a:	4b31      	ldr	r3, [pc, #196]	; (8001ff0 <HAL_RCC_OscConfig+0xe0c>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	e01b      	b.n	8001f68 <HAL_RCC_OscConfig+0xd84>
 8001f30:	f107 0320 	add.w	r3, r7, #32
 8001f34:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f3a:	f107 0320 	add.w	r3, r7, #32
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	fa93 f2a3 	rbit	r2, r3
 8001f44:	f107 031c 	add.w	r3, r7, #28
 8001f48:	601a      	str	r2, [r3, #0]
 8001f4a:	f107 0318 	add.w	r3, r7, #24
 8001f4e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	f107 0318 	add.w	r3, r7, #24
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	fa93 f2a3 	rbit	r2, r3
 8001f5e:	f107 0314 	add.w	r3, r7, #20
 8001f62:	601a      	str	r2, [r3, #0]
 8001f64:	4b22      	ldr	r3, [pc, #136]	; (8001ff0 <HAL_RCC_OscConfig+0xe0c>)
 8001f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f68:	f107 0210 	add.w	r2, r7, #16
 8001f6c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001f70:	6011      	str	r1, [r2, #0]
 8001f72:	f107 0210 	add.w	r2, r7, #16
 8001f76:	6812      	ldr	r2, [r2, #0]
 8001f78:	fa92 f1a2 	rbit	r1, r2
 8001f7c:	f107 020c 	add.w	r2, r7, #12
 8001f80:	6011      	str	r1, [r2, #0]
  return result;
 8001f82:	f107 020c 	add.w	r2, r7, #12
 8001f86:	6812      	ldr	r2, [r2, #0]
 8001f88:	fab2 f282 	clz	r2, r2
 8001f8c:	b2d2      	uxtb	r2, r2
 8001f8e:	f042 0220 	orr.w	r2, r2, #32
 8001f92:	b2d2      	uxtb	r2, r2
 8001f94:	f002 021f 	and.w	r2, r2, #31
 8001f98:	2101      	movs	r1, #1
 8001f9a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d19e      	bne.n	8001ee2 <HAL_RCC_OscConfig+0xcfe>
 8001fa4:	e01e      	b.n	8001fe4 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fa6:	1d3b      	adds	r3, r7, #4
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	69db      	ldr	r3, [r3, #28]
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d101      	bne.n	8001fb4 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e018      	b.n	8001fe6 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001fb4:	4b0e      	ldr	r3, [pc, #56]	; (8001ff0 <HAL_RCC_OscConfig+0xe0c>)
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001fbc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001fc0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001fc4:	1d3b      	adds	r3, r7, #4
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	6a1b      	ldr	r3, [r3, #32]
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d108      	bne.n	8001fe0 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001fce:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001fd2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001fd6:	1d3b      	adds	r3, r7, #4
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d001      	beq.n	8001fe4 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e000      	b.n	8001fe6 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8001fe4:	2300      	movs	r3, #0
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	40021000 	.word	0x40021000

08001ff4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b09e      	sub	sp, #120	; 0x78
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001ffe:	2300      	movs	r3, #0
 8002000:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d101      	bne.n	800200c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e162      	b.n	80022d2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800200c:	4b90      	ldr	r3, [pc, #576]	; (8002250 <HAL_RCC_ClockConfig+0x25c>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0307 	and.w	r3, r3, #7
 8002014:	683a      	ldr	r2, [r7, #0]
 8002016:	429a      	cmp	r2, r3
 8002018:	d910      	bls.n	800203c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800201a:	4b8d      	ldr	r3, [pc, #564]	; (8002250 <HAL_RCC_ClockConfig+0x25c>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f023 0207 	bic.w	r2, r3, #7
 8002022:	498b      	ldr	r1, [pc, #556]	; (8002250 <HAL_RCC_ClockConfig+0x25c>)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	4313      	orrs	r3, r2
 8002028:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800202a:	4b89      	ldr	r3, [pc, #548]	; (8002250 <HAL_RCC_ClockConfig+0x25c>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0307 	and.w	r3, r3, #7
 8002032:	683a      	ldr	r2, [r7, #0]
 8002034:	429a      	cmp	r2, r3
 8002036:	d001      	beq.n	800203c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e14a      	b.n	80022d2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0302 	and.w	r3, r3, #2
 8002044:	2b00      	cmp	r3, #0
 8002046:	d008      	beq.n	800205a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002048:	4b82      	ldr	r3, [pc, #520]	; (8002254 <HAL_RCC_ClockConfig+0x260>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	497f      	ldr	r1, [pc, #508]	; (8002254 <HAL_RCC_ClockConfig+0x260>)
 8002056:	4313      	orrs	r3, r2
 8002058:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0301 	and.w	r3, r3, #1
 8002062:	2b00      	cmp	r3, #0
 8002064:	f000 80dc 	beq.w	8002220 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	2b01      	cmp	r3, #1
 800206e:	d13c      	bne.n	80020ea <HAL_RCC_ClockConfig+0xf6>
 8002070:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002074:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002076:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002078:	fa93 f3a3 	rbit	r3, r3
 800207c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800207e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002080:	fab3 f383 	clz	r3, r3
 8002084:	b2db      	uxtb	r3, r3
 8002086:	095b      	lsrs	r3, r3, #5
 8002088:	b2db      	uxtb	r3, r3
 800208a:	f043 0301 	orr.w	r3, r3, #1
 800208e:	b2db      	uxtb	r3, r3
 8002090:	2b01      	cmp	r3, #1
 8002092:	d102      	bne.n	800209a <HAL_RCC_ClockConfig+0xa6>
 8002094:	4b6f      	ldr	r3, [pc, #444]	; (8002254 <HAL_RCC_ClockConfig+0x260>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	e00f      	b.n	80020ba <HAL_RCC_ClockConfig+0xc6>
 800209a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800209e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80020a2:	fa93 f3a3 	rbit	r3, r3
 80020a6:	667b      	str	r3, [r7, #100]	; 0x64
 80020a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020ac:	663b      	str	r3, [r7, #96]	; 0x60
 80020ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80020b0:	fa93 f3a3 	rbit	r3, r3
 80020b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80020b6:	4b67      	ldr	r3, [pc, #412]	; (8002254 <HAL_RCC_ClockConfig+0x260>)
 80020b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80020be:	65ba      	str	r2, [r7, #88]	; 0x58
 80020c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80020c2:	fa92 f2a2 	rbit	r2, r2
 80020c6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80020c8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80020ca:	fab2 f282 	clz	r2, r2
 80020ce:	b2d2      	uxtb	r2, r2
 80020d0:	f042 0220 	orr.w	r2, r2, #32
 80020d4:	b2d2      	uxtb	r2, r2
 80020d6:	f002 021f 	and.w	r2, r2, #31
 80020da:	2101      	movs	r1, #1
 80020dc:	fa01 f202 	lsl.w	r2, r1, r2
 80020e0:	4013      	ands	r3, r2
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d17b      	bne.n	80021de <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e0f3      	b.n	80022d2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d13c      	bne.n	800216c <HAL_RCC_ClockConfig+0x178>
 80020f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020f6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020fa:	fa93 f3a3 	rbit	r3, r3
 80020fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002100:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002102:	fab3 f383 	clz	r3, r3
 8002106:	b2db      	uxtb	r3, r3
 8002108:	095b      	lsrs	r3, r3, #5
 800210a:	b2db      	uxtb	r3, r3
 800210c:	f043 0301 	orr.w	r3, r3, #1
 8002110:	b2db      	uxtb	r3, r3
 8002112:	2b01      	cmp	r3, #1
 8002114:	d102      	bne.n	800211c <HAL_RCC_ClockConfig+0x128>
 8002116:	4b4f      	ldr	r3, [pc, #316]	; (8002254 <HAL_RCC_ClockConfig+0x260>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	e00f      	b.n	800213c <HAL_RCC_ClockConfig+0x148>
 800211c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002120:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002122:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002124:	fa93 f3a3 	rbit	r3, r3
 8002128:	647b      	str	r3, [r7, #68]	; 0x44
 800212a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800212e:	643b      	str	r3, [r7, #64]	; 0x40
 8002130:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002132:	fa93 f3a3 	rbit	r3, r3
 8002136:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002138:	4b46      	ldr	r3, [pc, #280]	; (8002254 <HAL_RCC_ClockConfig+0x260>)
 800213a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002140:	63ba      	str	r2, [r7, #56]	; 0x38
 8002142:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002144:	fa92 f2a2 	rbit	r2, r2
 8002148:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800214a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800214c:	fab2 f282 	clz	r2, r2
 8002150:	b2d2      	uxtb	r2, r2
 8002152:	f042 0220 	orr.w	r2, r2, #32
 8002156:	b2d2      	uxtb	r2, r2
 8002158:	f002 021f 	and.w	r2, r2, #31
 800215c:	2101      	movs	r1, #1
 800215e:	fa01 f202 	lsl.w	r2, r1, r2
 8002162:	4013      	ands	r3, r2
 8002164:	2b00      	cmp	r3, #0
 8002166:	d13a      	bne.n	80021de <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e0b2      	b.n	80022d2 <HAL_RCC_ClockConfig+0x2de>
 800216c:	2302      	movs	r3, #2
 800216e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002172:	fa93 f3a3 	rbit	r3, r3
 8002176:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800217a:	fab3 f383 	clz	r3, r3
 800217e:	b2db      	uxtb	r3, r3
 8002180:	095b      	lsrs	r3, r3, #5
 8002182:	b2db      	uxtb	r3, r3
 8002184:	f043 0301 	orr.w	r3, r3, #1
 8002188:	b2db      	uxtb	r3, r3
 800218a:	2b01      	cmp	r3, #1
 800218c:	d102      	bne.n	8002194 <HAL_RCC_ClockConfig+0x1a0>
 800218e:	4b31      	ldr	r3, [pc, #196]	; (8002254 <HAL_RCC_ClockConfig+0x260>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	e00d      	b.n	80021b0 <HAL_RCC_ClockConfig+0x1bc>
 8002194:	2302      	movs	r3, #2
 8002196:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800219a:	fa93 f3a3 	rbit	r3, r3
 800219e:	627b      	str	r3, [r7, #36]	; 0x24
 80021a0:	2302      	movs	r3, #2
 80021a2:	623b      	str	r3, [r7, #32]
 80021a4:	6a3b      	ldr	r3, [r7, #32]
 80021a6:	fa93 f3a3 	rbit	r3, r3
 80021aa:	61fb      	str	r3, [r7, #28]
 80021ac:	4b29      	ldr	r3, [pc, #164]	; (8002254 <HAL_RCC_ClockConfig+0x260>)
 80021ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b0:	2202      	movs	r2, #2
 80021b2:	61ba      	str	r2, [r7, #24]
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	fa92 f2a2 	rbit	r2, r2
 80021ba:	617a      	str	r2, [r7, #20]
  return result;
 80021bc:	697a      	ldr	r2, [r7, #20]
 80021be:	fab2 f282 	clz	r2, r2
 80021c2:	b2d2      	uxtb	r2, r2
 80021c4:	f042 0220 	orr.w	r2, r2, #32
 80021c8:	b2d2      	uxtb	r2, r2
 80021ca:	f002 021f 	and.w	r2, r2, #31
 80021ce:	2101      	movs	r1, #1
 80021d0:	fa01 f202 	lsl.w	r2, r1, r2
 80021d4:	4013      	ands	r3, r2
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d101      	bne.n	80021de <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e079      	b.n	80022d2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021de:	4b1d      	ldr	r3, [pc, #116]	; (8002254 <HAL_RCC_ClockConfig+0x260>)
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f023 0203 	bic.w	r2, r3, #3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	491a      	ldr	r1, [pc, #104]	; (8002254 <HAL_RCC_ClockConfig+0x260>)
 80021ec:	4313      	orrs	r3, r2
 80021ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021f0:	f7fe fd50 	bl	8000c94 <HAL_GetTick>
 80021f4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021f6:	e00a      	b.n	800220e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021f8:	f7fe fd4c 	bl	8000c94 <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	f241 3288 	movw	r2, #5000	; 0x1388
 8002206:	4293      	cmp	r3, r2
 8002208:	d901      	bls.n	800220e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e061      	b.n	80022d2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800220e:	4b11      	ldr	r3, [pc, #68]	; (8002254 <HAL_RCC_ClockConfig+0x260>)
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f003 020c 	and.w	r2, r3, #12
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	429a      	cmp	r2, r3
 800221e:	d1eb      	bne.n	80021f8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002220:	4b0b      	ldr	r3, [pc, #44]	; (8002250 <HAL_RCC_ClockConfig+0x25c>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0307 	and.w	r3, r3, #7
 8002228:	683a      	ldr	r2, [r7, #0]
 800222a:	429a      	cmp	r2, r3
 800222c:	d214      	bcs.n	8002258 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800222e:	4b08      	ldr	r3, [pc, #32]	; (8002250 <HAL_RCC_ClockConfig+0x25c>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f023 0207 	bic.w	r2, r3, #7
 8002236:	4906      	ldr	r1, [pc, #24]	; (8002250 <HAL_RCC_ClockConfig+0x25c>)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	4313      	orrs	r3, r2
 800223c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800223e:	4b04      	ldr	r3, [pc, #16]	; (8002250 <HAL_RCC_ClockConfig+0x25c>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0307 	and.w	r3, r3, #7
 8002246:	683a      	ldr	r2, [r7, #0]
 8002248:	429a      	cmp	r2, r3
 800224a:	d005      	beq.n	8002258 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e040      	b.n	80022d2 <HAL_RCC_ClockConfig+0x2de>
 8002250:	40022000 	.word	0x40022000
 8002254:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0304 	and.w	r3, r3, #4
 8002260:	2b00      	cmp	r3, #0
 8002262:	d008      	beq.n	8002276 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002264:	4b1d      	ldr	r3, [pc, #116]	; (80022dc <HAL_RCC_ClockConfig+0x2e8>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	491a      	ldr	r1, [pc, #104]	; (80022dc <HAL_RCC_ClockConfig+0x2e8>)
 8002272:	4313      	orrs	r3, r2
 8002274:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0308 	and.w	r3, r3, #8
 800227e:	2b00      	cmp	r3, #0
 8002280:	d009      	beq.n	8002296 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002282:	4b16      	ldr	r3, [pc, #88]	; (80022dc <HAL_RCC_ClockConfig+0x2e8>)
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	00db      	lsls	r3, r3, #3
 8002290:	4912      	ldr	r1, [pc, #72]	; (80022dc <HAL_RCC_ClockConfig+0x2e8>)
 8002292:	4313      	orrs	r3, r2
 8002294:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002296:	f000 f829 	bl	80022ec <HAL_RCC_GetSysClockFreq>
 800229a:	4601      	mov	r1, r0
 800229c:	4b0f      	ldr	r3, [pc, #60]	; (80022dc <HAL_RCC_ClockConfig+0x2e8>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022a4:	22f0      	movs	r2, #240	; 0xf0
 80022a6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a8:	693a      	ldr	r2, [r7, #16]
 80022aa:	fa92 f2a2 	rbit	r2, r2
 80022ae:	60fa      	str	r2, [r7, #12]
  return result;
 80022b0:	68fa      	ldr	r2, [r7, #12]
 80022b2:	fab2 f282 	clz	r2, r2
 80022b6:	b2d2      	uxtb	r2, r2
 80022b8:	40d3      	lsrs	r3, r2
 80022ba:	4a09      	ldr	r2, [pc, #36]	; (80022e0 <HAL_RCC_ClockConfig+0x2ec>)
 80022bc:	5cd3      	ldrb	r3, [r2, r3]
 80022be:	fa21 f303 	lsr.w	r3, r1, r3
 80022c2:	4a08      	ldr	r2, [pc, #32]	; (80022e4 <HAL_RCC_ClockConfig+0x2f0>)
 80022c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80022c6:	4b08      	ldr	r3, [pc, #32]	; (80022e8 <HAL_RCC_ClockConfig+0x2f4>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7fe fc9e 	bl	8000c0c <HAL_InitTick>
  
  return HAL_OK;
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3778      	adds	r7, #120	; 0x78
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	40021000 	.word	0x40021000
 80022e0:	0800327c 	.word	0x0800327c
 80022e4:	20000000 	.word	0x20000000
 80022e8:	20000004 	.word	0x20000004

080022ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b08b      	sub	sp, #44	; 0x2c
 80022f0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022f2:	2300      	movs	r3, #0
 80022f4:	61fb      	str	r3, [r7, #28]
 80022f6:	2300      	movs	r3, #0
 80022f8:	61bb      	str	r3, [r7, #24]
 80022fa:	2300      	movs	r3, #0
 80022fc:	627b      	str	r3, [r7, #36]	; 0x24
 80022fe:	2300      	movs	r3, #0
 8002300:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002302:	2300      	movs	r3, #0
 8002304:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002306:	4b29      	ldr	r3, [pc, #164]	; (80023ac <HAL_RCC_GetSysClockFreq+0xc0>)
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	f003 030c 	and.w	r3, r3, #12
 8002312:	2b04      	cmp	r3, #4
 8002314:	d002      	beq.n	800231c <HAL_RCC_GetSysClockFreq+0x30>
 8002316:	2b08      	cmp	r3, #8
 8002318:	d003      	beq.n	8002322 <HAL_RCC_GetSysClockFreq+0x36>
 800231a:	e03c      	b.n	8002396 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800231c:	4b24      	ldr	r3, [pc, #144]	; (80023b0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800231e:	623b      	str	r3, [r7, #32]
      break;
 8002320:	e03c      	b.n	800239c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002328:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800232c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232e:	68ba      	ldr	r2, [r7, #8]
 8002330:	fa92 f2a2 	rbit	r2, r2
 8002334:	607a      	str	r2, [r7, #4]
  return result;
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	fab2 f282 	clz	r2, r2
 800233c:	b2d2      	uxtb	r2, r2
 800233e:	40d3      	lsrs	r3, r2
 8002340:	4a1c      	ldr	r2, [pc, #112]	; (80023b4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002342:	5cd3      	ldrb	r3, [r2, r3]
 8002344:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002346:	4b19      	ldr	r3, [pc, #100]	; (80023ac <HAL_RCC_GetSysClockFreq+0xc0>)
 8002348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800234a:	f003 030f 	and.w	r3, r3, #15
 800234e:	220f      	movs	r2, #15
 8002350:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002352:	693a      	ldr	r2, [r7, #16]
 8002354:	fa92 f2a2 	rbit	r2, r2
 8002358:	60fa      	str	r2, [r7, #12]
  return result;
 800235a:	68fa      	ldr	r2, [r7, #12]
 800235c:	fab2 f282 	clz	r2, r2
 8002360:	b2d2      	uxtb	r2, r2
 8002362:	40d3      	lsrs	r3, r2
 8002364:	4a14      	ldr	r2, [pc, #80]	; (80023b8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002366:	5cd3      	ldrb	r3, [r2, r3]
 8002368:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d008      	beq.n	8002386 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002374:	4a0e      	ldr	r2, [pc, #56]	; (80023b0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	fbb2 f2f3 	udiv	r2, r2, r3
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	fb02 f303 	mul.w	r3, r2, r3
 8002382:	627b      	str	r3, [r7, #36]	; 0x24
 8002384:	e004      	b.n	8002390 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	4a0c      	ldr	r2, [pc, #48]	; (80023bc <HAL_RCC_GetSysClockFreq+0xd0>)
 800238a:	fb02 f303 	mul.w	r3, r2, r3
 800238e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002392:	623b      	str	r3, [r7, #32]
      break;
 8002394:	e002      	b.n	800239c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002396:	4b06      	ldr	r3, [pc, #24]	; (80023b0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002398:	623b      	str	r3, [r7, #32]
      break;
 800239a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800239c:	6a3b      	ldr	r3, [r7, #32]
}
 800239e:	4618      	mov	r0, r3
 80023a0:	372c      	adds	r7, #44	; 0x2c
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	40021000 	.word	0x40021000
 80023b0:	007a1200 	.word	0x007a1200
 80023b4:	0800328c 	.word	0x0800328c
 80023b8:	0800329c 	.word	0x0800329c
 80023bc:	003d0900 	.word	0x003d0900

080023c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d101      	bne.n	80023d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e09d      	b.n	800250e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d108      	bne.n	80023ec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80023e2:	d009      	beq.n	80023f8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	61da      	str	r2, [r3, #28]
 80023ea:	e005      	b.n	80023f8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002404:	b2db      	uxtb	r3, r3
 8002406:	2b00      	cmp	r3, #0
 8002408:	d106      	bne.n	8002418 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f7fe fb18 	bl	8000a48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2202      	movs	r2, #2
 800241c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800242e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002438:	d902      	bls.n	8002440 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800243a:	2300      	movs	r3, #0
 800243c:	60fb      	str	r3, [r7, #12]
 800243e:	e002      	b.n	8002446 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002440:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002444:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800244e:	d007      	beq.n	8002460 <HAL_SPI_Init+0xa0>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002458:	d002      	beq.n	8002460 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002470:	431a      	orrs	r2, r3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	691b      	ldr	r3, [r3, #16]
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	431a      	orrs	r2, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	695b      	ldr	r3, [r3, #20]
 8002480:	f003 0301 	and.w	r3, r3, #1
 8002484:	431a      	orrs	r2, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	699b      	ldr	r3, [r3, #24]
 800248a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800248e:	431a      	orrs	r2, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	69db      	ldr	r3, [r3, #28]
 8002494:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002498:	431a      	orrs	r2, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a1b      	ldr	r3, [r3, #32]
 800249e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024a2:	ea42 0103 	orr.w	r1, r2, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024aa:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	430a      	orrs	r2, r1
 80024b4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	699b      	ldr	r3, [r3, #24]
 80024ba:	0c1b      	lsrs	r3, r3, #16
 80024bc:	f003 0204 	and.w	r2, r3, #4
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c4:	f003 0310 	and.w	r3, r3, #16
 80024c8:	431a      	orrs	r2, r3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024ce:	f003 0308 	and.w	r3, r3, #8
 80024d2:	431a      	orrs	r2, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80024dc:	ea42 0103 	orr.w	r1, r2, r3
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	430a      	orrs	r2, r1
 80024ec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	69da      	ldr	r2, [r3, #28]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024fc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2200      	movs	r2, #0
 8002502:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2201      	movs	r2, #1
 8002508:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3710      	adds	r7, #16
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}

08002516 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002516:	b580      	push	{r7, lr}
 8002518:	b088      	sub	sp, #32
 800251a:	af00      	add	r7, sp, #0
 800251c:	60f8      	str	r0, [r7, #12]
 800251e:	60b9      	str	r1, [r7, #8]
 8002520:	603b      	str	r3, [r7, #0]
 8002522:	4613      	mov	r3, r2
 8002524:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002526:	2300      	movs	r3, #0
 8002528:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002530:	2b01      	cmp	r3, #1
 8002532:	d101      	bne.n	8002538 <HAL_SPI_Transmit+0x22>
 8002534:	2302      	movs	r3, #2
 8002536:	e158      	b.n	80027ea <HAL_SPI_Transmit+0x2d4>
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002540:	f7fe fba8 	bl	8000c94 <HAL_GetTick>
 8002544:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002546:	88fb      	ldrh	r3, [r7, #6]
 8002548:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002550:	b2db      	uxtb	r3, r3
 8002552:	2b01      	cmp	r3, #1
 8002554:	d002      	beq.n	800255c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002556:	2302      	movs	r3, #2
 8002558:	77fb      	strb	r3, [r7, #31]
    goto error;
 800255a:	e13d      	b.n	80027d8 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d002      	beq.n	8002568 <HAL_SPI_Transmit+0x52>
 8002562:	88fb      	ldrh	r3, [r7, #6]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d102      	bne.n	800256e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800256c:	e134      	b.n	80027d8 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2203      	movs	r2, #3
 8002572:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2200      	movs	r2, #0
 800257a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	68ba      	ldr	r2, [r7, #8]
 8002580:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	88fa      	ldrh	r2, [r7, #6]
 8002586:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	88fa      	ldrh	r2, [r7, #6]
 800258c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2200      	movs	r2, #0
 8002592:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2200      	movs	r2, #0
 8002598:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2200      	movs	r2, #0
 80025a0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2200      	movs	r2, #0
 80025a8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2200      	movs	r2, #0
 80025ae:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025b8:	d10f      	bne.n	80025da <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025c8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025d8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025e4:	2b40      	cmp	r3, #64	; 0x40
 80025e6:	d007      	beq.n	80025f8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002600:	d94b      	bls.n	800269a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d002      	beq.n	8002610 <HAL_SPI_Transmit+0xfa>
 800260a:	8afb      	ldrh	r3, [r7, #22]
 800260c:	2b01      	cmp	r3, #1
 800260e:	d13e      	bne.n	800268e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002614:	881a      	ldrh	r2, [r3, #0]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002620:	1c9a      	adds	r2, r3, #2
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800262a:	b29b      	uxth	r3, r3
 800262c:	3b01      	subs	r3, #1
 800262e:	b29a      	uxth	r2, r3
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002634:	e02b      	b.n	800268e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f003 0302 	and.w	r3, r3, #2
 8002640:	2b02      	cmp	r3, #2
 8002642:	d112      	bne.n	800266a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002648:	881a      	ldrh	r2, [r3, #0]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002654:	1c9a      	adds	r2, r3, #2
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800265e:	b29b      	uxth	r3, r3
 8002660:	3b01      	subs	r3, #1
 8002662:	b29a      	uxth	r2, r3
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002668:	e011      	b.n	800268e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800266a:	f7fe fb13 	bl	8000c94 <HAL_GetTick>
 800266e:	4602      	mov	r2, r0
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	683a      	ldr	r2, [r7, #0]
 8002676:	429a      	cmp	r2, r3
 8002678:	d803      	bhi.n	8002682 <HAL_SPI_Transmit+0x16c>
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002680:	d102      	bne.n	8002688 <HAL_SPI_Transmit+0x172>
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d102      	bne.n	800268e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8002688:	2303      	movs	r3, #3
 800268a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800268c:	e0a4      	b.n	80027d8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002692:	b29b      	uxth	r3, r3
 8002694:	2b00      	cmp	r3, #0
 8002696:	d1ce      	bne.n	8002636 <HAL_SPI_Transmit+0x120>
 8002698:	e07c      	b.n	8002794 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d002      	beq.n	80026a8 <HAL_SPI_Transmit+0x192>
 80026a2:	8afb      	ldrh	r3, [r7, #22]
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d170      	bne.n	800278a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d912      	bls.n	80026d8 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026b6:	881a      	ldrh	r2, [r3, #0]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026c2:	1c9a      	adds	r2, r3, #2
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	3b02      	subs	r3, #2
 80026d0:	b29a      	uxth	r2, r3
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80026d6:	e058      	b.n	800278a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	330c      	adds	r3, #12
 80026e2:	7812      	ldrb	r2, [r2, #0]
 80026e4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ea:	1c5a      	adds	r2, r3, #1
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	3b01      	subs	r3, #1
 80026f8:	b29a      	uxth	r2, r3
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80026fe:	e044      	b.n	800278a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	f003 0302 	and.w	r3, r3, #2
 800270a:	2b02      	cmp	r3, #2
 800270c:	d12b      	bne.n	8002766 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002712:	b29b      	uxth	r3, r3
 8002714:	2b01      	cmp	r3, #1
 8002716:	d912      	bls.n	800273e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800271c:	881a      	ldrh	r2, [r3, #0]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002728:	1c9a      	adds	r2, r3, #2
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002732:	b29b      	uxth	r3, r3
 8002734:	3b02      	subs	r3, #2
 8002736:	b29a      	uxth	r2, r3
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800273c:	e025      	b.n	800278a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	330c      	adds	r3, #12
 8002748:	7812      	ldrb	r2, [r2, #0]
 800274a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002750:	1c5a      	adds	r2, r3, #1
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800275a:	b29b      	uxth	r3, r3
 800275c:	3b01      	subs	r3, #1
 800275e:	b29a      	uxth	r2, r3
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002764:	e011      	b.n	800278a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002766:	f7fe fa95 	bl	8000c94 <HAL_GetTick>
 800276a:	4602      	mov	r2, r0
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	683a      	ldr	r2, [r7, #0]
 8002772:	429a      	cmp	r2, r3
 8002774:	d803      	bhi.n	800277e <HAL_SPI_Transmit+0x268>
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800277c:	d102      	bne.n	8002784 <HAL_SPI_Transmit+0x26e>
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d102      	bne.n	800278a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002788:	e026      	b.n	80027d8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800278e:	b29b      	uxth	r3, r3
 8002790:	2b00      	cmp	r3, #0
 8002792:	d1b5      	bne.n	8002700 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	6839      	ldr	r1, [r7, #0]
 8002798:	68f8      	ldr	r0, [r7, #12]
 800279a:	f000 fcf1 	bl	8003180 <SPI_EndRxTxTransaction>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d002      	beq.n	80027aa <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2220      	movs	r2, #32
 80027a8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d10a      	bne.n	80027c8 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80027b2:	2300      	movs	r3, #0
 80027b4:	613b      	str	r3, [r7, #16]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	613b      	str	r3, [r7, #16]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	613b      	str	r3, [r7, #16]
 80027c6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d002      	beq.n	80027d6 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	77fb      	strb	r3, [r7, #31]
 80027d4:	e000      	b.n	80027d8 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80027d6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2201      	movs	r2, #1
 80027dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80027e8:	7ffb      	ldrb	r3, [r7, #31]
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3720      	adds	r7, #32
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}

080027f2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027f2:	b580      	push	{r7, lr}
 80027f4:	b088      	sub	sp, #32
 80027f6:	af02      	add	r7, sp, #8
 80027f8:	60f8      	str	r0, [r7, #12]
 80027fa:	60b9      	str	r1, [r7, #8]
 80027fc:	603b      	str	r3, [r7, #0]
 80027fe:	4613      	mov	r3, r2
 8002800:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002802:	2300      	movs	r3, #0
 8002804:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800280e:	d112      	bne.n	8002836 <HAL_SPI_Receive+0x44>
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d10e      	bne.n	8002836 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2204      	movs	r2, #4
 800281c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002820:	88fa      	ldrh	r2, [r7, #6]
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	9300      	str	r3, [sp, #0]
 8002826:	4613      	mov	r3, r2
 8002828:	68ba      	ldr	r2, [r7, #8]
 800282a:	68b9      	ldr	r1, [r7, #8]
 800282c:	68f8      	ldr	r0, [r7, #12]
 800282e:	f000 f910 	bl	8002a52 <HAL_SPI_TransmitReceive>
 8002832:	4603      	mov	r3, r0
 8002834:	e109      	b.n	8002a4a <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800283c:	2b01      	cmp	r3, #1
 800283e:	d101      	bne.n	8002844 <HAL_SPI_Receive+0x52>
 8002840:	2302      	movs	r3, #2
 8002842:	e102      	b.n	8002a4a <HAL_SPI_Receive+0x258>
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2201      	movs	r2, #1
 8002848:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800284c:	f7fe fa22 	bl	8000c94 <HAL_GetTick>
 8002850:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002858:	b2db      	uxtb	r3, r3
 800285a:	2b01      	cmp	r3, #1
 800285c:	d002      	beq.n	8002864 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800285e:	2302      	movs	r3, #2
 8002860:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002862:	e0e9      	b.n	8002a38 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d002      	beq.n	8002870 <HAL_SPI_Receive+0x7e>
 800286a:	88fb      	ldrh	r3, [r7, #6]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d102      	bne.n	8002876 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002874:	e0e0      	b.n	8002a38 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2204      	movs	r2, #4
 800287a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2200      	movs	r2, #0
 8002882:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	68ba      	ldr	r2, [r7, #8]
 8002888:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	88fa      	ldrh	r2, [r7, #6]
 800288e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	88fa      	ldrh	r2, [r7, #6]
 8002896:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2200      	movs	r2, #0
 800289e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2200      	movs	r2, #0
 80028a4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2200      	movs	r2, #0
 80028aa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2200      	movs	r2, #0
 80028b0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2200      	movs	r2, #0
 80028b6:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80028c0:	d908      	bls.n	80028d4 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	685a      	ldr	r2, [r3, #4]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80028d0:	605a      	str	r2, [r3, #4]
 80028d2:	e007      	b.n	80028e4 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	685a      	ldr	r2, [r3, #4]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80028e2:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028ec:	d10f      	bne.n	800290e <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028fc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800290c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002918:	2b40      	cmp	r3, #64	; 0x40
 800291a:	d007      	beq.n	800292c <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800292a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002934:	d867      	bhi.n	8002a06 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002936:	e030      	b.n	800299a <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f003 0301 	and.w	r3, r3, #1
 8002942:	2b01      	cmp	r3, #1
 8002944:	d117      	bne.n	8002976 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f103 020c 	add.w	r2, r3, #12
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002952:	7812      	ldrb	r2, [r2, #0]
 8002954:	b2d2      	uxtb	r2, r2
 8002956:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295c:	1c5a      	adds	r2, r3, #1
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002968:	b29b      	uxth	r3, r3
 800296a:	3b01      	subs	r3, #1
 800296c:	b29a      	uxth	r2, r3
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002974:	e011      	b.n	800299a <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002976:	f7fe f98d 	bl	8000c94 <HAL_GetTick>
 800297a:	4602      	mov	r2, r0
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	683a      	ldr	r2, [r7, #0]
 8002982:	429a      	cmp	r2, r3
 8002984:	d803      	bhi.n	800298e <HAL_SPI_Receive+0x19c>
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800298c:	d102      	bne.n	8002994 <HAL_SPI_Receive+0x1a2>
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d102      	bne.n	800299a <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8002994:	2303      	movs	r3, #3
 8002996:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002998:	e04e      	b.n	8002a38 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d1c8      	bne.n	8002938 <HAL_SPI_Receive+0x146>
 80029a6:	e034      	b.n	8002a12 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	f003 0301 	and.w	r3, r3, #1
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d115      	bne.n	80029e2 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	68da      	ldr	r2, [r3, #12]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c0:	b292      	uxth	r2, r2
 80029c2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c8:	1c9a      	adds	r2, r3, #2
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	3b01      	subs	r3, #1
 80029d8:	b29a      	uxth	r2, r3
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80029e0:	e011      	b.n	8002a06 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80029e2:	f7fe f957 	bl	8000c94 <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	683a      	ldr	r2, [r7, #0]
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d803      	bhi.n	80029fa <HAL_SPI_Receive+0x208>
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029f8:	d102      	bne.n	8002a00 <HAL_SPI_Receive+0x20e>
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d102      	bne.n	8002a06 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002a04:	e018      	b.n	8002a38 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d1ca      	bne.n	80029a8 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a12:	693a      	ldr	r2, [r7, #16]
 8002a14:	6839      	ldr	r1, [r7, #0]
 8002a16:	68f8      	ldr	r0, [r7, #12]
 8002a18:	f000 fb5a 	bl	80030d0 <SPI_EndRxTransaction>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d002      	beq.n	8002a28 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2220      	movs	r2, #32
 8002a26:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d002      	beq.n	8002a36 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	75fb      	strb	r3, [r7, #23]
 8002a34:	e000      	b.n	8002a38 <HAL_SPI_Receive+0x246>
  }

error :
 8002a36:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002a48:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3718      	adds	r7, #24
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}

08002a52 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002a52:	b580      	push	{r7, lr}
 8002a54:	b08a      	sub	sp, #40	; 0x28
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	60f8      	str	r0, [r7, #12]
 8002a5a:	60b9      	str	r1, [r7, #8]
 8002a5c:	607a      	str	r2, [r7, #4]
 8002a5e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002a60:	2301      	movs	r3, #1
 8002a62:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002a64:	2300      	movs	r3, #0
 8002a66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d101      	bne.n	8002a78 <HAL_SPI_TransmitReceive+0x26>
 8002a74:	2302      	movs	r3, #2
 8002a76:	e1fb      	b.n	8002e70 <HAL_SPI_TransmitReceive+0x41e>
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a80:	f7fe f908 	bl	8000c94 <HAL_GetTick>
 8002a84:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002a8c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002a94:	887b      	ldrh	r3, [r7, #2]
 8002a96:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002a98:	887b      	ldrh	r3, [r7, #2]
 8002a9a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002a9c:	7efb      	ldrb	r3, [r7, #27]
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d00e      	beq.n	8002ac0 <HAL_SPI_TransmitReceive+0x6e>
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002aa8:	d106      	bne.n	8002ab8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d102      	bne.n	8002ab8 <HAL_SPI_TransmitReceive+0x66>
 8002ab2:	7efb      	ldrb	r3, [r7, #27]
 8002ab4:	2b04      	cmp	r3, #4
 8002ab6:	d003      	beq.n	8002ac0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002ab8:	2302      	movs	r3, #2
 8002aba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002abe:	e1cd      	b.n	8002e5c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d005      	beq.n	8002ad2 <HAL_SPI_TransmitReceive+0x80>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d002      	beq.n	8002ad2 <HAL_SPI_TransmitReceive+0x80>
 8002acc:	887b      	ldrh	r3, [r7, #2]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d103      	bne.n	8002ada <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002ad8:	e1c0      	b.n	8002e5c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	2b04      	cmp	r3, #4
 8002ae4:	d003      	beq.n	8002aee <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2205      	movs	r2, #5
 8002aea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2200      	movs	r2, #0
 8002af2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	887a      	ldrh	r2, [r7, #2]
 8002afe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	887a      	ldrh	r2, [r7, #2]
 8002b06:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	68ba      	ldr	r2, [r7, #8]
 8002b0e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	887a      	ldrh	r2, [r7, #2]
 8002b14:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	887a      	ldrh	r2, [r7, #2]
 8002b1a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2200      	movs	r2, #0
 8002b26:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002b30:	d802      	bhi.n	8002b38 <HAL_SPI_TransmitReceive+0xe6>
 8002b32:	8a3b      	ldrh	r3, [r7, #16]
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d908      	bls.n	8002b4a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	685a      	ldr	r2, [r3, #4]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002b46:	605a      	str	r2, [r3, #4]
 8002b48:	e007      	b.n	8002b5a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	685a      	ldr	r2, [r3, #4]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002b58:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b64:	2b40      	cmp	r3, #64	; 0x40
 8002b66:	d007      	beq.n	8002b78 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b76:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002b80:	d97c      	bls.n	8002c7c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d002      	beq.n	8002b90 <HAL_SPI_TransmitReceive+0x13e>
 8002b8a:	8a7b      	ldrh	r3, [r7, #18]
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d169      	bne.n	8002c64 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b94:	881a      	ldrh	r2, [r3, #0]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba0:	1c9a      	adds	r2, r3, #2
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	3b01      	subs	r3, #1
 8002bae:	b29a      	uxth	r2, r3
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002bb4:	e056      	b.n	8002c64 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	f003 0302 	and.w	r3, r3, #2
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d11b      	bne.n	8002bfc <HAL_SPI_TransmitReceive+0x1aa>
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d016      	beq.n	8002bfc <HAL_SPI_TransmitReceive+0x1aa>
 8002bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d113      	bne.n	8002bfc <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bd8:	881a      	ldrh	r2, [r3, #0]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002be4:	1c9a      	adds	r2, r3, #2
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	3b01      	subs	r3, #1
 8002bf2:	b29a      	uxth	r2, r3
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f003 0301 	and.w	r3, r3, #1
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d11c      	bne.n	8002c44 <HAL_SPI_TransmitReceive+0x1f2>
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d016      	beq.n	8002c44 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	68da      	ldr	r2, [r3, #12]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c20:	b292      	uxth	r2, r2
 8002c22:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c28:	1c9a      	adds	r2, r3, #2
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	3b01      	subs	r3, #1
 8002c38:	b29a      	uxth	r2, r3
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002c40:	2301      	movs	r3, #1
 8002c42:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002c44:	f7fe f826 	bl	8000c94 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d807      	bhi.n	8002c64 <HAL_SPI_TransmitReceive+0x212>
 8002c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c5a:	d003      	beq.n	8002c64 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002c62:	e0fb      	b.n	8002e5c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d1a3      	bne.n	8002bb6 <HAL_SPI_TransmitReceive+0x164>
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d19d      	bne.n	8002bb6 <HAL_SPI_TransmitReceive+0x164>
 8002c7a:	e0df      	b.n	8002e3c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d003      	beq.n	8002c8c <HAL_SPI_TransmitReceive+0x23a>
 8002c84:	8a7b      	ldrh	r3, [r7, #18]
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	f040 80cb 	bne.w	8002e22 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d912      	bls.n	8002cbc <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c9a:	881a      	ldrh	r2, [r3, #0]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca6:	1c9a      	adds	r2, r3, #2
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	3b02      	subs	r3, #2
 8002cb4:	b29a      	uxth	r2, r3
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002cba:	e0b2      	b.n	8002e22 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	330c      	adds	r3, #12
 8002cc6:	7812      	ldrb	r2, [r2, #0]
 8002cc8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cce:	1c5a      	adds	r2, r3, #1
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	b29a      	uxth	r2, r3
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ce2:	e09e      	b.n	8002e22 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f003 0302 	and.w	r3, r3, #2
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d134      	bne.n	8002d5c <HAL_SPI_TransmitReceive+0x30a>
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d02f      	beq.n	8002d5c <HAL_SPI_TransmitReceive+0x30a>
 8002cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d12c      	bne.n	8002d5c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d912      	bls.n	8002d32 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d10:	881a      	ldrh	r2, [r3, #0]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d1c:	1c9a      	adds	r2, r3, #2
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	3b02      	subs	r3, #2
 8002d2a:	b29a      	uxth	r2, r3
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002d30:	e012      	b.n	8002d58 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	330c      	adds	r3, #12
 8002d3c:	7812      	ldrb	r2, [r2, #0]
 8002d3e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d44:	1c5a      	adds	r2, r3, #1
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	3b01      	subs	r3, #1
 8002d52:	b29a      	uxth	r2, r3
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f003 0301 	and.w	r3, r3, #1
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d148      	bne.n	8002dfc <HAL_SPI_TransmitReceive+0x3aa>
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d042      	beq.n	8002dfc <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d923      	bls.n	8002dca <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	68da      	ldr	r2, [r3, #12]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8c:	b292      	uxth	r2, r2
 8002d8e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d94:	1c9a      	adds	r2, r3, #2
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	3b02      	subs	r3, #2
 8002da4:	b29a      	uxth	r2, r3
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d81f      	bhi.n	8002df8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	685a      	ldr	r2, [r3, #4]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002dc6:	605a      	str	r2, [r3, #4]
 8002dc8:	e016      	b.n	8002df8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f103 020c 	add.w	r2, r3, #12
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd6:	7812      	ldrb	r2, [r2, #0]
 8002dd8:	b2d2      	uxtb	r2, r2
 8002dda:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de0:	1c5a      	adds	r2, r3, #1
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	3b01      	subs	r3, #1
 8002df0:	b29a      	uxth	r2, r3
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002dfc:	f7fd ff4a 	bl	8000c94 <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d803      	bhi.n	8002e14 <HAL_SPI_TransmitReceive+0x3c2>
 8002e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e12:	d102      	bne.n	8002e1a <HAL_SPI_TransmitReceive+0x3c8>
 8002e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d103      	bne.n	8002e22 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002e20:	e01c      	b.n	8002e5c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	f47f af5b 	bne.w	8002ce4 <HAL_SPI_TransmitReceive+0x292>
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	f47f af54 	bne.w	8002ce4 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e3c:	69fa      	ldr	r2, [r7, #28]
 8002e3e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002e40:	68f8      	ldr	r0, [r7, #12]
 8002e42:	f000 f99d 	bl	8003180 <SPI_EndRxTxTransaction>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d006      	beq.n	8002e5a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2220      	movs	r2, #32
 8002e56:	661a      	str	r2, [r3, #96]	; 0x60
 8002e58:	e000      	b.n	8002e5c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8002e5a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002e6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3728      	adds	r7, #40	; 0x28
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002e86:	b2db      	uxtb	r3, r3
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b088      	sub	sp, #32
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	60f8      	str	r0, [r7, #12]
 8002e9c:	60b9      	str	r1, [r7, #8]
 8002e9e:	603b      	str	r3, [r7, #0]
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002ea4:	f7fd fef6 	bl	8000c94 <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eac:	1a9b      	subs	r3, r3, r2
 8002eae:	683a      	ldr	r2, [r7, #0]
 8002eb0:	4413      	add	r3, r2
 8002eb2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002eb4:	f7fd feee 	bl	8000c94 <HAL_GetTick>
 8002eb8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002eba:	4b39      	ldr	r3, [pc, #228]	; (8002fa0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	015b      	lsls	r3, r3, #5
 8002ec0:	0d1b      	lsrs	r3, r3, #20
 8002ec2:	69fa      	ldr	r2, [r7, #28]
 8002ec4:	fb02 f303 	mul.w	r3, r2, r3
 8002ec8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002eca:	e054      	b.n	8002f76 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ed2:	d050      	beq.n	8002f76 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002ed4:	f7fd fede 	bl	8000c94 <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	69fa      	ldr	r2, [r7, #28]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d902      	bls.n	8002eea <SPI_WaitFlagStateUntilTimeout+0x56>
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d13d      	bne.n	8002f66 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	685a      	ldr	r2, [r3, #4]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002ef8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f02:	d111      	bne.n	8002f28 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f0c:	d004      	beq.n	8002f18 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f16:	d107      	bne.n	8002f28 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f26:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f30:	d10f      	bne.n	8002f52 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f40:	601a      	str	r2, [r3, #0]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f50:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2201      	movs	r2, #1
 8002f56:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e017      	b.n	8002f96 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d101      	bne.n	8002f70 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	3b01      	subs	r3, #1
 8002f74:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	689a      	ldr	r2, [r3, #8]
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	4013      	ands	r3, r2
 8002f80:	68ba      	ldr	r2, [r7, #8]
 8002f82:	429a      	cmp	r2, r3
 8002f84:	bf0c      	ite	eq
 8002f86:	2301      	moveq	r3, #1
 8002f88:	2300      	movne	r3, #0
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	79fb      	ldrb	r3, [r7, #7]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d19b      	bne.n	8002ecc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3720      	adds	r7, #32
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	20000000 	.word	0x20000000

08002fa4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b08a      	sub	sp, #40	; 0x28
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	60b9      	str	r1, [r7, #8]
 8002fae:	607a      	str	r2, [r7, #4]
 8002fb0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002fb6:	f7fd fe6d 	bl	8000c94 <HAL_GetTick>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fbe:	1a9b      	subs	r3, r3, r2
 8002fc0:	683a      	ldr	r2, [r7, #0]
 8002fc2:	4413      	add	r3, r2
 8002fc4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8002fc6:	f7fd fe65 	bl	8000c94 <HAL_GetTick>
 8002fca:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	330c      	adds	r3, #12
 8002fd2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002fd4:	4b3d      	ldr	r3, [pc, #244]	; (80030cc <SPI_WaitFifoStateUntilTimeout+0x128>)
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	4613      	mov	r3, r2
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	4413      	add	r3, r2
 8002fde:	00da      	lsls	r2, r3, #3
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	0d1b      	lsrs	r3, r3, #20
 8002fe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fe6:	fb02 f303 	mul.w	r3, r2, r3
 8002fea:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002fec:	e060      	b.n	80030b0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002ff4:	d107      	bne.n	8003006 <SPI_WaitFifoStateUntilTimeout+0x62>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d104      	bne.n	8003006 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	b2db      	uxtb	r3, r3
 8003002:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003004:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800300c:	d050      	beq.n	80030b0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800300e:	f7fd fe41 	bl	8000c94 <HAL_GetTick>
 8003012:	4602      	mov	r2, r0
 8003014:	6a3b      	ldr	r3, [r7, #32]
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800301a:	429a      	cmp	r2, r3
 800301c:	d902      	bls.n	8003024 <SPI_WaitFifoStateUntilTimeout+0x80>
 800301e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003020:	2b00      	cmp	r3, #0
 8003022:	d13d      	bne.n	80030a0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	685a      	ldr	r2, [r3, #4]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003032:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800303c:	d111      	bne.n	8003062 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003046:	d004      	beq.n	8003052 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003050:	d107      	bne.n	8003062 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003060:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003066:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800306a:	d10f      	bne.n	800308c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800307a:	601a      	str	r2, [r3, #0]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800308a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	e010      	b.n	80030c2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d101      	bne.n	80030aa <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80030a6:	2300      	movs	r3, #0
 80030a8:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 80030aa:	69bb      	ldr	r3, [r7, #24]
 80030ac:	3b01      	subs	r3, #1
 80030ae:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	689a      	ldr	r2, [r3, #8]
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	4013      	ands	r3, r2
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	429a      	cmp	r2, r3
 80030be:	d196      	bne.n	8002fee <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80030c0:	2300      	movs	r3, #0
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3728      	adds	r7, #40	; 0x28
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	20000000 	.word	0x20000000

080030d0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b086      	sub	sp, #24
 80030d4:	af02      	add	r7, sp, #8
 80030d6:	60f8      	str	r0, [r7, #12]
 80030d8:	60b9      	str	r1, [r7, #8]
 80030da:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030e4:	d111      	bne.n	800310a <SPI_EndRxTransaction+0x3a>
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030ee:	d004      	beq.n	80030fa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030f8:	d107      	bne.n	800310a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003108:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	9300      	str	r3, [sp, #0]
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	2200      	movs	r2, #0
 8003112:	2180      	movs	r1, #128	; 0x80
 8003114:	68f8      	ldr	r0, [r7, #12]
 8003116:	f7ff febd 	bl	8002e94 <SPI_WaitFlagStateUntilTimeout>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d007      	beq.n	8003130 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003124:	f043 0220 	orr.w	r2, r3, #32
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800312c:	2303      	movs	r3, #3
 800312e:	e023      	b.n	8003178 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003138:	d11d      	bne.n	8003176 <SPI_EndRxTransaction+0xa6>
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003142:	d004      	beq.n	800314e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800314c:	d113      	bne.n	8003176 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	9300      	str	r3, [sp, #0]
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	2200      	movs	r2, #0
 8003156:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800315a:	68f8      	ldr	r0, [r7, #12]
 800315c:	f7ff ff22 	bl	8002fa4 <SPI_WaitFifoStateUntilTimeout>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d007      	beq.n	8003176 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800316a:	f043 0220 	orr.w	r2, r3, #32
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e000      	b.n	8003178 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003176:	2300      	movs	r3, #0
}
 8003178:	4618      	mov	r0, r3
 800317a:	3710      	adds	r7, #16
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b086      	sub	sp, #24
 8003184:	af02      	add	r7, sp, #8
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	60b9      	str	r1, [r7, #8]
 800318a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	9300      	str	r3, [sp, #0]
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	2200      	movs	r2, #0
 8003194:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003198:	68f8      	ldr	r0, [r7, #12]
 800319a:	f7ff ff03 	bl	8002fa4 <SPI_WaitFifoStateUntilTimeout>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d007      	beq.n	80031b4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031a8:	f043 0220 	orr.w	r2, r3, #32
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80031b0:	2303      	movs	r3, #3
 80031b2:	e027      	b.n	8003204 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	9300      	str	r3, [sp, #0]
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	2200      	movs	r2, #0
 80031bc:	2180      	movs	r1, #128	; 0x80
 80031be:	68f8      	ldr	r0, [r7, #12]
 80031c0:	f7ff fe68 	bl	8002e94 <SPI_WaitFlagStateUntilTimeout>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d007      	beq.n	80031da <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031ce:	f043 0220 	orr.w	r2, r3, #32
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e014      	b.n	8003204 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	9300      	str	r3, [sp, #0]
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80031e6:	68f8      	ldr	r0, [r7, #12]
 80031e8:	f7ff fedc 	bl	8002fa4 <SPI_WaitFifoStateUntilTimeout>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d007      	beq.n	8003202 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031f6:	f043 0220 	orr.w	r2, r3, #32
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e000      	b.n	8003204 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003202:	2300      	movs	r3, #0
}
 8003204:	4618      	mov	r0, r3
 8003206:	3710      	adds	r7, #16
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <__libc_init_array>:
 800320c:	b570      	push	{r4, r5, r6, lr}
 800320e:	4d0d      	ldr	r5, [pc, #52]	; (8003244 <__libc_init_array+0x38>)
 8003210:	4c0d      	ldr	r4, [pc, #52]	; (8003248 <__libc_init_array+0x3c>)
 8003212:	1b64      	subs	r4, r4, r5
 8003214:	10a4      	asrs	r4, r4, #2
 8003216:	2600      	movs	r6, #0
 8003218:	42a6      	cmp	r6, r4
 800321a:	d109      	bne.n	8003230 <__libc_init_array+0x24>
 800321c:	4d0b      	ldr	r5, [pc, #44]	; (800324c <__libc_init_array+0x40>)
 800321e:	4c0c      	ldr	r4, [pc, #48]	; (8003250 <__libc_init_array+0x44>)
 8003220:	f000 f820 	bl	8003264 <_init>
 8003224:	1b64      	subs	r4, r4, r5
 8003226:	10a4      	asrs	r4, r4, #2
 8003228:	2600      	movs	r6, #0
 800322a:	42a6      	cmp	r6, r4
 800322c:	d105      	bne.n	800323a <__libc_init_array+0x2e>
 800322e:	bd70      	pop	{r4, r5, r6, pc}
 8003230:	f855 3b04 	ldr.w	r3, [r5], #4
 8003234:	4798      	blx	r3
 8003236:	3601      	adds	r6, #1
 8003238:	e7ee      	b.n	8003218 <__libc_init_array+0xc>
 800323a:	f855 3b04 	ldr.w	r3, [r5], #4
 800323e:	4798      	blx	r3
 8003240:	3601      	adds	r6, #1
 8003242:	e7f2      	b.n	800322a <__libc_init_array+0x1e>
 8003244:	080032ac 	.word	0x080032ac
 8003248:	080032ac 	.word	0x080032ac
 800324c:	080032ac 	.word	0x080032ac
 8003250:	080032b0 	.word	0x080032b0

08003254 <memset>:
 8003254:	4402      	add	r2, r0
 8003256:	4603      	mov	r3, r0
 8003258:	4293      	cmp	r3, r2
 800325a:	d100      	bne.n	800325e <memset+0xa>
 800325c:	4770      	bx	lr
 800325e:	f803 1b01 	strb.w	r1, [r3], #1
 8003262:	e7f9      	b.n	8003258 <memset+0x4>

08003264 <_init>:
 8003264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003266:	bf00      	nop
 8003268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800326a:	bc08      	pop	{r3}
 800326c:	469e      	mov	lr, r3
 800326e:	4770      	bx	lr

08003270 <_fini>:
 8003270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003272:	bf00      	nop
 8003274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003276:	bc08      	pop	{r3}
 8003278:	469e      	mov	lr, r3
 800327a:	4770      	bx	lr
