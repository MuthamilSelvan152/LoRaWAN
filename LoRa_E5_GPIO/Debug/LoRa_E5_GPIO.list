
LoRa_E5_GPIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b90  08000138  08000138  00010138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08001cc8  08001cc8  00011cc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001d64  08001d64  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08001d64  08001d64  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001d64  08001d64  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001d64  08001d64  00011d64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001d68  08001d68  00011d68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08001d6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000010  08001d7c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  08001d7c  00020030  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006f03  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000164a  00000000  00000000  00026f3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000990  00000000  00000000  00028588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008d8  00000000  00000000  00028f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017969  00000000  00000000  000297f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007996  00000000  00000000  00041159  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092be0  00000000  00000000  00048aef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000db6cf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002548  00000000  00000000  000db724  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000010 	.word	0x20000010
 8000154:	00000000 	.word	0x00000000
 8000158:	08001cb0 	.word	0x08001cb0

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000014 	.word	0x20000014
 8000174:	08001cb0 	.word	0x08001cb0

08000178 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000178:	b480      	push	{r7}
 800017a:	b085      	sub	sp, #20
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000180:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000184:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000186:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	4313      	orrs	r3, r2
 800018e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000190:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000194:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	4013      	ands	r3, r2
 800019a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800019c:	68fb      	ldr	r3, [r7, #12]
}
 800019e:	bf00      	nop
 80001a0:	3714      	adds	r7, #20
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr

080001a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	b086      	sub	sp, #24
 80001ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001ae:	1d3b      	adds	r3, r7, #4
 80001b0:	2200      	movs	r2, #0
 80001b2:	601a      	str	r2, [r3, #0]
 80001b4:	605a      	str	r2, [r3, #4]
 80001b6:	609a      	str	r2, [r3, #8]
 80001b8:	60da      	str	r2, [r3, #12]
 80001ba:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001bc:	2004      	movs	r0, #4
 80001be:	f7ff ffdb 	bl	8000178 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001c2:	2002      	movs	r0, #2
 80001c4:	f7ff ffd8 	bl	8000178 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80001c8:	2200      	movs	r2, #0
 80001ca:	2120      	movs	r1, #32
 80001cc:	4814      	ldr	r0, [pc, #80]	; (8000220 <MX_GPIO_Init+0x78>)
 80001ce:	f000 fc3f 	bl	8000a50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80001d2:	2320      	movs	r3, #32
 80001d4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001d6:	2301      	movs	r3, #1
 80001d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001da:	2300      	movs	r3, #0
 80001dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001de:	2300      	movs	r3, #0
 80001e0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80001e2:	1d3b      	adds	r3, r7, #4
 80001e4:	4619      	mov	r1, r3
 80001e6:	480e      	ldr	r0, [pc, #56]	; (8000220 <MX_GPIO_Init+0x78>)
 80001e8:	f000 fad2 	bl	8000790 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button_Pin;
 80001ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001f0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80001f2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80001f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001f8:	2300      	movs	r3, #0
 80001fa:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 80001fc:	1d3b      	adds	r3, r7, #4
 80001fe:	4619      	mov	r1, r3
 8000200:	4807      	ldr	r0, [pc, #28]	; (8000220 <MX_GPIO_Init+0x78>)
 8000202:	f000 fac5 	bl	8000790 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000206:	2200      	movs	r2, #0
 8000208:	2100      	movs	r1, #0
 800020a:	2029      	movs	r0, #41	; 0x29
 800020c:	f000 fa8b 	bl	8000726 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000210:	2029      	movs	r0, #41	; 0x29
 8000212:	f000 faa2 	bl	800075a <HAL_NVIC_EnableIRQ>

}
 8000216:	bf00      	nop
 8000218:	3718      	adds	r7, #24
 800021a:	46bd      	mov	sp, r7
 800021c:	bd80      	pop	{r7, pc}
 800021e:	bf00      	nop
 8000220:	48000400 	.word	0x48000400

08000224 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000224:	b480      	push	{r7}
 8000226:	b083      	sub	sp, #12
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800022c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000230:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000234:	f023 0218 	bic.w	r2, r3, #24
 8000238:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	4313      	orrs	r3, r2
 8000240:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000244:	bf00      	nop
 8000246:	370c      	adds	r7, #12
 8000248:	46bd      	mov	sp, r7
 800024a:	bc80      	pop	{r7}
 800024c:	4770      	bx	lr
	...

08000250 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000254:	f000 f8f6 	bl	8000444 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000258:	f000 f810 	bl	800027c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800025c:	f7ff ffa4 	bl	80001a8 <MX_GPIO_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000260:	2120      	movs	r1, #32
 8000262:	4804      	ldr	r0, [pc, #16]	; (8000274 <main+0x24>)
 8000264:	f000 fc0b 	bl	8000a7e <HAL_GPIO_TogglePin>
	  HAL_Delay(delay);
 8000268:	4b03      	ldr	r3, [pc, #12]	; (8000278 <main+0x28>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	4618      	mov	r0, r3
 800026e:	f000 f95f 	bl	8000530 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000272:	e7f5      	b.n	8000260 <main+0x10>
 8000274:	48000400 	.word	0x48000400
 8000278:	20000000 	.word	0x20000000

0800027c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b09a      	sub	sp, #104	; 0x68
 8000280:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000282:	f107 0320 	add.w	r3, r7, #32
 8000286:	2248      	movs	r2, #72	; 0x48
 8000288:	2100      	movs	r1, #0
 800028a:	4618      	mov	r0, r3
 800028c:	f001 fd08 	bl	8001ca0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000290:	f107 0308 	add.w	r3, r7, #8
 8000294:	2200      	movs	r2, #0
 8000296:	601a      	str	r2, [r3, #0]
 8000298:	605a      	str	r2, [r3, #4]
 800029a:	609a      	str	r2, [r3, #8]
 800029c:	60da      	str	r2, [r3, #12]
 800029e:	611a      	str	r2, [r3, #16]
 80002a0:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80002a2:	f000 fc1d 	bl	8000ae0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80002a6:	2000      	movs	r0, #0
 80002a8:	f7ff ffbc 	bl	8000224 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80002ac:	4b1f      	ldr	r3, [pc, #124]	; (800032c <SystemClock_Config+0xb0>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80002b4:	4a1d      	ldr	r2, [pc, #116]	; (800032c <SystemClock_Config+0xb0>)
 80002b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002ba:	6013      	str	r3, [r2, #0]
 80002bc:	4b1b      	ldr	r3, [pc, #108]	; (800032c <SystemClock_Config+0xb0>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80002c4:	607b      	str	r3, [r7, #4]
 80002c6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80002c8:	2324      	movs	r3, #36	; 0x24
 80002ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80002cc:	2381      	movs	r3, #129	; 0x81
 80002ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80002d0:	2301      	movs	r3, #1
 80002d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80002d4:	2300      	movs	r3, #0
 80002d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80002d8:	2360      	movs	r3, #96	; 0x60
 80002da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002dc:	2300      	movs	r3, #0
 80002de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002e0:	f107 0320 	add.w	r3, r7, #32
 80002e4:	4618      	mov	r0, r3
 80002e6:	f000 fe8f 	bl	8001008 <HAL_RCC_OscConfig>
 80002ea:	4603      	mov	r3, r0
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d001      	beq.n	80002f4 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80002f0:	f000 f83e 	bl	8000370 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 80002f4:	234f      	movs	r3, #79	; 0x4f
 80002f6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80002f8:	2300      	movs	r3, #0
 80002fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002fc:	2300      	movs	r3, #0
 80002fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000300:	2300      	movs	r3, #0
 8000302:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000304:	2300      	movs	r3, #0
 8000306:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000308:	2300      	movs	r3, #0
 800030a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800030c:	f107 0308 	add.w	r3, r7, #8
 8000310:	2100      	movs	r1, #0
 8000312:	4618      	mov	r0, r3
 8000314:	f001 fa12 	bl	800173c <HAL_RCC_ClockConfig>
 8000318:	4603      	mov	r3, r0
 800031a:	2b00      	cmp	r3, #0
 800031c:	d001      	beq.n	8000322 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800031e:	f000 f827 	bl	8000370 <Error_Handler>
  }
}
 8000322:	bf00      	nop
 8000324:	3768      	adds	r7, #104	; 0x68
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	58000400 	.word	0x58000400

08000330 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000330:	b480      	push	{r7}
 8000332:	b083      	sub	sp, #12
 8000334:	af00      	add	r7, sp, #0
 8000336:	4603      	mov	r3, r0
 8000338:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == Button_Pin)
 800033a:	88fb      	ldrh	r3, [r7, #6]
 800033c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000340:	d10e      	bne.n	8000360 <HAL_GPIO_EXTI_Callback+0x30>
	{
		delay += 500;
 8000342:	4b0a      	ldr	r3, [pc, #40]	; (800036c <HAL_GPIO_EXTI_Callback+0x3c>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800034a:	4a08      	ldr	r2, [pc, #32]	; (800036c <HAL_GPIO_EXTI_Callback+0x3c>)
 800034c:	6013      	str	r3, [r2, #0]
		if(delay > 2000)
 800034e:	4b07      	ldr	r3, [pc, #28]	; (800036c <HAL_GPIO_EXTI_Callback+0x3c>)
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000356:	dd03      	ble.n	8000360 <HAL_GPIO_EXTI_Callback+0x30>
		{
			delay = 500;
 8000358:	4b04      	ldr	r3, [pc, #16]	; (800036c <HAL_GPIO_EXTI_Callback+0x3c>)
 800035a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800035e:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000360:	bf00      	nop
 8000362:	370c      	adds	r7, #12
 8000364:	46bd      	mov	sp, r7
 8000366:	bc80      	pop	{r7}
 8000368:	4770      	bx	lr
 800036a:	bf00      	nop
 800036c:	20000000 	.word	0x20000000

08000370 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000370:	b480      	push	{r7}
 8000372:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000374:	b672      	cpsid	i
}
 8000376:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000378:	e7fe      	b.n	8000378 <Error_Handler+0x8>

0800037a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800037a:	b480      	push	{r7}
 800037c:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800037e:	bf00      	nop
 8000380:	46bd      	mov	sp, r7
 8000382:	bc80      	pop	{r7}
 8000384:	4770      	bx	lr

08000386 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000386:	b480      	push	{r7}
 8000388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800038a:	e7fe      	b.n	800038a <NMI_Handler+0x4>

0800038c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800038c:	b480      	push	{r7}
 800038e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000390:	e7fe      	b.n	8000390 <HardFault_Handler+0x4>

08000392 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000392:	b480      	push	{r7}
 8000394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000396:	e7fe      	b.n	8000396 <MemManage_Handler+0x4>

08000398 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000398:	b480      	push	{r7}
 800039a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800039c:	e7fe      	b.n	800039c <BusFault_Handler+0x4>

0800039e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800039e:	b480      	push	{r7}
 80003a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003a2:	e7fe      	b.n	80003a2 <UsageFault_Handler+0x4>

080003a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003a4:	b480      	push	{r7}
 80003a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003a8:	bf00      	nop
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bc80      	pop	{r7}
 80003ae:	4770      	bx	lr

080003b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003b0:	b480      	push	{r7}
 80003b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003b4:	bf00      	nop
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bc80      	pop	{r7}
 80003ba:	4770      	bx	lr

080003bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003c0:	bf00      	nop
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bc80      	pop	{r7}
 80003c6:	4770      	bx	lr

080003c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003cc:	f000 f894 	bl	80004f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003d0:	bf00      	nop
 80003d2:	bd80      	pop	{r7, pc}

080003d4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [15:10] Interrupt.
  */
void EXTI15_10_IRQHandler(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_Pin);
 80003d8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80003dc:	f000 fb68 	bl	8000ab0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80003e0:	bf00      	nop
 80003e2:	bd80      	pop	{r7, pc}

080003e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 80003e8:	bf00      	nop
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bc80      	pop	{r7}
 80003ee:	4770      	bx	lr

080003f0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003f0:	480d      	ldr	r0, [pc, #52]	; (8000428 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003f2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80003f4:	f7ff fff6 	bl	80003e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003f8:	480c      	ldr	r0, [pc, #48]	; (800042c <LoopForever+0x6>)
  ldr r1, =_edata
 80003fa:	490d      	ldr	r1, [pc, #52]	; (8000430 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003fc:	4a0d      	ldr	r2, [pc, #52]	; (8000434 <LoopForever+0xe>)
  movs r3, #0
 80003fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000400:	e002      	b.n	8000408 <LoopCopyDataInit>

08000402 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000402:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000404:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000406:	3304      	adds	r3, #4

08000408 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000408:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800040a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800040c:	d3f9      	bcc.n	8000402 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800040e:	4a0a      	ldr	r2, [pc, #40]	; (8000438 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000410:	4c0a      	ldr	r4, [pc, #40]	; (800043c <LoopForever+0x16>)
  movs r3, #0
 8000412:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000414:	e001      	b.n	800041a <LoopFillZerobss>

08000416 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000416:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000418:	3204      	adds	r2, #4

0800041a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800041a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800041c:	d3fb      	bcc.n	8000416 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800041e:	f001 fc1b 	bl	8001c58 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000422:	f7ff ff15 	bl	8000250 <main>

08000426 <LoopForever>:

LoopForever:
    b LoopForever
 8000426:	e7fe      	b.n	8000426 <LoopForever>
  ldr   r0, =_estack
 8000428:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800042c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000430:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000434:	08001d6c 	.word	0x08001d6c
  ldr r2, =_sbss
 8000438:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800043c:	20000030 	.word	0x20000030

08000440 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000440:	e7fe      	b.n	8000440 <ADC_IRQHandler>
	...

08000444 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b082      	sub	sp, #8
 8000448:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800044a:	2300      	movs	r3, #0
 800044c:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800044e:	2003      	movs	r0, #3
 8000450:	f000 f95e 	bl	8000710 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8000454:	f001 fb36 	bl	8001ac4 <HAL_RCC_GetHCLKFreq>
 8000458:	4603      	mov	r3, r0
 800045a:	4a09      	ldr	r2, [pc, #36]	; (8000480 <HAL_Init+0x3c>)
 800045c:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800045e:	200f      	movs	r0, #15
 8000460:	f000 f810 	bl	8000484 <HAL_InitTick>
 8000464:	4603      	mov	r3, r0
 8000466:	2b00      	cmp	r3, #0
 8000468:	d002      	beq.n	8000470 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800046a:	2301      	movs	r3, #1
 800046c:	71fb      	strb	r3, [r7, #7]
 800046e:	e001      	b.n	8000474 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000470:	f7ff ff83 	bl	800037a <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000474:	79fb      	ldrb	r3, [r7, #7]
}
 8000476:	4618      	mov	r0, r3
 8000478:	3708      	adds	r7, #8
 800047a:	46bd      	mov	sp, r7
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	20000004 	.word	0x20000004

08000484 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b084      	sub	sp, #16
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800048c:	2300      	movs	r3, #0
 800048e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000490:	4b17      	ldr	r3, [pc, #92]	; (80004f0 <HAL_InitTick+0x6c>)
 8000492:	781b      	ldrb	r3, [r3, #0]
 8000494:	2b00      	cmp	r3, #0
 8000496:	d024      	beq.n	80004e2 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000498:	f001 fb14 	bl	8001ac4 <HAL_RCC_GetHCLKFreq>
 800049c:	4602      	mov	r2, r0
 800049e:	4b14      	ldr	r3, [pc, #80]	; (80004f0 <HAL_InitTick+0x6c>)
 80004a0:	781b      	ldrb	r3, [r3, #0]
 80004a2:	4619      	mov	r1, r3
 80004a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004a8:	fbb3 f3f1 	udiv	r3, r3, r1
 80004ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80004b0:	4618      	mov	r0, r3
 80004b2:	f000 f960 	bl	8000776 <HAL_SYSTICK_Config>
 80004b6:	4603      	mov	r3, r0
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d10f      	bne.n	80004dc <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	2b0f      	cmp	r3, #15
 80004c0:	d809      	bhi.n	80004d6 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004c2:	2200      	movs	r2, #0
 80004c4:	6879      	ldr	r1, [r7, #4]
 80004c6:	f04f 30ff 	mov.w	r0, #4294967295
 80004ca:	f000 f92c 	bl	8000726 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80004ce:	4a09      	ldr	r2, [pc, #36]	; (80004f4 <HAL_InitTick+0x70>)
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	6013      	str	r3, [r2, #0]
 80004d4:	e007      	b.n	80004e6 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80004d6:	2301      	movs	r3, #1
 80004d8:	73fb      	strb	r3, [r7, #15]
 80004da:	e004      	b.n	80004e6 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80004dc:	2301      	movs	r3, #1
 80004de:	73fb      	strb	r3, [r7, #15]
 80004e0:	e001      	b.n	80004e6 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80004e2:	2301      	movs	r3, #1
 80004e4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80004e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80004e8:	4618      	mov	r0, r3
 80004ea:	3710      	adds	r7, #16
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	2000000c 	.word	0x2000000c
 80004f4:	20000008 	.word	0x20000008

080004f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80004fc:	4b05      	ldr	r3, [pc, #20]	; (8000514 <HAL_IncTick+0x1c>)
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	461a      	mov	r2, r3
 8000502:	4b05      	ldr	r3, [pc, #20]	; (8000518 <HAL_IncTick+0x20>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	4413      	add	r3, r2
 8000508:	4a03      	ldr	r2, [pc, #12]	; (8000518 <HAL_IncTick+0x20>)
 800050a:	6013      	str	r3, [r2, #0]
}
 800050c:	bf00      	nop
 800050e:	46bd      	mov	sp, r7
 8000510:	bc80      	pop	{r7}
 8000512:	4770      	bx	lr
 8000514:	2000000c 	.word	0x2000000c
 8000518:	2000002c 	.word	0x2000002c

0800051c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0
  return uwTick;
 8000520:	4b02      	ldr	r3, [pc, #8]	; (800052c <HAL_GetTick+0x10>)
 8000522:	681b      	ldr	r3, [r3, #0]
}
 8000524:	4618      	mov	r0, r3
 8000526:	46bd      	mov	sp, r7
 8000528:	bc80      	pop	{r7}
 800052a:	4770      	bx	lr
 800052c:	2000002c 	.word	0x2000002c

08000530 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b084      	sub	sp, #16
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000538:	f7ff fff0 	bl	800051c <HAL_GetTick>
 800053c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000542:	68fb      	ldr	r3, [r7, #12]
 8000544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000548:	d005      	beq.n	8000556 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800054a:	4b0a      	ldr	r3, [pc, #40]	; (8000574 <HAL_Delay+0x44>)
 800054c:	781b      	ldrb	r3, [r3, #0]
 800054e:	461a      	mov	r2, r3
 8000550:	68fb      	ldr	r3, [r7, #12]
 8000552:	4413      	add	r3, r2
 8000554:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000556:	bf00      	nop
 8000558:	f7ff ffe0 	bl	800051c <HAL_GetTick>
 800055c:	4602      	mov	r2, r0
 800055e:	68bb      	ldr	r3, [r7, #8]
 8000560:	1ad3      	subs	r3, r2, r3
 8000562:	68fa      	ldr	r2, [r7, #12]
 8000564:	429a      	cmp	r2, r3
 8000566:	d8f7      	bhi.n	8000558 <HAL_Delay+0x28>
  {
  }
}
 8000568:	bf00      	nop
 800056a:	bf00      	nop
 800056c:	3710      	adds	r7, #16
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	2000000c 	.word	0x2000000c

08000578 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000578:	b480      	push	{r7}
 800057a:	b085      	sub	sp, #20
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	f003 0307 	and.w	r3, r3, #7
 8000586:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000588:	4b0c      	ldr	r3, [pc, #48]	; (80005bc <__NVIC_SetPriorityGrouping+0x44>)
 800058a:	68db      	ldr	r3, [r3, #12]
 800058c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800058e:	68ba      	ldr	r2, [r7, #8]
 8000590:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000594:	4013      	ands	r3, r2
 8000596:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800059c:	68bb      	ldr	r3, [r7, #8]
 800059e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005aa:	4a04      	ldr	r2, [pc, #16]	; (80005bc <__NVIC_SetPriorityGrouping+0x44>)
 80005ac:	68bb      	ldr	r3, [r7, #8]
 80005ae:	60d3      	str	r3, [r2, #12]
}
 80005b0:	bf00      	nop
 80005b2:	3714      	adds	r7, #20
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bc80      	pop	{r7}
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	e000ed00 	.word	0xe000ed00

080005c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005c4:	4b04      	ldr	r3, [pc, #16]	; (80005d8 <__NVIC_GetPriorityGrouping+0x18>)
 80005c6:	68db      	ldr	r3, [r3, #12]
 80005c8:	0a1b      	lsrs	r3, r3, #8
 80005ca:	f003 0307 	and.w	r3, r3, #7
}
 80005ce:	4618      	mov	r0, r3
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bc80      	pop	{r7}
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	e000ed00 	.word	0xe000ed00

080005dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	4603      	mov	r3, r0
 80005e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	db0b      	blt.n	8000606 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005ee:	79fb      	ldrb	r3, [r7, #7]
 80005f0:	f003 021f 	and.w	r2, r3, #31
 80005f4:	4906      	ldr	r1, [pc, #24]	; (8000610 <__NVIC_EnableIRQ+0x34>)
 80005f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005fa:	095b      	lsrs	r3, r3, #5
 80005fc:	2001      	movs	r0, #1
 80005fe:	fa00 f202 	lsl.w	r2, r0, r2
 8000602:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000606:	bf00      	nop
 8000608:	370c      	adds	r7, #12
 800060a:	46bd      	mov	sp, r7
 800060c:	bc80      	pop	{r7}
 800060e:	4770      	bx	lr
 8000610:	e000e100 	.word	0xe000e100

08000614 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000614:	b480      	push	{r7}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0
 800061a:	4603      	mov	r3, r0
 800061c:	6039      	str	r1, [r7, #0]
 800061e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000624:	2b00      	cmp	r3, #0
 8000626:	db0a      	blt.n	800063e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	b2da      	uxtb	r2, r3
 800062c:	490c      	ldr	r1, [pc, #48]	; (8000660 <__NVIC_SetPriority+0x4c>)
 800062e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000632:	0112      	lsls	r2, r2, #4
 8000634:	b2d2      	uxtb	r2, r2
 8000636:	440b      	add	r3, r1
 8000638:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800063c:	e00a      	b.n	8000654 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800063e:	683b      	ldr	r3, [r7, #0]
 8000640:	b2da      	uxtb	r2, r3
 8000642:	4908      	ldr	r1, [pc, #32]	; (8000664 <__NVIC_SetPriority+0x50>)
 8000644:	79fb      	ldrb	r3, [r7, #7]
 8000646:	f003 030f 	and.w	r3, r3, #15
 800064a:	3b04      	subs	r3, #4
 800064c:	0112      	lsls	r2, r2, #4
 800064e:	b2d2      	uxtb	r2, r2
 8000650:	440b      	add	r3, r1
 8000652:	761a      	strb	r2, [r3, #24]
}
 8000654:	bf00      	nop
 8000656:	370c      	adds	r7, #12
 8000658:	46bd      	mov	sp, r7
 800065a:	bc80      	pop	{r7}
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	e000e100 	.word	0xe000e100
 8000664:	e000ed00 	.word	0xe000ed00

08000668 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000668:	b480      	push	{r7}
 800066a:	b089      	sub	sp, #36	; 0x24
 800066c:	af00      	add	r7, sp, #0
 800066e:	60f8      	str	r0, [r7, #12]
 8000670:	60b9      	str	r1, [r7, #8]
 8000672:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	f003 0307 	and.w	r3, r3, #7
 800067a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800067c:	69fb      	ldr	r3, [r7, #28]
 800067e:	f1c3 0307 	rsb	r3, r3, #7
 8000682:	2b04      	cmp	r3, #4
 8000684:	bf28      	it	cs
 8000686:	2304      	movcs	r3, #4
 8000688:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800068a:	69fb      	ldr	r3, [r7, #28]
 800068c:	3304      	adds	r3, #4
 800068e:	2b06      	cmp	r3, #6
 8000690:	d902      	bls.n	8000698 <NVIC_EncodePriority+0x30>
 8000692:	69fb      	ldr	r3, [r7, #28]
 8000694:	3b03      	subs	r3, #3
 8000696:	e000      	b.n	800069a <NVIC_EncodePriority+0x32>
 8000698:	2300      	movs	r3, #0
 800069a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800069c:	f04f 32ff 	mov.w	r2, #4294967295
 80006a0:	69bb      	ldr	r3, [r7, #24]
 80006a2:	fa02 f303 	lsl.w	r3, r2, r3
 80006a6:	43da      	mvns	r2, r3
 80006a8:	68bb      	ldr	r3, [r7, #8]
 80006aa:	401a      	ands	r2, r3
 80006ac:	697b      	ldr	r3, [r7, #20]
 80006ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006b0:	f04f 31ff 	mov.w	r1, #4294967295
 80006b4:	697b      	ldr	r3, [r7, #20]
 80006b6:	fa01 f303 	lsl.w	r3, r1, r3
 80006ba:	43d9      	mvns	r1, r3
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006c0:	4313      	orrs	r3, r2
         );
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	3724      	adds	r7, #36	; 0x24
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bc80      	pop	{r7}
 80006ca:	4770      	bx	lr

080006cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	3b01      	subs	r3, #1
 80006d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80006dc:	d301      	bcc.n	80006e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006de:	2301      	movs	r3, #1
 80006e0:	e00f      	b.n	8000702 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006e2:	4a0a      	ldr	r2, [pc, #40]	; (800070c <SysTick_Config+0x40>)
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	3b01      	subs	r3, #1
 80006e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80006ea:	210f      	movs	r1, #15
 80006ec:	f04f 30ff 	mov.w	r0, #4294967295
 80006f0:	f7ff ff90 	bl	8000614 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006f4:	4b05      	ldr	r3, [pc, #20]	; (800070c <SysTick_Config+0x40>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006fa:	4b04      	ldr	r3, [pc, #16]	; (800070c <SysTick_Config+0x40>)
 80006fc:	2207      	movs	r2, #7
 80006fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000700:	2300      	movs	r3, #0
}
 8000702:	4618      	mov	r0, r3
 8000704:	3708      	adds	r7, #8
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	e000e010 	.word	0xe000e010

08000710 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000718:	6878      	ldr	r0, [r7, #4]
 800071a:	f7ff ff2d 	bl	8000578 <__NVIC_SetPriorityGrouping>
}
 800071e:	bf00      	nop
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}

08000726 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000726:	b580      	push	{r7, lr}
 8000728:	b086      	sub	sp, #24
 800072a:	af00      	add	r7, sp, #0
 800072c:	4603      	mov	r3, r0
 800072e:	60b9      	str	r1, [r7, #8]
 8000730:	607a      	str	r2, [r7, #4]
 8000732:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000734:	f7ff ff44 	bl	80005c0 <__NVIC_GetPriorityGrouping>
 8000738:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800073a:	687a      	ldr	r2, [r7, #4]
 800073c:	68b9      	ldr	r1, [r7, #8]
 800073e:	6978      	ldr	r0, [r7, #20]
 8000740:	f7ff ff92 	bl	8000668 <NVIC_EncodePriority>
 8000744:	4602      	mov	r2, r0
 8000746:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800074a:	4611      	mov	r1, r2
 800074c:	4618      	mov	r0, r3
 800074e:	f7ff ff61 	bl	8000614 <__NVIC_SetPriority>
}
 8000752:	bf00      	nop
 8000754:	3718      	adds	r7, #24
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}

0800075a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800075a:	b580      	push	{r7, lr}
 800075c:	b082      	sub	sp, #8
 800075e:	af00      	add	r7, sp, #0
 8000760:	4603      	mov	r3, r0
 8000762:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000764:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000768:	4618      	mov	r0, r3
 800076a:	f7ff ff37 	bl	80005dc <__NVIC_EnableIRQ>
}
 800076e:	bf00      	nop
 8000770:	3708      	adds	r7, #8
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}

08000776 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000776:	b580      	push	{r7, lr}
 8000778:	b082      	sub	sp, #8
 800077a:	af00      	add	r7, sp, #0
 800077c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800077e:	6878      	ldr	r0, [r7, #4]
 8000780:	f7ff ffa4 	bl	80006cc <SysTick_Config>
 8000784:	4603      	mov	r3, r0
}
 8000786:	4618      	mov	r0, r3
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
	...

08000790 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000790:	b480      	push	{r7}
 8000792:	b087      	sub	sp, #28
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
 8000798:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800079a:	2300      	movs	r3, #0
 800079c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800079e:	e140      	b.n	8000a22 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80007a0:	683b      	ldr	r3, [r7, #0]
 80007a2:	681a      	ldr	r2, [r3, #0]
 80007a4:	2101      	movs	r1, #1
 80007a6:	697b      	ldr	r3, [r7, #20]
 80007a8:	fa01 f303 	lsl.w	r3, r1, r3
 80007ac:	4013      	ands	r3, r2
 80007ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	f000 8132 	beq.w	8000a1c <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	685b      	ldr	r3, [r3, #4]
 80007bc:	f003 0303 	and.w	r3, r3, #3
 80007c0:	2b01      	cmp	r3, #1
 80007c2:	d005      	beq.n	80007d0 <HAL_GPIO_Init+0x40>
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	685b      	ldr	r3, [r3, #4]
 80007c8:	f003 0303 	and.w	r3, r3, #3
 80007cc:	2b02      	cmp	r3, #2
 80007ce:	d130      	bne.n	8000832 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	689b      	ldr	r3, [r3, #8]
 80007d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80007d6:	697b      	ldr	r3, [r7, #20]
 80007d8:	005b      	lsls	r3, r3, #1
 80007da:	2203      	movs	r2, #3
 80007dc:	fa02 f303 	lsl.w	r3, r2, r3
 80007e0:	43db      	mvns	r3, r3
 80007e2:	693a      	ldr	r2, [r7, #16]
 80007e4:	4013      	ands	r3, r2
 80007e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	68da      	ldr	r2, [r3, #12]
 80007ec:	697b      	ldr	r3, [r7, #20]
 80007ee:	005b      	lsls	r3, r3, #1
 80007f0:	fa02 f303 	lsl.w	r3, r2, r3
 80007f4:	693a      	ldr	r2, [r7, #16]
 80007f6:	4313      	orrs	r3, r2
 80007f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	693a      	ldr	r2, [r7, #16]
 80007fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	685b      	ldr	r3, [r3, #4]
 8000804:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000806:	2201      	movs	r2, #1
 8000808:	697b      	ldr	r3, [r7, #20]
 800080a:	fa02 f303 	lsl.w	r3, r2, r3
 800080e:	43db      	mvns	r3, r3
 8000810:	693a      	ldr	r2, [r7, #16]
 8000812:	4013      	ands	r3, r2
 8000814:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	685b      	ldr	r3, [r3, #4]
 800081a:	091b      	lsrs	r3, r3, #4
 800081c:	f003 0201 	and.w	r2, r3, #1
 8000820:	697b      	ldr	r3, [r7, #20]
 8000822:	fa02 f303 	lsl.w	r3, r2, r3
 8000826:	693a      	ldr	r2, [r7, #16]
 8000828:	4313      	orrs	r3, r2
 800082a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	693a      	ldr	r2, [r7, #16]
 8000830:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	685b      	ldr	r3, [r3, #4]
 8000836:	f003 0303 	and.w	r3, r3, #3
 800083a:	2b03      	cmp	r3, #3
 800083c:	d017      	beq.n	800086e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	68db      	ldr	r3, [r3, #12]
 8000842:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000844:	697b      	ldr	r3, [r7, #20]
 8000846:	005b      	lsls	r3, r3, #1
 8000848:	2203      	movs	r2, #3
 800084a:	fa02 f303 	lsl.w	r3, r2, r3
 800084e:	43db      	mvns	r3, r3
 8000850:	693a      	ldr	r2, [r7, #16]
 8000852:	4013      	ands	r3, r2
 8000854:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	689a      	ldr	r2, [r3, #8]
 800085a:	697b      	ldr	r3, [r7, #20]
 800085c:	005b      	lsls	r3, r3, #1
 800085e:	fa02 f303 	lsl.w	r3, r2, r3
 8000862:	693a      	ldr	r2, [r7, #16]
 8000864:	4313      	orrs	r3, r2
 8000866:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	693a      	ldr	r2, [r7, #16]
 800086c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	685b      	ldr	r3, [r3, #4]
 8000872:	f003 0303 	and.w	r3, r3, #3
 8000876:	2b02      	cmp	r3, #2
 8000878:	d123      	bne.n	80008c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800087a:	697b      	ldr	r3, [r7, #20]
 800087c:	08da      	lsrs	r2, r3, #3
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	3208      	adds	r2, #8
 8000882:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000886:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000888:	697b      	ldr	r3, [r7, #20]
 800088a:	f003 0307 	and.w	r3, r3, #7
 800088e:	009b      	lsls	r3, r3, #2
 8000890:	220f      	movs	r2, #15
 8000892:	fa02 f303 	lsl.w	r3, r2, r3
 8000896:	43db      	mvns	r3, r3
 8000898:	693a      	ldr	r2, [r7, #16]
 800089a:	4013      	ands	r3, r2
 800089c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	691a      	ldr	r2, [r3, #16]
 80008a2:	697b      	ldr	r3, [r7, #20]
 80008a4:	f003 0307 	and.w	r3, r3, #7
 80008a8:	009b      	lsls	r3, r3, #2
 80008aa:	fa02 f303 	lsl.w	r3, r2, r3
 80008ae:	693a      	ldr	r2, [r7, #16]
 80008b0:	4313      	orrs	r3, r2
 80008b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80008b4:	697b      	ldr	r3, [r7, #20]
 80008b6:	08da      	lsrs	r2, r3, #3
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	3208      	adds	r2, #8
 80008bc:	6939      	ldr	r1, [r7, #16]
 80008be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80008c8:	697b      	ldr	r3, [r7, #20]
 80008ca:	005b      	lsls	r3, r3, #1
 80008cc:	2203      	movs	r2, #3
 80008ce:	fa02 f303 	lsl.w	r3, r2, r3
 80008d2:	43db      	mvns	r3, r3
 80008d4:	693a      	ldr	r2, [r7, #16]
 80008d6:	4013      	ands	r3, r2
 80008d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	685b      	ldr	r3, [r3, #4]
 80008de:	f003 0203 	and.w	r2, r3, #3
 80008e2:	697b      	ldr	r3, [r7, #20]
 80008e4:	005b      	lsls	r3, r3, #1
 80008e6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ea:	693a      	ldr	r2, [r7, #16]
 80008ec:	4313      	orrs	r3, r2
 80008ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	693a      	ldr	r2, [r7, #16]
 80008f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	685b      	ldr	r3, [r3, #4]
 80008fa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80008fe:	2b00      	cmp	r3, #0
 8000900:	f000 808c 	beq.w	8000a1c <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8000904:	4a4e      	ldr	r2, [pc, #312]	; (8000a40 <HAL_GPIO_Init+0x2b0>)
 8000906:	697b      	ldr	r3, [r7, #20]
 8000908:	089b      	lsrs	r3, r3, #2
 800090a:	3302      	adds	r3, #2
 800090c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000910:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8000912:	697b      	ldr	r3, [r7, #20]
 8000914:	f003 0303 	and.w	r3, r3, #3
 8000918:	009b      	lsls	r3, r3, #2
 800091a:	2207      	movs	r2, #7
 800091c:	fa02 f303 	lsl.w	r3, r2, r3
 8000920:	43db      	mvns	r3, r3
 8000922:	693a      	ldr	r2, [r7, #16]
 8000924:	4013      	ands	r3, r2
 8000926:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800092e:	d00d      	beq.n	800094c <HAL_GPIO_Init+0x1bc>
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	4a44      	ldr	r2, [pc, #272]	; (8000a44 <HAL_GPIO_Init+0x2b4>)
 8000934:	4293      	cmp	r3, r2
 8000936:	d007      	beq.n	8000948 <HAL_GPIO_Init+0x1b8>
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	4a43      	ldr	r2, [pc, #268]	; (8000a48 <HAL_GPIO_Init+0x2b8>)
 800093c:	4293      	cmp	r3, r2
 800093e:	d101      	bne.n	8000944 <HAL_GPIO_Init+0x1b4>
 8000940:	2302      	movs	r3, #2
 8000942:	e004      	b.n	800094e <HAL_GPIO_Init+0x1be>
 8000944:	2307      	movs	r3, #7
 8000946:	e002      	b.n	800094e <HAL_GPIO_Init+0x1be>
 8000948:	2301      	movs	r3, #1
 800094a:	e000      	b.n	800094e <HAL_GPIO_Init+0x1be>
 800094c:	2300      	movs	r3, #0
 800094e:	697a      	ldr	r2, [r7, #20]
 8000950:	f002 0203 	and.w	r2, r2, #3
 8000954:	0092      	lsls	r2, r2, #2
 8000956:	4093      	lsls	r3, r2
 8000958:	693a      	ldr	r2, [r7, #16]
 800095a:	4313      	orrs	r3, r2
 800095c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800095e:	4938      	ldr	r1, [pc, #224]	; (8000a40 <HAL_GPIO_Init+0x2b0>)
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	089b      	lsrs	r3, r3, #2
 8000964:	3302      	adds	r3, #2
 8000966:	693a      	ldr	r2, [r7, #16]
 8000968:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 800096c:	4b37      	ldr	r3, [pc, #220]	; (8000a4c <HAL_GPIO_Init+0x2bc>)
 800096e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000972:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	43db      	mvns	r3, r3
 8000978:	693a      	ldr	r2, [r7, #16]
 800097a:	4013      	ands	r3, r2
 800097c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	685b      	ldr	r3, [r3, #4]
 8000982:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000986:	2b00      	cmp	r3, #0
 8000988:	d003      	beq.n	8000992 <HAL_GPIO_Init+0x202>
        {
          temp |= iocurrent;
 800098a:	693a      	ldr	r2, [r7, #16]
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	4313      	orrs	r3, r2
 8000990:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8000992:	4a2e      	ldr	r2, [pc, #184]	; (8000a4c <HAL_GPIO_Init+0x2bc>)
 8000994:	693b      	ldr	r3, [r7, #16]
 8000996:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 800099a:	4b2c      	ldr	r3, [pc, #176]	; (8000a4c <HAL_GPIO_Init+0x2bc>)
 800099c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80009a0:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	43db      	mvns	r3, r3
 80009a6:	693a      	ldr	r2, [r7, #16]
 80009a8:	4013      	ands	r3, r2
 80009aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	685b      	ldr	r3, [r3, #4]
 80009b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d003      	beq.n	80009c0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80009b8:	693a      	ldr	r2, [r7, #16]
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	4313      	orrs	r3, r2
 80009be:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80009c0:	4a22      	ldr	r2, [pc, #136]	; (8000a4c <HAL_GPIO_Init+0x2bc>)
 80009c2:	693b      	ldr	r3, [r7, #16]
 80009c4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80009c8:	4b20      	ldr	r3, [pc, #128]	; (8000a4c <HAL_GPIO_Init+0x2bc>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	43db      	mvns	r3, r3
 80009d2:	693a      	ldr	r2, [r7, #16]
 80009d4:	4013      	ands	r3, r2
 80009d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	685b      	ldr	r3, [r3, #4]
 80009dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d003      	beq.n	80009ec <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80009e4:	693a      	ldr	r2, [r7, #16]
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	4313      	orrs	r3, r2
 80009ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80009ec:	4a17      	ldr	r2, [pc, #92]	; (8000a4c <HAL_GPIO_Init+0x2bc>)
 80009ee:	693b      	ldr	r3, [r7, #16]
 80009f0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80009f2:	4b16      	ldr	r3, [pc, #88]	; (8000a4c <HAL_GPIO_Init+0x2bc>)
 80009f4:	685b      	ldr	r3, [r3, #4]
 80009f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	43db      	mvns	r3, r3
 80009fc:	693a      	ldr	r2, [r7, #16]
 80009fe:	4013      	ands	r3, r2
 8000a00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	685b      	ldr	r3, [r3, #4]
 8000a06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d003      	beq.n	8000a16 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000a0e:	693a      	ldr	r2, [r7, #16]
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	4313      	orrs	r3, r2
 8000a14:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000a16:	4a0d      	ldr	r2, [pc, #52]	; (8000a4c <HAL_GPIO_Init+0x2bc>)
 8000a18:	693b      	ldr	r3, [r7, #16]
 8000a1a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	3301      	adds	r3, #1
 8000a20:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	681a      	ldr	r2, [r3, #0]
 8000a26:	697b      	ldr	r3, [r7, #20]
 8000a28:	fa22 f303 	lsr.w	r3, r2, r3
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	f47f aeb7 	bne.w	80007a0 <HAL_GPIO_Init+0x10>
  }
}
 8000a32:	bf00      	nop
 8000a34:	bf00      	nop
 8000a36:	371c      	adds	r7, #28
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bc80      	pop	{r7}
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	40010000 	.word	0x40010000
 8000a44:	48000400 	.word	0x48000400
 8000a48:	48000800 	.word	0x48000800
 8000a4c:	58000800 	.word	0x58000800

08000a50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
 8000a58:	460b      	mov	r3, r1
 8000a5a:	807b      	strh	r3, [r7, #2]
 8000a5c:	4613      	mov	r3, r2
 8000a5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000a60:	787b      	ldrb	r3, [r7, #1]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d003      	beq.n	8000a6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000a66:	887a      	ldrh	r2, [r7, #2]
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000a6c:	e002      	b.n	8000a74 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000a6e:	887a      	ldrh	r2, [r7, #2]
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000a74:	bf00      	nop
 8000a76:	370c      	adds	r7, #12
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bc80      	pop	{r7}
 8000a7c:	4770      	bx	lr

08000a7e <HAL_GPIO_TogglePin>:
  * @param GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	b085      	sub	sp, #20
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	6078      	str	r0, [r7, #4]
 8000a86:	460b      	mov	r3, r1
 8000a88:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	695b      	ldr	r3, [r3, #20]
 8000a8e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000a90:	887a      	ldrh	r2, [r7, #2]
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	4013      	ands	r3, r2
 8000a96:	041a      	lsls	r2, r3, #16
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	43d9      	mvns	r1, r3
 8000a9c:	887b      	ldrh	r3, [r7, #2]
 8000a9e:	400b      	ands	r3, r1
 8000aa0:	431a      	orrs	r2, r3
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	619a      	str	r2, [r3, #24]
}
 8000aa6:	bf00      	nop
 8000aa8:	3714      	adds	r7, #20
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bc80      	pop	{r7}
 8000aae:	4770      	bx	lr

08000ab0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000aba:	4b08      	ldr	r3, [pc, #32]	; (8000adc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000abc:	68da      	ldr	r2, [r3, #12]
 8000abe:	88fb      	ldrh	r3, [r7, #6]
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d006      	beq.n	8000ad4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000ac6:	4a05      	ldr	r2, [pc, #20]	; (8000adc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ac8:	88fb      	ldrh	r3, [r7, #6]
 8000aca:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000acc:	88fb      	ldrh	r3, [r7, #6]
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f7ff fc2e 	bl	8000330 <HAL_GPIO_EXTI_Callback>
  }
}
 8000ad4:	bf00      	nop
 8000ad6:	3708      	adds	r7, #8
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	58000800 	.word	0x58000800

08000ae0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000ae4:	4b04      	ldr	r3, [pc, #16]	; (8000af8 <HAL_PWR_EnableBkUpAccess+0x18>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a03      	ldr	r2, [pc, #12]	; (8000af8 <HAL_PWR_EnableBkUpAccess+0x18>)
 8000aea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aee:	6013      	str	r3, [r2, #0]
}
 8000af0:	bf00      	nop
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bc80      	pop	{r7}
 8000af6:	4770      	bx	lr
 8000af8:	58000400 	.word	0x58000400

08000afc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8000b00:	4b03      	ldr	r3, [pc, #12]	; (8000b10 <HAL_PWREx_GetVoltageRange+0x14>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bc80      	pop	{r7}
 8000b0e:	4770      	bx	lr
 8000b10:	58000400 	.word	0x58000400

08000b14 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8000b18:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b24:	d101      	bne.n	8000b2a <LL_PWR_IsEnabledBkUpAccess+0x16>
 8000b26:	2301      	movs	r3, #1
 8000b28:	e000      	b.n	8000b2c <LL_PWR_IsEnabledBkUpAccess+0x18>
 8000b2a:	2300      	movs	r3, #0
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bc80      	pop	{r7}
 8000b32:	4770      	bx	lr
 8000b34:	58000400 	.word	0x58000400

08000b38 <LL_RCC_HSE_EnableTcxo>:
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8000b3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000b46:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b4a:	6013      	str	r3, [r2, #0]
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bc80      	pop	{r7}
 8000b52:	4770      	bx	lr

08000b54 <LL_RCC_HSE_DisableTcxo>:
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8000b58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000b62:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000b66:	6013      	str	r3, [r2, #0]
}
 8000b68:	bf00      	nop
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bc80      	pop	{r7}
 8000b6e:	4770      	bx	lr

08000b70 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8000b74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000b82:	d101      	bne.n	8000b88 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8000b84:	2301      	movs	r3, #1
 8000b86:	e000      	b.n	8000b8a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8000b88:	2300      	movs	r3, #0
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bc80      	pop	{r7}
 8000b90:	4770      	bx	lr

08000b92 <LL_RCC_HSE_Enable>:
{
 8000b92:	b480      	push	{r7}
 8000b94:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000b96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ba0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ba4:	6013      	str	r3, [r2, #0]
}
 8000ba6:	bf00      	nop
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bc80      	pop	{r7}
 8000bac:	4770      	bx	lr

08000bae <LL_RCC_HSE_Disable>:
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8000bb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000bbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bc0:	6013      	str	r3, [r2, #0]
}
 8000bc2:	bf00      	nop
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bc80      	pop	{r7}
 8000bc8:	4770      	bx	lr

08000bca <LL_RCC_HSE_IsReady>:
{
 8000bca:	b480      	push	{r7}
 8000bcc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8000bce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bd8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000bdc:	d101      	bne.n	8000be2 <LL_RCC_HSE_IsReady+0x18>
 8000bde:	2301      	movs	r3, #1
 8000be0:	e000      	b.n	8000be4 <LL_RCC_HSE_IsReady+0x1a>
 8000be2:	2300      	movs	r3, #0
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bc80      	pop	{r7}
 8000bea:	4770      	bx	lr

08000bec <LL_RCC_HSI_Enable>:
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000bf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000bfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bfe:	6013      	str	r3, [r2, #0]
}
 8000c00:	bf00      	nop
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bc80      	pop	{r7}
 8000c06:	4770      	bx	lr

08000c08 <LL_RCC_HSI_Disable>:
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8000c0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000c16:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000c1a:	6013      	str	r3, [r2, #0]
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bc80      	pop	{r7}
 8000c22:	4770      	bx	lr

08000c24 <LL_RCC_HSI_IsReady>:
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8000c28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c36:	d101      	bne.n	8000c3c <LL_RCC_HSI_IsReady+0x18>
 8000c38:	2301      	movs	r3, #1
 8000c3a:	e000      	b.n	8000c3e <LL_RCC_HSI_IsReady+0x1a>
 8000c3c:	2300      	movs	r3, #0
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bc80      	pop	{r7}
 8000c44:	4770      	bx	lr

08000c46 <LL_RCC_HSI_SetCalibTrimming>:
{
 8000c46:	b480      	push	{r7}
 8000c48:	b083      	sub	sp, #12
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8000c4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	061b      	lsls	r3, r3, #24
 8000c5c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c60:	4313      	orrs	r3, r2
 8000c62:	604b      	str	r3, [r1, #4]
}
 8000c64:	bf00      	nop
 8000c66:	370c      	adds	r7, #12
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bc80      	pop	{r7}
 8000c6c:	4770      	bx	lr

08000c6e <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8000c72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000c7a:	f003 0302 	and.w	r3, r3, #2
 8000c7e:	2b02      	cmp	r3, #2
 8000c80:	d101      	bne.n	8000c86 <LL_RCC_LSE_IsReady+0x18>
 8000c82:	2301      	movs	r3, #1
 8000c84:	e000      	b.n	8000c88 <LL_RCC_LSE_IsReady+0x1a>
 8000c86:	2300      	movs	r3, #0
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bc80      	pop	{r7}
 8000c8e:	4770      	bx	lr

08000c90 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8000c94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000c9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ca0:	f043 0301 	orr.w	r3, r3, #1
 8000ca4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8000ca8:	bf00      	nop
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bc80      	pop	{r7}
 8000cae:	4770      	bx	lr

08000cb0 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8000cb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000cbc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000cc0:	f023 0301 	bic.w	r3, r3, #1
 8000cc4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8000cc8:	bf00      	nop
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bc80      	pop	{r7}
 8000cce:	4770      	bx	lr

08000cd0 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8000cd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000cdc:	f003 0302 	and.w	r3, r3, #2
 8000ce0:	2b02      	cmp	r3, #2
 8000ce2:	d101      	bne.n	8000ce8 <LL_RCC_LSI_IsReady+0x18>
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	e000      	b.n	8000cea <LL_RCC_LSI_IsReady+0x1a>
 8000ce8:	2300      	movs	r3, #0
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bc80      	pop	{r7}
 8000cf0:	4770      	bx	lr

08000cf2 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8000cf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d00:	f043 0301 	orr.w	r3, r3, #1
 8000d04:	6013      	str	r3, [r2, #0]
}
 8000d06:	bf00      	nop
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bc80      	pop	{r7}
 8000d0c:	4770      	bx	lr

08000d0e <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8000d12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d1c:	f023 0301 	bic.w	r3, r3, #1
 8000d20:	6013      	str	r3, [r2, #0]
}
 8000d22:	bf00      	nop
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bc80      	pop	{r7}
 8000d28:	4770      	bx	lr

08000d2a <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8000d2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f003 0302 	and.w	r3, r3, #2
 8000d38:	2b02      	cmp	r3, #2
 8000d3a:	d101      	bne.n	8000d40 <LL_RCC_MSI_IsReady+0x16>
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	e000      	b.n	8000d42 <LL_RCC_MSI_IsReady+0x18>
 8000d40:	2300      	movs	r3, #0
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bc80      	pop	{r7}
 8000d48:	4770      	bx	lr

08000d4a <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8000d4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f003 0308 	and.w	r3, r3, #8
 8000d58:	2b08      	cmp	r3, #8
 8000d5a:	d101      	bne.n	8000d60 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	e000      	b.n	8000d62 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8000d60:	2300      	movs	r3, #0
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bc80      	pop	{r7}
 8000d68:	4770      	bx	lr

08000d6a <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8000d6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bc80      	pop	{r7}
 8000d7e:	4770      	bx	lr

08000d80 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8000d84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000d8c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bc80      	pop	{r7}
 8000d96:	4770      	bx	lr

08000d98 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8000da0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	021b      	lsls	r3, r3, #8
 8000dae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000db2:	4313      	orrs	r3, r2
 8000db4:	604b      	str	r3, [r1, #4]
}
 8000db6:	bf00      	nop
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bc80      	pop	{r7}
 8000dbe:	4770      	bx	lr

08000dc0 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000dc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dcc:	689b      	ldr	r3, [r3, #8]
 8000dce:	f023 0203 	bic.w	r2, r3, #3
 8000dd2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	608b      	str	r3, [r1, #8]
}
 8000ddc:	bf00      	nop
 8000dde:	370c      	adds	r7, #12
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bc80      	pop	{r7}
 8000de4:	4770      	bx	lr

08000de6 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000de6:	b480      	push	{r7}
 8000de8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000dea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dee:	689b      	ldr	r3, [r3, #8]
 8000df0:	f003 030c 	and.w	r3, r3, #12
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bc80      	pop	{r7}
 8000dfa:	4770      	bx	lr

08000dfc <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000e04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e08:	689b      	ldr	r3, [r3, #8]
 8000e0a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	608b      	str	r3, [r1, #8]
}
 8000e18:	bf00      	nop
 8000e1a:	370c      	adds	r7, #12
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bc80      	pop	{r7}
 8000e20:	4770      	bx	lr

08000e22 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8000e22:	b480      	push	{r7}
 8000e24:	b083      	sub	sp, #12
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8000e2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e2e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000e32:	f023 020f 	bic.w	r2, r3, #15
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	091b      	lsrs	r3, r3, #4
 8000e3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8000e44:	bf00      	nop
 8000e46:	370c      	adds	r7, #12
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bc80      	pop	{r7}
 8000e4c:	4770      	bx	lr

08000e4e <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	b083      	sub	sp, #12
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000e56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e5a:	689b      	ldr	r3, [r3, #8]
 8000e5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000e60:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	4313      	orrs	r3, r2
 8000e68:	608b      	str	r3, [r1, #8]
}
 8000e6a:	bf00      	nop
 8000e6c:	370c      	adds	r7, #12
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bc80      	pop	{r7}
 8000e72:	4770      	bx	lr

08000e74 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000e7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e80:	689b      	ldr	r3, [r3, #8]
 8000e82:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000e86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	608b      	str	r3, [r1, #8]
}
 8000e90:	bf00      	nop
 8000e92:	370c      	adds	r7, #12
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bc80      	pop	{r7}
 8000e98:	4770      	bx	lr

08000e9a <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8000e9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ea2:	689b      	ldr	r3, [r3, #8]
 8000ea4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bc80      	pop	{r7}
 8000eae:	4770      	bx	lr

08000eb0 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8000eb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eb8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000ebc:	011b      	lsls	r3, r3, #4
 8000ebe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bc80      	pop	{r7}
 8000ec8:	4770      	bx	lr

08000eca <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000ece:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ed8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000edc:	6013      	str	r3, [r2, #0]
}
 8000ede:	bf00      	nop
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bc80      	pop	{r7}
 8000ee4:	4770      	bx	lr

08000ee6 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8000eea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ef4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000ef8:	6013      	str	r3, [r2, #0]
}
 8000efa:	bf00      	nop
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bc80      	pop	{r7}
 8000f00:	4770      	bx	lr

08000f02 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000f02:	b480      	push	{r7}
 8000f04:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8000f06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f10:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000f14:	d101      	bne.n	8000f1a <LL_RCC_PLL_IsReady+0x18>
 8000f16:	2301      	movs	r3, #1
 8000f18:	e000      	b.n	8000f1c <LL_RCC_PLL_IsReady+0x1a>
 8000f1a:	2300      	movs	r3, #0
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bc80      	pop	{r7}
 8000f22:	4770      	bx	lr

08000f24 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8000f28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f2c:	68db      	ldr	r3, [r3, #12]
 8000f2e:	0a1b      	lsrs	r3, r3, #8
 8000f30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bc80      	pop	{r7}
 8000f3a:	4770      	bx	lr

08000f3c <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8000f40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f44:	68db      	ldr	r3, [r3, #12]
 8000f46:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bc80      	pop	{r7}
 8000f50:	4770      	bx	lr

08000f52 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8000f52:	b480      	push	{r7}
 8000f54:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8000f56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bc80      	pop	{r7}
 8000f66:	4770      	bx	lr

08000f68 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8000f6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f70:	68db      	ldr	r3, [r3, #12]
 8000f72:	f003 0303 	and.w	r3, r3, #3
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bc80      	pop	{r7}
 8000f7c:	4770      	bx	lr

08000f7e <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8000f82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f86:	689b      	ldr	r3, [r3, #8]
 8000f88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f90:	d101      	bne.n	8000f96 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8000f92:	2301      	movs	r3, #1
 8000f94:	e000      	b.n	8000f98 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8000f96:	2300      	movs	r3, #0
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bc80      	pop	{r7}
 8000f9e:	4770      	bx	lr

08000fa0 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8000fa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fa8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000fac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fb4:	d101      	bne.n	8000fba <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e000      	b.n	8000fbc <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8000fba:	2300      	movs	r3, #0
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bc80      	pop	{r7}
 8000fc2:	4770      	bx	lr

08000fc4 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8000fc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fd2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000fd6:	d101      	bne.n	8000fdc <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8000fd8:	2301      	movs	r3, #1
 8000fda:	e000      	b.n	8000fde <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8000fdc:	2300      	movs	r3, #0
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bc80      	pop	{r7}
 8000fe4:	4770      	bx	lr

08000fe6 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8000fea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ff4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8000ff8:	d101      	bne.n	8000ffe <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e000      	b.n	8001000 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8000ffe:	2300      	movs	r3, #0
}
 8001000:	4618      	mov	r0, r3
 8001002:	46bd      	mov	sp, r7
 8001004:	bc80      	pop	{r7}
 8001006:	4770      	bx	lr

08001008 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b088      	sub	sp, #32
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d101      	bne.n	800101a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	e38a      	b.n	8001730 <HAL_RCC_OscConfig+0x728>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800101a:	f7ff fee4 	bl	8000de6 <LL_RCC_GetSysClkSource>
 800101e:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001020:	f7ff ffa2 	bl	8000f68 <LL_RCC_PLL_GetMainSource>
 8001024:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f003 0320 	and.w	r3, r3, #32
 800102e:	2b00      	cmp	r3, #0
 8001030:	f000 80c9 	beq.w	80011c6 <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d005      	beq.n	8001046 <HAL_RCC_OscConfig+0x3e>
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	2b0c      	cmp	r3, #12
 800103e:	d17b      	bne.n	8001138 <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001040:	69bb      	ldr	r3, [r7, #24]
 8001042:	2b01      	cmp	r3, #1
 8001044:	d178      	bne.n	8001138 <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001046:	f7ff fe70 	bl	8000d2a <LL_RCC_MSI_IsReady>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d005      	beq.n	800105c <HAL_RCC_OscConfig+0x54>
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6a1b      	ldr	r3, [r3, #32]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d101      	bne.n	800105c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8001058:	2301      	movs	r3, #1
 800105a:	e369      	b.n	8001730 <HAL_RCC_OscConfig+0x728>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001060:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f003 0308 	and.w	r3, r3, #8
 800106a:	2b00      	cmp	r3, #0
 800106c:	d005      	beq.n	800107a <HAL_RCC_OscConfig+0x72>
 800106e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001078:	e006      	b.n	8001088 <HAL_RCC_OscConfig+0x80>
 800107a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800107e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001082:	091b      	lsrs	r3, r3, #4
 8001084:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001088:	4293      	cmp	r3, r2
 800108a:	d222      	bcs.n	80010d2 <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001090:	4618      	mov	r0, r3
 8001092:	f000 fd2b 	bl	8001aec <RCC_SetFlashLatencyFromMSIRange>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 800109c:	2301      	movs	r3, #1
 800109e:	e347      	b.n	8001730 <HAL_RCC_OscConfig+0x728>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80010aa:	f043 0308 	orr.w	r3, r3, #8
 80010ae:	6013      	str	r3, [r2, #0]
 80010b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80010c2:	4313      	orrs	r3, r2
 80010c4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ca:	4618      	mov	r0, r3
 80010cc:	f7ff fe64 	bl	8000d98 <LL_RCC_MSI_SetCalibTrimming>
 80010d0:	e021      	b.n	8001116 <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80010dc:	f043 0308 	orr.w	r3, r3, #8
 80010e0:	6013      	str	r3, [r2, #0]
 80010e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80010f4:	4313      	orrs	r3, r2
 80010f6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff fe4b 	bl	8000d98 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001106:	4618      	mov	r0, r3
 8001108:	f000 fcf0 	bl	8001aec <RCC_SetFlashLatencyFromMSIRange>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	e30c      	b.n	8001730 <HAL_RCC_OscConfig+0x728>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001116:	f000 fcd5 	bl	8001ac4 <HAL_RCC_GetHCLKFreq>
 800111a:	4603      	mov	r3, r0
 800111c:	4ab4      	ldr	r2, [pc, #720]	; (80013f0 <HAL_RCC_OscConfig+0x3e8>)
 800111e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001120:	4bb4      	ldr	r3, [pc, #720]	; (80013f4 <HAL_RCC_OscConfig+0x3ec>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff f9ad 	bl	8000484 <HAL_InitTick>
 800112a:	4603      	mov	r3, r0
 800112c:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 800112e:	7cfb      	ldrb	r3, [r7, #19]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d047      	beq.n	80011c4 <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 8001134:	7cfb      	ldrb	r3, [r7, #19]
 8001136:	e2fb      	b.n	8001730 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6a1b      	ldr	r3, [r3, #32]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d02c      	beq.n	800119a <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001140:	f7ff fdd7 	bl	8000cf2 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001144:	f7ff f9ea 	bl	800051c <HAL_GetTick>
 8001148:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800114a:	e008      	b.n	800115e <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800114c:	f7ff f9e6 	bl	800051c <HAL_GetTick>
 8001150:	4602      	mov	r2, r0
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	2b02      	cmp	r3, #2
 8001158:	d901      	bls.n	800115e <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 800115a:	2303      	movs	r3, #3
 800115c:	e2e8      	b.n	8001730 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_MSI_IsReady() == 0U)
 800115e:	f7ff fde4 	bl	8000d2a <LL_RCC_MSI_IsReady>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d0f1      	beq.n	800114c <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001168:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001172:	f043 0308 	orr.w	r3, r3, #8
 8001176:	6013      	str	r3, [r2, #0]
 8001178:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001186:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800118a:	4313      	orrs	r3, r2
 800118c:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff fe00 	bl	8000d98 <LL_RCC_MSI_SetCalibTrimming>
 8001198:	e015      	b.n	80011c6 <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800119a:	f7ff fdb8 	bl	8000d0e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800119e:	f7ff f9bd 	bl	800051c <HAL_GetTick>
 80011a2:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80011a4:	e008      	b.n	80011b8 <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80011a6:	f7ff f9b9 	bl	800051c <HAL_GetTick>
 80011aa:	4602      	mov	r2, r0
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	1ad3      	subs	r3, r2, r3
 80011b0:	2b02      	cmp	r3, #2
 80011b2:	d901      	bls.n	80011b8 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80011b4:	2303      	movs	r3, #3
 80011b6:	e2bb      	b.n	8001730 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_MSI_IsReady() != 0U)
 80011b8:	f7ff fdb7 	bl	8000d2a <LL_RCC_MSI_IsReady>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d1f1      	bne.n	80011a6 <HAL_RCC_OscConfig+0x19e>
 80011c2:	e000      	b.n	80011c6 <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80011c4:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f003 0301 	and.w	r3, r3, #1
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d05f      	beq.n	8001292 <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	2b08      	cmp	r3, #8
 80011d6:	d005      	beq.n	80011e4 <HAL_RCC_OscConfig+0x1dc>
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	2b0c      	cmp	r3, #12
 80011dc:	d10d      	bne.n	80011fa <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80011de:	69bb      	ldr	r3, [r7, #24]
 80011e0:	2b03      	cmp	r3, #3
 80011e2:	d10a      	bne.n	80011fa <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011e4:	f7ff fcf1 	bl	8000bca <LL_RCC_HSE_IsReady>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d050      	beq.n	8001290 <HAL_RCC_OscConfig+0x288>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d14c      	bne.n	8001290 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	e29a      	b.n	8001730 <HAL_RCC_OscConfig+0x728>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 80011fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800120c:	4313      	orrs	r3, r2
 800120e:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001218:	d102      	bne.n	8001220 <HAL_RCC_OscConfig+0x218>
 800121a:	f7ff fcba 	bl	8000b92 <LL_RCC_HSE_Enable>
 800121e:	e00d      	b.n	800123c <HAL_RCC_OscConfig+0x234>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8001228:	d104      	bne.n	8001234 <HAL_RCC_OscConfig+0x22c>
 800122a:	f7ff fc85 	bl	8000b38 <LL_RCC_HSE_EnableTcxo>
 800122e:	f7ff fcb0 	bl	8000b92 <LL_RCC_HSE_Enable>
 8001232:	e003      	b.n	800123c <HAL_RCC_OscConfig+0x234>
 8001234:	f7ff fcbb 	bl	8000bae <LL_RCC_HSE_Disable>
 8001238:	f7ff fc8c 	bl	8000b54 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d012      	beq.n	800126a <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001244:	f7ff f96a 	bl	800051c <HAL_GetTick>
 8001248:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800124a:	e008      	b.n	800125e <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800124c:	f7ff f966 	bl	800051c <HAL_GetTick>
 8001250:	4602      	mov	r2, r0
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	2b64      	cmp	r3, #100	; 0x64
 8001258:	d901      	bls.n	800125e <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800125a:	2303      	movs	r3, #3
 800125c:	e268      	b.n	8001730 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSE_IsReady() == 0U)
 800125e:	f7ff fcb4 	bl	8000bca <LL_RCC_HSE_IsReady>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d0f1      	beq.n	800124c <HAL_RCC_OscConfig+0x244>
 8001268:	e013      	b.n	8001292 <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800126a:	f7ff f957 	bl	800051c <HAL_GetTick>
 800126e:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001270:	e008      	b.n	8001284 <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001272:	f7ff f953 	bl	800051c <HAL_GetTick>
 8001276:	4602      	mov	r2, r0
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	1ad3      	subs	r3, r2, r3
 800127c:	2b64      	cmp	r3, #100	; 0x64
 800127e:	d901      	bls.n	8001284 <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 8001280:	2303      	movs	r3, #3
 8001282:	e255      	b.n	8001730 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001284:	f7ff fca1 	bl	8000bca <LL_RCC_HSE_IsReady>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d1f1      	bne.n	8001272 <HAL_RCC_OscConfig+0x26a>
 800128e:	e000      	b.n	8001292 <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001290:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 0302 	and.w	r3, r3, #2
 800129a:	2b00      	cmp	r3, #0
 800129c:	d04b      	beq.n	8001336 <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	2b04      	cmp	r3, #4
 80012a2:	d005      	beq.n	80012b0 <HAL_RCC_OscConfig+0x2a8>
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	2b0c      	cmp	r3, #12
 80012a8:	d113      	bne.n	80012d2 <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	d110      	bne.n	80012d2 <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012b0:	f7ff fcb8 	bl	8000c24 <LL_RCC_HSI_IsReady>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d005      	beq.n	80012c6 <HAL_RCC_OscConfig+0x2be>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	691b      	ldr	r3, [r3, #16]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d101      	bne.n	80012c6 <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e234      	b.n	8001730 <HAL_RCC_OscConfig+0x728>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	695b      	ldr	r3, [r3, #20]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff fcbb 	bl	8000c46 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012d0:	e031      	b.n	8001336 <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	691b      	ldr	r3, [r3, #16]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d019      	beq.n	800130e <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012da:	f7ff fc87 	bl	8000bec <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012de:	f7ff f91d 	bl	800051c <HAL_GetTick>
 80012e2:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80012e4:	e008      	b.n	80012f8 <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012e6:	f7ff f919 	bl	800051c <HAL_GetTick>
 80012ea:	4602      	mov	r2, r0
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	1ad3      	subs	r3, r2, r3
 80012f0:	2b02      	cmp	r3, #2
 80012f2:	d901      	bls.n	80012f8 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 80012f4:	2303      	movs	r3, #3
 80012f6:	e21b      	b.n	8001730 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSI_IsReady() == 0U)
 80012f8:	f7ff fc94 	bl	8000c24 <LL_RCC_HSI_IsReady>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d0f1      	beq.n	80012e6 <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	695b      	ldr	r3, [r3, #20]
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff fc9d 	bl	8000c46 <LL_RCC_HSI_SetCalibTrimming>
 800130c:	e013      	b.n	8001336 <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800130e:	f7ff fc7b 	bl	8000c08 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001312:	f7ff f903 	bl	800051c <HAL_GetTick>
 8001316:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001318:	e008      	b.n	800132c <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800131a:	f7ff f8ff 	bl	800051c <HAL_GetTick>
 800131e:	4602      	mov	r2, r0
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	2b02      	cmp	r3, #2
 8001326:	d901      	bls.n	800132c <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 8001328:	2303      	movs	r3, #3
 800132a:	e201      	b.n	8001730 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSI_IsReady() != 0U)
 800132c:	f7ff fc7a 	bl	8000c24 <LL_RCC_HSI_IsReady>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d1f1      	bne.n	800131a <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 0308 	and.w	r3, r3, #8
 800133e:	2b00      	cmp	r3, #0
 8001340:	d06e      	beq.n	8001420 <HAL_RCC_OscConfig+0x418>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	699b      	ldr	r3, [r3, #24]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d056      	beq.n	80013f8 <HAL_RCC_OscConfig+0x3f0>
    {
      uint32_t csr_temp = RCC->CSR;
 800134a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800134e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001352:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	69da      	ldr	r2, [r3, #28]
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	f003 0310 	and.w	r3, r3, #16
 800135e:	429a      	cmp	r2, r3
 8001360:	d031      	beq.n	80013c6 <HAL_RCC_OscConfig+0x3be>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	f003 0302 	and.w	r3, r3, #2
 8001368:	2b00      	cmp	r3, #0
 800136a:	d006      	beq.n	800137a <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001372:	2b00      	cmp	r3, #0
 8001374:	d101      	bne.n	800137a <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e1da      	b.n	8001730 <HAL_RCC_OscConfig+0x728>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	f003 0301 	and.w	r3, r3, #1
 8001380:	2b00      	cmp	r3, #0
 8001382:	d013      	beq.n	80013ac <HAL_RCC_OscConfig+0x3a4>
        {
          __HAL_RCC_LSI_DISABLE();
 8001384:	f7ff fc94 	bl	8000cb0 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001388:	f7ff f8c8 	bl	800051c <HAL_GetTick>
 800138c:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 800138e:	e008      	b.n	80013a2 <HAL_RCC_OscConfig+0x39a>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001390:	f7ff f8c4 	bl	800051c <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	2b11      	cmp	r3, #17
 800139c:	d901      	bls.n	80013a2 <HAL_RCC_OscConfig+0x39a>
            {
              return HAL_TIMEOUT;
 800139e:	2303      	movs	r3, #3
 80013a0:	e1c6      	b.n	8001730 <HAL_RCC_OscConfig+0x728>
          while (LL_RCC_LSI_IsReady() != 0U)
 80013a2:	f7ff fc95 	bl	8000cd0 <LL_RCC_LSI_IsReady>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d1f1      	bne.n	8001390 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80013ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013b4:	f023 0210 	bic.w	r2, r3, #16
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	69db      	ldr	r3, [r3, #28]
 80013bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013c0:	4313      	orrs	r3, r2
 80013c2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013c6:	f7ff fc63 	bl	8000c90 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013ca:	f7ff f8a7 	bl	800051c <HAL_GetTick>
 80013ce:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 80013d0:	e008      	b.n	80013e4 <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013d2:	f7ff f8a3 	bl	800051c <HAL_GetTick>
 80013d6:	4602      	mov	r2, r0
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	1ad3      	subs	r3, r2, r3
 80013dc:	2b11      	cmp	r3, #17
 80013de:	d901      	bls.n	80013e4 <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 80013e0:	2303      	movs	r3, #3
 80013e2:	e1a5      	b.n	8001730 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSI_IsReady() == 0U)
 80013e4:	f7ff fc74 	bl	8000cd0 <LL_RCC_LSI_IsReady>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d0f1      	beq.n	80013d2 <HAL_RCC_OscConfig+0x3ca>
 80013ee:	e017      	b.n	8001420 <HAL_RCC_OscConfig+0x418>
 80013f0:	20000004 	.word	0x20000004
 80013f4:	20000008 	.word	0x20000008
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013f8:	f7ff fc5a 	bl	8000cb0 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013fc:	f7ff f88e 	bl	800051c <HAL_GetTick>
 8001400:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8001402:	e008      	b.n	8001416 <HAL_RCC_OscConfig+0x40e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001404:	f7ff f88a 	bl	800051c <HAL_GetTick>
 8001408:	4602      	mov	r2, r0
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	2b11      	cmp	r3, #17
 8001410:	d901      	bls.n	8001416 <HAL_RCC_OscConfig+0x40e>
        {
          return HAL_TIMEOUT;
 8001412:	2303      	movs	r3, #3
 8001414:	e18c      	b.n	8001730 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSI_IsReady() != 0U)
 8001416:	f7ff fc5b 	bl	8000cd0 <LL_RCC_LSI_IsReady>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d1f1      	bne.n	8001404 <HAL_RCC_OscConfig+0x3fc>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f003 0304 	and.w	r3, r3, #4
 8001428:	2b00      	cmp	r3, #0
 800142a:	f000 80d8 	beq.w	80015de <HAL_RCC_OscConfig+0x5d6>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800142e:	f7ff fb71 	bl	8000b14 <LL_PWR_IsEnabledBkUpAccess>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d113      	bne.n	8001460 <HAL_RCC_OscConfig+0x458>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8001438:	f7ff fb52 	bl	8000ae0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800143c:	f7ff f86e 	bl	800051c <HAL_GetTick>
 8001440:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001442:	e008      	b.n	8001456 <HAL_RCC_OscConfig+0x44e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001444:	f7ff f86a 	bl	800051c <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	2b02      	cmp	r3, #2
 8001450:	d901      	bls.n	8001456 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001452:	2303      	movs	r3, #3
 8001454:	e16c      	b.n	8001730 <HAL_RCC_OscConfig+0x728>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001456:	f7ff fb5d 	bl	8000b14 <LL_PWR_IsEnabledBkUpAccess>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d0f1      	beq.n	8001444 <HAL_RCC_OscConfig+0x43c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d07b      	beq.n	8001560 <HAL_RCC_OscConfig+0x558>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	2b85      	cmp	r3, #133	; 0x85
 800146e:	d003      	beq.n	8001478 <HAL_RCC_OscConfig+0x470>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	2b05      	cmp	r3, #5
 8001476:	d109      	bne.n	800148c <HAL_RCC_OscConfig+0x484>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001478:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800147c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001480:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001484:	f043 0304 	orr.w	r3, r3, #4
 8001488:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800148c:	f7ff f846 	bl	800051c <HAL_GetTick>
 8001490:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001492:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001496:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800149a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800149e:	f043 0301 	orr.w	r3, r3, #1
 80014a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80014a6:	e00a      	b.n	80014be <HAL_RCC_OscConfig+0x4b6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014a8:	f7ff f838 	bl	800051c <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d901      	bls.n	80014be <HAL_RCC_OscConfig+0x4b6>
        {
          return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e138      	b.n	8001730 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSE_IsReady() == 0U)
 80014be:	f7ff fbd6 	bl	8000c6e <LL_RCC_LSE_IsReady>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d0ef      	beq.n	80014a8 <HAL_RCC_OscConfig+0x4a0>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	2b81      	cmp	r3, #129	; 0x81
 80014ce:	d003      	beq.n	80014d8 <HAL_RCC_OscConfig+0x4d0>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	2b85      	cmp	r3, #133	; 0x85
 80014d6:	d121      	bne.n	800151c <HAL_RCC_OscConfig+0x514>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014d8:	f7ff f820 	bl	800051c <HAL_GetTick>
 80014dc:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80014de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80014ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80014f2:	e00a      	b.n	800150a <HAL_RCC_OscConfig+0x502>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014f4:	f7ff f812 	bl	800051c <HAL_GetTick>
 80014f8:	4602      	mov	r2, r0
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001502:	4293      	cmp	r3, r2
 8001504:	d901      	bls.n	800150a <HAL_RCC_OscConfig+0x502>
          {
            return HAL_TIMEOUT;
 8001506:	2303      	movs	r3, #3
 8001508:	e112      	b.n	8001730 <HAL_RCC_OscConfig+0x728>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800150a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800150e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001512:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001516:	2b00      	cmp	r3, #0
 8001518:	d0ec      	beq.n	80014f4 <HAL_RCC_OscConfig+0x4ec>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800151a:	e060      	b.n	80015de <HAL_RCC_OscConfig+0x5d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800151c:	f7fe fffe 	bl	800051c <HAL_GetTick>
 8001520:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001522:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800152a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800152e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001532:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001536:	e00a      	b.n	800154e <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001538:	f7fe fff0 	bl	800051c <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	f241 3288 	movw	r2, #5000	; 0x1388
 8001546:	4293      	cmp	r3, r2
 8001548:	d901      	bls.n	800154e <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	e0f0      	b.n	8001730 <HAL_RCC_OscConfig+0x728>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800154e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001556:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800155a:	2b00      	cmp	r3, #0
 800155c:	d1ec      	bne.n	8001538 <HAL_RCC_OscConfig+0x530>
 800155e:	e03e      	b.n	80015de <HAL_RCC_OscConfig+0x5d6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001560:	f7fe ffdc 	bl	800051c <HAL_GetTick>
 8001564:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001566:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800156a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800156e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001572:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001576:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800157a:	e00a      	b.n	8001592 <HAL_RCC_OscConfig+0x58a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800157c:	f7fe ffce 	bl	800051c <HAL_GetTick>
 8001580:	4602      	mov	r2, r0
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	f241 3288 	movw	r2, #5000	; 0x1388
 800158a:	4293      	cmp	r3, r2
 800158c:	d901      	bls.n	8001592 <HAL_RCC_OscConfig+0x58a>
        {
          return HAL_TIMEOUT;
 800158e:	2303      	movs	r3, #3
 8001590:	e0ce      	b.n	8001730 <HAL_RCC_OscConfig+0x728>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001592:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001596:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800159a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d1ec      	bne.n	800157c <HAL_RCC_OscConfig+0x574>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015a2:	f7fe ffbb 	bl	800051c <HAL_GetTick>
 80015a6:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80015a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015b4:	f023 0301 	bic.w	r3, r3, #1
 80015b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80015bc:	e00a      	b.n	80015d4 <HAL_RCC_OscConfig+0x5cc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015be:	f7fe ffad 	bl	800051c <HAL_GetTick>
 80015c2:	4602      	mov	r2, r0
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d901      	bls.n	80015d4 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80015d0:	2303      	movs	r3, #3
 80015d2:	e0ad      	b.n	8001730 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSE_IsReady() != 0U)
 80015d4:	f7ff fb4b 	bl	8000c6e <LL_RCC_LSE_IsReady>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d1ef      	bne.n	80015be <HAL_RCC_OscConfig+0x5b6>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	f000 80a3 	beq.w	800172e <HAL_RCC_OscConfig+0x726>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	2b0c      	cmp	r3, #12
 80015ec:	d076      	beq.n	80016dc <HAL_RCC_OscConfig+0x6d4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d14b      	bne.n	800168e <HAL_RCC_OscConfig+0x686>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015f6:	f7ff fc76 	bl	8000ee6 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015fa:	f7fe ff8f 	bl	800051c <HAL_GetTick>
 80015fe:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8001600:	e008      	b.n	8001614 <HAL_RCC_OscConfig+0x60c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001602:	f7fe ff8b 	bl	800051c <HAL_GetTick>
 8001606:	4602      	mov	r2, r0
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	2b0a      	cmp	r3, #10
 800160e:	d901      	bls.n	8001614 <HAL_RCC_OscConfig+0x60c>
          {
            return HAL_TIMEOUT;
 8001610:	2303      	movs	r3, #3
 8001612:	e08d      	b.n	8001730 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() != 0U)
 8001614:	f7ff fc75 	bl	8000f02 <LL_RCC_PLL_IsReady>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d1f1      	bne.n	8001602 <HAL_RCC_OscConfig+0x5fa>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800161e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001622:	68da      	ldr	r2, [r3, #12]
 8001624:	4b44      	ldr	r3, [pc, #272]	; (8001738 <HAL_RCC_OscConfig+0x730>)
 8001626:	4013      	ands	r3, r2
 8001628:	687a      	ldr	r2, [r7, #4]
 800162a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800162c:	687a      	ldr	r2, [r7, #4]
 800162e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001630:	4311      	orrs	r1, r2
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001636:	0212      	lsls	r2, r2, #8
 8001638:	4311      	orrs	r1, r2
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800163e:	4311      	orrs	r1, r2
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001644:	4311      	orrs	r1, r2
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800164a:	430a      	orrs	r2, r1
 800164c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001650:	4313      	orrs	r3, r2
 8001652:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001654:	f7ff fc39 	bl	8000eca <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001658:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800165c:	68db      	ldr	r3, [r3, #12]
 800165e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001662:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001666:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001668:	f7fe ff58 	bl	800051c <HAL_GetTick>
 800166c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 800166e:	e008      	b.n	8001682 <HAL_RCC_OscConfig+0x67a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001670:	f7fe ff54 	bl	800051c <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	2b0a      	cmp	r3, #10
 800167c:	d901      	bls.n	8001682 <HAL_RCC_OscConfig+0x67a>
          {
            return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e056      	b.n	8001730 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() == 0U)
 8001682:	f7ff fc3e 	bl	8000f02 <LL_RCC_PLL_IsReady>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d0f1      	beq.n	8001670 <HAL_RCC_OscConfig+0x668>
 800168c:	e04f      	b.n	800172e <HAL_RCC_OscConfig+0x726>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800168e:	f7ff fc2a 	bl	8000ee6 <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8001692:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800169c:	f023 0303 	bic.w	r3, r3, #3
 80016a0:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 80016a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016ac:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80016b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016b4:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016b6:	f7fe ff31 	bl	800051c <HAL_GetTick>
 80016ba:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80016bc:	e008      	b.n	80016d0 <HAL_RCC_OscConfig+0x6c8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016be:	f7fe ff2d 	bl	800051c <HAL_GetTick>
 80016c2:	4602      	mov	r2, r0
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	2b0a      	cmp	r3, #10
 80016ca:	d901      	bls.n	80016d0 <HAL_RCC_OscConfig+0x6c8>
          {
            return HAL_TIMEOUT;
 80016cc:	2303      	movs	r3, #3
 80016ce:	e02f      	b.n	8001730 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() != 0U)
 80016d0:	f7ff fc17 	bl	8000f02 <LL_RCC_PLL_IsReady>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d1f1      	bne.n	80016be <HAL_RCC_OscConfig+0x6b6>
 80016da:	e028      	b.n	800172e <HAL_RCC_OscConfig+0x726>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d101      	bne.n	80016e8 <HAL_RCC_OscConfig+0x6e0>
      {
        return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e023      	b.n	8001730 <HAL_RCC_OscConfig+0x728>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016ec:	68db      	ldr	r3, [r3, #12]
 80016ee:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	f003 0203 	and.w	r2, r3, #3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	429a      	cmp	r2, r3
 80016fc:	d115      	bne.n	800172a <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 80016fe:	69bb      	ldr	r3, [r7, #24]
 8001700:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001708:	429a      	cmp	r2, r3
 800170a:	d10e      	bne.n	800172a <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001716:	021b      	lsls	r3, r3, #8
 8001718:	429a      	cmp	r2, r3
 800171a:	d106      	bne.n	800172a <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800171c:	69bb      	ldr	r3, [r7, #24]
 800171e:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001726:	429a      	cmp	r2, r3
 8001728:	d001      	beq.n	800172e <HAL_RCC_OscConfig+0x726>
        {
          return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e000      	b.n	8001730 <HAL_RCC_OscConfig+0x728>
        }
      }
    }
  }
  return HAL_OK;
 800172e:	2300      	movs	r3, #0
}
 8001730:	4618      	mov	r0, r3
 8001732:	3720      	adds	r7, #32
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	11c1808c 	.word	0x11c1808c

0800173c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d101      	bne.n	8001750 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e10f      	b.n	8001970 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001750:	4b89      	ldr	r3, [pc, #548]	; (8001978 <HAL_RCC_ClockConfig+0x23c>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0307 	and.w	r3, r3, #7
 8001758:	683a      	ldr	r2, [r7, #0]
 800175a:	429a      	cmp	r2, r3
 800175c:	d91b      	bls.n	8001796 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800175e:	4b86      	ldr	r3, [pc, #536]	; (8001978 <HAL_RCC_ClockConfig+0x23c>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f023 0207 	bic.w	r2, r3, #7
 8001766:	4984      	ldr	r1, [pc, #528]	; (8001978 <HAL_RCC_ClockConfig+0x23c>)
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	4313      	orrs	r3, r2
 800176c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800176e:	f7fe fed5 	bl	800051c <HAL_GetTick>
 8001772:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001774:	e008      	b.n	8001788 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001776:	f7fe fed1 	bl	800051c <HAL_GetTick>
 800177a:	4602      	mov	r2, r0
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	2b02      	cmp	r3, #2
 8001782:	d901      	bls.n	8001788 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8001784:	2303      	movs	r3, #3
 8001786:	e0f3      	b.n	8001970 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001788:	4b7b      	ldr	r3, [pc, #492]	; (8001978 <HAL_RCC_ClockConfig+0x23c>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0307 	and.w	r3, r3, #7
 8001790:	683a      	ldr	r2, [r7, #0]
 8001792:	429a      	cmp	r2, r3
 8001794:	d1ef      	bne.n	8001776 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0302 	and.w	r3, r3, #2
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d016      	beq.n	80017d0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7ff fb28 	bl	8000dfc <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80017ac:	f7fe feb6 	bl	800051c <HAL_GetTick>
 80017b0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80017b2:	e008      	b.n	80017c6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80017b4:	f7fe feb2 	bl	800051c <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e0d4      	b.n	8001970 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80017c6:	f7ff fbda 	bl	8000f7e <LL_RCC_IsActiveFlag_HPRE>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d0f1      	beq.n	80017b4 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d016      	beq.n	800180a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	695b      	ldr	r3, [r3, #20]
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7ff fb1e 	bl	8000e22 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80017e6:	f7fe fe99 	bl	800051c <HAL_GetTick>
 80017ea:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80017ec:	e008      	b.n	8001800 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80017ee:	f7fe fe95 	bl	800051c <HAL_GetTick>
 80017f2:	4602      	mov	r2, r0
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d901      	bls.n	8001800 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80017fc:	2303      	movs	r3, #3
 80017fe:	e0b7      	b.n	8001970 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001800:	f7ff fbce 	bl	8000fa0 <LL_RCC_IsActiveFlag_SHDHPRE>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d0f1      	beq.n	80017ee <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0304 	and.w	r3, r3, #4
 8001812:	2b00      	cmp	r3, #0
 8001814:	d016      	beq.n	8001844 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	68db      	ldr	r3, [r3, #12]
 800181a:	4618      	mov	r0, r3
 800181c:	f7ff fb17 	bl	8000e4e <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001820:	f7fe fe7c 	bl	800051c <HAL_GetTick>
 8001824:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001826:	e008      	b.n	800183a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001828:	f7fe fe78 	bl	800051c <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	2b02      	cmp	r3, #2
 8001834:	d901      	bls.n	800183a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e09a      	b.n	8001970 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800183a:	f7ff fbc3 	bl	8000fc4 <LL_RCC_IsActiveFlag_PPRE1>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d0f1      	beq.n	8001828 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 0308 	and.w	r3, r3, #8
 800184c:	2b00      	cmp	r3, #0
 800184e:	d017      	beq.n	8001880 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	691b      	ldr	r3, [r3, #16]
 8001854:	00db      	lsls	r3, r3, #3
 8001856:	4618      	mov	r0, r3
 8001858:	f7ff fb0c 	bl	8000e74 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800185c:	f7fe fe5e 	bl	800051c <HAL_GetTick>
 8001860:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001862:	e008      	b.n	8001876 <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001864:	f7fe fe5a 	bl	800051c <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	2b02      	cmp	r3, #2
 8001870:	d901      	bls.n	8001876 <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e07c      	b.n	8001970 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001876:	f7ff fbb6 	bl	8000fe6 <LL_RCC_IsActiveFlag_PPRE2>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d0f1      	beq.n	8001864 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0301 	and.w	r3, r3, #1
 8001888:	2b00      	cmp	r3, #0
 800188a:	d043      	beq.n	8001914 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	2b02      	cmp	r3, #2
 8001892:	d106      	bne.n	80018a2 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8001894:	f7ff f999 	bl	8000bca <LL_RCC_HSE_IsReady>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d11e      	bne.n	80018dc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e066      	b.n	8001970 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	2b03      	cmp	r3, #3
 80018a8:	d106      	bne.n	80018b8 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80018aa:	f7ff fb2a 	bl	8000f02 <LL_RCC_PLL_IsReady>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d113      	bne.n	80018dc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e05b      	b.n	8001970 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d106      	bne.n	80018ce <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80018c0:	f7ff fa33 	bl	8000d2a <LL_RCC_MSI_IsReady>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d108      	bne.n	80018dc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e050      	b.n	8001970 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80018ce:	f7ff f9a9 	bl	8000c24 <LL_RCC_HSI_IsReady>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d101      	bne.n	80018dc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	e049      	b.n	8001970 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff fa6d 	bl	8000dc0 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80018e6:	f7fe fe19 	bl	800051c <HAL_GetTick>
 80018ea:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ec:	e00a      	b.n	8001904 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018ee:	f7fe fe15 	bl	800051c <HAL_GetTick>
 80018f2:	4602      	mov	r2, r0
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d901      	bls.n	8001904 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8001900:	2303      	movs	r3, #3
 8001902:	e035      	b.n	8001970 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001904:	f7ff fa6f 	bl	8000de6 <LL_RCC_GetSysClkSource>
 8001908:	4602      	mov	r2, r0
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	429a      	cmp	r2, r3
 8001912:	d1ec      	bne.n	80018ee <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001914:	4b18      	ldr	r3, [pc, #96]	; (8001978 <HAL_RCC_ClockConfig+0x23c>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 0307 	and.w	r3, r3, #7
 800191c:	683a      	ldr	r2, [r7, #0]
 800191e:	429a      	cmp	r2, r3
 8001920:	d21b      	bcs.n	800195a <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001922:	4b15      	ldr	r3, [pc, #84]	; (8001978 <HAL_RCC_ClockConfig+0x23c>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f023 0207 	bic.w	r2, r3, #7
 800192a:	4913      	ldr	r1, [pc, #76]	; (8001978 <HAL_RCC_ClockConfig+0x23c>)
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	4313      	orrs	r3, r2
 8001930:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001932:	f7fe fdf3 	bl	800051c <HAL_GetTick>
 8001936:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001938:	e008      	b.n	800194c <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800193a:	f7fe fdef 	bl	800051c <HAL_GetTick>
 800193e:	4602      	mov	r2, r0
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	2b02      	cmp	r3, #2
 8001946:	d901      	bls.n	800194c <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8001948:	2303      	movs	r3, #3
 800194a:	e011      	b.n	8001970 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800194c:	4b0a      	ldr	r3, [pc, #40]	; (8001978 <HAL_RCC_ClockConfig+0x23c>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 0307 	and.w	r3, r3, #7
 8001954:	683a      	ldr	r2, [r7, #0]
 8001956:	429a      	cmp	r2, r3
 8001958:	d1ef      	bne.n	800193a <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800195a:	f000 f8b3 	bl	8001ac4 <HAL_RCC_GetHCLKFreq>
 800195e:	4603      	mov	r3, r0
 8001960:	4a06      	ldr	r2, [pc, #24]	; (800197c <HAL_RCC_ClockConfig+0x240>)
 8001962:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001964:	4b06      	ldr	r3, [pc, #24]	; (8001980 <HAL_RCC_ClockConfig+0x244>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4618      	mov	r0, r3
 800196a:	f7fe fd8b 	bl	8000484 <HAL_InitTick>
 800196e:	4603      	mov	r3, r0
}
 8001970:	4618      	mov	r0, r3
 8001972:	3710      	adds	r7, #16
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	58004000 	.word	0x58004000
 800197c:	20000004 	.word	0x20000004
 8001980:	20000008 	.word	0x20000008

08001984 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001984:	b590      	push	{r4, r7, lr}
 8001986:	b087      	sub	sp, #28
 8001988:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 800198a:	2300      	movs	r3, #0
 800198c:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 800198e:	2300      	movs	r3, #0
 8001990:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001992:	f7ff fa28 	bl	8000de6 <LL_RCC_GetSysClkSource>
 8001996:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001998:	f7ff fae6 	bl	8000f68 <LL_RCC_PLL_GetMainSource>
 800199c:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d005      	beq.n	80019b0 <HAL_RCC_GetSysClockFreq+0x2c>
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	2b0c      	cmp	r3, #12
 80019a8:	d139      	bne.n	8001a1e <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d136      	bne.n	8001a1e <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80019b0:	f7ff f9cb 	bl	8000d4a <LL_RCC_MSI_IsEnabledRangeSelect>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d115      	bne.n	80019e6 <HAL_RCC_GetSysClockFreq+0x62>
 80019ba:	f7ff f9c6 	bl	8000d4a <LL_RCC_MSI_IsEnabledRangeSelect>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d106      	bne.n	80019d2 <HAL_RCC_GetSysClockFreq+0x4e>
 80019c4:	f7ff f9d1 	bl	8000d6a <LL_RCC_MSI_GetRange>
 80019c8:	4603      	mov	r3, r0
 80019ca:	0a1b      	lsrs	r3, r3, #8
 80019cc:	f003 030f 	and.w	r3, r3, #15
 80019d0:	e005      	b.n	80019de <HAL_RCC_GetSysClockFreq+0x5a>
 80019d2:	f7ff f9d5 	bl	8000d80 <LL_RCC_MSI_GetRangeAfterStandby>
 80019d6:	4603      	mov	r3, r0
 80019d8:	0a1b      	lsrs	r3, r3, #8
 80019da:	f003 030f 	and.w	r3, r3, #15
 80019de:	4a36      	ldr	r2, [pc, #216]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0x134>)
 80019e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019e4:	e014      	b.n	8001a10 <HAL_RCC_GetSysClockFreq+0x8c>
 80019e6:	f7ff f9b0 	bl	8000d4a <LL_RCC_MSI_IsEnabledRangeSelect>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d106      	bne.n	80019fe <HAL_RCC_GetSysClockFreq+0x7a>
 80019f0:	f7ff f9bb 	bl	8000d6a <LL_RCC_MSI_GetRange>
 80019f4:	4603      	mov	r3, r0
 80019f6:	091b      	lsrs	r3, r3, #4
 80019f8:	f003 030f 	and.w	r3, r3, #15
 80019fc:	e005      	b.n	8001a0a <HAL_RCC_GetSysClockFreq+0x86>
 80019fe:	f7ff f9bf 	bl	8000d80 <LL_RCC_MSI_GetRangeAfterStandby>
 8001a02:	4603      	mov	r3, r0
 8001a04:	091b      	lsrs	r3, r3, #4
 8001a06:	f003 030f 	and.w	r3, r3, #15
 8001a0a:	4a2b      	ldr	r2, [pc, #172]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0x134>)
 8001a0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a10:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d115      	bne.n	8001a44 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001a1c:	e012      	b.n	8001a44 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	2b04      	cmp	r3, #4
 8001a22:	d102      	bne.n	8001a2a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001a24:	4b25      	ldr	r3, [pc, #148]	; (8001abc <HAL_RCC_GetSysClockFreq+0x138>)
 8001a26:	617b      	str	r3, [r7, #20]
 8001a28:	e00c      	b.n	8001a44 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	2b08      	cmp	r3, #8
 8001a2e:	d109      	bne.n	8001a44 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8001a30:	f7ff f89e 	bl	8000b70 <LL_RCC_HSE_IsEnabledDiv2>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d102      	bne.n	8001a40 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8001a3a:	4b20      	ldr	r3, [pc, #128]	; (8001abc <HAL_RCC_GetSysClockFreq+0x138>)
 8001a3c:	617b      	str	r3, [r7, #20]
 8001a3e:	e001      	b.n	8001a44 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8001a40:	4b1f      	ldr	r3, [pc, #124]	; (8001ac0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001a42:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a44:	f7ff f9cf 	bl	8000de6 <LL_RCC_GetSysClkSource>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b0c      	cmp	r3, #12
 8001a4c:	d12f      	bne.n	8001aae <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8001a4e:	f7ff fa8b 	bl	8000f68 <LL_RCC_PLL_GetMainSource>
 8001a52:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d003      	beq.n	8001a62 <HAL_RCC_GetSysClockFreq+0xde>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2b03      	cmp	r3, #3
 8001a5e:	d003      	beq.n	8001a68 <HAL_RCC_GetSysClockFreq+0xe4>
 8001a60:	e00d      	b.n	8001a7e <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8001a62:	4b16      	ldr	r3, [pc, #88]	; (8001abc <HAL_RCC_GetSysClockFreq+0x138>)
 8001a64:	60fb      	str	r3, [r7, #12]
        break;
 8001a66:	e00d      	b.n	8001a84 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8001a68:	f7ff f882 	bl	8000b70 <LL_RCC_HSE_IsEnabledDiv2>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d102      	bne.n	8001a78 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8001a72:	4b12      	ldr	r3, [pc, #72]	; (8001abc <HAL_RCC_GetSysClockFreq+0x138>)
 8001a74:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8001a76:	e005      	b.n	8001a84 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8001a78:	4b11      	ldr	r3, [pc, #68]	; (8001ac0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001a7a:	60fb      	str	r3, [r7, #12]
        break;
 8001a7c:	e002      	b.n	8001a84 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	60fb      	str	r3, [r7, #12]
        break;
 8001a82:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8001a84:	f7ff fa4e 	bl	8000f24 <LL_RCC_PLL_GetN>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	fb03 f402 	mul.w	r4, r3, r2
 8001a90:	f7ff fa5f 	bl	8000f52 <LL_RCC_PLL_GetDivider>
 8001a94:	4603      	mov	r3, r0
 8001a96:	091b      	lsrs	r3, r3, #4
 8001a98:	3301      	adds	r3, #1
 8001a9a:	fbb4 f4f3 	udiv	r4, r4, r3
 8001a9e:	f7ff fa4d 	bl	8000f3c <LL_RCC_PLL_GetR>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	0f5b      	lsrs	r3, r3, #29
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	fbb4 f3f3 	udiv	r3, r4, r3
 8001aac:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8001aae:	697b      	ldr	r3, [r7, #20]
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	371c      	adds	r7, #28
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd90      	pop	{r4, r7, pc}
 8001ab8:	08001d24 	.word	0x08001d24
 8001abc:	00f42400 	.word	0x00f42400
 8001ac0:	01e84800 	.word	0x01e84800

08001ac4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ac4:	b598      	push	{r3, r4, r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8001ac8:	f7ff ff5c 	bl	8001984 <HAL_RCC_GetSysClockFreq>
 8001acc:	4604      	mov	r4, r0
 8001ace:	f7ff f9e4 	bl	8000e9a <LL_RCC_GetAHBPrescaler>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	091b      	lsrs	r3, r3, #4
 8001ad6:	f003 030f 	and.w	r3, r3, #15
 8001ada:	4a03      	ldr	r2, [pc, #12]	; (8001ae8 <HAL_RCC_GetHCLKFreq+0x24>)
 8001adc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ae0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	bd98      	pop	{r3, r4, r7, pc}
 8001ae8:	08001ce4 	.word	0x08001ce4

08001aec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8001aec:	b590      	push	{r4, r7, lr}
 8001aee:	b085      	sub	sp, #20
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	091b      	lsrs	r3, r3, #4
 8001af8:	f003 030f 	and.w	r3, r3, #15
 8001afc:	4a10      	ldr	r2, [pc, #64]	; (8001b40 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8001afe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b02:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8001b04:	f7ff f9d4 	bl	8000eb0 <LL_RCC_GetAHB3Prescaler>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	091b      	lsrs	r3, r3, #4
 8001b0c:	f003 030f 	and.w	r3, r3, #15
 8001b10:	4a0c      	ldr	r2, [pc, #48]	; (8001b44 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8001b12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b16:	68fa      	ldr	r2, [r7, #12]
 8001b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b1c:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	4a09      	ldr	r2, [pc, #36]	; (8001b48 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8001b22:	fba2 2303 	umull	r2, r3, r2, r3
 8001b26:	0c9c      	lsrs	r4, r3, #18
 8001b28:	f7fe ffe8 	bl	8000afc <HAL_PWREx_GetVoltageRange>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	4619      	mov	r1, r3
 8001b30:	4620      	mov	r0, r4
 8001b32:	f000 f80b 	bl	8001b4c <RCC_SetFlashLatency>
 8001b36:	4603      	mov	r3, r0
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3714      	adds	r7, #20
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd90      	pop	{r4, r7, pc}
 8001b40:	08001d24 	.word	0x08001d24
 8001b44:	08001ce4 	.word	0x08001ce4
 8001b48:	431bde83 	.word	0x431bde83

08001b4c <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b08e      	sub	sp, #56	; 0x38
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8001b56:	4a3c      	ldr	r2, [pc, #240]	; (8001c48 <RCC_SetFlashLatency+0xfc>)
 8001b58:	f107 0320 	add.w	r3, r7, #32
 8001b5c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b60:	6018      	str	r0, [r3, #0]
 8001b62:	3304      	adds	r3, #4
 8001b64:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8001b66:	4a39      	ldr	r2, [pc, #228]	; (8001c4c <RCC_SetFlashLatency+0x100>)
 8001b68:	f107 0318 	add.w	r3, r7, #24
 8001b6c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b70:	6018      	str	r0, [r3, #0]
 8001b72:	3304      	adds	r3, #4
 8001b74:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8001b76:	4a36      	ldr	r2, [pc, #216]	; (8001c50 <RCC_SetFlashLatency+0x104>)
 8001b78:	f107 030c 	add.w	r3, r7, #12
 8001b7c:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b7e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8001b82:	2300      	movs	r3, #0
 8001b84:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b8c:	d11d      	bne.n	8001bca <RCC_SetFlashLatency+0x7e>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8001b8e:	2300      	movs	r3, #0
 8001b90:	633b      	str	r3, [r7, #48]	; 0x30
 8001b92:	e016      	b.n	8001bc2 <RCC_SetFlashLatency+0x76>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8001b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001b9c:	4413      	add	r3, r2
 8001b9e:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d808      	bhi.n	8001bbc <RCC_SetFlashLatency+0x70>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8001baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001bb2:	4413      	add	r3, r2
 8001bb4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8001bb8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8001bba:	e023      	b.n	8001c04 <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8001bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	633b      	str	r3, [r7, #48]	; 0x30
 8001bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d9e5      	bls.n	8001b94 <RCC_SetFlashLatency+0x48>
 8001bc8:	e01c      	b.n	8001c04 <RCC_SetFlashLatency+0xb8>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8001bca:	2300      	movs	r3, #0
 8001bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bce:	e016      	b.n	8001bfe <RCC_SetFlashLatency+0xb2>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8001bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bd2:	005b      	lsls	r3, r3, #1
 8001bd4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001bd8:	4413      	add	r3, r2
 8001bda:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8001bde:	461a      	mov	r2, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d808      	bhi.n	8001bf8 <RCC_SetFlashLatency+0xac>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8001be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001bee:	4413      	add	r3, r2
 8001bf0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8001bf4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8001bf6:	e005      	b.n	8001c04 <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8001bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d9e5      	bls.n	8001bd0 <RCC_SetFlashLatency+0x84>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001c04:	4b13      	ldr	r3, [pc, #76]	; (8001c54 <RCC_SetFlashLatency+0x108>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f023 0207 	bic.w	r2, r3, #7
 8001c0c:	4911      	ldr	r1, [pc, #68]	; (8001c54 <RCC_SetFlashLatency+0x108>)
 8001c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c10:	4313      	orrs	r3, r2
 8001c12:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001c14:	f7fe fc82 	bl	800051c <HAL_GetTick>
 8001c18:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8001c1a:	e008      	b.n	8001c2e <RCC_SetFlashLatency+0xe2>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001c1c:	f7fe fc7e 	bl	800051c <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d901      	bls.n	8001c2e <RCC_SetFlashLatency+0xe2>
    {
      return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e007      	b.n	8001c3e <RCC_SetFlashLatency+0xf2>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8001c2e:	4b09      	ldr	r3, [pc, #36]	; (8001c54 <RCC_SetFlashLatency+0x108>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0307 	and.w	r3, r3, #7
 8001c36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d1ef      	bne.n	8001c1c <RCC_SetFlashLatency+0xd0>
    }
  }
  return HAL_OK;
 8001c3c:	2300      	movs	r3, #0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3738      	adds	r7, #56	; 0x38
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	08001cc8 	.word	0x08001cc8
 8001c4c:	08001cd0 	.word	0x08001cd0
 8001c50:	08001cd8 	.word	0x08001cd8
 8001c54:	58004000 	.word	0x58004000

08001c58 <__libc_init_array>:
 8001c58:	b570      	push	{r4, r5, r6, lr}
 8001c5a:	4d0d      	ldr	r5, [pc, #52]	; (8001c90 <__libc_init_array+0x38>)
 8001c5c:	4c0d      	ldr	r4, [pc, #52]	; (8001c94 <__libc_init_array+0x3c>)
 8001c5e:	1b64      	subs	r4, r4, r5
 8001c60:	10a4      	asrs	r4, r4, #2
 8001c62:	2600      	movs	r6, #0
 8001c64:	42a6      	cmp	r6, r4
 8001c66:	d109      	bne.n	8001c7c <__libc_init_array+0x24>
 8001c68:	4d0b      	ldr	r5, [pc, #44]	; (8001c98 <__libc_init_array+0x40>)
 8001c6a:	4c0c      	ldr	r4, [pc, #48]	; (8001c9c <__libc_init_array+0x44>)
 8001c6c:	f000 f820 	bl	8001cb0 <_init>
 8001c70:	1b64      	subs	r4, r4, r5
 8001c72:	10a4      	asrs	r4, r4, #2
 8001c74:	2600      	movs	r6, #0
 8001c76:	42a6      	cmp	r6, r4
 8001c78:	d105      	bne.n	8001c86 <__libc_init_array+0x2e>
 8001c7a:	bd70      	pop	{r4, r5, r6, pc}
 8001c7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c80:	4798      	blx	r3
 8001c82:	3601      	adds	r6, #1
 8001c84:	e7ee      	b.n	8001c64 <__libc_init_array+0xc>
 8001c86:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c8a:	4798      	blx	r3
 8001c8c:	3601      	adds	r6, #1
 8001c8e:	e7f2      	b.n	8001c76 <__libc_init_array+0x1e>
 8001c90:	08001d64 	.word	0x08001d64
 8001c94:	08001d64 	.word	0x08001d64
 8001c98:	08001d64 	.word	0x08001d64
 8001c9c:	08001d68 	.word	0x08001d68

08001ca0 <memset>:
 8001ca0:	4402      	add	r2, r0
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d100      	bne.n	8001caa <memset+0xa>
 8001ca8:	4770      	bx	lr
 8001caa:	f803 1b01 	strb.w	r1, [r3], #1
 8001cae:	e7f9      	b.n	8001ca4 <memset+0x4>

08001cb0 <_init>:
 8001cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cb2:	bf00      	nop
 8001cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cb6:	bc08      	pop	{r3}
 8001cb8:	469e      	mov	lr, r3
 8001cba:	4770      	bx	lr

08001cbc <_fini>:
 8001cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cbe:	bf00      	nop
 8001cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cc2:	bc08      	pop	{r3}
 8001cc4:	469e      	mov	lr, r3
 8001cc6:	4770      	bx	lr
