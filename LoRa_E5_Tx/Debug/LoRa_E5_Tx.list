
LoRa_E5_Tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000190b0  08000138  08000138  00010138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bdc  080191e8  080191e8  000291e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019dc4  08019dc4  00030104  2**0
                  CONTENTS
  4 .ARM          00000008  08019dc4  08019dc4  00029dc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019dcc  08019dcc  00030104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08019dcc  08019dcc  00029dcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019dd0  08019dd0  00029dd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000104  20000000  08019dd4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015fc  20000104  08019ed8  00030104  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001700  08019ed8  00031700  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00030104  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005785f  00000000  00000000  0003012e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000a23b  00000000  00000000  0008798d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002ea8  00000000  00000000  00091bc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002b10  00000000  00000000  00094a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002639e  00000000  00000000  00097580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00035d59  00000000  00000000  000bd91e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c76d5  00000000  00000000  000f3677  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001bad4c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bf74  00000000  00000000  001bada0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000104 	.word	0x20000104
 8000154:	00000000 	.word	0x00000000
 8000158:	080191d0 	.word	0x080191d0

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000108 	.word	0x20000108
 8000174:	080191d0 	.word	0x080191d0

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_drsub>:
 8000188:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800018c:	e002      	b.n	8000194 <__adddf3>
 800018e:	bf00      	nop

08000190 <__aeabi_dsub>:
 8000190:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000194 <__adddf3>:
 8000194:	b530      	push	{r4, r5, lr}
 8000196:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800019a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800019e:	ea94 0f05 	teq	r4, r5
 80001a2:	bf08      	it	eq
 80001a4:	ea90 0f02 	teqeq	r0, r2
 80001a8:	bf1f      	itttt	ne
 80001aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ba:	f000 80e2 	beq.w	8000382 <__adddf3+0x1ee>
 80001be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001c6:	bfb8      	it	lt
 80001c8:	426d      	neglt	r5, r5
 80001ca:	dd0c      	ble.n	80001e6 <__adddf3+0x52>
 80001cc:	442c      	add	r4, r5
 80001ce:	ea80 0202 	eor.w	r2, r0, r2
 80001d2:	ea81 0303 	eor.w	r3, r1, r3
 80001d6:	ea82 0000 	eor.w	r0, r2, r0
 80001da:	ea83 0101 	eor.w	r1, r3, r1
 80001de:	ea80 0202 	eor.w	r2, r0, r2
 80001e2:	ea81 0303 	eor.w	r3, r1, r3
 80001e6:	2d36      	cmp	r5, #54	; 0x36
 80001e8:	bf88      	it	hi
 80001ea:	bd30      	pophi	{r4, r5, pc}
 80001ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x70>
 80001fe:	4240      	negs	r0, r0
 8000200:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000204:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000208:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800020c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000210:	d002      	beq.n	8000218 <__adddf3+0x84>
 8000212:	4252      	negs	r2, r2
 8000214:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000218:	ea94 0f05 	teq	r4, r5
 800021c:	f000 80a7 	beq.w	800036e <__adddf3+0x1da>
 8000220:	f1a4 0401 	sub.w	r4, r4, #1
 8000224:	f1d5 0e20 	rsbs	lr, r5, #32
 8000228:	db0d      	blt.n	8000246 <__adddf3+0xb2>
 800022a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800022e:	fa22 f205 	lsr.w	r2, r2, r5
 8000232:	1880      	adds	r0, r0, r2
 8000234:	f141 0100 	adc.w	r1, r1, #0
 8000238:	fa03 f20e 	lsl.w	r2, r3, lr
 800023c:	1880      	adds	r0, r0, r2
 800023e:	fa43 f305 	asr.w	r3, r3, r5
 8000242:	4159      	adcs	r1, r3
 8000244:	e00e      	b.n	8000264 <__adddf3+0xd0>
 8000246:	f1a5 0520 	sub.w	r5, r5, #32
 800024a:	f10e 0e20 	add.w	lr, lr, #32
 800024e:	2a01      	cmp	r2, #1
 8000250:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000254:	bf28      	it	cs
 8000256:	f04c 0c02 	orrcs.w	ip, ip, #2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	18c0      	adds	r0, r0, r3
 8000260:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000268:	d507      	bpl.n	800027a <__adddf3+0xe6>
 800026a:	f04f 0e00 	mov.w	lr, #0
 800026e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000272:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000276:	eb6e 0101 	sbc.w	r1, lr, r1
 800027a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800027e:	d31b      	bcc.n	80002b8 <__adddf3+0x124>
 8000280:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000284:	d30c      	bcc.n	80002a0 <__adddf3+0x10c>
 8000286:	0849      	lsrs	r1, r1, #1
 8000288:	ea5f 0030 	movs.w	r0, r0, rrx
 800028c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000290:	f104 0401 	add.w	r4, r4, #1
 8000294:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000298:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800029c:	f080 809a 	bcs.w	80003d4 <__adddf3+0x240>
 80002a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	ea41 0105 	orr.w	r1, r1, r5
 80002b6:	bd30      	pop	{r4, r5, pc}
 80002b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002bc:	4140      	adcs	r0, r0
 80002be:	eb41 0101 	adc.w	r1, r1, r1
 80002c2:	3c01      	subs	r4, #1
 80002c4:	bf28      	it	cs
 80002c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002ca:	d2e9      	bcs.n	80002a0 <__adddf3+0x10c>
 80002cc:	f091 0f00 	teq	r1, #0
 80002d0:	bf04      	itt	eq
 80002d2:	4601      	moveq	r1, r0
 80002d4:	2000      	moveq	r0, #0
 80002d6:	fab1 f381 	clz	r3, r1
 80002da:	bf08      	it	eq
 80002dc:	3320      	addeq	r3, #32
 80002de:	f1a3 030b 	sub.w	r3, r3, #11
 80002e2:	f1b3 0220 	subs.w	r2, r3, #32
 80002e6:	da0c      	bge.n	8000302 <__adddf3+0x16e>
 80002e8:	320c      	adds	r2, #12
 80002ea:	dd08      	ble.n	80002fe <__adddf3+0x16a>
 80002ec:	f102 0c14 	add.w	ip, r2, #20
 80002f0:	f1c2 020c 	rsb	r2, r2, #12
 80002f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f8:	fa21 f102 	lsr.w	r1, r1, r2
 80002fc:	e00c      	b.n	8000318 <__adddf3+0x184>
 80002fe:	f102 0214 	add.w	r2, r2, #20
 8000302:	bfd8      	it	le
 8000304:	f1c2 0c20 	rsble	ip, r2, #32
 8000308:	fa01 f102 	lsl.w	r1, r1, r2
 800030c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000310:	bfdc      	itt	le
 8000312:	ea41 010c 	orrle.w	r1, r1, ip
 8000316:	4090      	lslle	r0, r2
 8000318:	1ae4      	subs	r4, r4, r3
 800031a:	bfa2      	ittt	ge
 800031c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000320:	4329      	orrge	r1, r5
 8000322:	bd30      	popge	{r4, r5, pc}
 8000324:	ea6f 0404 	mvn.w	r4, r4
 8000328:	3c1f      	subs	r4, #31
 800032a:	da1c      	bge.n	8000366 <__adddf3+0x1d2>
 800032c:	340c      	adds	r4, #12
 800032e:	dc0e      	bgt.n	800034e <__adddf3+0x1ba>
 8000330:	f104 0414 	add.w	r4, r4, #20
 8000334:	f1c4 0220 	rsb	r2, r4, #32
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f302 	lsl.w	r3, r1, r2
 8000340:	ea40 0003 	orr.w	r0, r0, r3
 8000344:	fa21 f304 	lsr.w	r3, r1, r4
 8000348:	ea45 0103 	orr.w	r1, r5, r3
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	f1c4 040c 	rsb	r4, r4, #12
 8000352:	f1c4 0220 	rsb	r2, r4, #32
 8000356:	fa20 f002 	lsr.w	r0, r0, r2
 800035a:	fa01 f304 	lsl.w	r3, r1, r4
 800035e:	ea40 0003 	orr.w	r0, r0, r3
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	fa21 f004 	lsr.w	r0, r1, r4
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	f094 0f00 	teq	r4, #0
 8000372:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000376:	bf06      	itte	eq
 8000378:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800037c:	3401      	addeq	r4, #1
 800037e:	3d01      	subne	r5, #1
 8000380:	e74e      	b.n	8000220 <__adddf3+0x8c>
 8000382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000386:	bf18      	it	ne
 8000388:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800038c:	d029      	beq.n	80003e2 <__adddf3+0x24e>
 800038e:	ea94 0f05 	teq	r4, r5
 8000392:	bf08      	it	eq
 8000394:	ea90 0f02 	teqeq	r0, r2
 8000398:	d005      	beq.n	80003a6 <__adddf3+0x212>
 800039a:	ea54 0c00 	orrs.w	ip, r4, r0
 800039e:	bf04      	itt	eq
 80003a0:	4619      	moveq	r1, r3
 80003a2:	4610      	moveq	r0, r2
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea91 0f03 	teq	r1, r3
 80003aa:	bf1e      	ittt	ne
 80003ac:	2100      	movne	r1, #0
 80003ae:	2000      	movne	r0, #0
 80003b0:	bd30      	popne	{r4, r5, pc}
 80003b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003b6:	d105      	bne.n	80003c4 <__adddf3+0x230>
 80003b8:	0040      	lsls	r0, r0, #1
 80003ba:	4149      	adcs	r1, r1
 80003bc:	bf28      	it	cs
 80003be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c8:	bf3c      	itt	cc
 80003ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ce:	bd30      	popcc	{r4, r5, pc}
 80003d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003dc:	f04f 0000 	mov.w	r0, #0
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf1a      	itte	ne
 80003e8:	4619      	movne	r1, r3
 80003ea:	4610      	movne	r0, r2
 80003ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f0:	bf1c      	itt	ne
 80003f2:	460b      	movne	r3, r1
 80003f4:	4602      	movne	r2, r0
 80003f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003fa:	bf06      	itte	eq
 80003fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000400:	ea91 0f03 	teqeq	r1, r3
 8000404:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	bf00      	nop

0800040c <__aeabi_ui2d>:
 800040c:	f090 0f00 	teq	r0, #0
 8000410:	bf04      	itt	eq
 8000412:	2100      	moveq	r1, #0
 8000414:	4770      	bxeq	lr
 8000416:	b530      	push	{r4, r5, lr}
 8000418:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800041c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000420:	f04f 0500 	mov.w	r5, #0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e750      	b.n	80002cc <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_i2d>:
 800042c:	f090 0f00 	teq	r0, #0
 8000430:	bf04      	itt	eq
 8000432:	2100      	moveq	r1, #0
 8000434:	4770      	bxeq	lr
 8000436:	b530      	push	{r4, r5, lr}
 8000438:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800043c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000440:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000444:	bf48      	it	mi
 8000446:	4240      	negmi	r0, r0
 8000448:	f04f 0100 	mov.w	r1, #0
 800044c:	e73e      	b.n	80002cc <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_f2d>:
 8000450:	0042      	lsls	r2, r0, #1
 8000452:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000456:	ea4f 0131 	mov.w	r1, r1, rrx
 800045a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800045e:	bf1f      	itttt	ne
 8000460:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000464:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000468:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800046c:	4770      	bxne	lr
 800046e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000472:	bf08      	it	eq
 8000474:	4770      	bxeq	lr
 8000476:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800047a:	bf04      	itt	eq
 800047c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000490:	e71c      	b.n	80002cc <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aed8 	beq.w	800027a <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6bd      	b.n	800027a <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__gedf2>:
 8000500:	f04f 3cff 	mov.w	ip, #4294967295
 8000504:	e006      	b.n	8000514 <__cmpdf2+0x4>
 8000506:	bf00      	nop

08000508 <__ledf2>:
 8000508:	f04f 0c01 	mov.w	ip, #1
 800050c:	e002      	b.n	8000514 <__cmpdf2+0x4>
 800050e:	bf00      	nop

08000510 <__cmpdf2>:
 8000510:	f04f 0c01 	mov.w	ip, #1
 8000514:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000518:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800051c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000520:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000524:	bf18      	it	ne
 8000526:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800052a:	d01b      	beq.n	8000564 <__cmpdf2+0x54>
 800052c:	b001      	add	sp, #4
 800052e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000532:	bf0c      	ite	eq
 8000534:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000538:	ea91 0f03 	teqne	r1, r3
 800053c:	bf02      	ittt	eq
 800053e:	ea90 0f02 	teqeq	r0, r2
 8000542:	2000      	moveq	r0, #0
 8000544:	4770      	bxeq	lr
 8000546:	f110 0f00 	cmn.w	r0, #0
 800054a:	ea91 0f03 	teq	r1, r3
 800054e:	bf58      	it	pl
 8000550:	4299      	cmppl	r1, r3
 8000552:	bf08      	it	eq
 8000554:	4290      	cmpeq	r0, r2
 8000556:	bf2c      	ite	cs
 8000558:	17d8      	asrcs	r0, r3, #31
 800055a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800055e:	f040 0001 	orr.w	r0, r0, #1
 8000562:	4770      	bx	lr
 8000564:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000568:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800056c:	d102      	bne.n	8000574 <__cmpdf2+0x64>
 800056e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000572:	d107      	bne.n	8000584 <__cmpdf2+0x74>
 8000574:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000578:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800057c:	d1d6      	bne.n	800052c <__cmpdf2+0x1c>
 800057e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000582:	d0d3      	beq.n	800052c <__cmpdf2+0x1c>
 8000584:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <__aeabi_cdrcmple>:
 800058c:	4684      	mov	ip, r0
 800058e:	4610      	mov	r0, r2
 8000590:	4662      	mov	r2, ip
 8000592:	468c      	mov	ip, r1
 8000594:	4619      	mov	r1, r3
 8000596:	4663      	mov	r3, ip
 8000598:	e000      	b.n	800059c <__aeabi_cdcmpeq>
 800059a:	bf00      	nop

0800059c <__aeabi_cdcmpeq>:
 800059c:	b501      	push	{r0, lr}
 800059e:	f7ff ffb7 	bl	8000510 <__cmpdf2>
 80005a2:	2800      	cmp	r0, #0
 80005a4:	bf48      	it	mi
 80005a6:	f110 0f00 	cmnmi.w	r0, #0
 80005aa:	bd01      	pop	{r0, pc}

080005ac <__aeabi_dcmpeq>:
 80005ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b0:	f7ff fff4 	bl	800059c <__aeabi_cdcmpeq>
 80005b4:	bf0c      	ite	eq
 80005b6:	2001      	moveq	r0, #1
 80005b8:	2000      	movne	r0, #0
 80005ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80005be:	bf00      	nop

080005c0 <__aeabi_dcmplt>:
 80005c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c4:	f7ff ffea 	bl	800059c <__aeabi_cdcmpeq>
 80005c8:	bf34      	ite	cc
 80005ca:	2001      	movcc	r0, #1
 80005cc:	2000      	movcs	r0, #0
 80005ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d2:	bf00      	nop

080005d4 <__aeabi_dcmple>:
 80005d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005d8:	f7ff ffe0 	bl	800059c <__aeabi_cdcmpeq>
 80005dc:	bf94      	ite	ls
 80005de:	2001      	movls	r0, #1
 80005e0:	2000      	movhi	r0, #0
 80005e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005e6:	bf00      	nop

080005e8 <__aeabi_dcmpge>:
 80005e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005ec:	f7ff ffce 	bl	800058c <__aeabi_cdrcmple>
 80005f0:	bf94      	ite	ls
 80005f2:	2001      	movls	r0, #1
 80005f4:	2000      	movhi	r0, #0
 80005f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005fa:	bf00      	nop

080005fc <__aeabi_dcmpgt>:
 80005fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000600:	f7ff ffc4 	bl	800058c <__aeabi_cdrcmple>
 8000604:	bf34      	ite	cc
 8000606:	2001      	movcc	r0, #1
 8000608:	2000      	movcs	r0, #0
 800060a:	f85d fb08 	ldr.w	pc, [sp], #8
 800060e:	bf00      	nop

08000610 <__aeabi_d2iz>:
 8000610:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000614:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000618:	d215      	bcs.n	8000646 <__aeabi_d2iz+0x36>
 800061a:	d511      	bpl.n	8000640 <__aeabi_d2iz+0x30>
 800061c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000620:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000624:	d912      	bls.n	800064c <__aeabi_d2iz+0x3c>
 8000626:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800062a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800062e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000632:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000636:	fa23 f002 	lsr.w	r0, r3, r2
 800063a:	bf18      	it	ne
 800063c:	4240      	negne	r0, r0
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800064a:	d105      	bne.n	8000658 <__aeabi_d2iz+0x48>
 800064c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000650:	bf08      	it	eq
 8000652:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000656:	4770      	bx	lr
 8000658:	f04f 0000 	mov.w	r0, #0
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop

08000660 <__aeabi_frsub>:
 8000660:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000664:	e002      	b.n	800066c <__addsf3>
 8000666:	bf00      	nop

08000668 <__aeabi_fsub>:
 8000668:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800066c <__addsf3>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	bf1f      	itttt	ne
 8000670:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000674:	ea92 0f03 	teqne	r2, r3
 8000678:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800067c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000680:	d06a      	beq.n	8000758 <__addsf3+0xec>
 8000682:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000686:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800068a:	bfc1      	itttt	gt
 800068c:	18d2      	addgt	r2, r2, r3
 800068e:	4041      	eorgt	r1, r0
 8000690:	4048      	eorgt	r0, r1
 8000692:	4041      	eorgt	r1, r0
 8000694:	bfb8      	it	lt
 8000696:	425b      	neglt	r3, r3
 8000698:	2b19      	cmp	r3, #25
 800069a:	bf88      	it	hi
 800069c:	4770      	bxhi	lr
 800069e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80006a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006a6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80006aa:	bf18      	it	ne
 80006ac:	4240      	negne	r0, r0
 80006ae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80006b2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80006b6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80006ba:	bf18      	it	ne
 80006bc:	4249      	negne	r1, r1
 80006be:	ea92 0f03 	teq	r2, r3
 80006c2:	d03f      	beq.n	8000744 <__addsf3+0xd8>
 80006c4:	f1a2 0201 	sub.w	r2, r2, #1
 80006c8:	fa41 fc03 	asr.w	ip, r1, r3
 80006cc:	eb10 000c 	adds.w	r0, r0, ip
 80006d0:	f1c3 0320 	rsb	r3, r3, #32
 80006d4:	fa01 f103 	lsl.w	r1, r1, r3
 80006d8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006dc:	d502      	bpl.n	80006e4 <__addsf3+0x78>
 80006de:	4249      	negs	r1, r1
 80006e0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006e4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80006e8:	d313      	bcc.n	8000712 <__addsf3+0xa6>
 80006ea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006ee:	d306      	bcc.n	80006fe <__addsf3+0x92>
 80006f0:	0840      	lsrs	r0, r0, #1
 80006f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80006f6:	f102 0201 	add.w	r2, r2, #1
 80006fa:	2afe      	cmp	r2, #254	; 0xfe
 80006fc:	d251      	bcs.n	80007a2 <__addsf3+0x136>
 80006fe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000702:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000706:	bf08      	it	eq
 8000708:	f020 0001 	biceq.w	r0, r0, #1
 800070c:	ea40 0003 	orr.w	r0, r0, r3
 8000710:	4770      	bx	lr
 8000712:	0049      	lsls	r1, r1, #1
 8000714:	eb40 0000 	adc.w	r0, r0, r0
 8000718:	3a01      	subs	r2, #1
 800071a:	bf28      	it	cs
 800071c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000720:	d2ed      	bcs.n	80006fe <__addsf3+0x92>
 8000722:	fab0 fc80 	clz	ip, r0
 8000726:	f1ac 0c08 	sub.w	ip, ip, #8
 800072a:	ebb2 020c 	subs.w	r2, r2, ip
 800072e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000732:	bfaa      	itet	ge
 8000734:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000738:	4252      	neglt	r2, r2
 800073a:	4318      	orrge	r0, r3
 800073c:	bfbc      	itt	lt
 800073e:	40d0      	lsrlt	r0, r2
 8000740:	4318      	orrlt	r0, r3
 8000742:	4770      	bx	lr
 8000744:	f092 0f00 	teq	r2, #0
 8000748:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800074c:	bf06      	itte	eq
 800074e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000752:	3201      	addeq	r2, #1
 8000754:	3b01      	subne	r3, #1
 8000756:	e7b5      	b.n	80006c4 <__addsf3+0x58>
 8000758:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800075c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000760:	bf18      	it	ne
 8000762:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000766:	d021      	beq.n	80007ac <__addsf3+0x140>
 8000768:	ea92 0f03 	teq	r2, r3
 800076c:	d004      	beq.n	8000778 <__addsf3+0x10c>
 800076e:	f092 0f00 	teq	r2, #0
 8000772:	bf08      	it	eq
 8000774:	4608      	moveq	r0, r1
 8000776:	4770      	bx	lr
 8000778:	ea90 0f01 	teq	r0, r1
 800077c:	bf1c      	itt	ne
 800077e:	2000      	movne	r0, #0
 8000780:	4770      	bxne	lr
 8000782:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000786:	d104      	bne.n	8000792 <__addsf3+0x126>
 8000788:	0040      	lsls	r0, r0, #1
 800078a:	bf28      	it	cs
 800078c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000790:	4770      	bx	lr
 8000792:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000796:	bf3c      	itt	cc
 8000798:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800079c:	4770      	bxcc	lr
 800079e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80007a2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80007a6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007aa:	4770      	bx	lr
 80007ac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80007b0:	bf16      	itet	ne
 80007b2:	4608      	movne	r0, r1
 80007b4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80007b8:	4601      	movne	r1, r0
 80007ba:	0242      	lsls	r2, r0, #9
 80007bc:	bf06      	itte	eq
 80007be:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80007c2:	ea90 0f01 	teqeq	r0, r1
 80007c6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80007ca:	4770      	bx	lr

080007cc <__aeabi_ui2f>:
 80007cc:	f04f 0300 	mov.w	r3, #0
 80007d0:	e004      	b.n	80007dc <__aeabi_i2f+0x8>
 80007d2:	bf00      	nop

080007d4 <__aeabi_i2f>:
 80007d4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80007d8:	bf48      	it	mi
 80007da:	4240      	negmi	r0, r0
 80007dc:	ea5f 0c00 	movs.w	ip, r0
 80007e0:	bf08      	it	eq
 80007e2:	4770      	bxeq	lr
 80007e4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80007e8:	4601      	mov	r1, r0
 80007ea:	f04f 0000 	mov.w	r0, #0
 80007ee:	e01c      	b.n	800082a <__aeabi_l2f+0x2a>

080007f0 <__aeabi_ul2f>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	f04f 0300 	mov.w	r3, #0
 80007fc:	e00a      	b.n	8000814 <__aeabi_l2f+0x14>
 80007fe:	bf00      	nop

08000800 <__aeabi_l2f>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800080c:	d502      	bpl.n	8000814 <__aeabi_l2f+0x14>
 800080e:	4240      	negs	r0, r0
 8000810:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000814:	ea5f 0c01 	movs.w	ip, r1
 8000818:	bf02      	ittt	eq
 800081a:	4684      	moveq	ip, r0
 800081c:	4601      	moveq	r1, r0
 800081e:	2000      	moveq	r0, #0
 8000820:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000824:	bf08      	it	eq
 8000826:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800082a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800082e:	fabc f28c 	clz	r2, ip
 8000832:	3a08      	subs	r2, #8
 8000834:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000838:	db10      	blt.n	800085c <__aeabi_l2f+0x5c>
 800083a:	fa01 fc02 	lsl.w	ip, r1, r2
 800083e:	4463      	add	r3, ip
 8000840:	fa00 fc02 	lsl.w	ip, r0, r2
 8000844:	f1c2 0220 	rsb	r2, r2, #32
 8000848:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800084c:	fa20 f202 	lsr.w	r2, r0, r2
 8000850:	eb43 0002 	adc.w	r0, r3, r2
 8000854:	bf08      	it	eq
 8000856:	f020 0001 	biceq.w	r0, r0, #1
 800085a:	4770      	bx	lr
 800085c:	f102 0220 	add.w	r2, r2, #32
 8000860:	fa01 fc02 	lsl.w	ip, r1, r2
 8000864:	f1c2 0220 	rsb	r2, r2, #32
 8000868:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800086c:	fa21 f202 	lsr.w	r2, r1, r2
 8000870:	eb43 0002 	adc.w	r0, r3, r2
 8000874:	bf08      	it	eq
 8000876:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800087a:	4770      	bx	lr

0800087c <__aeabi_uldivmod>:
 800087c:	b953      	cbnz	r3, 8000894 <__aeabi_uldivmod+0x18>
 800087e:	b94a      	cbnz	r2, 8000894 <__aeabi_uldivmod+0x18>
 8000880:	2900      	cmp	r1, #0
 8000882:	bf08      	it	eq
 8000884:	2800      	cmpeq	r0, #0
 8000886:	bf1c      	itt	ne
 8000888:	f04f 31ff 	movne.w	r1, #4294967295
 800088c:	f04f 30ff 	movne.w	r0, #4294967295
 8000890:	f000 b96c 	b.w	8000b6c <__aeabi_idiv0>
 8000894:	f1ad 0c08 	sub.w	ip, sp, #8
 8000898:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800089c:	f000 f806 	bl	80008ac <__udivmoddi4>
 80008a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008a8:	b004      	add	sp, #16
 80008aa:	4770      	bx	lr

080008ac <__udivmoddi4>:
 80008ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008b0:	9e08      	ldr	r6, [sp, #32]
 80008b2:	460d      	mov	r5, r1
 80008b4:	4604      	mov	r4, r0
 80008b6:	468e      	mov	lr, r1
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	f040 8082 	bne.w	80009c2 <__udivmoddi4+0x116>
 80008be:	428a      	cmp	r2, r1
 80008c0:	4617      	mov	r7, r2
 80008c2:	d946      	bls.n	8000952 <__udivmoddi4+0xa6>
 80008c4:	fab2 f282 	clz	r2, r2
 80008c8:	b14a      	cbz	r2, 80008de <__udivmoddi4+0x32>
 80008ca:	f1c2 0120 	rsb	r1, r2, #32
 80008ce:	fa05 f302 	lsl.w	r3, r5, r2
 80008d2:	fa20 f101 	lsr.w	r1, r0, r1
 80008d6:	4097      	lsls	r7, r2
 80008d8:	ea41 0e03 	orr.w	lr, r1, r3
 80008dc:	4094      	lsls	r4, r2
 80008de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80008e2:	0c23      	lsrs	r3, r4, #16
 80008e4:	fbbe fcf8 	udiv	ip, lr, r8
 80008e8:	b2b9      	uxth	r1, r7
 80008ea:	fb08 ee1c 	mls	lr, r8, ip, lr
 80008ee:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80008f2:	fb0c f001 	mul.w	r0, ip, r1
 80008f6:	4298      	cmp	r0, r3
 80008f8:	d90a      	bls.n	8000910 <__udivmoddi4+0x64>
 80008fa:	18fb      	adds	r3, r7, r3
 80008fc:	f10c 35ff 	add.w	r5, ip, #4294967295
 8000900:	f080 8116 	bcs.w	8000b30 <__udivmoddi4+0x284>
 8000904:	4298      	cmp	r0, r3
 8000906:	f240 8113 	bls.w	8000b30 <__udivmoddi4+0x284>
 800090a:	f1ac 0c02 	sub.w	ip, ip, #2
 800090e:	443b      	add	r3, r7
 8000910:	1a1b      	subs	r3, r3, r0
 8000912:	b2a4      	uxth	r4, r4
 8000914:	fbb3 f0f8 	udiv	r0, r3, r8
 8000918:	fb08 3310 	mls	r3, r8, r0, r3
 800091c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000920:	fb00 f101 	mul.w	r1, r0, r1
 8000924:	42a1      	cmp	r1, r4
 8000926:	d909      	bls.n	800093c <__udivmoddi4+0x90>
 8000928:	193c      	adds	r4, r7, r4
 800092a:	f100 33ff 	add.w	r3, r0, #4294967295
 800092e:	f080 8101 	bcs.w	8000b34 <__udivmoddi4+0x288>
 8000932:	42a1      	cmp	r1, r4
 8000934:	f240 80fe 	bls.w	8000b34 <__udivmoddi4+0x288>
 8000938:	3802      	subs	r0, #2
 800093a:	443c      	add	r4, r7
 800093c:	1a64      	subs	r4, r4, r1
 800093e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000942:	2100      	movs	r1, #0
 8000944:	b11e      	cbz	r6, 800094e <__udivmoddi4+0xa2>
 8000946:	40d4      	lsrs	r4, r2
 8000948:	2300      	movs	r3, #0
 800094a:	e9c6 4300 	strd	r4, r3, [r6]
 800094e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000952:	b902      	cbnz	r2, 8000956 <__udivmoddi4+0xaa>
 8000954:	deff      	udf	#255	; 0xff
 8000956:	fab2 f282 	clz	r2, r2
 800095a:	2a00      	cmp	r2, #0
 800095c:	d14f      	bne.n	80009fe <__udivmoddi4+0x152>
 800095e:	1bcb      	subs	r3, r1, r7
 8000960:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000964:	fa1f f887 	uxth.w	r8, r7
 8000968:	2101      	movs	r1, #1
 800096a:	fbb3 fcfe 	udiv	ip, r3, lr
 800096e:	0c25      	lsrs	r5, r4, #16
 8000970:	fb0e 331c 	mls	r3, lr, ip, r3
 8000974:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000978:	fb08 f30c 	mul.w	r3, r8, ip
 800097c:	42ab      	cmp	r3, r5
 800097e:	d907      	bls.n	8000990 <__udivmoddi4+0xe4>
 8000980:	197d      	adds	r5, r7, r5
 8000982:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000986:	d202      	bcs.n	800098e <__udivmoddi4+0xe2>
 8000988:	42ab      	cmp	r3, r5
 800098a:	f200 80e7 	bhi.w	8000b5c <__udivmoddi4+0x2b0>
 800098e:	4684      	mov	ip, r0
 8000990:	1aed      	subs	r5, r5, r3
 8000992:	b2a3      	uxth	r3, r4
 8000994:	fbb5 f0fe 	udiv	r0, r5, lr
 8000998:	fb0e 5510 	mls	r5, lr, r0, r5
 800099c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80009a0:	fb08 f800 	mul.w	r8, r8, r0
 80009a4:	45a0      	cmp	r8, r4
 80009a6:	d907      	bls.n	80009b8 <__udivmoddi4+0x10c>
 80009a8:	193c      	adds	r4, r7, r4
 80009aa:	f100 33ff 	add.w	r3, r0, #4294967295
 80009ae:	d202      	bcs.n	80009b6 <__udivmoddi4+0x10a>
 80009b0:	45a0      	cmp	r8, r4
 80009b2:	f200 80d7 	bhi.w	8000b64 <__udivmoddi4+0x2b8>
 80009b6:	4618      	mov	r0, r3
 80009b8:	eba4 0408 	sub.w	r4, r4, r8
 80009bc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80009c0:	e7c0      	b.n	8000944 <__udivmoddi4+0x98>
 80009c2:	428b      	cmp	r3, r1
 80009c4:	d908      	bls.n	80009d8 <__udivmoddi4+0x12c>
 80009c6:	2e00      	cmp	r6, #0
 80009c8:	f000 80af 	beq.w	8000b2a <__udivmoddi4+0x27e>
 80009cc:	2100      	movs	r1, #0
 80009ce:	e9c6 0500 	strd	r0, r5, [r6]
 80009d2:	4608      	mov	r0, r1
 80009d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009d8:	fab3 f183 	clz	r1, r3
 80009dc:	2900      	cmp	r1, #0
 80009de:	d14b      	bne.n	8000a78 <__udivmoddi4+0x1cc>
 80009e0:	42ab      	cmp	r3, r5
 80009e2:	d302      	bcc.n	80009ea <__udivmoddi4+0x13e>
 80009e4:	4282      	cmp	r2, r0
 80009e6:	f200 80b7 	bhi.w	8000b58 <__udivmoddi4+0x2ac>
 80009ea:	1a84      	subs	r4, r0, r2
 80009ec:	eb65 0303 	sbc.w	r3, r5, r3
 80009f0:	2001      	movs	r0, #1
 80009f2:	469e      	mov	lr, r3
 80009f4:	2e00      	cmp	r6, #0
 80009f6:	d0aa      	beq.n	800094e <__udivmoddi4+0xa2>
 80009f8:	e9c6 4e00 	strd	r4, lr, [r6]
 80009fc:	e7a7      	b.n	800094e <__udivmoddi4+0xa2>
 80009fe:	f1c2 0c20 	rsb	ip, r2, #32
 8000a02:	fa01 f302 	lsl.w	r3, r1, r2
 8000a06:	4097      	lsls	r7, r2
 8000a08:	fa20 f00c 	lsr.w	r0, r0, ip
 8000a0c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a10:	fa21 fc0c 	lsr.w	ip, r1, ip
 8000a14:	4318      	orrs	r0, r3
 8000a16:	fbbc f1fe 	udiv	r1, ip, lr
 8000a1a:	0c05      	lsrs	r5, r0, #16
 8000a1c:	fb0e cc11 	mls	ip, lr, r1, ip
 8000a20:	fa1f f887 	uxth.w	r8, r7
 8000a24:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000a28:	fb01 f308 	mul.w	r3, r1, r8
 8000a2c:	42ab      	cmp	r3, r5
 8000a2e:	fa04 f402 	lsl.w	r4, r4, r2
 8000a32:	d909      	bls.n	8000a48 <__udivmoddi4+0x19c>
 8000a34:	197d      	adds	r5, r7, r5
 8000a36:	f101 3cff 	add.w	ip, r1, #4294967295
 8000a3a:	f080 808b 	bcs.w	8000b54 <__udivmoddi4+0x2a8>
 8000a3e:	42ab      	cmp	r3, r5
 8000a40:	f240 8088 	bls.w	8000b54 <__udivmoddi4+0x2a8>
 8000a44:	3902      	subs	r1, #2
 8000a46:	443d      	add	r5, r7
 8000a48:	1aeb      	subs	r3, r5, r3
 8000a4a:	b285      	uxth	r5, r0
 8000a4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a54:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000a58:	fb00 f308 	mul.w	r3, r0, r8
 8000a5c:	42ab      	cmp	r3, r5
 8000a5e:	d907      	bls.n	8000a70 <__udivmoddi4+0x1c4>
 8000a60:	197d      	adds	r5, r7, r5
 8000a62:	f100 3cff 	add.w	ip, r0, #4294967295
 8000a66:	d271      	bcs.n	8000b4c <__udivmoddi4+0x2a0>
 8000a68:	42ab      	cmp	r3, r5
 8000a6a:	d96f      	bls.n	8000b4c <__udivmoddi4+0x2a0>
 8000a6c:	3802      	subs	r0, #2
 8000a6e:	443d      	add	r5, r7
 8000a70:	1aeb      	subs	r3, r5, r3
 8000a72:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a76:	e778      	b.n	800096a <__udivmoddi4+0xbe>
 8000a78:	f1c1 0c20 	rsb	ip, r1, #32
 8000a7c:	408b      	lsls	r3, r1
 8000a7e:	fa22 f70c 	lsr.w	r7, r2, ip
 8000a82:	431f      	orrs	r7, r3
 8000a84:	fa20 f40c 	lsr.w	r4, r0, ip
 8000a88:	fa05 f301 	lsl.w	r3, r5, r1
 8000a8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a90:	fa25 f50c 	lsr.w	r5, r5, ip
 8000a94:	431c      	orrs	r4, r3
 8000a96:	0c23      	lsrs	r3, r4, #16
 8000a98:	fbb5 f9fe 	udiv	r9, r5, lr
 8000a9c:	fa1f f887 	uxth.w	r8, r7
 8000aa0:	fb0e 5519 	mls	r5, lr, r9, r5
 8000aa4:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 8000aa8:	fb09 fa08 	mul.w	sl, r9, r8
 8000aac:	45aa      	cmp	sl, r5
 8000aae:	fa02 f201 	lsl.w	r2, r2, r1
 8000ab2:	fa00 f301 	lsl.w	r3, r0, r1
 8000ab6:	d908      	bls.n	8000aca <__udivmoddi4+0x21e>
 8000ab8:	197d      	adds	r5, r7, r5
 8000aba:	f109 30ff 	add.w	r0, r9, #4294967295
 8000abe:	d247      	bcs.n	8000b50 <__udivmoddi4+0x2a4>
 8000ac0:	45aa      	cmp	sl, r5
 8000ac2:	d945      	bls.n	8000b50 <__udivmoddi4+0x2a4>
 8000ac4:	f1a9 0902 	sub.w	r9, r9, #2
 8000ac8:	443d      	add	r5, r7
 8000aca:	eba5 050a 	sub.w	r5, r5, sl
 8000ace:	b2a4      	uxth	r4, r4
 8000ad0:	fbb5 f0fe 	udiv	r0, r5, lr
 8000ad4:	fb0e 5510 	mls	r5, lr, r0, r5
 8000ad8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000adc:	fb00 f808 	mul.w	r8, r0, r8
 8000ae0:	45a0      	cmp	r8, r4
 8000ae2:	d907      	bls.n	8000af4 <__udivmoddi4+0x248>
 8000ae4:	193c      	adds	r4, r7, r4
 8000ae6:	f100 35ff 	add.w	r5, r0, #4294967295
 8000aea:	d22d      	bcs.n	8000b48 <__udivmoddi4+0x29c>
 8000aec:	45a0      	cmp	r8, r4
 8000aee:	d92b      	bls.n	8000b48 <__udivmoddi4+0x29c>
 8000af0:	3802      	subs	r0, #2
 8000af2:	443c      	add	r4, r7
 8000af4:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000af8:	eba4 0408 	sub.w	r4, r4, r8
 8000afc:	fba0 8902 	umull	r8, r9, r0, r2
 8000b00:	454c      	cmp	r4, r9
 8000b02:	46c6      	mov	lr, r8
 8000b04:	464d      	mov	r5, r9
 8000b06:	d319      	bcc.n	8000b3c <__udivmoddi4+0x290>
 8000b08:	d016      	beq.n	8000b38 <__udivmoddi4+0x28c>
 8000b0a:	b15e      	cbz	r6, 8000b24 <__udivmoddi4+0x278>
 8000b0c:	ebb3 020e 	subs.w	r2, r3, lr
 8000b10:	eb64 0405 	sbc.w	r4, r4, r5
 8000b14:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000b18:	40ca      	lsrs	r2, r1
 8000b1a:	ea4c 0202 	orr.w	r2, ip, r2
 8000b1e:	40cc      	lsrs	r4, r1
 8000b20:	e9c6 2400 	strd	r2, r4, [r6]
 8000b24:	2100      	movs	r1, #0
 8000b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2a:	4631      	mov	r1, r6
 8000b2c:	4630      	mov	r0, r6
 8000b2e:	e70e      	b.n	800094e <__udivmoddi4+0xa2>
 8000b30:	46ac      	mov	ip, r5
 8000b32:	e6ed      	b.n	8000910 <__udivmoddi4+0x64>
 8000b34:	4618      	mov	r0, r3
 8000b36:	e701      	b.n	800093c <__udivmoddi4+0x90>
 8000b38:	4543      	cmp	r3, r8
 8000b3a:	d2e6      	bcs.n	8000b0a <__udivmoddi4+0x25e>
 8000b3c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000b40:	eb69 0507 	sbc.w	r5, r9, r7
 8000b44:	3801      	subs	r0, #1
 8000b46:	e7e0      	b.n	8000b0a <__udivmoddi4+0x25e>
 8000b48:	4628      	mov	r0, r5
 8000b4a:	e7d3      	b.n	8000af4 <__udivmoddi4+0x248>
 8000b4c:	4660      	mov	r0, ip
 8000b4e:	e78f      	b.n	8000a70 <__udivmoddi4+0x1c4>
 8000b50:	4681      	mov	r9, r0
 8000b52:	e7ba      	b.n	8000aca <__udivmoddi4+0x21e>
 8000b54:	4661      	mov	r1, ip
 8000b56:	e777      	b.n	8000a48 <__udivmoddi4+0x19c>
 8000b58:	4608      	mov	r0, r1
 8000b5a:	e74b      	b.n	80009f4 <__udivmoddi4+0x148>
 8000b5c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b60:	443d      	add	r5, r7
 8000b62:	e715      	b.n	8000990 <__udivmoddi4+0xe4>
 8000b64:	3802      	subs	r0, #2
 8000b66:	443c      	add	r4, r7
 8000b68:	e726      	b.n	80009b8 <__udivmoddi4+0x10c>
 8000b6a:	bf00      	nop

08000b6c <__aeabi_idiv0>:
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop

08000b70 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b085      	sub	sp, #20
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000b78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b7c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000b7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	4313      	orrs	r3, r2
 8000b86:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000b88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b8c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	4013      	ands	r3, r2
 8000b92:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b94:	68fb      	ldr	r3, [r7, #12]
}
 8000b96:	bf00      	nop
 8000b98:	3714      	adds	r7, #20
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bc80      	pop	{r7}
 8000b9e:	4770      	bx	lr

08000ba0 <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8000ba8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	43db      	mvns	r3, r3
 8000bb2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000bb6:	4013      	ands	r3, r2
 8000bb8:	660b      	str	r3, [r1, #96]	; 0x60
}
 8000bba:	bf00      	nop
 8000bbc:	370c      	adds	r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bc80      	pop	{r7}
 8000bc2:	4770      	bx	lr

08000bc4 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8000bc8:	4b23      	ldr	r3, [pc, #140]	; (8000c58 <MX_ADC_Init+0x94>)
 8000bca:	4a24      	ldr	r2, [pc, #144]	; (8000c5c <MX_ADC_Init+0x98>)
 8000bcc:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000bce:	4b22      	ldr	r3, [pc, #136]	; (8000c58 <MX_ADC_Init+0x94>)
 8000bd0:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 8000bd4:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000bd6:	4b20      	ldr	r3, [pc, #128]	; (8000c58 <MX_ADC_Init+0x94>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bdc:	4b1e      	ldr	r3, [pc, #120]	; (8000c58 <MX_ADC_Init+0x94>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000be2:	4b1d      	ldr	r3, [pc, #116]	; (8000c58 <MX_ADC_Init+0x94>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000be8:	4b1b      	ldr	r3, [pc, #108]	; (8000c58 <MX_ADC_Init+0x94>)
 8000bea:	2204      	movs	r2, #4
 8000bec:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000bee:	4b1a      	ldr	r3, [pc, #104]	; (8000c58 <MX_ADC_Init+0x94>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000bf4:	4b18      	ldr	r3, [pc, #96]	; (8000c58 <MX_ADC_Init+0x94>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000bfa:	4b17      	ldr	r3, [pc, #92]	; (8000c58 <MX_ADC_Init+0x94>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 8000c00:	4b15      	ldr	r3, [pc, #84]	; (8000c58 <MX_ADC_Init+0x94>)
 8000c02:	2201      	movs	r2, #1
 8000c04:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000c06:	4b14      	ldr	r3, [pc, #80]	; (8000c58 <MX_ADC_Init+0x94>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c0e:	4b12      	ldr	r3, [pc, #72]	; (8000c58 <MX_ADC_Init+0x94>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c14:	4b10      	ldr	r3, [pc, #64]	; (8000c58 <MX_ADC_Init+0x94>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000c1a:	4b0f      	ldr	r3, [pc, #60]	; (8000c58 <MX_ADC_Init+0x94>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c22:	4b0d      	ldr	r3, [pc, #52]	; (8000c58 <MX_ADC_Init+0x94>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8000c28:	4b0b      	ldr	r3, [pc, #44]	; (8000c58 <MX_ADC_Init+0x94>)
 8000c2a:	2207      	movs	r2, #7
 8000c2c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8000c2e:	4b0a      	ldr	r3, [pc, #40]	; (8000c58 <MX_ADC_Init+0x94>)
 8000c30:	2207      	movs	r2, #7
 8000c32:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8000c34:	4b08      	ldr	r3, [pc, #32]	; (8000c58 <MX_ADC_Init+0x94>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000c3c:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <MX_ADC_Init+0x94>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000c42:	4805      	ldr	r0, [pc, #20]	; (8000c58 <MX_ADC_Init+0x94>)
 8000c44:	f001 fbfc 	bl	8002440 <HAL_ADC_Init>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_ADC_Init+0x8e>
  {
    Error_Handler();
 8000c4e:	f000 fa2f 	bl	80010b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	200014c4 	.word	0x200014c4
 8000c5c:	40012400 	.word	0x40012400

08000c60 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a05      	ldr	r2, [pc, #20]	; (8000c84 <HAL_ADC_MspInit+0x24>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d103      	bne.n	8000c7a <HAL_ADC_MspInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000c72:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000c76:	f7ff ff7b 	bl	8000b70 <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 8000c7a:	bf00      	nop
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40012400 	.word	0x40012400

08000c88 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a05      	ldr	r2, [pc, #20]	; (8000cac <HAL_ADC_MspDeInit+0x24>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d103      	bne.n	8000ca2 <HAL_ADC_MspDeInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspDeInit 0 */

  /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 8000c9a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000c9e:	f7ff ff7f 	bl	8000ba0 <LL_APB2_GRP1_DisableClock>
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8000ca2:	bf00      	nop
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	40012400 	.word	0x40012400

08000cb0 <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc.Instance = ADC;
 8000cb4:	4b03      	ldr	r3, [pc, #12]	; (8000cc4 <SYS_InitMeasurement+0x14>)
 8000cb6:	4a04      	ldr	r2, [pc, #16]	; (8000cc8 <SYS_InitMeasurement+0x18>)
 8000cb8:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 8000cba:	bf00      	nop
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bc80      	pop	{r7}
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	200014c4 	.word	0x200014c4
 8000cc8:	40012400 	.word	0x40012400

08000ccc <SYS_GetTemperatureLevel>:

  /* USER CODE END SYS_DeInitMeasurement_1 */
}

int16_t SYS_GetTemperatureLevel(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b086      	sub	sp, #24
 8000cd0:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SYS_GetTemperatureLevel_1 */

  /* USER CODE END SYS_GetTemperatureLevel_1 */
  int16_t temperatureDegreeC = 0;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	81fb      	strh	r3, [r7, #14]
  uint32_t measuredLevel = 0;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	60bb      	str	r3, [r7, #8]
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 8000cda:	f000 f871 	bl	8000dc0 <SYS_GetBatteryLevel>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	80fb      	strh	r3, [r7, #6]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 8000ce2:	4830      	ldr	r0, [pc, #192]	; (8000da4 <SYS_GetTemperatureLevel+0xd8>)
 8000ce4:	f000 f8a0 	bl	8000e28 <ADC_ReadChannels>
 8000ce8:	60b8      	str	r0, [r7, #8]

  /* convert ADC level to temperature */
  /* check whether device has temperature sensor calibrated in production */
  if (((int32_t)*TEMPSENSOR_CAL2_ADDR - (int32_t)*TEMPSENSOR_CAL1_ADDR) != 0)
 8000cea:	4b2f      	ldr	r3, [pc, #188]	; (8000da8 <SYS_GetTemperatureLevel+0xdc>)
 8000cec:	881a      	ldrh	r2, [r3, #0]
 8000cee:	4b2f      	ldr	r3, [pc, #188]	; (8000dac <SYS_GetTemperatureLevel+0xe0>)
 8000cf0:	881b      	ldrh	r3, [r3, #0]
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d026      	beq.n	8000d44 <SYS_GetTemperatureLevel+0x78>
  {
    /* Device with temperature sensor calibrated in production:
       use device optimized parameters */
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE(batteryLevelmV,
 8000cf6:	4b2c      	ldr	r3, [pc, #176]	; (8000da8 <SYS_GetTemperatureLevel+0xdc>)
 8000cf8:	881a      	ldrh	r2, [r3, #0]
 8000cfa:	4b2c      	ldr	r3, [pc, #176]	; (8000dac <SYS_GetTemperatureLevel+0xe0>)
 8000cfc:	881b      	ldrh	r3, [r3, #0]
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	d01c      	beq.n	8000d3c <SYS_GetTemperatureLevel+0x70>
 8000d02:	88fb      	ldrh	r3, [r7, #6]
 8000d04:	68ba      	ldr	r2, [r7, #8]
 8000d06:	fb02 f303 	mul.w	r3, r2, r3
 8000d0a:	089b      	lsrs	r3, r3, #2
 8000d0c:	4a28      	ldr	r2, [pc, #160]	; (8000db0 <SYS_GetTemperatureLevel+0xe4>)
 8000d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d12:	095b      	lsrs	r3, r3, #5
 8000d14:	461a      	mov	r2, r3
 8000d16:	4b25      	ldr	r3, [pc, #148]	; (8000dac <SYS_GetTemperatureLevel+0xe0>)
 8000d18:	881b      	ldrh	r3, [r3, #0]
 8000d1a:	1ad3      	subs	r3, r2, r3
 8000d1c:	2264      	movs	r2, #100	; 0x64
 8000d1e:	fb02 f203 	mul.w	r2, r2, r3
 8000d22:	4b21      	ldr	r3, [pc, #132]	; (8000da8 <SYS_GetTemperatureLevel+0xdc>)
 8000d24:	881b      	ldrh	r3, [r3, #0]
 8000d26:	4619      	mov	r1, r3
 8000d28:	4b20      	ldr	r3, [pc, #128]	; (8000dac <SYS_GetTemperatureLevel+0xe0>)
 8000d2a:	881b      	ldrh	r3, [r3, #0]
 8000d2c:	1acb      	subs	r3, r1, r3
 8000d2e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d32:	b29b      	uxth	r3, r3
 8000d34:	331e      	adds	r3, #30
 8000d36:	b29b      	uxth	r3, r3
 8000d38:	b21b      	sxth	r3, r3
 8000d3a:	e001      	b.n	8000d40 <SYS_GetTemperatureLevel+0x74>
 8000d3c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8000d40:	81fb      	strh	r3, [r7, #14]
 8000d42:	e01c      	b.n	8000d7e <SYS_GetTemperatureLevel+0xb2>
  }
  else
  {
    /* Device with temperature sensor not calibrated in production:
       use generic parameters */
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS(TEMPSENSOR_TYP_AVGSLOPE,
 8000d44:	88fb      	ldrh	r3, [r7, #6]
 8000d46:	68ba      	ldr	r2, [r7, #8]
 8000d48:	fb02 f203 	mul.w	r2, r2, r3
 8000d4c:	4b19      	ldr	r3, [pc, #100]	; (8000db4 <SYS_GetTemperatureLevel+0xe8>)
 8000d4e:	fba3 1302 	umull	r1, r3, r3, r2
 8000d52:	1ad2      	subs	r2, r2, r3
 8000d54:	0852      	lsrs	r2, r2, #1
 8000d56:	4413      	add	r3, r2
 8000d58:	0adb      	lsrs	r3, r3, #11
 8000d5a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d5e:	fb02 f303 	mul.w	r3, r2, r3
 8000d62:	f5a3 2339 	sub.w	r3, r3, #757760	; 0xb9000
 8000d66:	f5a3 630c 	sub.w	r3, r3, #2240	; 0x8c0
 8000d6a:	4a13      	ldr	r2, [pc, #76]	; (8000db8 <SYS_GetTemperatureLevel+0xec>)
 8000d6c:	fb82 1203 	smull	r1, r2, r2, r3
 8000d70:	1292      	asrs	r2, r2, #10
 8000d72:	17db      	asrs	r3, r3, #31
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	b29b      	uxth	r3, r3
 8000d78:	331e      	adds	r3, #30
 8000d7a:	b29b      	uxth	r3, r3
 8000d7c:	81fb      	strh	r3, [r7, #14]
                                                              batteryLevelmV,
                                                              measuredLevel,
                                                              LL_ADC_RESOLUTION_12B);
  }

  APP_LOG(TS_ON, VLEVEL_L, "temp= %d\n\r", temperatureDegreeC);
 8000d7e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d82:	9300      	str	r3, [sp, #0]
 8000d84:	4b0d      	ldr	r3, [pc, #52]	; (8000dbc <SYS_GetTemperatureLevel+0xf0>)
 8000d86:	2201      	movs	r2, #1
 8000d88:	2100      	movs	r1, #0
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	f017 fef8 	bl	8018b80 <UTIL_ADV_TRACE_COND_FSend>

  /* from int16 to q8.7*/
  temperatureDegreeC <<= 8;
 8000d90:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d94:	021b      	lsls	r3, r3, #8
 8000d96:	81fb      	strh	r3, [r7, #14]

  return (int16_t) temperatureDegreeC;
 8000d98:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
  /* USER CODE BEGIN SYS_GetTemperatureLevel_2 */

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	3710      	adds	r7, #16
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	b0001000 	.word	0xb0001000
 8000da8:	1fff75c8 	.word	0x1fff75c8
 8000dac:	1fff75a8 	.word	0x1fff75a8
 8000db0:	09ee009f 	.word	0x09ee009f
 8000db4:	00100101 	.word	0x00100101
 8000db8:	68db8bad 	.word	0x68db8bad
 8000dbc:	080191e8 	.word	0x080191e8

08000dc0 <SYS_GetBatteryLevel>:

uint16_t SYS_GetBatteryLevel(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	80fb      	strh	r3, [r7, #6]
  uint32_t measuredLevel = 0;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 8000dce:	4813      	ldr	r0, [pc, #76]	; (8000e1c <SYS_GetBatteryLevel+0x5c>)
 8000dd0:	f000 f82a 	bl	8000e28 <ADC_ReadChannels>
 8000dd4:	6038      	str	r0, [r7, #0]

  if (measuredLevel == 0)
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d102      	bne.n	8000de2 <SYS_GetBatteryLevel+0x22>
  {
    batteryLevelmV = 0;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	80fb      	strh	r3, [r7, #6]
 8000de0:	e016      	b.n	8000e10 <SYS_GetBatteryLevel+0x50>
  }
  else
  {
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 8000de2:	4b0f      	ldr	r3, [pc, #60]	; (8000e20 <SYS_GetBatteryLevel+0x60>)
 8000de4:	881b      	ldrh	r3, [r3, #0]
 8000de6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d00b      	beq.n	8000e06 <SYS_GetBatteryLevel+0x46>
    {
      /* Device with Reference voltage calibrated in production:
         use device optimized parameters */
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 8000dee:	4b0c      	ldr	r3, [pc, #48]	; (8000e20 <SYS_GetBatteryLevel+0x60>)
 8000df0:	881b      	ldrh	r3, [r3, #0]
 8000df2:	461a      	mov	r2, r3
 8000df4:	f640 43e4 	movw	r3, #3300	; 0xce4
 8000df8:	fb03 f202 	mul.w	r2, r3, r2
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e02:	80fb      	strh	r3, [r7, #6]
 8000e04:	e004      	b.n	8000e10 <SYS_GetBatteryLevel+0x50>
    }
    else
    {
      /* Device with Reference voltage not calibrated in production:
         use generic parameters */
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 8000e06:	4a07      	ldr	r2, [pc, #28]	; (8000e24 <SYS_GetBatteryLevel+0x64>)
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e0e:	80fb      	strh	r3, [r7, #6]
    }
  }

  return batteryLevelmV;
 8000e10:	88fb      	ldrh	r3, [r7, #6]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	b4002000 	.word	0xb4002000
 8000e20:	1fff75aa 	.word	0x1fff75aa
 8000e24:	004c08d8 	.word	0x004c08d8

08000e28 <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b086      	sub	sp, #24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 8000e30:	2300      	movs	r3, #0
 8000e32:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e34:	f107 0308 	add.w	r3, r7, #8
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	605a      	str	r2, [r3, #4]
 8000e3e:	609a      	str	r2, [r3, #8]

  MX_ADC_Init();
 8000e40:	f7ff fec0 	bl	8000bc4 <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 8000e44:	481a      	ldr	r0, [pc, #104]	; (8000eb0 <ADC_ReadChannels+0x88>)
 8000e46:	f002 f8e1 	bl	800300c <HAL_ADCEx_Calibration_Start>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <ADC_ReadChannels+0x2c>
  {
    Error_Handler();
 8000e50:	f000 f92e 	bl	80010b0 <Error_Handler>
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000e60:	f107 0308 	add.w	r3, r7, #8
 8000e64:	4619      	mov	r1, r3
 8000e66:	4812      	ldr	r0, [pc, #72]	; (8000eb0 <ADC_ReadChannels+0x88>)
 8000e68:	f001 fe48 	bl	8002afc <HAL_ADC_ConfigChannel>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <ADC_ReadChannels+0x4e>
  {
    Error_Handler();
 8000e72:	f000 f91d 	bl	80010b0 <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 8000e76:	480e      	ldr	r0, [pc, #56]	; (8000eb0 <ADC_ReadChannels+0x88>)
 8000e78:	f001 fd24 	bl	80028c4 <HAL_ADC_Start>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <ADC_ReadChannels+0x5e>
  {
    /* Start Error */
    Error_Handler();
 8000e82:	f000 f915 	bl	80010b0 <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8000e86:	f04f 31ff 	mov.w	r1, #4294967295
 8000e8a:	4809      	ldr	r0, [pc, #36]	; (8000eb0 <ADC_ReadChannels+0x88>)
 8000e8c:	f001 fd92 	bl	80029b4 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc) ;   /* it calls also ADC_Disable() */
 8000e90:	4807      	ldr	r0, [pc, #28]	; (8000eb0 <ADC_ReadChannels+0x88>)
 8000e92:	f001 fd5d 	bl	8002950 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 8000e96:	4806      	ldr	r0, [pc, #24]	; (8000eb0 <ADC_ReadChannels+0x88>)
 8000e98:	f001 fe23 	bl	8002ae2 <HAL_ADC_GetValue>
 8000e9c:	6178      	str	r0, [r7, #20]

  HAL_ADC_DeInit(&hadc);
 8000e9e:	4804      	ldr	r0, [pc, #16]	; (8000eb0 <ADC_ReadChannels+0x88>)
 8000ea0:	f001 fc94 	bl	80027cc <HAL_ADC_DeInit>

  return ADCxConvertedValues;
 8000ea4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3718      	adds	r7, #24
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	200014c4 	.word	0x200014c4

08000eb4 <LL_AHB1_GRP1_EnableClock>:
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b085      	sub	sp, #20
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000ebc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ec0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000ec2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000ecc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ed0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ed8:	68fb      	ldr	r3, [r7, #12]
}
 8000eda:	bf00      	nop
 8000edc:	3714      	adds	r7, #20
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bc80      	pop	{r7}
 8000ee2:	4770      	bx	lr

08000ee4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000ee8:	2004      	movs	r0, #4
 8000eea:	f7ff ffe3 	bl	8000eb4 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000eee:	2001      	movs	r0, #1
 8000ef0:	f7ff ffe0 	bl	8000eb4 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	200f      	movs	r0, #15
 8000efa:	f002 f9fc 	bl	80032f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000efe:	200f      	movs	r0, #15
 8000f00:	f002 fa13 	bl	800332a <HAL_NVIC_EnableIRQ>

}
 8000f04:	bf00      	nop
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <LL_AHB2_GRP1_EnableClock>:
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b085      	sub	sp, #20
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000f10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f14:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000f20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f24:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f2c:	68fb      	ldr	r3, [r7, #12]
}
 8000f2e:	bf00      	nop
 8000f30:	3714      	adds	r7, #20
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bc80      	pop	{r7}
 8000f36:	4770      	bx	lr

08000f38 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3e:	1d3b      	adds	r3, r7, #4
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	60da      	str	r2, [r3, #12]
 8000f4a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f4c:	2004      	movs	r0, #4
 8000f4e:	f7ff ffdb 	bl	8000f08 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f52:	2002      	movs	r0, #2
 8000f54:	f7ff ffd8 	bl	8000f08 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f58:	2001      	movs	r0, #1
 8000f5a:	f7ff ffd5 	bl	8000f08 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000f5e:	2200      	movs	r2, #0
 8000f60:	2120      	movs	r1, #32
 8000f62:	4814      	ldr	r0, [pc, #80]	; (8000fb4 <MX_GPIO_Init+0x7c>)
 8000f64:	f003 f822 	bl	8003fac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000f68:	2320      	movs	r3, #32
 8000f6a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f70:	2300      	movs	r3, #0
 8000f72:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f74:	2300      	movs	r3, #0
 8000f76:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000f78:	1d3b      	adds	r3, r7, #4
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	480d      	ldr	r0, [pc, #52]	; (8000fb4 <MX_GPIO_Init+0x7c>)
 8000f7e:	f002 fde7 	bl	8003b50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button_Pin;
 8000f82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f86:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f88:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f8c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8000f92:	1d3b      	adds	r3, r7, #4
 8000f94:	4619      	mov	r1, r3
 8000f96:	4807      	ldr	r0, [pc, #28]	; (8000fb4 <MX_GPIO_Init+0x7c>)
 8000f98:	f002 fdda 	bl	8003b50 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	2029      	movs	r0, #41	; 0x29
 8000fa2:	f002 f9a8 	bl	80032f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000fa6:	2029      	movs	r0, #41	; 0x29
 8000fa8:	f002 f9bf 	bl	800332a <HAL_NVIC_EnableIRQ>

}
 8000fac:	bf00      	nop
 8000fae:	3718      	adds	r7, #24
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	48000400 	.word	0x48000400

08000fb8 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000fc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000fc8:	f023 0218 	bic.w	r2, r3, #24
 8000fcc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000fd8:	bf00      	nop
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bc80      	pop	{r7}
 8000fe0:	4770      	bx	lr

08000fe2 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fe6:	f001 f81b 	bl	8002020 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fea:	f000 f807 	bl	8000ffc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fee:	f7ff ffa3 	bl	8000f38 <MX_GPIO_Init>
  MX_LoRaWAN_Init();
 8000ff2:	f007 fd31 	bl	8008a58 <MX_LoRaWAN_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_LoRaWAN_Process();
 8000ff6:	f007 fd37 	bl	8008a68 <MX_LoRaWAN_Process>
 8000ffa:	e7fc      	b.n	8000ff6 <main+0x14>

08000ffc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b09a      	sub	sp, #104	; 0x68
 8001000:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001002:	f107 0320 	add.w	r3, r7, #32
 8001006:	2248      	movs	r2, #72	; 0x48
 8001008:	2100      	movs	r1, #0
 800100a:	4618      	mov	r0, r3
 800100c:	f018 f8d8 	bl	80191c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001010:	f107 0308 	add.w	r3, r7, #8
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	609a      	str	r2, [r3, #8]
 800101c:	60da      	str	r2, [r3, #12]
 800101e:	611a      	str	r2, [r3, #16]
 8001020:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001022:	f002 fffd 	bl	8004020 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001026:	2000      	movs	r0, #0
 8001028:	f7ff ffc6 	bl	8000fb8 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800102c:	4b1f      	ldr	r3, [pc, #124]	; (80010ac <SystemClock_Config+0xb0>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001034:	4a1d      	ldr	r2, [pc, #116]	; (80010ac <SystemClock_Config+0xb0>)
 8001036:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800103a:	6013      	str	r3, [r2, #0]
 800103c:	4b1b      	ldr	r3, [pc, #108]	; (80010ac <SystemClock_Config+0xb0>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001044:	607b      	str	r3, [r7, #4]
 8001046:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001048:	2324      	movs	r3, #36	; 0x24
 800104a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800104c:	2381      	movs	r3, #129	; 0x81
 800104e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001050:	2301      	movs	r3, #1
 8001052:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001054:	2300      	movs	r3, #0
 8001056:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8001058:	23a0      	movs	r3, #160	; 0xa0
 800105a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800105c:	2300      	movs	r3, #0
 800105e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001060:	f107 0320 	add.w	r3, r7, #32
 8001064:	4618      	mov	r0, r3
 8001066:	f003 fb27 	bl	80046b8 <HAL_RCC_OscConfig>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001070:	f000 f81e 	bl	80010b0 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001074:	234f      	movs	r3, #79	; 0x4f
 8001076:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001078:	2300      	movs	r3, #0
 800107a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800107c:	2300      	movs	r3, #0
 800107e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001080:	2300      	movs	r3, #0
 8001082:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001084:	2300      	movs	r3, #0
 8001086:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001088:	2300      	movs	r3, #0
 800108a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800108c:	f107 0308 	add.w	r3, r7, #8
 8001090:	2102      	movs	r1, #2
 8001092:	4618      	mov	r0, r3
 8001094:	f003 feaa 	bl	8004dec <HAL_RCC_ClockConfig>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800109e:	f000 f807 	bl	80010b0 <Error_Handler>
  }
}
 80010a2:	bf00      	nop
 80010a4:	3768      	adds	r7, #104	; 0x68
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	58000400 	.word	0x58000400

080010b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010b4:	b672      	cpsid	i
}
 80010b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010b8:	e7fe      	b.n	80010b8 <Error_Handler+0x8>

080010ba <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80010ba:	b480      	push	{r7}
 80010bc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80010be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80010ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80010d2:	bf00      	nop
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bc80      	pop	{r7}
 80010d8:	4770      	bx	lr

080010da <LL_APB1_GRP1_EnableClock>:
{
 80010da:	b480      	push	{r7}
 80010dc:	b085      	sub	sp, #20
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80010e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010e6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80010e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80010f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010f6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	4013      	ands	r3, r2
 80010fc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010fe:	68fb      	ldr	r3, [r7, #12]
}
 8001100:	bf00      	nop
 8001102:	3714      	adds	r7, #20
 8001104:	46bd      	mov	sp, r7
 8001106:	bc80      	pop	{r7}
 8001108:	4770      	bx	lr
	...

0800110c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b08c      	sub	sp, #48	; 0x30
 8001110:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 8001112:	1d3b      	adds	r3, r7, #4
 8001114:	222c      	movs	r2, #44	; 0x2c
 8001116:	2100      	movs	r1, #0
 8001118:	4618      	mov	r0, r3
 800111a:	f018 f851 	bl	80191c0 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800111e:	4b23      	ldr	r3, [pc, #140]	; (80011ac <MX_RTC_Init+0xa0>)
 8001120:	4a23      	ldr	r2, [pc, #140]	; (80011b0 <MX_RTC_Init+0xa4>)
 8001122:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8001124:	4b21      	ldr	r3, [pc, #132]	; (80011ac <MX_RTC_Init+0xa0>)
 8001126:	221f      	movs	r2, #31
 8001128:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800112a:	4b20      	ldr	r3, [pc, #128]	; (80011ac <MX_RTC_Init+0xa0>)
 800112c:	2200      	movs	r2, #0
 800112e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001130:	4b1e      	ldr	r3, [pc, #120]	; (80011ac <MX_RTC_Init+0xa0>)
 8001132:	2200      	movs	r2, #0
 8001134:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001136:	4b1d      	ldr	r3, [pc, #116]	; (80011ac <MX_RTC_Init+0xa0>)
 8001138:	2200      	movs	r2, #0
 800113a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800113c:	4b1b      	ldr	r3, [pc, #108]	; (80011ac <MX_RTC_Init+0xa0>)
 800113e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001142:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001144:	4b19      	ldr	r3, [pc, #100]	; (80011ac <MX_RTC_Init+0xa0>)
 8001146:	2200      	movs	r2, #0
 8001148:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 800114a:	4b18      	ldr	r3, [pc, #96]	; (80011ac <MX_RTC_Init+0xa0>)
 800114c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001150:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001152:	4816      	ldr	r0, [pc, #88]	; (80011ac <MX_RTC_Init+0xa0>)
 8001154:	f004 fb0a 	bl	800576c <HAL_RTC_Init>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_RTC_Init+0x56>
  {
    Error_Handler();
 800115e:	f7ff ffa7 	bl	80010b0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8001162:	4812      	ldr	r0, [pc, #72]	; (80011ac <MX_RTC_Init+0xa0>)
 8001164:	f004 fdf8 	bl	8005d58 <HAL_RTCEx_SetSSRU_IT>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 800116e:	f7ff ff9f 	bl	80010b0 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_YES;
 8001172:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001176:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001178:	2300      	movs	r3, #0
 800117a:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800117c:	2300      	movs	r3, #0
 800117e:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001180:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001184:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8001186:	f44f 7380 	mov.w	r3, #256	; 0x100
 800118a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 800118c:	1d3b      	adds	r3, r7, #4
 800118e:	2200      	movs	r2, #0
 8001190:	4619      	mov	r1, r3
 8001192:	4806      	ldr	r0, [pc, #24]	; (80011ac <MX_RTC_Init+0xa0>)
 8001194:	f004 fb64 	bl	8005860 <HAL_RTC_SetAlarm_IT>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_RTC_Init+0x96>
  {
    Error_Handler();
 800119e:	f7ff ff87 	bl	80010b0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80011a2:	bf00      	nop
 80011a4:	3730      	adds	r7, #48	; 0x30
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	20001528 	.word	0x20001528
 80011b0:	40002800 	.word	0x40002800

080011b4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b090      	sub	sp, #64	; 0x40
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011bc:	f107 0308 	add.w	r3, r7, #8
 80011c0:	2238      	movs	r2, #56	; 0x38
 80011c2:	2100      	movs	r1, #0
 80011c4:	4618      	mov	r0, r3
 80011c6:	f017 fffb 	bl	80191c0 <memset>
  if(rtcHandle->Instance==RTC)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a16      	ldr	r2, [pc, #88]	; (8001228 <HAL_RTC_MspInit+0x74>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d125      	bne.n	8001220 <HAL_RTC_MspInit+0x6c>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80011d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011d8:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80011da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011de:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011e0:	f107 0308 	add.w	r3, r7, #8
 80011e4:	4618      	mov	r0, r3
 80011e6:	f004 f9a7 	bl	8005538 <HAL_RCCEx_PeriphCLKConfig>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80011f0:	f7ff ff5e 	bl	80010b0 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80011f4:	f7ff ff61 	bl	80010ba <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80011f8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80011fc:	f7ff ff6d 	bl	80010da <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8001200:	2200      	movs	r2, #0
 8001202:	2100      	movs	r1, #0
 8001204:	2002      	movs	r0, #2
 8001206:	f002 f876 	bl	80032f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 800120a:	2002      	movs	r0, #2
 800120c:	f002 f88d 	bl	800332a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001210:	2200      	movs	r2, #0
 8001212:	2100      	movs	r1, #0
 8001214:	202a      	movs	r0, #42	; 0x2a
 8001216:	f002 f86e 	bl	80032f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800121a:	202a      	movs	r0, #42	; 0x2a
 800121c:	f002 f885 	bl	800332a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001220:	bf00      	nop
 8001222:	3740      	adds	r7, #64	; 0x40
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	40002800 	.word	0x40002800

0800122c <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8001230:	4b03      	ldr	r3, [pc, #12]	; (8001240 <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 8001232:	2201      	movs	r2, #1
 8001234:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8001238:	bf00      	nop
 800123a:	46bd      	mov	sp, r7
 800123c:	bc80      	pop	{r7}
 800123e:	4770      	bx	lr
 8001240:	58000400 	.word	0x58000400

08001244 <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8001248:	bf00      	nop
 800124a:	46bd      	mov	sp, r7
 800124c:	bc80      	pop	{r7}
 800124e:	4770      	bx	lr

08001250 <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8001254:	bf00      	nop
 8001256:	46bd      	mov	sp, r7
 8001258:	bc80      	pop	{r7}
 800125a:	4770      	bx	lr

0800125c <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8001260:	f000 ff4a 	bl	80020f8 <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 8001264:	f7ff ffe2 	bl	800122c <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8001268:	2001      	movs	r0, #1
 800126a:	f002 ff6b 	bl	8004144 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}

08001272 <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 8001276:	f000 ff4d 	bl	8002114 <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 800127a:	f000 fe61 	bl	8001f40 <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}

08001282 <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 8001282:	b580      	push	{r7, lr}
 8001284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 8001286:	f000 ff37 	bl	80020f8 <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 800128a:	2101      	movs	r1, #1
 800128c:	2000      	movs	r0, #0
 800128e:	f002 fed5 	bl	800403c <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}

08001296 <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 8001296:	b580      	push	{r7, lr}
 8001298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Suspend sysTick */
  HAL_ResumeTick();
 800129a:	f000 ff3b 	bl	8002114 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 800129e:	bf00      	nop
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012a2:	b480      	push	{r7}
 80012a4:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012a6:	bf00      	nop
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bc80      	pop	{r7}
 80012ac:	4770      	bx	lr

080012ae <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012ae:	b480      	push	{r7}
 80012b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012b2:	e7fe      	b.n	80012b2 <NMI_Handler+0x4>

080012b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012b8:	e7fe      	b.n	80012b8 <HardFault_Handler+0x4>

080012ba <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012ba:	b480      	push	{r7}
 80012bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012be:	e7fe      	b.n	80012be <MemManage_Handler+0x4>

080012c0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012c4:	e7fe      	b.n	80012c4 <BusFault_Handler+0x4>

080012c6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012c6:	b480      	push	{r7}
 80012c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012ca:	e7fe      	b.n	80012ca <UsageFault_Handler+0x4>

080012cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012d0:	bf00      	nop
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bc80      	pop	{r7}
 80012d6:	4770      	bx	lr

080012d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012dc:	bf00      	nop
 80012de:	46bd      	mov	sp, r7
 80012e0:	bc80      	pop	{r7}
 80012e2:	4770      	bx	lr

080012e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012e8:	bf00      	nop
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bc80      	pop	{r7}
 80012ee:	4770      	bx	lr

080012f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012f4:	f000 feee 	bl	80020d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012f8:	bf00      	nop
 80012fa:	bd80      	pop	{r7, pc}

080012fc <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8001300:	4802      	ldr	r0, [pc, #8]	; (800130c <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 8001302:	f004 fd65 	bl	8005dd0 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	20001528 	.word	0x20001528

08001310 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 5 Interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001314:	4802      	ldr	r0, [pc, #8]	; (8001320 <DMA1_Channel5_IRQHandler+0x10>)
 8001316:	f002 faab 	bl	8003870 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800131a:	bf00      	nop
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	2000156c 	.word	0x2000156c

08001324 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001328:	4802      	ldr	r0, [pc, #8]	; (8001334 <USART2_IRQHandler+0x10>)
 800132a:	f005 fbb1 	bl	8006a90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800132e:	bf00      	nop
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	200015cc 	.word	0x200015cc

08001338 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [15:10] Interrupt.
  */
void EXTI15_10_IRQHandler(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_Pin);
 800133c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001340:	f002 fe4c 	bl	8003fdc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001344:	bf00      	nop
 8001346:	bd80      	pop	{r7, pc}

08001348 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800134c:	4802      	ldr	r0, [pc, #8]	; (8001358 <RTC_Alarm_IRQHandler+0x10>)
 800134e:	f004 fbef 	bl	8005b30 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001352:	bf00      	nop
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	20001528 	.word	0x20001528

0800135c <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8001360:	4802      	ldr	r0, [pc, #8]	; (800136c <SUBGHZ_Radio_IRQHandler+0x10>)
 8001362:	f005 f89d 	bl	80064a0 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8001366:	bf00      	nop
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	20001560 	.word	0x20001560

08001370 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001370:	b480      	push	{r7}
 8001372:	b085      	sub	sp, #20
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8001378:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800137c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800137e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4313      	orrs	r3, r2
 8001386:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8001388:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800138c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4013      	ands	r3, r2
 8001392:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001394:	68fb      	ldr	r3, [r7, #12]
}
 8001396:	bf00      	nop
 8001398:	3714      	adds	r7, #20
 800139a:	46bd      	mov	sp, r7
 800139c:	bc80      	pop	{r7}
 800139e:	4770      	bx	lr

080013a0 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 80013a4:	4b06      	ldr	r3, [pc, #24]	; (80013c0 <MX_SUBGHZ_Init+0x20>)
 80013a6:	2208      	movs	r2, #8
 80013a8:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 80013aa:	4805      	ldr	r0, [pc, #20]	; (80013c0 <MX_SUBGHZ_Init+0x20>)
 80013ac:	f004 fdfc 	bl	8005fa8 <HAL_SUBGHZ_Init>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 80013b6:	f7ff fe7b 	bl	80010b0 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 80013ba:	bf00      	nop
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	20001560 	.word	0x20001560

080013c4 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 80013cc:	2001      	movs	r0, #1
 80013ce:	f7ff ffcf 	bl	8001370 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 80013d2:	2200      	movs	r2, #0
 80013d4:	2100      	movs	r1, #0
 80013d6:	2032      	movs	r0, #50	; 0x32
 80013d8:	f001 ff8d 	bl	80032f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 80013dc:	2032      	movs	r0, #50	; 0x32
 80013de:	f001 ffa4 	bl	800332a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 80013e2:	bf00      	nop
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <LL_RCC_SetClkAfterWakeFromStop>:
{
 80013ea:	b480      	push	{r7}
 80013ec:	b083      	sub	sp, #12
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80013f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80013fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	4313      	orrs	r3, r2
 8001404:	608b      	str	r3, [r1, #8]
}
 8001406:	bf00      	nop
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	bc80      	pop	{r7}
 800140e:	4770      	bx	lr

08001410 <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8001414:	4b02      	ldr	r3, [pc, #8]	; (8001420 <LL_FLASH_GetUDN+0x10>)
 8001416:	681b      	ldr	r3, [r3, #0]
}
 8001418:	4618      	mov	r0, r3
 800141a:	46bd      	mov	sp, r7
 800141c:	bc80      	pop	{r7}
 800141e:	4770      	bx	lr
 8001420:	1fff7580 	.word	0x1fff7580

08001424 <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8001428:	4b03      	ldr	r3, [pc, #12]	; (8001438 <LL_FLASH_GetDeviceID+0x14>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	b2db      	uxtb	r3, r3
}
 800142e:	4618      	mov	r0, r3
 8001430:	46bd      	mov	sp, r7
 8001432:	bc80      	pop	{r7}
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	1fff7584 	.word	0x1fff7584

0800143c <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8001440:	4b03      	ldr	r3, [pc, #12]	; (8001450 <LL_FLASH_GetSTCompanyID+0x14>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	0a1b      	lsrs	r3, r3, #8
}
 8001446:	4618      	mov	r0, r3
 8001448:	46bd      	mov	sp, r7
 800144a:	bc80      	pop	{r7}
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	1fff7584 	.word	0x1fff7584

08001454 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8001458:	2000      	movs	r0, #0
 800145a:	f7ff ffc6 	bl	80013ea <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 800145e:	f017 f8d1 	bl	8018604 <UTIL_TIMER_Init>

  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  //DBG_ProbesInit();

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8001462:	f017 fb5f 	bl	8018b24 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8001466:	4809      	ldr	r0, [pc, #36]	; (800148c <SystemApp_Init+0x38>)
 8001468:	f017 fc0c 	bl	8018c84 <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 800146c:	2002      	movs	r0, #2
 800146e:	f017 fc17 	bl	8018ca0 <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 8001472:	f7ff fc1d 	bl	8000cb0 <SYS_InitMeasurement>

  /*Initialize the Sensors */
  EnvSensors_Init();
 8001476:	f000 f94e 	bl	8001716 <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 800147a:	f016 faa3 	bl	80179c4 <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 800147e:	2101      	movs	r1, #1
 8001480:	2001      	movs	r0, #1
 8001482:	f016 fadf 	bl	8017a44 <UTIL_LPM_SetOffMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	08001665 	.word	0x08001665

08001490 <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 8001494:	f016 fb06 	bl	8017aa4 <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 8001498:	bf00      	nop
 800149a:	bd80      	pop	{r7, pc}

0800149c <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af02      	add	r7, sp, #8
  uint8_t batteryLevel = 0;
 80014a2:	2300      	movs	r3, #0
 80014a4:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 80014a6:	f7ff fc8b 	bl	8000dc0 <SYS_GetBatteryLevel>
 80014aa:	4603      	mov	r3, r0
 80014ac:	80bb      	strh	r3, [r7, #4]

  /* Convert battery level from mV to linear scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 80014ae:	88bb      	ldrh	r3, [r7, #4]
 80014b0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d902      	bls.n	80014be <GetBatteryLevel+0x22>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 80014b8:	23fe      	movs	r3, #254	; 0xfe
 80014ba:	71fb      	strb	r3, [r7, #7]
 80014bc:	e014      	b.n	80014e8 <GetBatteryLevel+0x4c>
  }
  else if (batteryLevelmV < VDD_MIN)
 80014be:	88bb      	ldrh	r3, [r7, #4]
 80014c0:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 80014c4:	d202      	bcs.n	80014cc <GetBatteryLevel+0x30>
  {
    batteryLevel = 0;
 80014c6:	2300      	movs	r3, #0
 80014c8:	71fb      	strb	r3, [r7, #7]
 80014ca:	e00d      	b.n	80014e8 <GetBatteryLevel+0x4c>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 80014cc:	88bb      	ldrh	r3, [r7, #4]
 80014ce:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 80014d2:	461a      	mov	r2, r3
 80014d4:	4613      	mov	r3, r2
 80014d6:	01db      	lsls	r3, r3, #7
 80014d8:	1a9b      	subs	r3, r3, r2
 80014da:	005b      	lsls	r3, r3, #1
 80014dc:	461a      	mov	r2, r3
 80014de:	4b09      	ldr	r3, [pc, #36]	; (8001504 <GetBatteryLevel+0x68>)
 80014e0:	fba3 2302 	umull	r2, r3, r3, r2
 80014e4:	09db      	lsrs	r3, r3, #7
 80014e6:	71fb      	strb	r3, [r7, #7]
  }

  APP_LOG(TS_ON, VLEVEL_M, "VDDA= %d\r\n", batteryLevel);
 80014e8:	79fb      	ldrb	r3, [r7, #7]
 80014ea:	9300      	str	r3, [sp, #0]
 80014ec:	4b06      	ldr	r3, [pc, #24]	; (8001508 <GetBatteryLevel+0x6c>)
 80014ee:	2201      	movs	r2, #1
 80014f0:	2100      	movs	r1, #0
 80014f2:	2002      	movs	r0, #2
 80014f4:	f017 fb44 	bl	8018b80 <UTIL_ADV_TRACE_COND_FSend>

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 80014f8:	79fb      	ldrb	r3, [r7, #7]
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	1b4e81b5 	.word	0x1b4e81b5
 8001508:	080191f4 	.word	0x080191f4

0800150c <GetTemperatureLevel>:

uint16_t GetTemperatureLevel(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
  uint16_t temperatureLevel = 0;
 8001512:	2300      	movs	r3, #0
 8001514:	80fb      	strh	r3, [r7, #6]

  temperatureLevel = (uint16_t)(SYS_GetTemperatureLevel() / 256);
 8001516:	f7ff fbd9 	bl	8000ccc <SYS_GetTemperatureLevel>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	da00      	bge.n	8001522 <GetTemperatureLevel+0x16>
 8001520:	33ff      	adds	r3, #255	; 0xff
 8001522:	121b      	asrs	r3, r3, #8
 8001524:	b21b      	sxth	r3, r3
 8001526:	80fb      	strh	r3, [r7, #6]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 8001528:	88fb      	ldrh	r3, [r7, #6]
}
 800152a:	4618      	mov	r0, r3
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}

08001532 <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 8001532:	b590      	push	{r4, r7, lr}
 8001534:	b087      	sub	sp, #28
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 800153a:	2300      	movs	r3, #0
 800153c:	617b      	str	r3, [r7, #20]
  val = LL_FLASH_GetUDN();
 800153e:	f7ff ff67 	bl	8001410 <LL_FLASH_GetUDN>
 8001542:	6178      	str	r0, [r7, #20]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800154a:	d138      	bne.n	80015be <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 800154c:	f000 fdf0 	bl	8002130 <HAL_GetUIDw0>
 8001550:	4604      	mov	r4, r0
 8001552:	f000 fe01 	bl	8002158 <HAL_GetUIDw2>
 8001556:	4603      	mov	r3, r0
 8001558:	4423      	add	r3, r4
 800155a:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 800155c:	f000 fdf2 	bl	8002144 <HAL_GetUIDw1>
 8001560:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	0e1a      	lsrs	r2, r3, #24
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	3307      	adds	r3, #7
 800156a:	b2d2      	uxtb	r2, r2
 800156c:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	0c1a      	lsrs	r2, r3, #16
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	3306      	adds	r3, #6
 8001576:	b2d2      	uxtb	r2, r2
 8001578:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	0a1a      	lsrs	r2, r3, #8
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	3305      	adds	r3, #5
 8001582:	b2d2      	uxtb	r2, r2
 8001584:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	3304      	adds	r3, #4
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	b2d2      	uxtb	r2, r2
 800158e:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	0e1a      	lsrs	r2, r3, #24
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	3303      	adds	r3, #3
 8001598:	b2d2      	uxtb	r2, r2
 800159a:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	0c1a      	lsrs	r2, r3, #16
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	3302      	adds	r3, #2
 80015a4:	b2d2      	uxtb	r2, r2
 80015a6:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	0a1a      	lsrs	r2, r3, #8
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	3301      	adds	r3, #1
 80015b0:	b2d2      	uxtb	r2, r2
 80015b2:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	b2da      	uxtb	r2, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 80015bc:	e031      	b.n	8001622 <GetUniqueId+0xf0>
    id[7] = val & 0xFF;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	3307      	adds	r3, #7
 80015c2:	697a      	ldr	r2, [r7, #20]
 80015c4:	b2d2      	uxtb	r2, r2
 80015c6:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 8) & 0xFF;
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	0a1a      	lsrs	r2, r3, #8
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	3306      	adds	r3, #6
 80015d0:	b2d2      	uxtb	r2, r2
 80015d2:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 16) & 0xFF;
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	0c1a      	lsrs	r2, r3, #16
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	3305      	adds	r3, #5
 80015dc:	b2d2      	uxtb	r2, r2
 80015de:	701a      	strb	r2, [r3, #0]
    id[4] = (val >> 24) & 0xFF;
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	0e1a      	lsrs	r2, r3, #24
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	3304      	adds	r3, #4
 80015e8:	b2d2      	uxtb	r2, r2
 80015ea:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDeviceID();
 80015ec:	f7ff ff1a 	bl	8001424 <LL_FLASH_GetDeviceID>
 80015f0:	6178      	str	r0, [r7, #20]
    id[3] = val & 0xFF;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	3303      	adds	r3, #3
 80015f6:	697a      	ldr	r2, [r7, #20]
 80015f8:	b2d2      	uxtb	r2, r2
 80015fa:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetSTCompanyID();
 80015fc:	f7ff ff1e 	bl	800143c <LL_FLASH_GetSTCompanyID>
 8001600:	6178      	str	r0, [r7, #20]
    id[2] = val & 0xFF;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	3302      	adds	r3, #2
 8001606:	697a      	ldr	r2, [r7, #20]
 8001608:	b2d2      	uxtb	r2, r2
 800160a:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	0a1a      	lsrs	r2, r3, #8
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	3301      	adds	r3, #1
 8001614:	b2d2      	uxtb	r2, r2
 8001616:	701a      	strb	r2, [r3, #0]
    id[0] = (val >> 16) & 0xFF;
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	0c1b      	lsrs	r3, r3, #16
 800161c:	b2da      	uxtb	r2, r3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	701a      	strb	r2, [r3, #0]
}
 8001622:	bf00      	nop
 8001624:	371c      	adds	r7, #28
 8001626:	46bd      	mov	sp, r7
 8001628:	bd90      	pop	{r4, r7, pc}

0800162a <GetDevAddr>:

uint32_t GetDevAddr(void)
{
 800162a:	b590      	push	{r4, r7, lr}
 800162c:	b083      	sub	sp, #12
 800162e:	af00      	add	r7, sp, #0
  uint32_t val = 0;
 8001630:	2300      	movs	r3, #0
 8001632:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  val = LL_FLASH_GetUDN();
 8001634:	f7ff feec 	bl	8001410 <LL_FLASH_GetUDN>
 8001638:	6078      	str	r0, [r7, #4]
  if (val == 0xFFFFFFFF)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001640:	d10b      	bne.n	800165a <GetDevAddr+0x30>
  {
    val = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8001642:	f000 fd75 	bl	8002130 <HAL_GetUIDw0>
 8001646:	4604      	mov	r4, r0
 8001648:	f000 fd7c 	bl	8002144 <HAL_GetUIDw1>
 800164c:	4603      	mov	r3, r0
 800164e:	405c      	eors	r4, r3
 8001650:	f000 fd82 	bl	8002158 <HAL_GetUIDw2>
 8001654:	4603      	mov	r3, r0
 8001656:	4063      	eors	r3, r4
 8001658:	607b      	str	r3, [r7, #4]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
  return val;
 800165a:	687b      	ldr	r3, [r7, #4]

}
 800165c:	4618      	mov	r0, r3
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	bd90      	pop	{r4, r7, pc}

08001664 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b086      	sub	sp, #24
 8001668:	af02      	add	r7, sp, #8
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 800166e:	f107 0308 	add.w	r3, r7, #8
 8001672:	4618      	mov	r0, r3
 8001674:	f016 fb26 	bl	8017cc4 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800167e:	9200      	str	r2, [sp, #0]
 8001680:	4a07      	ldr	r2, [pc, #28]	; (80016a0 <TimestampNow+0x3c>)
 8001682:	2110      	movs	r1, #16
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f000 f81d 	bl	80016c4 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f7fe fd74 	bl	8000178 <strlen>
 8001690:	4603      	mov	r3, r0
 8001692:	b29a      	uxth	r2, r3
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8001698:	bf00      	nop
 800169a:	3710      	adds	r7, #16
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	08019200 	.word	0x08019200

080016a4 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 80016a8:	2101      	movs	r1, #1
 80016aa:	2002      	movs	r0, #2
 80016ac:	f016 f99a 	bl	80179e4 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 80016b0:	bf00      	nop
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 80016b8:	2100      	movs	r1, #0
 80016ba:	2002      	movs	r0, #2
 80016bc:	f016 f992 	bl	80179e4 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 80016c0:	bf00      	nop
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 80016c4:	b40c      	push	{r2, r3}
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b084      	sub	sp, #16
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
 80016ce:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 80016d0:	f107 031c 	add.w	r3, r7, #28
 80016d4:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 80016d6:	6839      	ldr	r1, [r7, #0]
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	69ba      	ldr	r2, [r7, #24]
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f016 fcc5 	bl	801806c <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 80016e2:	bf00      	nop
 80016e4:	3710      	adds	r7, #16
 80016e6:	46bd      	mov	sp, r7
 80016e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80016ec:	b002      	add	sp, #8
 80016ee:	4770      	bx	lr

080016f0 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  return TIMER_IF_GetTimerValue();
 80016f4:	f000 f8d8 	bl	80018a8 <TIMER_IF_GetTimerValue>
 80016f8:	4603      	mov	r3, r0
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	bd80      	pop	{r7, pc}

080016fe <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 80016fe:	b580      	push	{r7, lr}
 8001700:	b082      	sub	sp, #8
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4618      	mov	r0, r3
 800170a:	f000 f94d 	bl	80019a8 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 800170e:	bf00      	nop
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <EnvSensors_Init>:
  return 0;
  /* USER CODE END EnvSensors_Read */
}

int32_t  EnvSensors_Init(void)
{
 8001716:	b480      	push	{r7}
 8001718:	af00      	add	r7, sp, #0
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */

#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  return 0;
 800171a:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Init */
}
 800171c:	4618      	mov	r0, r3
 800171e:	46bd      	mov	sp, r7
 8001720:	bc80      	pop	{r7}
 8001722:	4770      	bx	lr

08001724 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8001728:	bf00      	nop
 800172a:	46bd      	mov	sp, r7
 800172c:	bc80      	pop	{r7}
 800172e:	4770      	bx	lr

08001730 <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	689b      	ldr	r3, [r3, #8]
}
 800173c:	4618      	mov	r0, r3
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	bc80      	pop	{r7}
 8001744:	4770      	bx	lr
	...

08001748 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 800174e:	2300      	movs	r3, #0
 8001750:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 8001752:	4b14      	ldr	r3, [pc, #80]	; (80017a4 <TIMER_IF_Init+0x5c>)
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	f083 0301 	eor.w	r3, r3, #1
 800175a:	b2db      	uxtb	r3, r3
 800175c:	2b00      	cmp	r3, #0
 800175e:	d01b      	beq.n	8001798 <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001760:	4b11      	ldr	r3, [pc, #68]	; (80017a8 <TIMER_IF_Init+0x60>)
 8001762:	f04f 32ff 	mov.w	r2, #4294967295
 8001766:	631a      	str	r2, [r3, #48]	; 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8001768:	f7ff fcd0 	bl	800110c <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 800176c:	f000 f856 	bl	800181c <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001770:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001774:	480c      	ldr	r0, [pc, #48]	; (80017a8 <TIMER_IF_Init+0x60>)
 8001776:	f004 f97f 	bl	8005a78 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 800177a:	4b0b      	ldr	r3, [pc, #44]	; (80017a8 <TIMER_IF_Init+0x60>)
 800177c:	f04f 32ff 	mov.w	r2, #4294967295
 8001780:	631a      	str	r2, [r3, #48]	; 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8001782:	4809      	ldr	r0, [pc, #36]	; (80017a8 <TIMER_IF_Init+0x60>)
 8001784:	f004 fab6 	bl	8005cf4 <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 8001788:	2000      	movs	r0, #0
 800178a:	f000 f9cf 	bl	8001b2c <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 800178e:	f000 f85f 	bl	8001850 <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 8001792:	4b04      	ldr	r3, [pc, #16]	; (80017a4 <TIMER_IF_Init+0x5c>)
 8001794:	2201      	movs	r2, #1
 8001796:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 8001798:	79fb      	ldrb	r3, [r7, #7]
}
 800179a:	4618      	mov	r0, r3
 800179c:	3708      	adds	r7, #8
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	20000120 	.word	0x20000120
 80017a8:	20001528 	.word	0x20001528

080017ac <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b08e      	sub	sp, #56	; 0x38
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80017b4:	2300      	movs	r3, #0
 80017b6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 80017ba:	f107 0308 	add.w	r3, r7, #8
 80017be:	222c      	movs	r2, #44	; 0x2c
 80017c0:	2100      	movs	r1, #0
 80017c2:	4618      	mov	r0, r3
 80017c4:	f017 fcfc 	bl	80191c0 <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 80017c8:	f000 f828 	bl	800181c <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 80017cc:	4b11      	ldr	r3, [pc, #68]	; (8001814 <TIMER_IF_StartTimer+0x68>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	687a      	ldr	r2, [r7, #4]
 80017d2:	4413      	add	r3, r2
 80017d4:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 80017d6:	2300      	movs	r3, #0
 80017d8:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	43db      	mvns	r3, r3
 80017de:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80017e0:	2300      	movs	r3, #0
 80017e2:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 80017e4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80017e8:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 80017ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017ee:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80017f0:	f107 0308 	add.w	r3, r7, #8
 80017f4:	2201      	movs	r2, #1
 80017f6:	4619      	mov	r1, r3
 80017f8:	4807      	ldr	r0, [pc, #28]	; (8001818 <TIMER_IF_StartTimer+0x6c>)
 80017fa:	f004 f831 	bl	8005860 <HAL_RTC_SetAlarm_IT>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 8001804:	f7ff fc54 	bl	80010b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 8001808:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800180c:	4618      	mov	r0, r3
 800180e:	3738      	adds	r7, #56	; 0x38
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	20000124 	.word	0x20000124
 8001818:	20001528 	.word	0x20001528

0800181c <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001822:	2300      	movs	r3, #0
 8001824:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8001826:	4b08      	ldr	r3, [pc, #32]	; (8001848 <TIMER_IF_StopTimer+0x2c>)
 8001828:	2201      	movs	r2, #1
 800182a:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 800182c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001830:	4806      	ldr	r0, [pc, #24]	; (800184c <TIMER_IF_StopTimer+0x30>)
 8001832:	f004 f921 	bl	8005a78 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001836:	4b05      	ldr	r3, [pc, #20]	; (800184c <TIMER_IF_StopTimer+0x30>)
 8001838:	f04f 32ff 	mov.w	r2, #4294967295
 800183c:	631a      	str	r2, [r3, #48]	; 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 800183e:	79fb      	ldrb	r3, [r7, #7]
}
 8001840:	4618      	mov	r0, r3
 8001842:	3708      	adds	r7, #8
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	40002800 	.word	0x40002800
 800184c:	20001528 	.word	0x20001528

08001850 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 8001854:	f000 f98a 	bl	8001b6c <GetTimerTicks>
 8001858:	4603      	mov	r3, r0
 800185a:	4a03      	ldr	r2, [pc, #12]	; (8001868 <TIMER_IF_SetTimerContext+0x18>)
 800185c:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 800185e:	4b02      	ldr	r3, [pc, #8]	; (8001868 <TIMER_IF_SetTimerContext+0x18>)
 8001860:	681b      	ldr	r3, [r3, #0]
}
 8001862:	4618      	mov	r0, r3
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	20000124 	.word	0x20000124

0800186c <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8001870:	4b02      	ldr	r3, [pc, #8]	; (800187c <TIMER_IF_GetTimerContext+0x10>)
 8001872:	681b      	ldr	r3, [r3, #0]
}
 8001874:	4618      	mov	r0, r3
 8001876:	46bd      	mov	sp, r7
 8001878:	bc80      	pop	{r7}
 800187a:	4770      	bx	lr
 800187c:	20000124 	.word	0x20000124

08001880 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001886:	2300      	movs	r3, #0
 8001888:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 800188a:	f000 f96f 	bl	8001b6c <GetTimerTicks>
 800188e:	4602      	mov	r2, r0
 8001890:	4b04      	ldr	r3, [pc, #16]	; (80018a4 <TIMER_IF_GetTimerElapsedTime+0x24>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 8001898:	687b      	ldr	r3, [r7, #4]
}
 800189a:	4618      	mov	r0, r3
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	20000124 	.word	0x20000124

080018a8 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80018ae:	2300      	movs	r3, #0
 80018b0:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 80018b2:	4b06      	ldr	r3, [pc, #24]	; (80018cc <TIMER_IF_GetTimerValue+0x24>)
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d002      	beq.n	80018c0 <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 80018ba:	f000 f957 	bl	8001b6c <GetTimerTicks>
 80018be:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 80018c0:	687b      	ldr	r3, [r7, #4]
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3708      	adds	r7, #8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	20000120 	.word	0x20000120

080018d0 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80018d6:	2300      	movs	r3, #0
 80018d8:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 80018da:	2303      	movs	r3, #3
 80018dc:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 80018de:	687b      	ldr	r3, [r7, #4]
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bc80      	pop	{r7}
 80018e8:	4770      	bx	lr

080018ea <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 80018ea:	b5b0      	push	{r4, r5, r7, lr}
 80018ec:	b084      	sub	sp, #16
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 80018f2:	2300      	movs	r3, #0
 80018f4:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	461a      	mov	r2, r3
 80018fa:	f04f 0300 	mov.w	r3, #0
 80018fe:	0d95      	lsrs	r5, r2, #22
 8001900:	0294      	lsls	r4, r2, #10
 8001902:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001906:	f04f 0300 	mov.w	r3, #0
 800190a:	4620      	mov	r0, r4
 800190c:	4629      	mov	r1, r5
 800190e:	f7fe ffb5 	bl	800087c <__aeabi_uldivmod>
 8001912:	4602      	mov	r2, r0
 8001914:	460b      	mov	r3, r1
 8001916:	4613      	mov	r3, r2
 8001918:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 800191a:	68fb      	ldr	r3, [r7, #12]
}
 800191c:	4618      	mov	r0, r3
 800191e:	3710      	adds	r7, #16
 8001920:	46bd      	mov	sp, r7
 8001922:	bdb0      	pop	{r4, r5, r7, pc}

08001924 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8001924:	b4b0      	push	{r4, r5, r7}
 8001926:	b085      	sub	sp, #20
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 800192c:	2300      	movs	r3, #0
 800192e:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	4618      	mov	r0, r3
 8001934:	f04f 0100 	mov.w	r1, #0
 8001938:	4602      	mov	r2, r0
 800193a:	460b      	mov	r3, r1
 800193c:	f04f 0400 	mov.w	r4, #0
 8001940:	f04f 0500 	mov.w	r5, #0
 8001944:	015d      	lsls	r5, r3, #5
 8001946:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800194a:	0154      	lsls	r4, r2, #5
 800194c:	4622      	mov	r2, r4
 800194e:	462b      	mov	r3, r5
 8001950:	1a12      	subs	r2, r2, r0
 8001952:	eb63 0301 	sbc.w	r3, r3, r1
 8001956:	f04f 0400 	mov.w	r4, #0
 800195a:	f04f 0500 	mov.w	r5, #0
 800195e:	009d      	lsls	r5, r3, #2
 8001960:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 8001964:	0094      	lsls	r4, r2, #2
 8001966:	4622      	mov	r2, r4
 8001968:	462b      	mov	r3, r5
 800196a:	1812      	adds	r2, r2, r0
 800196c:	eb41 0303 	adc.w	r3, r1, r3
 8001970:	f04f 0000 	mov.w	r0, #0
 8001974:	f04f 0100 	mov.w	r1, #0
 8001978:	00d9      	lsls	r1, r3, #3
 800197a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800197e:	00d0      	lsls	r0, r2, #3
 8001980:	4602      	mov	r2, r0
 8001982:	460b      	mov	r3, r1
 8001984:	4610      	mov	r0, r2
 8001986:	4619      	mov	r1, r3
 8001988:	f04f 0200 	mov.w	r2, #0
 800198c:	f04f 0300 	mov.w	r3, #0
 8001990:	0a82      	lsrs	r2, r0, #10
 8001992:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8001996:	0a8b      	lsrs	r3, r1, #10
 8001998:	4613      	mov	r3, r2
 800199a:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 800199c:	68fb      	ldr	r3, [r7, #12]
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3714      	adds	r7, #20
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bcb0      	pop	{r4, r5, r7}
 80019a6:	4770      	bx	lr

080019a8 <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f7ff ff9a 	bl	80018ea <TIMER_IF_Convert_ms2Tick>
 80019b6:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 80019b8:	f000 f8d8 	bl	8001b6c <GetTimerTicks>
 80019bc:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 80019be:	e000      	b.n	80019c2 <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 80019c0:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 80019c2:	f000 f8d3 	bl	8001b6c <GetTimerTicks>
 80019c6:	4602      	mov	r2, r0
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	68fa      	ldr	r2, [r7, #12]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d8f6      	bhi.n	80019c0 <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 80019d2:	bf00      	nop
 80019d4:	bf00      	nop
 80019d6:	3710      	adds	r7, #16
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}

080019dc <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 80019e4:	f016 ff5c 	bl	80188a0 <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 80019e8:	bf00      	nop
 80019ea:	3708      	adds	r7, #8
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}

080019f0 <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 80019f8:	f000 f8a8 	bl	8001b4c <TIMER_IF_BkUp_Read_MSBticks>
 80019fc:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	3301      	adds	r3, #1
 8001a02:	4618      	mov	r0, r3
 8001a04:	f000 f892 	bl	8001b2c <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 8001a08:	bf00      	nop
 8001a0a:	3710      	adds	r7, #16
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 8001a10:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a14:	b088      	sub	sp, #32
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
  uint32_t seconds = 0;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	61fb      	str	r3, [r7, #28]
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 8001a1e:	f000 f8a5 	bl	8001b6c <GetTimerTicks>
 8001a22:	61b8      	str	r0, [r7, #24]
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8001a24:	f000 f892 	bl	8001b4c <TIMER_IF_BkUp_Read_MSBticks>
 8001a28:	6178      	str	r0, [r7, #20]

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f04f 0100 	mov.w	r1, #0
 8001a32:	f04f 0200 	mov.w	r2, #0
 8001a36:	f04f 0300 	mov.w	r3, #0
 8001a3a:	0003      	movs	r3, r0
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	69b9      	ldr	r1, [r7, #24]
 8001a40:	4608      	mov	r0, r1
 8001a42:	f04f 0100 	mov.w	r1, #0
 8001a46:	eb12 0800 	adds.w	r8, r2, r0
 8001a4a:	eb43 0901 	adc.w	r9, r3, r1
 8001a4e:	e9c7 8902 	strd	r8, r9, [r7, #8]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8001a52:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001a56:	f04f 0200 	mov.w	r2, #0
 8001a5a:	f04f 0300 	mov.w	r3, #0
 8001a5e:	0a82      	lsrs	r2, r0, #10
 8001a60:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8001a64:	0a8b      	lsrs	r3, r1, #10
 8001a66:	4613      	mov	r3, r2
 8001a68:	61fb      	str	r3, [r7, #28]

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	f04f 0300 	mov.w	r3, #0
 8001a72:	f240 30ff 	movw	r0, #1023	; 0x3ff
 8001a76:	f04f 0100 	mov.w	r1, #0
 8001a7a:	ea02 0400 	and.w	r4, r2, r0
 8001a7e:	ea03 0501 	and.w	r5, r3, r1
 8001a82:	e9c7 4502 	strd	r4, r5, [r7, #8]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7ff ff4b 	bl	8001924 <TIMER_IF_Convert_Tick2ms>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	b29a      	uxth	r2, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 8001a96:	69fb      	ldr	r3, [r7, #28]
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3720      	adds	r7, #32
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08001aa4 <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	2100      	movs	r1, #0
 8001ab0:	4803      	ldr	r0, [pc, #12]	; (8001ac0 <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 8001ab2:	f004 f9b1 	bl	8005e18 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 8001ab6:	bf00      	nop
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	20001528 	.word	0x20001528

08001ac4 <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	2101      	movs	r1, #1
 8001ad0:	4803      	ldr	r0, [pc, #12]	; (8001ae0 <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 8001ad2:	f004 f9a1 	bl	8005e18 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 8001ad6:	bf00      	nop
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	20001528 	.word	0x20001528

08001ae4 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001aea:	2300      	movs	r3, #0
 8001aec:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8001aee:	2100      	movs	r1, #0
 8001af0:	4804      	ldr	r0, [pc, #16]	; (8001b04 <TIMER_IF_BkUp_Read_Seconds+0x20>)
 8001af2:	f004 f9a9 	bl	8005e48 <HAL_RTCEx_BKUPRead>
 8001af6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 8001af8:	687b      	ldr	r3, [r7, #4]
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	20001528 	.word	0x20001528

08001b08 <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8001b12:	2101      	movs	r1, #1
 8001b14:	4804      	ldr	r0, [pc, #16]	; (8001b28 <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 8001b16:	f004 f997 	bl	8005e48 <HAL_RTCEx_BKUPRead>
 8001b1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 8001b1c:	687b      	ldr	r3, [r7, #4]
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	20001528 	.word	0x20001528

08001b2c <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	2102      	movs	r1, #2
 8001b38:	4803      	ldr	r0, [pc, #12]	; (8001b48 <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 8001b3a:	f004 f96d 	bl	8005e18 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 8001b3e:	bf00      	nop
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	20001528 	.word	0x20001528

08001b4c <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8001b52:	2102      	movs	r1, #2
 8001b54:	4804      	ldr	r0, [pc, #16]	; (8001b68 <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 8001b56:	f004 f977 	bl	8005e48 <HAL_RTCEx_BKUPRead>
 8001b5a:	6078      	str	r0, [r7, #4]
  return MSBticks;
 8001b5c:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3708      	adds	r7, #8
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	20001528 	.word	0x20001528

08001b6c <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  return (UINT32_MAX - LL_RTC_TIME_GetSubSecond(RTC));
 8001b70:	4803      	ldr	r0, [pc, #12]	; (8001b80 <GetTimerTicks+0x14>)
 8001b72:	f7ff fddd 	bl	8001730 <LL_RTC_TIME_GetSubSecond>
 8001b76:	4603      	mov	r3, r0
 8001b78:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	40002800 	.word	0x40002800

08001b84 <LL_AHB2_GRP1_EnableClock>:
{
 8001b84:	b480      	push	{r7}
 8001b86:	b085      	sub	sp, #20
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001b8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b90:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001b9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ba0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
}
 8001baa:	bf00      	nop
 8001bac:	3714      	adds	r7, #20
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bc80      	pop	{r7}
 8001bb2:	4770      	bx	lr

08001bb4 <LL_APB1_GRP1_EnableClock>:
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b085      	sub	sp, #20
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001bbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bc0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001bc2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001bcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bd0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
}
 8001bda:	bf00      	nop
 8001bdc:	3714      	adds	r7, #20
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bc80      	pop	{r7}
 8001be2:	4770      	bx	lr

08001be4 <LL_APB1_GRP1_DisableClock>:
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8001bec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bf0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	43db      	mvns	r3, r3
 8001bf6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	658b      	str	r3, [r1, #88]	; 0x58
}
 8001bfe:	bf00      	nop
 8001c00:	370c      	adds	r7, #12
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bc80      	pop	{r7}
 8001c06:	4770      	bx	lr

08001c08 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c0c:	4b22      	ldr	r3, [pc, #136]	; (8001c98 <MX_USART2_UART_Init+0x90>)
 8001c0e:	4a23      	ldr	r2, [pc, #140]	; (8001c9c <MX_USART2_UART_Init+0x94>)
 8001c10:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = USART_BAUDRATE;
 8001c12:	4b21      	ldr	r3, [pc, #132]	; (8001c98 <MX_USART2_UART_Init+0x90>)
 8001c14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c18:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c1a:	4b1f      	ldr	r3, [pc, #124]	; (8001c98 <MX_USART2_UART_Init+0x90>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c20:	4b1d      	ldr	r3, [pc, #116]	; (8001c98 <MX_USART2_UART_Init+0x90>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c26:	4b1c      	ldr	r3, [pc, #112]	; (8001c98 <MX_USART2_UART_Init+0x90>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c2c:	4b1a      	ldr	r3, [pc, #104]	; (8001c98 <MX_USART2_UART_Init+0x90>)
 8001c2e:	220c      	movs	r2, #12
 8001c30:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c32:	4b19      	ldr	r3, [pc, #100]	; (8001c98 <MX_USART2_UART_Init+0x90>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c38:	4b17      	ldr	r3, [pc, #92]	; (8001c98 <MX_USART2_UART_Init+0x90>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c3e:	4b16      	ldr	r3, [pc, #88]	; (8001c98 <MX_USART2_UART_Init+0x90>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c44:	4b14      	ldr	r3, [pc, #80]	; (8001c98 <MX_USART2_UART_Init+0x90>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c4a:	4b13      	ldr	r3, [pc, #76]	; (8001c98 <MX_USART2_UART_Init+0x90>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c50:	4811      	ldr	r0, [pc, #68]	; (8001c98 <MX_USART2_UART_Init+0x90>)
 8001c52:	f004 fde4 	bl	800681e <HAL_UART_Init>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001c5c:	f7ff fa28 	bl	80010b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c60:	2100      	movs	r1, #0
 8001c62:	480d      	ldr	r0, [pc, #52]	; (8001c98 <MX_USART2_UART_Init+0x90>)
 8001c64:	f006 fe0e 	bl	8008884 <HAL_UARTEx_SetTxFifoThreshold>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001c6e:	f7ff fa1f 	bl	80010b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c72:	2100      	movs	r1, #0
 8001c74:	4808      	ldr	r0, [pc, #32]	; (8001c98 <MX_USART2_UART_Init+0x90>)
 8001c76:	f006 fe43 	bl	8008900 <HAL_UARTEx_SetRxFifoThreshold>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001c80:	f7ff fa16 	bl	80010b0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001c84:	4804      	ldr	r0, [pc, #16]	; (8001c98 <MX_USART2_UART_Init+0x90>)
 8001c86:	f006 fdc5 	bl	8008814 <HAL_UARTEx_DisableFifoMode>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001c90:	f7ff fa0e 	bl	80010b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c94:	bf00      	nop
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	200015cc 	.word	0x200015cc
 8001c9c:	40004400 	.word	0x40004400

08001ca0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b096      	sub	sp, #88	; 0x58
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	605a      	str	r2, [r3, #4]
 8001cb2:	609a      	str	r2, [r3, #8]
 8001cb4:	60da      	str	r2, [r3, #12]
 8001cb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001cb8:	f107 030c 	add.w	r3, r7, #12
 8001cbc:	2238      	movs	r2, #56	; 0x38
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f017 fa7d 	bl	80191c0 <memset>
  if(uartHandle->Instance==USART2)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a2f      	ldr	r2, [pc, #188]	; (8001d88 <HAL_UART_MspInit+0xe8>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d157      	bne.n	8001d80 <HAL_UART_MspInit+0xe0>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001cd4:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8001cd8:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cda:	f107 030c 	add.w	r3, r7, #12
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f003 fc2a 	bl	8005538 <HAL_RCCEx_PeriphCLKConfig>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001cea:	f7ff f9e1 	bl	80010b0 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cee:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001cf2:	f7ff ff5f 	bl	8001bb4 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cf6:	2001      	movs	r0, #1
 8001cf8:	f7ff ff44 	bl	8001b84 <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 8001cfc:	230c      	movs	r3, #12
 8001cfe:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d00:	2302      	movs	r3, #2
 8001d02:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d04:	2300      	movs	r3, #0
 8001d06:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d0c:	2307      	movs	r3, #7
 8001d0e:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d10:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001d14:	4619      	mov	r1, r3
 8001d16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d1a:	f001 ff19 	bl	8003b50 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel5;
 8001d1e:	4b1b      	ldr	r3, [pc, #108]	; (8001d8c <HAL_UART_MspInit+0xec>)
 8001d20:	4a1b      	ldr	r2, [pc, #108]	; (8001d90 <HAL_UART_MspInit+0xf0>)
 8001d22:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8001d24:	4b19      	ldr	r3, [pc, #100]	; (8001d8c <HAL_UART_MspInit+0xec>)
 8001d26:	2214      	movs	r2, #20
 8001d28:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d2a:	4b18      	ldr	r3, [pc, #96]	; (8001d8c <HAL_UART_MspInit+0xec>)
 8001d2c:	2210      	movs	r2, #16
 8001d2e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d30:	4b16      	ldr	r3, [pc, #88]	; (8001d8c <HAL_UART_MspInit+0xec>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d36:	4b15      	ldr	r3, [pc, #84]	; (8001d8c <HAL_UART_MspInit+0xec>)
 8001d38:	2280      	movs	r2, #128	; 0x80
 8001d3a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d3c:	4b13      	ldr	r3, [pc, #76]	; (8001d8c <HAL_UART_MspInit+0xec>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d42:	4b12      	ldr	r3, [pc, #72]	; (8001d8c <HAL_UART_MspInit+0xec>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001d48:	4b10      	ldr	r3, [pc, #64]	; (8001d8c <HAL_UART_MspInit+0xec>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001d4e:	4b0f      	ldr	r3, [pc, #60]	; (8001d8c <HAL_UART_MspInit+0xec>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001d54:	480d      	ldr	r0, [pc, #52]	; (8001d8c <HAL_UART_MspInit+0xec>)
 8001d56:	f001 fb11 	bl	800337c <HAL_DMA_Init>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d001      	beq.n	8001d64 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8001d60:	f7ff f9a6 	bl	80010b0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	4a09      	ldr	r2, [pc, #36]	; (8001d8c <HAL_UART_MspInit+0xec>)
 8001d68:	679a      	str	r2, [r3, #120]	; 0x78
 8001d6a:	4a08      	ldr	r2, [pc, #32]	; (8001d8c <HAL_UART_MspInit+0xec>)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001d70:	2200      	movs	r2, #0
 8001d72:	2100      	movs	r1, #0
 8001d74:	2025      	movs	r0, #37	; 0x25
 8001d76:	f001 fabe 	bl	80032f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001d7a:	2025      	movs	r0, #37	; 0x25
 8001d7c:	f001 fad5 	bl	800332a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001d80:	bf00      	nop
 8001d82:	3758      	adds	r7, #88	; 0x58
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	40004400 	.word	0x40004400
 8001d8c:	2000156c 	.word	0x2000156c
 8001d90:	40020058 	.word	0x40020058

08001d94 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART2)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a0b      	ldr	r2, [pc, #44]	; (8001dd0 <HAL_UART_MspDeInit+0x3c>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d110      	bne.n	8001dc8 <HAL_UART_MspDeInit+0x34>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 8001da6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001daa:	f7ff ff1b 	bl	8001be4 <LL_APB1_GRP1_DisableClock>

    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin|USARTx_TX_Pin);
 8001dae:	210c      	movs	r1, #12
 8001db0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001db4:	f002 f82c 	bl	8003e10 <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f001 fb85 	bl	80034cc <HAL_DMA_DeInit>

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8001dc2:	2025      	movs	r0, #37	; 0x25
 8001dc4:	f001 fabf 	bl	8003346 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8001dc8:	bf00      	nop
 8001dca:	3708      	adds	r7, #8
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	40004400 	.word	0x40004400

08001dd4 <LL_APB1_GRP1_ForceReset>:
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 8001ddc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001de0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001de2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	638b      	str	r3, [r1, #56]	; 0x38
}
 8001dec:	bf00      	nop
 8001dee:	370c      	adds	r7, #12
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bc80      	pop	{r7}
 8001df4:	4770      	bx	lr

08001df6 <LL_APB1_GRP1_ReleaseReset>:
{
 8001df6:	b480      	push	{r7}
 8001df8:	b083      	sub	sp, #12
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 8001dfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	43db      	mvns	r3, r3
 8001e08:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	638b      	str	r3, [r1, #56]	; 0x38
}
 8001e10:	bf00      	nop
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bc80      	pop	{r7}
 8001e18:	4770      	bx	lr
	...

08001e1c <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001e24:	4b06      	ldr	r3, [pc, #24]	; (8001e40 <LL_EXTI_EnableIT_0_31+0x24>)
 8001e26:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001e2a:	4905      	ldr	r1, [pc, #20]	; (8001e40 <LL_EXTI_EnableIT_0_31+0x24>)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8001e34:	bf00      	nop
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bc80      	pop	{r7}
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	58000800 	.word	0x58000800

08001e44 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8001e4c:	4a07      	ldr	r2, [pc, #28]	; (8001e6c <vcom_Init+0x28>)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 8001e52:	f7ff f847 	bl	8000ee4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001e56:	f7ff fed7 	bl	8001c08 <MX_USART2_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_27);
 8001e5a:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8001e5e:	f7ff ffdd 	bl	8001e1c <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 8001e62:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3708      	adds	r7, #8
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	20000128 	.word	0x20000128

08001e70 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
 8001e74:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001e78:	f7ff ffac 	bl	8001dd4 <LL_APB1_GRP1_ForceReset>
  __HAL_RCC_USART2_RELEASE_RESET();
 8001e7c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001e80:	f7ff ffb9 	bl	8001df6 <LL_APB1_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart2);
 8001e84:	4804      	ldr	r0, [pc, #16]	; (8001e98 <vcom_DeInit+0x28>)
 8001e86:	f7ff ff85 	bl	8001d94 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 8001e8a:	200f      	movs	r0, #15
 8001e8c:	f001 fa5b 	bl	8003346 <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 8001e90:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	200015cc 	.word	0x200015cc

08001e9c <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart2, p_data, size);
 8001ea8:	887b      	ldrh	r3, [r7, #2]
 8001eaa:	461a      	mov	r2, r3
 8001eac:	6879      	ldr	r1, [r7, #4]
 8001eae:	4804      	ldr	r0, [pc, #16]	; (8001ec0 <vcom_Trace_DMA+0x24>)
 8001eb0:	f004 fd5c 	bl	800696c <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 8001eb4:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	200015cc 	.word	0x200015cc

08001ec4 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8001ecc:	4a19      	ldr	r2, [pc, #100]	; (8001f34 <vcom_ReceiveInit+0x70>)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8001ed2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001ed6:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 8001ed8:	f107 0308 	add.w	r3, r7, #8
 8001edc:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001ee0:	4815      	ldr	r0, [pc, #84]	; (8001f38 <vcom_ReceiveInit+0x74>)
 8001ee2:	f006 fc0a 	bl	80086fa <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY) == SET);
 8001ee6:	bf00      	nop
 8001ee8:	4b13      	ldr	r3, [pc, #76]	; (8001f38 <vcom_ReceiveInit+0x74>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	69db      	ldr	r3, [r3, #28]
 8001eee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ef2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ef6:	d0f7      	beq.n	8001ee8 <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_REACK) == RESET);
 8001ef8:	bf00      	nop
 8001efa:	4b0f      	ldr	r3, [pc, #60]	; (8001f38 <vcom_ReceiveInit+0x74>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	69db      	ldr	r3, [r3, #28]
 8001f00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f08:	d1f7      	bne.n	8001efa <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 8001f0a:	4b0b      	ldr	r3, [pc, #44]	; (8001f38 <vcom_ReceiveInit+0x74>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	689a      	ldr	r2, [r3, #8]
 8001f10:	4b09      	ldr	r3, [pc, #36]	; (8001f38 <vcom_ReceiveInit+0x74>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001f18:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart2);
 8001f1a:	4807      	ldr	r0, [pc, #28]	; (8001f38 <vcom_ReceiveInit+0x74>)
 8001f1c:	f006 fc48 	bl	80087b0 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart2, &charRx, 1);
 8001f20:	2201      	movs	r2, #1
 8001f22:	4906      	ldr	r1, [pc, #24]	; (8001f3c <vcom_ReceiveInit+0x78>)
 8001f24:	4804      	ldr	r0, [pc, #16]	; (8001f38 <vcom_ReceiveInit+0x74>)
 8001f26:	f004 fccb 	bl	80068c0 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 8001f2a:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3710      	adds	r7, #16
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	2000012c 	.word	0x2000012c
 8001f38:	200015cc 	.word	0x200015cc
 8001f3c:	2000165c 	.word	0x2000165c

08001f40 <vcom_Resume>:

void vcom_Resume(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f44:	4808      	ldr	r0, [pc, #32]	; (8001f68 <vcom_Resume+0x28>)
 8001f46:	f004 fc6a 	bl	800681e <HAL_UART_Init>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d001      	beq.n	8001f54 <vcom_Resume+0x14>
  {
    Error_Handler();
 8001f50:	f7ff f8ae 	bl	80010b0 <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001f54:	4805      	ldr	r0, [pc, #20]	; (8001f6c <vcom_Resume+0x2c>)
 8001f56:	f001 fa11 	bl	800337c <HAL_DMA_Init>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <vcom_Resume+0x24>
  {
    Error_Handler();
 8001f60:	f7ff f8a6 	bl	80010b0 <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8001f64:	bf00      	nop
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	200015cc 	.word	0x200015cc
 8001f6c:	2000156c 	.word	0x2000156c

08001f70 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart2)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  TxCpltCallback(NULL);
 8001f78:	4b03      	ldr	r3, [pc, #12]	; (8001f88 <HAL_UART_TxCpltCallback+0x18>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2000      	movs	r0, #0
 8001f7e:	4798      	blx	r3
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8001f80:	bf00      	nop
 8001f82:	3708      	adds	r7, #8
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	20000128 	.word	0x20000128

08001f8c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart2)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart2->ErrorCode))
 8001f94:	4b0b      	ldr	r3, [pc, #44]	; (8001fc4 <HAL_UART_RxCpltCallback+0x38>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d00a      	beq.n	8001fb2 <HAL_UART_RxCpltCallback+0x26>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d105      	bne.n	8001fb2 <HAL_UART_RxCpltCallback+0x26>
  {
    RxCpltCallback(&charRx, 1, 0);
 8001fa6:	4b07      	ldr	r3, [pc, #28]	; (8001fc4 <HAL_UART_RxCpltCallback+0x38>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	2200      	movs	r2, #0
 8001fac:	2101      	movs	r1, #1
 8001fae:	4806      	ldr	r0, [pc, #24]	; (8001fc8 <HAL_UART_RxCpltCallback+0x3c>)
 8001fb0:	4798      	blx	r3
  }
  HAL_UART_Receive_IT(huart2, &charRx, 1);
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	4904      	ldr	r1, [pc, #16]	; (8001fc8 <HAL_UART_RxCpltCallback+0x3c>)
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f004 fc82 	bl	80068c0 <HAL_UART_Receive_IT>
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8001fbc:	bf00      	nop
 8001fbe:	3708      	adds	r7, #8
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	2000012c 	.word	0x2000012c
 8001fc8:	2000165c 	.word	0x2000165c

08001fcc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001fcc:	480d      	ldr	r0, [pc, #52]	; (8002004 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001fce:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001fd0:	f7ff fba8 	bl	8001724 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fd4:	480c      	ldr	r0, [pc, #48]	; (8002008 <LoopForever+0x6>)
  ldr r1, =_edata
 8001fd6:	490d      	ldr	r1, [pc, #52]	; (800200c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001fd8:	4a0d      	ldr	r2, [pc, #52]	; (8002010 <LoopForever+0xe>)
  movs r3, #0
 8001fda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fdc:	e002      	b.n	8001fe4 <LoopCopyDataInit>

08001fde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fe0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fe2:	3304      	adds	r3, #4

08001fe4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fe4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fe6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fe8:	d3f9      	bcc.n	8001fde <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fea:	4a0a      	ldr	r2, [pc, #40]	; (8002014 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001fec:	4c0a      	ldr	r4, [pc, #40]	; (8002018 <LoopForever+0x16>)
  movs r3, #0
 8001fee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ff0:	e001      	b.n	8001ff6 <LoopFillZerobss>

08001ff2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ff2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ff4:	3204      	adds	r2, #4

08001ff6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ff6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ff8:	d3fb      	bcc.n	8001ff2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001ffa:	f017 f8bd 	bl	8019178 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ffe:	f7fe fff0 	bl	8000fe2 <main>

08002002 <LoopForever>:

LoopForever:
    b LoopForever
 8002002:	e7fe      	b.n	8002002 <LoopForever>
  ldr   r0, =_estack
 8002004:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002008:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800200c:	20000104 	.word	0x20000104
  ldr r2, =_sidata
 8002010:	08019dd4 	.word	0x08019dd4
  ldr r2, =_sbss
 8002014:	20000104 	.word	0x20000104
  ldr r4, =_ebss
 8002018:	20001700 	.word	0x20001700

0800201c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800201c:	e7fe      	b.n	800201c <ADC_IRQHandler>
	...

08002020 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002026:	2300      	movs	r3, #0
 8002028:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800202a:	2003      	movs	r0, #3
 800202c:	f001 f958 	bl	80032e0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002030:	f003 f8a0 	bl	8005174 <HAL_RCC_GetHCLKFreq>
 8002034:	4603      	mov	r3, r0
 8002036:	4a09      	ldr	r2, [pc, #36]	; (800205c <HAL_Init+0x3c>)
 8002038:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800203a:	200f      	movs	r0, #15
 800203c:	f000 f810 	bl	8002060 <HAL_InitTick>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d002      	beq.n	800204c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	71fb      	strb	r3, [r7, #7]
 800204a:	e001      	b.n	8002050 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800204c:	f7ff f929 	bl	80012a2 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002050:	79fb      	ldrb	r3, [r7, #7]
}
 8002052:	4618      	mov	r0, r3
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	20000000 	.word	0x20000000

08002060 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002068:	2300      	movs	r3, #0
 800206a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800206c:	4b17      	ldr	r3, [pc, #92]	; (80020cc <HAL_InitTick+0x6c>)
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d024      	beq.n	80020be <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002074:	f003 f87e 	bl	8005174 <HAL_RCC_GetHCLKFreq>
 8002078:	4602      	mov	r2, r0
 800207a:	4b14      	ldr	r3, [pc, #80]	; (80020cc <HAL_InitTick+0x6c>)
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	4619      	mov	r1, r3
 8002080:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002084:	fbb3 f3f1 	udiv	r3, r3, r1
 8002088:	fbb2 f3f3 	udiv	r3, r2, r3
 800208c:	4618      	mov	r0, r3
 800208e:	f001 f968 	bl	8003362 <HAL_SYSTICK_Config>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d10f      	bne.n	80020b8 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2b0f      	cmp	r3, #15
 800209c:	d809      	bhi.n	80020b2 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800209e:	2200      	movs	r2, #0
 80020a0:	6879      	ldr	r1, [r7, #4]
 80020a2:	f04f 30ff 	mov.w	r0, #4294967295
 80020a6:	f001 f926 	bl	80032f6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80020aa:	4a09      	ldr	r2, [pc, #36]	; (80020d0 <HAL_InitTick+0x70>)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6013      	str	r3, [r2, #0]
 80020b0:	e007      	b.n	80020c2 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	73fb      	strb	r3, [r7, #15]
 80020b6:	e004      	b.n	80020c2 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	73fb      	strb	r3, [r7, #15]
 80020bc:	e001      	b.n	80020c2 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80020c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3710      	adds	r7, #16
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	20000008 	.word	0x20000008
 80020d0:	20000004 	.word	0x20000004

080020d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80020d8:	4b05      	ldr	r3, [pc, #20]	; (80020f0 <HAL_IncTick+0x1c>)
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	461a      	mov	r2, r3
 80020de:	4b05      	ldr	r3, [pc, #20]	; (80020f4 <HAL_IncTick+0x20>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4413      	add	r3, r2
 80020e4:	4a03      	ldr	r2, [pc, #12]	; (80020f4 <HAL_IncTick+0x20>)
 80020e6:	6013      	str	r3, [r2, #0]
}
 80020e8:	bf00      	nop
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bc80      	pop	{r7}
 80020ee:	4770      	bx	lr
 80020f0:	20000008 	.word	0x20000008
 80020f4:	20001660 	.word	0x20001660

080020f8 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80020fc:	4b04      	ldr	r3, [pc, #16]	; (8002110 <HAL_SuspendTick+0x18>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a03      	ldr	r2, [pc, #12]	; (8002110 <HAL_SuspendTick+0x18>)
 8002102:	f023 0302 	bic.w	r3, r3, #2
 8002106:	6013      	str	r3, [r2, #0]
}
 8002108:	bf00      	nop
 800210a:	46bd      	mov	sp, r7
 800210c:	bc80      	pop	{r7}
 800210e:	4770      	bx	lr
 8002110:	e000e010 	.word	0xe000e010

08002114 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002118:	4b04      	ldr	r3, [pc, #16]	; (800212c <HAL_ResumeTick+0x18>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a03      	ldr	r2, [pc, #12]	; (800212c <HAL_ResumeTick+0x18>)
 800211e:	f043 0302 	orr.w	r3, r3, #2
 8002122:	6013      	str	r3, [r2, #0]
}
 8002124:	bf00      	nop
 8002126:	46bd      	mov	sp, r7
 8002128:	bc80      	pop	{r7}
 800212a:	4770      	bx	lr
 800212c:	e000e010 	.word	0xe000e010

08002130 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8002134:	4b02      	ldr	r3, [pc, #8]	; (8002140 <HAL_GetUIDw0+0x10>)
 8002136:	681b      	ldr	r3, [r3, #0]
}
 8002138:	4618      	mov	r0, r3
 800213a:	46bd      	mov	sp, r7
 800213c:	bc80      	pop	{r7}
 800213e:	4770      	bx	lr
 8002140:	1fff7590 	.word	0x1fff7590

08002144 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8002148:	4b02      	ldr	r3, [pc, #8]	; (8002154 <HAL_GetUIDw1+0x10>)
 800214a:	681b      	ldr	r3, [r3, #0]
}
 800214c:	4618      	mov	r0, r3
 800214e:	46bd      	mov	sp, r7
 8002150:	bc80      	pop	{r7}
 8002152:	4770      	bx	lr
 8002154:	1fff7594 	.word	0x1fff7594

08002158 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 800215c:	4b02      	ldr	r3, [pc, #8]	; (8002168 <HAL_GetUIDw2+0x10>)
 800215e:	681b      	ldr	r3, [r3, #0]
}
 8002160:	4618      	mov	r0, r3
 8002162:	46bd      	mov	sp, r7
 8002164:	bc80      	pop	{r7}
 8002166:	4770      	bx	lr
 8002168:	1fff7598 	.word	0x1fff7598

0800216c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	431a      	orrs	r2, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	601a      	str	r2, [r3, #0]
}
 8002186:	bf00      	nop
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	bc80      	pop	{r7}
 800218e:	4770      	bx	lr

08002190 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bc80      	pop	{r7}
 80021a8:	4770      	bx	lr

080021aa <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80021aa:	b480      	push	{r7}
 80021ac:	b085      	sub	sp, #20
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	60f8      	str	r0, [r7, #12]
 80021b2:	60b9      	str	r1, [r7, #8]
 80021b4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	695a      	ldr	r2, [r3, #20]
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	f003 0304 	and.w	r3, r3, #4
 80021c0:	2107      	movs	r1, #7
 80021c2:	fa01 f303 	lsl.w	r3, r1, r3
 80021c6:	43db      	mvns	r3, r3
 80021c8:	401a      	ands	r2, r3
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	f003 0304 	and.w	r3, r3, #4
 80021d0:	6879      	ldr	r1, [r7, #4]
 80021d2:	fa01 f303 	lsl.w	r3, r1, r3
 80021d6:	431a      	orrs	r2, r3
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80021dc:	bf00      	nop
 80021de:	3714      	adds	r7, #20
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bc80      	pop	{r7}
 80021e4:	4770      	bx	lr

080021e6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80021e6:	b480      	push	{r7}
 80021e8:	b083      	sub	sp, #12
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d101      	bne.n	80021fe <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80021fa:	2301      	movs	r3, #1
 80021fc:	e000      	b.n	8002200 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80021fe:	2300      	movs	r3, #0
}
 8002200:	4618      	mov	r0, r3
 8002202:	370c      	adds	r7, #12
 8002204:	46bd      	mov	sp, r7
 8002206:	bc80      	pop	{r7}
 8002208:	4770      	bx	lr

0800220a <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800220a:	b480      	push	{r7}
 800220c:	b085      	sub	sp, #20
 800220e:	af00      	add	r7, sp, #0
 8002210:	60f8      	str	r0, [r7, #12]
 8002212:	60b9      	str	r1, [r7, #8]
 8002214:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	f003 031f 	and.w	r3, r3, #31
 8002220:	210f      	movs	r1, #15
 8002222:	fa01 f303 	lsl.w	r3, r1, r3
 8002226:	43db      	mvns	r3, r3
 8002228:	401a      	ands	r2, r3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	0e9b      	lsrs	r3, r3, #26
 800222e:	f003 010f 	and.w	r1, r3, #15
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	f003 031f 	and.w	r3, r3, #31
 8002238:	fa01 f303 	lsl.w	r3, r1, r3
 800223c:	431a      	orrs	r2, r3
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002242:	bf00      	nop
 8002244:	3714      	adds	r7, #20
 8002246:	46bd      	mov	sp, r7
 8002248:	bc80      	pop	{r7}
 800224a:	4770      	bx	lr

0800224c <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8002260:	431a      	orrs	r2, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002266:	bf00      	nop
 8002268:	370c      	adds	r7, #12
 800226a:	46bd      	mov	sp, r7
 800226c:	bc80      	pop	{r7}
 800226e:	4770      	bx	lr

08002270 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8002284:	43db      	mvns	r3, r3
 8002286:	401a      	ands	r2, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800228c:	bf00      	nop
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	bc80      	pop	{r7}
 8002294:	4770      	bx	lr

08002296 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8002296:	b480      	push	{r7}
 8002298:	b085      	sub	sp, #20
 800229a:	af00      	add	r7, sp, #0
 800229c:	60f8      	str	r0, [r7, #12]
 800229e:	60b9      	str	r1, [r7, #8]
 80022a0:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	695a      	ldr	r2, [r3, #20]
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	021b      	lsls	r3, r3, #8
 80022aa:	43db      	mvns	r3, r3
 80022ac:	401a      	ands	r2, r3
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	0219      	lsls	r1, r3, #8
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	400b      	ands	r3, r1
 80022b6:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 80022ba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80022be:	431a      	orrs	r2, r3
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80022c4:	bf00      	nop
 80022c6:	3714      	adds	r7, #20
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bc80      	pop	{r7}
 80022cc:	4770      	bx	lr

080022ce <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80022ce:	b480      	push	{r7}
 80022d0:	b083      	sub	sp, #12
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80022de:	f023 0317 	bic.w	r3, r3, #23
 80022e2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80022ea:	bf00      	nop
 80022ec:	370c      	adds	r7, #12
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bc80      	pop	{r7}
 80022f2:	4770      	bx	lr

080022f4 <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002304:	f023 0317 	bic.w	r3, r3, #23
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	6093      	str	r3, [r2, #8]
}
 800230c:	bf00      	nop
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	bc80      	pop	{r7}
 8002314:	4770      	bx	lr

08002316 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002316:	b480      	push	{r7}
 8002318:	b083      	sub	sp, #12
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002326:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800232a:	d101      	bne.n	8002330 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800232c:	2301      	movs	r3, #1
 800232e:	e000      	b.n	8002332 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	370c      	adds	r7, #12
 8002336:	46bd      	mov	sp, r7
 8002338:	bc80      	pop	{r7}
 800233a:	4770      	bx	lr

0800233c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800234c:	f023 0317 	bic.w	r3, r3, #23
 8002350:	f043 0201 	orr.w	r2, r3, #1
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002358:	bf00      	nop
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	bc80      	pop	{r7}
 8002360:	4770      	bx	lr

08002362 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002362:	b480      	push	{r7}
 8002364:	b083      	sub	sp, #12
 8002366:	af00      	add	r7, sp, #0
 8002368:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002372:	f023 0317 	bic.w	r3, r3, #23
 8002376:	f043 0202 	orr.w	r2, r3, #2
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800237e:	bf00      	nop
 8002380:	370c      	adds	r7, #12
 8002382:	46bd      	mov	sp, r7
 8002384:	bc80      	pop	{r7}
 8002386:	4770      	bx	lr

08002388 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f003 0301 	and.w	r3, r3, #1
 8002398:	2b01      	cmp	r3, #1
 800239a:	d101      	bne.n	80023a0 <LL_ADC_IsEnabled+0x18>
 800239c:	2301      	movs	r3, #1
 800239e:	e000      	b.n	80023a2 <LL_ADC_IsEnabled+0x1a>
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	370c      	adds	r7, #12
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bc80      	pop	{r7}
 80023aa:	4770      	bx	lr

080023ac <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	f003 0302 	and.w	r3, r3, #2
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d101      	bne.n	80023c4 <LL_ADC_IsDisableOngoing+0x18>
 80023c0:	2301      	movs	r3, #1
 80023c2:	e000      	b.n	80023c6 <LL_ADC_IsDisableOngoing+0x1a>
 80023c4:	2300      	movs	r3, #0
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	370c      	adds	r7, #12
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bc80      	pop	{r7}
 80023ce:	4770      	bx	lr

080023d0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80023e0:	f023 0317 	bic.w	r3, r3, #23
 80023e4:	f043 0204 	orr.w	r2, r3, #4
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80023ec:	bf00      	nop
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bc80      	pop	{r7}
 80023f4:	4770      	bx	lr

080023f6 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80023f6:	b480      	push	{r7}
 80023f8:	b083      	sub	sp, #12
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002406:	f023 0317 	bic.w	r3, r3, #23
 800240a:	f043 0210 	orr.w	r2, r3, #16
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002412:	bf00      	nop
 8002414:	370c      	adds	r7, #12
 8002416:	46bd      	mov	sp, r7
 8002418:	bc80      	pop	{r7}
 800241a:	4770      	bx	lr

0800241c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	f003 0304 	and.w	r3, r3, #4
 800242c:	2b04      	cmp	r3, #4
 800242e:	d101      	bne.n	8002434 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002430:	2301      	movs	r3, #1
 8002432:	e000      	b.n	8002436 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	370c      	adds	r7, #12
 800243a:	46bd      	mov	sp, r7
 800243c:	bc80      	pop	{r7}
 800243e:	4770      	bx	lr

08002440 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b088      	sub	sp, #32
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002448:	2300      	movs	r3, #0
 800244a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 800244c:	2300      	movs	r3, #0
 800244e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8002450:	2300      	movs	r3, #0
 8002452:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002454:	2300      	movs	r3, #0
 8002456:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d101      	bne.n	8002462 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e1ae      	b.n	80027c0 <HAL_ADC_Init+0x380>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800246c:	2b00      	cmp	r3, #0
 800246e:	d109      	bne.n	8002484 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f7fe fbf5 	bl	8000c60 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4618      	mov	r0, r3
 800248a:	f7ff ff44 	bl	8002316 <LL_ADC_IsInternalRegulatorEnabled>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d115      	bne.n	80024c0 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4618      	mov	r0, r3
 800249a:	f7ff ff18 	bl	80022ce <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800249e:	4b9b      	ldr	r3, [pc, #620]	; (800270c <HAL_ADC_Init+0x2cc>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	099b      	lsrs	r3, r3, #6
 80024a4:	4a9a      	ldr	r2, [pc, #616]	; (8002710 <HAL_ADC_Init+0x2d0>)
 80024a6:	fba2 2303 	umull	r2, r3, r2, r3
 80024aa:	099b      	lsrs	r3, r3, #6
 80024ac:	3301      	adds	r3, #1
 80024ae:	005b      	lsls	r3, r3, #1
 80024b0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80024b2:	e002      	b.n	80024ba <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	3b01      	subs	r3, #1
 80024b8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d1f9      	bne.n	80024b4 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7ff ff26 	bl	8002316 <LL_ADC_IsInternalRegulatorEnabled>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d10d      	bne.n	80024ec <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024d4:	f043 0210 	orr.w	r2, r3, #16
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024e0:	f043 0201 	orr.w	r2, r3, #1
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4618      	mov	r0, r3
 80024f2:	f7ff ff93 	bl	800241c <LL_ADC_REG_IsConversionOngoing>
 80024f6:	60f8      	str	r0, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024fc:	f003 0310 	and.w	r3, r3, #16
 8002500:	2b00      	cmp	r3, #0
 8002502:	f040 8154 	bne.w	80027ae <HAL_ADC_Init+0x36e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2b00      	cmp	r3, #0
 800250a:	f040 8150 	bne.w	80027ae <HAL_ADC_Init+0x36e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002512:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002516:	f043 0202 	orr.w	r2, r3, #2
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4618      	mov	r0, r3
 8002524:	f7ff ff30 	bl	8002388 <LL_ADC_IsEnabled>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d14f      	bne.n	80025ce <HAL_ADC_Init+0x18e>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	f023 0118 	bic.w	r1, r3, #24
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	689a      	ldr	r2, [r3, #8]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	430a      	orrs	r2, r1
 8002542:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002550:	4313      	orrs	r3, r2
 8002552:	697a      	ldr	r2, [r7, #20]
 8002554:	4313      	orrs	r3, r2
 8002556:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800255e:	2b01      	cmp	r3, #1
 8002560:	d111      	bne.n	8002586 <HAL_ADC_Init+0x146>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800256e:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8002574:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800257a:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	4313      	orrs	r3, r2
 8002580:	f043 0301 	orr.w	r3, r3, #1
 8002584:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	691a      	ldr	r2, [r3, #16]
 800258c:	4b61      	ldr	r3, [pc, #388]	; (8002714 <HAL_ADC_Init+0x2d4>)
 800258e:	4013      	ands	r3, r2
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	6812      	ldr	r2, [r2, #0]
 8002594:	6979      	ldr	r1, [r7, #20]
 8002596:	430b      	orrs	r3, r1
 8002598:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80025a2:	d014      	beq.n	80025ce <HAL_ADC_Init+0x18e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80025a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025ac:	d00f      	beq.n	80025ce <HAL_ADC_Init+0x18e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80025b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80025b6:	d00a      	beq.n	80025ce <HAL_ADC_Init+0x18e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 80025b8:	4b57      	ldr	r3, [pc, #348]	; (8002718 <HAL_ADC_Init+0x2d8>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80025c8:	4953      	ldr	r1, [pc, #332]	; (8002718 <HAL_ADC_Init+0x2d8>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	600b      	str	r3, [r1, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	7e1b      	ldrb	r3, [r3, #24]
 80025d2:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	7e5b      	ldrb	r3, [r3, #25]
 80025d8:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80025da:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	7e9b      	ldrb	r3, [r3, #26]
 80025e0:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80025e2:	4313      	orrs	r3, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80025e8:	2a00      	cmp	r2, #0
 80025ea:	d002      	beq.n	80025f2 <HAL_ADC_Init+0x1b2>
 80025ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80025f0:	e000      	b.n	80025f4 <HAL_ADC_Init+0x1b4>
 80025f2:	2200      	movs	r2, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80025f4:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80025fa:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	691b      	ldr	r3, [r3, #16]
 8002600:	2b00      	cmp	r3, #0
 8002602:	da04      	bge.n	800260e <HAL_ADC_Init+0x1ce>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	691b      	ldr	r3, [r3, #16]
 8002608:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800260c:	e001      	b.n	8002612 <HAL_ADC_Init+0x1d2>
 800260e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                 hadc->Init.DataAlign                                           |
 8002612:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800261a:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800261c:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800261e:	69ba      	ldr	r2, [r7, #24]
 8002620:	4313      	orrs	r3, r2
 8002622:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f893 3020 	ldrb.w	r3, [r3, #32]
 800262a:	2b01      	cmp	r3, #1
 800262c:	d114      	bne.n	8002658 <HAL_ADC_Init+0x218>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	7e9b      	ldrb	r3, [r3, #26]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d104      	bne.n	8002640 <HAL_ADC_Init+0x200>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800263c:	61bb      	str	r3, [r7, #24]
 800263e:	e00b      	b.n	8002658 <HAL_ADC_Init+0x218>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002644:	f043 0220 	orr.w	r2, r3, #32
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002650:	f043 0201 	orr.w	r2, r3, #1
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265c:	2b00      	cmp	r3, #0
 800265e:	d009      	beq.n	8002674 <HAL_ADC_Init+0x234>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002664:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                   hadc->Init.ExternalTrigConvEdge);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800266c:	4313      	orrs	r3, r2
 800266e:	69ba      	ldr	r2, [r7, #24]
 8002670:	4313      	orrs	r3, r2
 8002672:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 800267e:	f423 73f3 	bic.w	r3, r3, #486	; 0x1e6
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	6812      	ldr	r2, [r2, #0]
 8002686:	69b9      	ldr	r1, [r7, #24]
 8002688:	430b      	orrs	r3, r1
 800268a:	60d3      	str	r3, [r2, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	691a      	ldr	r2, [r3, #16]
 8002692:	4b22      	ldr	r3, [pc, #136]	; (800271c <HAL_ADC_Init+0x2dc>)
 8002694:	4013      	ands	r3, r2
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	6812      	ldr	r2, [r2, #0]
 800269a:	6979      	ldr	r1, [r7, #20]
 800269c:	430b      	orrs	r3, r1
 800269e:	6113      	str	r3, [r2, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6818      	ldr	r0, [r3, #0]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026a8:	461a      	mov	r2, r3
 80026aa:	2100      	movs	r1, #0
 80026ac:	f7ff fd7d 	bl	80021aa <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6818      	ldr	r0, [r3, #0]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026b8:	461a      	mov	r2, r3
 80026ba:	4919      	ldr	r1, [pc, #100]	; (8002720 <HAL_ADC_Init+0x2e0>)
 80026bc:	f7ff fd75 	bl	80021aa <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	691b      	ldr	r3, [r3, #16]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d108      	bne.n	80026da <HAL_ADC_Init+0x29a>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f062 020f 	orn	r2, r2, #15
 80026d6:	629a      	str	r2, [r3, #40]	; 0x28
 80026d8:	e044      	b.n	8002764 <HAL_ADC_Init+0x324>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	691b      	ldr	r3, [r3, #16]
 80026de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80026e2:	d13f      	bne.n	8002764 <HAL_ADC_Init+0x324>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 80026e4:	2300      	movs	r3, #0
 80026e6:	613b      	str	r3, [r7, #16]
 80026e8:	e00c      	b.n	8002704 <HAL_ADC_Init+0x2c4>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	fa22 f303 	lsr.w	r3, r2, r3
 80026f6:	f003 030f 	and.w	r3, r3, #15
 80026fa:	2b0f      	cmp	r3, #15
 80026fc:	d012      	beq.n	8002724 <HAL_ADC_Init+0x2e4>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	3301      	adds	r3, #1
 8002702:	613b      	str	r3, [r7, #16]
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	2b07      	cmp	r3, #7
 8002708:	d9ef      	bls.n	80026ea <HAL_ADC_Init+0x2aa>
 800270a:	e00c      	b.n	8002726 <HAL_ADC_Init+0x2e6>
 800270c:	20000000 	.word	0x20000000
 8002710:	053e2d63 	.word	0x053e2d63
 8002714:	1ffffc02 	.word	0x1ffffc02
 8002718:	40012708 	.word	0x40012708
 800271c:	dffffc02 	.word	0xdffffc02
 8002720:	03ffff04 	.word	0x03ffff04
            ADC_CHSELR_SQ1)
        {
          break;
 8002724:	bf00      	nop
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	2b01      	cmp	r3, #1
 800272a:	d108      	bne.n	800273e <HAL_ADC_Init+0x2fe>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f062 020f 	orn	r2, r2, #15
 800273a:	629a      	str	r2, [r3, #40]	; 0x28
 800273c:	e012      	b.n	8002764 <HAL_ADC_Init+0x324>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	69db      	ldr	r3, [r3, #28]
 8002748:	3b01      	subs	r3, #1
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	f003 031c 	and.w	r3, r3, #28
 8002750:	f06f 020f 	mvn.w	r2, #15
 8002754:	fa02 f103 	lsl.w	r1, r2, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	430a      	orrs	r2, r1
 8002762:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	68da      	ldr	r2, [r3, #12]
 800276a:	4b17      	ldr	r3, [pc, #92]	; (80027c8 <HAL_ADC_Init+0x388>)
 800276c:	4013      	ands	r3, r2
 800276e:	69ba      	ldr	r2, [r7, #24]
 8002770:	429a      	cmp	r2, r3
 8002772:	d10b      	bne.n	800278c <HAL_ADC_Init+0x34c>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800277e:	f023 0303 	bic.w	r3, r3, #3
 8002782:	f043 0201 	orr.w	r2, r3, #1
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 800278a:	e018      	b.n	80027be <HAL_ADC_Init+0x37e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002790:	f023 0312 	bic.w	r3, r3, #18
 8002794:	f043 0210 	orr.w	r2, r3, #16
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027a0:	f043 0201 	orr.w	r2, r3, #1
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	77fb      	strb	r3, [r7, #31]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80027ac:	e007      	b.n	80027be <HAL_ADC_Init+0x37e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027b2:	f043 0210 	orr.w	r2, r3, #16
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 80027be:	7ffb      	ldrb	r3, [r7, #31]
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3720      	adds	r7, #32
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	833fffe7 	.word	0x833fffe7

080027cc <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d101      	bne.n	80027de <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e06a      	b.n	80028b4 <HAL_ADC_DeInit+0xe8>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027e2:	f043 0202 	orr.w	r2, r3, #2
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f000 fabe 	bl	8002d6c <ADC_ConversionStop>
 80027f0:	4603      	mov	r3, r0
 80027f2:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80027f4:	7bfb      	ldrb	r3, [r7, #15]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d10f      	bne.n	800281a <HAL_ADC_DeInit+0x4e>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f000 fb82 	bl	8002f04 <ADC_Disable>
 8002800:	4603      	mov	r3, r0
 8002802:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002804:	7bfb      	ldrb	r3, [r7, #15]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d102      	bne.n	8002810 <HAL_ADC_DeInit+0x44>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2201      	movs	r2, #1
 800280e:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4618      	mov	r0, r3
 8002816:	f7ff fd6d 	bl	80022f4 <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	6812      	ldr	r2, [r2, #0]
 8002824:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 8002828:	f023 0303 	bic.w	r3, r3, #3
 800282c:	6053      	str	r3, [r2, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f240 329f 	movw	r2, #927	; 0x39f
 8002836:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	68d9      	ldr	r1, [r3, #12]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	4b1e      	ldr	r3, [pc, #120]	; (80028bc <HAL_ADC_DeInit+0xf0>)
 8002844:	400b      	ands	r3, r1
 8002846:	60d3      	str	r3, [r2, #12]
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register CFGR2 */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	691a      	ldr	r2, [r3, #16]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8002856:	611a      	str	r2, [r3, #16]

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	695a      	ldr	r2, [r3, #20]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f022 0207 	bic.w	r2, r2, #7
 8002866:	615a      	str	r2, [r3, #20]

  /* Reset register TR1 */
  hadc->Instance->TR1 &= ~(ADC_TR1_HT1 | ADC_TR1_LT1);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	6a1a      	ldr	r2, [r3, #32]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 8002876:	621a      	str	r2, [r3, #32]

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	2200      	movs	r2, #0
 8002884:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset register CCR */
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 8002886:	4b0e      	ldr	r3, [pc, #56]	; (80028c0 <HAL_ADC_DeInit+0xf4>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a0d      	ldr	r2, [pc, #52]	; (80028c0 <HAL_ADC_DeInit+0xf4>)
 800288c:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 8002890:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f7fe f9f8 	bl	8000c88 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2200      	movs	r2, #0
 80028a2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	659a      	str	r2, [r3, #88]	; 0x58

  __HAL_UNLOCK(hadc);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 80028b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3710      	adds	r7, #16
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	833e0200 	.word	0x833e0200
 80028c0:	40012708 	.word	0x40012708

080028c4 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7ff fda3 	bl	800241c <LL_ADC_REG_IsConversionOngoing>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d132      	bne.n	8002942 <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d101      	bne.n	80028ea <HAL_ADC_Start+0x26>
 80028e6:	2302      	movs	r3, #2
 80028e8:	e02e      	b.n	8002948 <HAL_ADC_Start+0x84>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2201      	movs	r2, #1
 80028ee:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f000 fa80 	bl	8002df8 <ADC_Enable>
 80028f8:	4603      	mov	r3, r0
 80028fa:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80028fc:	7bfb      	ldrb	r3, [r7, #15]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d11a      	bne.n	8002938 <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002906:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800290a:	f023 0301 	bic.w	r3, r3, #1
 800290e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	221c      	movs	r2, #28
 8002922:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4618      	mov	r0, r3
 8002932:	f7ff fd4d 	bl	80023d0 <LL_ADC_REG_StartConversion>
 8002936:	e006      	b.n	8002946 <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8002940:	e001      	b.n	8002946 <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002942:	2302      	movs	r3, #2
 8002944:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 8002946:	7bfb      	ldrb	r3, [r7, #15]
}
 8002948:	4618      	mov	r0, r3
 800294a:	3710      	adds	r7, #16
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800295e:	2b01      	cmp	r3, #1
 8002960:	d101      	bne.n	8002966 <HAL_ADC_Stop+0x16>
 8002962:	2302      	movs	r3, #2
 8002964:	e022      	b.n	80029ac <HAL_ADC_Stop+0x5c>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2201      	movs	r2, #1
 800296a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f000 f9fc 	bl	8002d6c <ADC_ConversionStop>
 8002974:	4603      	mov	r3, r0
 8002976:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002978:	7bfb      	ldrb	r3, [r7, #15]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d111      	bne.n	80029a2 <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f000 fac0 	bl	8002f04 <ADC_Disable>
 8002984:	4603      	mov	r3, r0
 8002986:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002988:	7bfb      	ldrb	r3, [r7, #15]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d109      	bne.n	80029a2 <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002992:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002996:	f023 0301 	bic.w	r3, r3, #1
 800299a:	f043 0201 	orr.w	r2, r3, #1
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 80029aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3710      	adds	r7, #16
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	695b      	ldr	r3, [r3, #20]
 80029c2:	2b08      	cmp	r3, #8
 80029c4:	d102      	bne.n	80029cc <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 80029c6:	2308      	movs	r3, #8
 80029c8:	60fb      	str	r3, [r7, #12]
 80029ca:	e010      	b.n	80029ee <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	f003 0301 	and.w	r3, r3, #1
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d007      	beq.n	80029ea <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029de:	f043 0220 	orr.w	r2, r3, #32
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e077      	b.n	8002ada <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 80029ea:	2304      	movs	r3, #4
 80029ec:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80029ee:	f7fe fe7f 	bl	80016f0 <HAL_GetTick>
 80029f2:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80029f4:	e021      	b.n	8002a3a <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029fc:	d01d      	beq.n	8002a3a <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80029fe:	f7fe fe77 	bl	80016f0 <HAL_GetTick>
 8002a02:	4602      	mov	r2, r0
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	683a      	ldr	r2, [r7, #0]
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d302      	bcc.n	8002a14 <HAL_ADC_PollForConversion+0x60>
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d112      	bne.n	8002a3a <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d10b      	bne.n	8002a3a <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a26:	f043 0204 	orr.w	r2, r3, #4
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e04f      	b.n	8002ada <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	4013      	ands	r3, r2
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d0d6      	beq.n	80029f6 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a4c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7ff fbc4 	bl	80021e6 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d031      	beq.n	8002ac8 <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	7e9b      	ldrb	r3, [r3, #26]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d12d      	bne.n	8002ac8 <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0308 	and.w	r3, r3, #8
 8002a76:	2b08      	cmp	r3, #8
 8002a78:	d126      	bne.n	8002ac8 <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7ff fccc 	bl	800241c <LL_ADC_REG_IsConversionOngoing>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d112      	bne.n	8002ab0 <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	685a      	ldr	r2, [r3, #4]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f022 020c 	bic.w	r2, r2, #12
 8002a98:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002aa2:	f023 0301 	bic.w	r3, r3, #1
 8002aa6:	f043 0201 	orr.w	r2, r3, #1
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	659a      	str	r2, [r3, #88]	; 0x58
 8002aae:	e00b      	b.n	8002ac8 <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ab4:	f043 0220 	orr.w	r2, r3, #32
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ac0:	f043 0201 	orr.w	r2, r3, #1
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	7e1b      	ldrb	r3, [r3, #24]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d103      	bne.n	8002ad8 <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	220c      	movs	r2, #12
 8002ad6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3710      	adds	r7, #16
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}

08002ae2 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002ae2:	b480      	push	{r7}
 8002ae4:	b083      	sub	sp, #12
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	370c      	adds	r7, #12
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bc80      	pop	{r7}
 8002af8:	4770      	bx	lr
	...

08002afc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b088      	sub	sp, #32
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b06:	2300      	movs	r3, #0
 8002b08:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	691b      	ldr	r3, [r3, #16]
 8002b12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d101      	bne.n	8002b24 <HAL_ADC_ConfigChannel+0x28>
 8002b20:	2302      	movs	r3, #2
 8002b22:	e110      	b.n	8002d46 <HAL_ADC_ConfigChannel+0x24a>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7ff fc73 	bl	800241c <LL_ADC_REG_IsConversionOngoing>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	f040 80f7 	bne.w	8002d2c <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	f000 80b1 	beq.w	8002caa <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	691b      	ldr	r3, [r3, #16]
 8002b4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b50:	d004      	beq.n	8002b5c <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002b56:	4a7e      	ldr	r2, [pc, #504]	; (8002d50 <HAL_ADC_ConfigChannel+0x254>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d108      	bne.n	8002b6e <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4619      	mov	r1, r3
 8002b66:	4610      	mov	r0, r2
 8002b68:	f7ff fb70 	bl	800224c <LL_ADC_REG_SetSequencerChAdd>
 8002b6c:	e041      	b.n	8002bf2 <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	f003 031f 	and.w	r3, r3, #31
 8002b7a:	210f      	movs	r1, #15
 8002b7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b80:	43db      	mvns	r3, r3
 8002b82:	401a      	ands	r2, r3
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d105      	bne.n	8002b9c <HAL_ADC_ConfigChannel+0xa0>
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	0e9b      	lsrs	r3, r3, #26
 8002b96:	f003 031f 	and.w	r3, r3, #31
 8002b9a:	e011      	b.n	8002bc0 <HAL_ADC_ConfigChannel+0xc4>
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	fa93 f3a3 	rbit	r3, r3
 8002ba8:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d101      	bne.n	8002bb8 <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 8002bb4:	2320      	movs	r3, #32
 8002bb6:	e003      	b.n	8002bc0 <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	fab3 f383 	clz	r3, r3
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	6839      	ldr	r1, [r7, #0]
 8002bc2:	6849      	ldr	r1, [r1, #4]
 8002bc4:	f001 011f 	and.w	r1, r1, #31
 8002bc8:	408b      	lsls	r3, r1
 8002bca:	431a      	orrs	r2, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	089b      	lsrs	r3, r3, #2
 8002bd6:	1c5a      	adds	r2, r3, #1
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	69db      	ldr	r3, [r3, #28]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d808      	bhi.n	8002bf2 <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6818      	ldr	r0, [r3, #0]
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	6859      	ldr	r1, [r3, #4]
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	461a      	mov	r2, r3
 8002bee:	f7ff fb0c 	bl	800220a <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6818      	ldr	r0, [r3, #0]
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	6819      	ldr	r1, [r3, #0]
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	461a      	mov	r2, r3
 8002c00:	f7ff fb49 	bl	8002296 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	f280 8097 	bge.w	8002d3c <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c0e:	4851      	ldr	r0, [pc, #324]	; (8002d54 <HAL_ADC_ConfigChannel+0x258>)
 8002c10:	f7ff fabe 	bl	8002190 <LL_ADC_GetCommonPathInternalCh>
 8002c14:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a4f      	ldr	r2, [pc, #316]	; (8002d58 <HAL_ADC_ConfigChannel+0x25c>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d120      	bne.n	8002c62 <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002c20:	69bb      	ldr	r3, [r7, #24]
 8002c22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d11b      	bne.n	8002c62 <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c2a:	69bb      	ldr	r3, [r7, #24]
 8002c2c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002c30:	4619      	mov	r1, r3
 8002c32:	4848      	ldr	r0, [pc, #288]	; (8002d54 <HAL_ADC_ConfigChannel+0x258>)
 8002c34:	f7ff fa9a 	bl	800216c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c38:	4b48      	ldr	r3, [pc, #288]	; (8002d5c <HAL_ADC_ConfigChannel+0x260>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	099b      	lsrs	r3, r3, #6
 8002c3e:	4a48      	ldr	r2, [pc, #288]	; (8002d60 <HAL_ADC_ConfigChannel+0x264>)
 8002c40:	fba2 2303 	umull	r2, r3, r2, r3
 8002c44:	099b      	lsrs	r3, r3, #6
 8002c46:	1c5a      	adds	r2, r3, #1
 8002c48:	4613      	mov	r3, r2
 8002c4a:	005b      	lsls	r3, r3, #1
 8002c4c:	4413      	add	r3, r2
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002c52:	e002      	b.n	8002c5a <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	3b01      	subs	r3, #1
 8002c58:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d1f9      	bne.n	8002c54 <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002c60:	e06c      	b.n	8002d3c <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a3f      	ldr	r2, [pc, #252]	; (8002d64 <HAL_ADC_ConfigChannel+0x268>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d10c      	bne.n	8002c86 <HAL_ADC_ConfigChannel+0x18a>
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d107      	bne.n	8002c86 <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	4835      	ldr	r0, [pc, #212]	; (8002d54 <HAL_ADC_ConfigChannel+0x258>)
 8002c80:	f7ff fa74 	bl	800216c <LL_ADC_SetCommonPathInternalCh>
 8002c84:	e05a      	b.n	8002d3c <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a37      	ldr	r2, [pc, #220]	; (8002d68 <HAL_ADC_ConfigChannel+0x26c>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d155      	bne.n	8002d3c <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d150      	bne.n	8002d3c <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	482c      	ldr	r0, [pc, #176]	; (8002d54 <HAL_ADC_ConfigChannel+0x258>)
 8002ca4:	f7ff fa62 	bl	800216c <LL_ADC_SetCommonPathInternalCh>
 8002ca8:	e048      	b.n	8002d3c <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	691b      	ldr	r3, [r3, #16]
 8002cae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002cb2:	d004      	beq.n	8002cbe <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002cb8:	4a25      	ldr	r2, [pc, #148]	; (8002d50 <HAL_ADC_ConfigChannel+0x254>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d107      	bne.n	8002cce <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	4610      	mov	r0, r2
 8002cca:	f7ff fad1 	bl	8002270 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	da32      	bge.n	8002d3c <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002cd6:	481f      	ldr	r0, [pc, #124]	; (8002d54 <HAL_ADC_ConfigChannel+0x258>)
 8002cd8:	f7ff fa5a 	bl	8002190 <LL_ADC_GetCommonPathInternalCh>
 8002cdc:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a1d      	ldr	r2, [pc, #116]	; (8002d58 <HAL_ADC_ConfigChannel+0x25c>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d107      	bne.n	8002cf8 <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002cee:	4619      	mov	r1, r3
 8002cf0:	4818      	ldr	r0, [pc, #96]	; (8002d54 <HAL_ADC_ConfigChannel+0x258>)
 8002cf2:	f7ff fa3b 	bl	800216c <LL_ADC_SetCommonPathInternalCh>
 8002cf6:	e021      	b.n	8002d3c <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a19      	ldr	r2, [pc, #100]	; (8002d64 <HAL_ADC_ConfigChannel+0x268>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d107      	bne.n	8002d12 <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d08:	4619      	mov	r1, r3
 8002d0a:	4812      	ldr	r0, [pc, #72]	; (8002d54 <HAL_ADC_ConfigChannel+0x258>)
 8002d0c:	f7ff fa2e 	bl	800216c <LL_ADC_SetCommonPathInternalCh>
 8002d10:	e014      	b.n	8002d3c <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a14      	ldr	r2, [pc, #80]	; (8002d68 <HAL_ADC_ConfigChannel+0x26c>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d10f      	bne.n	8002d3c <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002d22:	4619      	mov	r1, r3
 8002d24:	480b      	ldr	r0, [pc, #44]	; (8002d54 <HAL_ADC_ConfigChannel+0x258>)
 8002d26:	f7ff fa21 	bl	800216c <LL_ADC_SetCommonPathInternalCh>
 8002d2a:	e007      	b.n	8002d3c <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d30:	f043 0220 	orr.w	r2, r3, #32
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8002d44:	7ffb      	ldrb	r3, [r7, #31]
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3720      	adds	r7, #32
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	80000004 	.word	0x80000004
 8002d54:	40012708 	.word	0x40012708
 8002d58:	b0001000 	.word	0xb0001000
 8002d5c:	20000000 	.word	0x20000000
 8002d60:	053e2d63 	.word	0x053e2d63
 8002d64:	b8004000 	.word	0xb8004000
 8002d68:	b4002000 	.word	0xb4002000

08002d6c <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f7ff fb4f 	bl	800241c <LL_ADC_REG_IsConversionOngoing>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d033      	beq.n	8002dec <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7ff fb0f 	bl	80023ac <LL_ADC_IsDisableOngoing>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d104      	bne.n	8002d9e <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7ff fb2c 	bl	80023f6 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002d9e:	f7fe fca7 	bl	80016f0 <HAL_GetTick>
 8002da2:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8002da4:	e01b      	b.n	8002dde <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002da6:	f7fe fca3 	bl	80016f0 <HAL_GetTick>
 8002daa:	4602      	mov	r2, r0
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d914      	bls.n	8002dde <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	f003 0304 	and.w	r3, r3, #4
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d00d      	beq.n	8002dde <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dc6:	f043 0210 	orr.w	r2, r3, #16
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dd2:	f043 0201 	orr.w	r2, r3, #1
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e007      	b.n	8002dee <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f003 0304 	and.w	r3, r3, #4
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d1dc      	bne.n	8002da6 <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3710      	adds	r7, #16
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
	...

08002df8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002e00:	2300      	movs	r3, #0
 8002e02:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7ff fabd 	bl	8002388 <LL_ADC_IsEnabled>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d169      	bne.n	8002ee8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	689a      	ldr	r2, [r3, #8]
 8002e1a:	4b36      	ldr	r3, [pc, #216]	; (8002ef4 <ADC_Enable+0xfc>)
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d00d      	beq.n	8002e3e <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e26:	f043 0210 	orr.w	r2, r3, #16
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e32:	f043 0201 	orr.w	r2, r3, #1
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e055      	b.n	8002eea <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7ff fa7a 	bl	800233c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002e48:	482b      	ldr	r0, [pc, #172]	; (8002ef8 <ADC_Enable+0x100>)
 8002e4a:	f7ff f9a1 	bl	8002190 <LL_ADC_GetCommonPathInternalCh>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d00f      	beq.n	8002e78 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e58:	4b28      	ldr	r3, [pc, #160]	; (8002efc <ADC_Enable+0x104>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	099b      	lsrs	r3, r3, #6
 8002e5e:	4a28      	ldr	r2, [pc, #160]	; (8002f00 <ADC_Enable+0x108>)
 8002e60:	fba2 2303 	umull	r2, r3, r2, r3
 8002e64:	099b      	lsrs	r3, r3, #6
 8002e66:	3301      	adds	r3, #1
 8002e68:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002e6a:	e002      	b.n	8002e72 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	3b01      	subs	r3, #1
 8002e70:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d1f9      	bne.n	8002e6c <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	7e5b      	ldrb	r3, [r3, #25]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d033      	beq.n	8002ee8 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8002e80:	f7fe fc36 	bl	80016f0 <HAL_GetTick>
 8002e84:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e86:	e028      	b.n	8002eda <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7ff fa7b 	bl	8002388 <LL_ADC_IsEnabled>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d104      	bne.n	8002ea2 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f7ff fa4d 	bl	800233c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002ea2:	f7fe fc25 	bl	80016f0 <HAL_GetTick>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d914      	bls.n	8002eda <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0301 	and.w	r3, r3, #1
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d00d      	beq.n	8002eda <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ec2:	f043 0210 	orr.w	r2, r3, #16
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ece:	f043 0201 	orr.w	r2, r3, #1
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e007      	b.n	8002eea <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0301 	and.w	r3, r3, #1
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d1cf      	bne.n	8002e88 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3710      	adds	r7, #16
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	80000017 	.word	0x80000017
 8002ef8:	40012708 	.word	0x40012708
 8002efc:	20000000 	.word	0x20000000
 8002f00:	053e2d63 	.word	0x053e2d63

08002f04 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4618      	mov	r0, r3
 8002f12:	f7ff fa4b 	bl	80023ac <LL_ADC_IsDisableOngoing>
 8002f16:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f7ff fa33 	bl	8002388 <LL_ADC_IsEnabled>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d047      	beq.n	8002fb8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d144      	bne.n	8002fb8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	f003 0305 	and.w	r3, r3, #5
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d10c      	bne.n	8002f56 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7ff fa0e 	bl	8002362 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2203      	movs	r2, #3
 8002f4c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002f4e:	f7fe fbcf 	bl	80016f0 <HAL_GetTick>
 8002f52:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002f54:	e029      	b.n	8002faa <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f5a:	f043 0210 	orr.w	r2, r3, #16
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f66:	f043 0201 	orr.w	r2, r3, #1
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e023      	b.n	8002fba <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002f72:	f7fe fbbd 	bl	80016f0 <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d914      	bls.n	8002faa <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f003 0301 	and.w	r3, r3, #1
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d00d      	beq.n	8002faa <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f92:	f043 0210 	orr.w	r2, r3, #16
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f9e:	f043 0201 	orr.w	r2, r3, #1
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e007      	b.n	8002fba <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	f003 0301 	and.w	r3, r3, #1
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d1dc      	bne.n	8002f72 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3710      	adds	r7, #16
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}

08002fc2 <LL_ADC_IsEnabled>:
{
 8002fc2:	b480      	push	{r7}
 8002fc4:	b083      	sub	sp, #12
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	f003 0301 	and.w	r3, r3, #1
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d101      	bne.n	8002fda <LL_ADC_IsEnabled+0x18>
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e000      	b.n	8002fdc <LL_ADC_IsEnabled+0x1a>
 8002fda:	2300      	movs	r3, #0
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	370c      	adds	r7, #12
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bc80      	pop	{r7}
 8002fe4:	4770      	bx	lr

08002fe6 <LL_ADC_IsCalibrationOnGoing>:
{
 8002fe6:	b480      	push	{r7}
 8002fe8:	b083      	sub	sp, #12
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002ff6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ffa:	d101      	bne.n	8003000 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e000      	b.n	8003002 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003000:	2300      	movs	r3, #0
}
 8003002:	4618      	mov	r0, r3
 8003004:	370c      	adds	r7, #12
 8003006:	46bd      	mov	sp, r7
 8003008:	bc80      	pop	{r7}
 800300a:	4770      	bx	lr

0800300c <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b086      	sub	sp, #24
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003014:	2300      	movs	r3, #0
 8003016:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_adc_dma_transfer; /* Note: Variable not declared as volatile because register read is already declared as volatile */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800301e:	2b01      	cmp	r3, #1
 8003020:	d101      	bne.n	8003026 <HAL_ADCEx_Calibration_Start+0x1a>
 8003022:	2302      	movs	r3, #2
 8003024:	e068      	b.n	80030f8 <HAL_ADCEx_Calibration_Start+0xec>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2201      	movs	r2, #1
 800302a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f7ff ff68 	bl	8002f04 <ADC_Disable>
 8003034:	4603      	mov	r3, r0
 8003036:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4618      	mov	r0, r3
 800303e:	f7ff ffc0 	bl	8002fc2 <LL_ADC_IsEnabled>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d14c      	bne.n	80030e2 <HAL_ADCEx_Calibration_Start+0xd6>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800304c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003050:	f043 0202 	orr.w	r2, r3, #2
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	f003 0303 	and.w	r3, r3, #3
 8003062:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	68da      	ldr	r2, [r3, #12]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f022 0203 	bic.w	r2, r2, #3
 8003072:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    SET_BIT(hadc->Instance->CR, ADC_CR_ADCAL);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	689a      	ldr	r2, [r3, #8]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003082:	609a      	str	r2, [r3, #8]

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003084:	e014      	b.n	80030b0 <HAL_ADCEx_Calibration_Start+0xa4>
    {
      wait_loop_index++;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	3301      	adds	r3, #1
 800308a:	60fb      	str	r3, [r7, #12]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 8003092:	d30d      	bcc.n	80030b0 <HAL_ADCEx_Calibration_Start+0xa4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003098:	f023 0312 	bic.w	r3, r3, #18
 800309c:	f043 0210 	orr.w	r2, r3, #16
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        __HAL_UNLOCK(hadc);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e023      	b.n	80030f8 <HAL_ADCEx_Calibration_Start+0xec>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4618      	mov	r0, r3
 80030b6:	f7ff ff96 	bl	8002fe6 <LL_ADC_IsCalibrationOnGoing>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d1e2      	bne.n	8003086 <HAL_ADCEx_Calibration_Start+0x7a>
      }
    }

    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	68d9      	ldr	r1, [r3, #12]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	693a      	ldr	r2, [r7, #16]
 80030cc:	430a      	orrs	r2, r1
 80030ce:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030d4:	f023 0303 	bic.w	r3, r3, #3
 80030d8:	f043 0201 	orr.w	r2, r3, #1
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	659a      	str	r2, [r3, #88]	; 0x58
 80030e0:	e005      	b.n	80030ee <HAL_ADCEx_Calibration_Start+0xe2>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030e6:	f043 0210 	orr.w	r2, r3, #16
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 80030f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3718      	adds	r7, #24
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}

08003100 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003100:	b480      	push	{r7}
 8003102:	b085      	sub	sp, #20
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f003 0307 	and.w	r3, r3, #7
 800310e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003110:	4b0c      	ldr	r3, [pc, #48]	; (8003144 <__NVIC_SetPriorityGrouping+0x44>)
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003116:	68ba      	ldr	r2, [r7, #8]
 8003118:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800311c:	4013      	ands	r3, r2
 800311e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003128:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800312c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003130:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003132:	4a04      	ldr	r2, [pc, #16]	; (8003144 <__NVIC_SetPriorityGrouping+0x44>)
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	60d3      	str	r3, [r2, #12]
}
 8003138:	bf00      	nop
 800313a:	3714      	adds	r7, #20
 800313c:	46bd      	mov	sp, r7
 800313e:	bc80      	pop	{r7}
 8003140:	4770      	bx	lr
 8003142:	bf00      	nop
 8003144:	e000ed00 	.word	0xe000ed00

08003148 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003148:	b480      	push	{r7}
 800314a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800314c:	4b04      	ldr	r3, [pc, #16]	; (8003160 <__NVIC_GetPriorityGrouping+0x18>)
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	0a1b      	lsrs	r3, r3, #8
 8003152:	f003 0307 	and.w	r3, r3, #7
}
 8003156:	4618      	mov	r0, r3
 8003158:	46bd      	mov	sp, r7
 800315a:	bc80      	pop	{r7}
 800315c:	4770      	bx	lr
 800315e:	bf00      	nop
 8003160:	e000ed00 	.word	0xe000ed00

08003164 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	4603      	mov	r3, r0
 800316c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800316e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003172:	2b00      	cmp	r3, #0
 8003174:	db0b      	blt.n	800318e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003176:	79fb      	ldrb	r3, [r7, #7]
 8003178:	f003 021f 	and.w	r2, r3, #31
 800317c:	4906      	ldr	r1, [pc, #24]	; (8003198 <__NVIC_EnableIRQ+0x34>)
 800317e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003182:	095b      	lsrs	r3, r3, #5
 8003184:	2001      	movs	r0, #1
 8003186:	fa00 f202 	lsl.w	r2, r0, r2
 800318a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800318e:	bf00      	nop
 8003190:	370c      	adds	r7, #12
 8003192:	46bd      	mov	sp, r7
 8003194:	bc80      	pop	{r7}
 8003196:	4770      	bx	lr
 8003198:	e000e100 	.word	0xe000e100

0800319c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	4603      	mov	r3, r0
 80031a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	db12      	blt.n	80031d4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031ae:	79fb      	ldrb	r3, [r7, #7]
 80031b0:	f003 021f 	and.w	r2, r3, #31
 80031b4:	490a      	ldr	r1, [pc, #40]	; (80031e0 <__NVIC_DisableIRQ+0x44>)
 80031b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ba:	095b      	lsrs	r3, r3, #5
 80031bc:	2001      	movs	r0, #1
 80031be:	fa00 f202 	lsl.w	r2, r0, r2
 80031c2:	3320      	adds	r3, #32
 80031c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80031c8:	f3bf 8f4f 	dsb	sy
}
 80031cc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80031ce:	f3bf 8f6f 	isb	sy
}
 80031d2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80031d4:	bf00      	nop
 80031d6:	370c      	adds	r7, #12
 80031d8:	46bd      	mov	sp, r7
 80031da:	bc80      	pop	{r7}
 80031dc:	4770      	bx	lr
 80031de:	bf00      	nop
 80031e0:	e000e100 	.word	0xe000e100

080031e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	4603      	mov	r3, r0
 80031ec:	6039      	str	r1, [r7, #0]
 80031ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	db0a      	blt.n	800320e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	b2da      	uxtb	r2, r3
 80031fc:	490c      	ldr	r1, [pc, #48]	; (8003230 <__NVIC_SetPriority+0x4c>)
 80031fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003202:	0112      	lsls	r2, r2, #4
 8003204:	b2d2      	uxtb	r2, r2
 8003206:	440b      	add	r3, r1
 8003208:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800320c:	e00a      	b.n	8003224 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	b2da      	uxtb	r2, r3
 8003212:	4908      	ldr	r1, [pc, #32]	; (8003234 <__NVIC_SetPriority+0x50>)
 8003214:	79fb      	ldrb	r3, [r7, #7]
 8003216:	f003 030f 	and.w	r3, r3, #15
 800321a:	3b04      	subs	r3, #4
 800321c:	0112      	lsls	r2, r2, #4
 800321e:	b2d2      	uxtb	r2, r2
 8003220:	440b      	add	r3, r1
 8003222:	761a      	strb	r2, [r3, #24]
}
 8003224:	bf00      	nop
 8003226:	370c      	adds	r7, #12
 8003228:	46bd      	mov	sp, r7
 800322a:	bc80      	pop	{r7}
 800322c:	4770      	bx	lr
 800322e:	bf00      	nop
 8003230:	e000e100 	.word	0xe000e100
 8003234:	e000ed00 	.word	0xe000ed00

08003238 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003238:	b480      	push	{r7}
 800323a:	b089      	sub	sp, #36	; 0x24
 800323c:	af00      	add	r7, sp, #0
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	60b9      	str	r1, [r7, #8]
 8003242:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f003 0307 	and.w	r3, r3, #7
 800324a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	f1c3 0307 	rsb	r3, r3, #7
 8003252:	2b04      	cmp	r3, #4
 8003254:	bf28      	it	cs
 8003256:	2304      	movcs	r3, #4
 8003258:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	3304      	adds	r3, #4
 800325e:	2b06      	cmp	r3, #6
 8003260:	d902      	bls.n	8003268 <NVIC_EncodePriority+0x30>
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	3b03      	subs	r3, #3
 8003266:	e000      	b.n	800326a <NVIC_EncodePriority+0x32>
 8003268:	2300      	movs	r3, #0
 800326a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800326c:	f04f 32ff 	mov.w	r2, #4294967295
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	fa02 f303 	lsl.w	r3, r2, r3
 8003276:	43da      	mvns	r2, r3
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	401a      	ands	r2, r3
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003280:	f04f 31ff 	mov.w	r1, #4294967295
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	fa01 f303 	lsl.w	r3, r1, r3
 800328a:	43d9      	mvns	r1, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003290:	4313      	orrs	r3, r2
         );
}
 8003292:	4618      	mov	r0, r3
 8003294:	3724      	adds	r7, #36	; 0x24
 8003296:	46bd      	mov	sp, r7
 8003298:	bc80      	pop	{r7}
 800329a:	4770      	bx	lr

0800329c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	3b01      	subs	r3, #1
 80032a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032ac:	d301      	bcc.n	80032b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032ae:	2301      	movs	r3, #1
 80032b0:	e00f      	b.n	80032d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032b2:	4a0a      	ldr	r2, [pc, #40]	; (80032dc <SysTick_Config+0x40>)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	3b01      	subs	r3, #1
 80032b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032ba:	210f      	movs	r1, #15
 80032bc:	f04f 30ff 	mov.w	r0, #4294967295
 80032c0:	f7ff ff90 	bl	80031e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032c4:	4b05      	ldr	r3, [pc, #20]	; (80032dc <SysTick_Config+0x40>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032ca:	4b04      	ldr	r3, [pc, #16]	; (80032dc <SysTick_Config+0x40>)
 80032cc:	2207      	movs	r2, #7
 80032ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3708      	adds	r7, #8
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	e000e010 	.word	0xe000e010

080032e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f7ff ff09 	bl	8003100 <__NVIC_SetPriorityGrouping>
}
 80032ee:	bf00      	nop
 80032f0:	3708      	adds	r7, #8
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}

080032f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032f6:	b580      	push	{r7, lr}
 80032f8:	b086      	sub	sp, #24
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	4603      	mov	r3, r0
 80032fe:	60b9      	str	r1, [r7, #8]
 8003300:	607a      	str	r2, [r7, #4]
 8003302:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003304:	f7ff ff20 	bl	8003148 <__NVIC_GetPriorityGrouping>
 8003308:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	68b9      	ldr	r1, [r7, #8]
 800330e:	6978      	ldr	r0, [r7, #20]
 8003310:	f7ff ff92 	bl	8003238 <NVIC_EncodePriority>
 8003314:	4602      	mov	r2, r0
 8003316:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800331a:	4611      	mov	r1, r2
 800331c:	4618      	mov	r0, r3
 800331e:	f7ff ff61 	bl	80031e4 <__NVIC_SetPriority>
}
 8003322:	bf00      	nop
 8003324:	3718      	adds	r7, #24
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800332a:	b580      	push	{r7, lr}
 800332c:	b082      	sub	sp, #8
 800332e:	af00      	add	r7, sp, #0
 8003330:	4603      	mov	r3, r0
 8003332:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003334:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003338:	4618      	mov	r0, r3
 800333a:	f7ff ff13 	bl	8003164 <__NVIC_EnableIRQ>
}
 800333e:	bf00      	nop
 8003340:	3708      	adds	r7, #8
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}

08003346 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003346:	b580      	push	{r7, lr}
 8003348:	b082      	sub	sp, #8
 800334a:	af00      	add	r7, sp, #0
 800334c:	4603      	mov	r3, r0
 800334e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003354:	4618      	mov	r0, r3
 8003356:	f7ff ff21 	bl	800319c <__NVIC_DisableIRQ>
}
 800335a:	bf00      	nop
 800335c:	3708      	adds	r7, #8
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}

08003362 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003362:	b580      	push	{r7, lr}
 8003364:	b082      	sub	sp, #8
 8003366:	af00      	add	r7, sp, #0
 8003368:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f7ff ff96 	bl	800329c <SysTick_Config>
 8003370:	4603      	mov	r3, r0
}
 8003372:	4618      	mov	r0, r3
 8003374:	3708      	adds	r7, #8
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
	...

0800337c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d101      	bne.n	800338e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e08e      	b.n	80034ac <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	461a      	mov	r2, r3
 8003394:	4b47      	ldr	r3, [pc, #284]	; (80034b4 <HAL_DMA_Init+0x138>)
 8003396:	429a      	cmp	r2, r3
 8003398:	d80f      	bhi.n	80033ba <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	461a      	mov	r2, r3
 80033a0:	4b45      	ldr	r3, [pc, #276]	; (80034b8 <HAL_DMA_Init+0x13c>)
 80033a2:	4413      	add	r3, r2
 80033a4:	4a45      	ldr	r2, [pc, #276]	; (80034bc <HAL_DMA_Init+0x140>)
 80033a6:	fba2 2303 	umull	r2, r3, r2, r3
 80033aa:	091b      	lsrs	r3, r3, #4
 80033ac:	009a      	lsls	r2, r3, #2
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4a42      	ldr	r2, [pc, #264]	; (80034c0 <HAL_DMA_Init+0x144>)
 80033b6:	641a      	str	r2, [r3, #64]	; 0x40
 80033b8:	e00e      	b.n	80033d8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	461a      	mov	r2, r3
 80033c0:	4b40      	ldr	r3, [pc, #256]	; (80034c4 <HAL_DMA_Init+0x148>)
 80033c2:	4413      	add	r3, r2
 80033c4:	4a3d      	ldr	r2, [pc, #244]	; (80034bc <HAL_DMA_Init+0x140>)
 80033c6:	fba2 2303 	umull	r2, r3, r2, r3
 80033ca:	091b      	lsrs	r3, r3, #4
 80033cc:	009a      	lsls	r2, r3, #2
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a3c      	ldr	r2, [pc, #240]	; (80034c8 <HAL_DMA_Init+0x14c>)
 80033d6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2202      	movs	r2, #2
 80033dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	6812      	ldr	r2, [r2, #0]
 80033ea:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80033ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033f2:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	6819      	ldr	r1, [r3, #0]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	689a      	ldr	r2, [r3, #8]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	431a      	orrs	r2, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	691b      	ldr	r3, [r3, #16]
 8003408:	431a      	orrs	r2, r3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	695b      	ldr	r3, [r3, #20]
 800340e:	431a      	orrs	r2, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	699b      	ldr	r3, [r3, #24]
 8003414:	431a      	orrs	r2, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	69db      	ldr	r3, [r3, #28]
 800341a:	431a      	orrs	r2, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6a1b      	ldr	r3, [r3, #32]
 8003420:	431a      	orrs	r2, r3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	430a      	orrs	r2, r1
 8003428:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f000 fb24 	bl	8003a78 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003438:	d102      	bne.n	8003440 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	685a      	ldr	r2, [r3, #4]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003448:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800344c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003456:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d010      	beq.n	8003482 <HAL_DMA_Init+0x106>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	2b04      	cmp	r3, #4
 8003466:	d80c      	bhi.n	8003482 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f000 fb4d 	bl	8003b08 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003472:	2200      	movs	r2, #0
 8003474:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800347e:	605a      	str	r2, [r3, #4]
 8003480:	e008      	b.n	8003494 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2201      	movs	r2, #1
 800349e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80034aa:	2300      	movs	r3, #0
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3708      	adds	r7, #8
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	40020407 	.word	0x40020407
 80034b8:	bffdfff8 	.word	0xbffdfff8
 80034bc:	cccccccd 	.word	0xcccccccd
 80034c0:	40020000 	.word	0x40020000
 80034c4:	bffdfbf8 	.word	0xbffdfbf8
 80034c8:	40020400 	.word	0x40020400

080034cc <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b082      	sub	sp, #8
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d101      	bne.n	80034de <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e07b      	b.n	80035d6 <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f022 0201 	bic.w	r2, r2, #1
 80034ec:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	461a      	mov	r2, r3
 80034f4:	4b3a      	ldr	r3, [pc, #232]	; (80035e0 <HAL_DMA_DeInit+0x114>)
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d80f      	bhi.n	800351a <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	461a      	mov	r2, r3
 8003500:	4b38      	ldr	r3, [pc, #224]	; (80035e4 <HAL_DMA_DeInit+0x118>)
 8003502:	4413      	add	r3, r2
 8003504:	4a38      	ldr	r2, [pc, #224]	; (80035e8 <HAL_DMA_DeInit+0x11c>)
 8003506:	fba2 2303 	umull	r2, r3, r2, r3
 800350a:	091b      	lsrs	r3, r3, #4
 800350c:	009a      	lsls	r2, r3, #2
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a35      	ldr	r2, [pc, #212]	; (80035ec <HAL_DMA_DeInit+0x120>)
 8003516:	641a      	str	r2, [r3, #64]	; 0x40
 8003518:	e00e      	b.n	8003538 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	461a      	mov	r2, r3
 8003520:	4b33      	ldr	r3, [pc, #204]	; (80035f0 <HAL_DMA_DeInit+0x124>)
 8003522:	4413      	add	r3, r2
 8003524:	4a30      	ldr	r2, [pc, #192]	; (80035e8 <HAL_DMA_DeInit+0x11c>)
 8003526:	fba2 2303 	umull	r2, r3, r2, r3
 800352a:	091b      	lsrs	r3, r3, #4
 800352c:	009a      	lsls	r2, r3, #2
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a2f      	ldr	r2, [pc, #188]	; (80035f4 <HAL_DMA_DeInit+0x128>)
 8003536:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	2200      	movs	r2, #0
 800353e:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003544:	f003 021c 	and.w	r2, r3, #28
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354c:	2101      	movs	r1, #1
 800354e:	fa01 f202 	lsl.w	r2, r1, r2
 8003552:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f000 fa8f 	bl	8003a78 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800355e:	2200      	movs	r2, #0
 8003560:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800356a:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d00f      	beq.n	8003594 <HAL_DMA_DeInit+0xc8>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	2b04      	cmp	r3, #4
 800357a:	d80b      	bhi.n	8003594 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f000 fac3 	bl	8003b08 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003586:	2200      	movs	r2, #0
 8003588:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003592:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2200      	movs	r2, #0
 80035d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3708      	adds	r7, #8
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	40020407 	.word	0x40020407
 80035e4:	bffdfff8 	.word	0xbffdfff8
 80035e8:	cccccccd 	.word	0xcccccccd
 80035ec:	40020000 	.word	0x40020000
 80035f0:	bffdfbf8 	.word	0xbffdfbf8
 80035f4:	40020400 	.word	0x40020400

080035f8 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b086      	sub	sp, #24
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	607a      	str	r2, [r7, #4]
 8003604:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003606:	2300      	movs	r3, #0
 8003608:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003610:	2b01      	cmp	r3, #1
 8003612:	d101      	bne.n	8003618 <HAL_DMA_Start_IT+0x20>
 8003614:	2302      	movs	r3, #2
 8003616:	e069      	b.n	80036ec <HAL_DMA_Start_IT+0xf4>
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003626:	b2db      	uxtb	r3, r3
 8003628:	2b01      	cmp	r3, #1
 800362a:	d155      	bne.n	80036d8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2202      	movs	r2, #2
 8003630:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2200      	movs	r2, #0
 8003638:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f022 0201 	bic.w	r2, r2, #1
 8003648:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	68b9      	ldr	r1, [r7, #8]
 8003650:	68f8      	ldr	r0, [r7, #12]
 8003652:	f000 f9d3 	bl	80039fc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365a:	2b00      	cmp	r3, #0
 800365c:	d008      	beq.n	8003670 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f042 020e 	orr.w	r2, r2, #14
 800366c:	601a      	str	r2, [r3, #0]
 800366e:	e00f      	b.n	8003690 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f022 0204 	bic.w	r2, r2, #4
 800367e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f042 020a 	orr.w	r2, r2, #10
 800368e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d007      	beq.n	80036ae <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036ac:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d007      	beq.n	80036c6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036c4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f042 0201 	orr.w	r2, r2, #1
 80036d4:	601a      	str	r2, [r3, #0]
 80036d6:	e008      	b.n	80036ea <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2280      	movs	r2, #128	; 0x80
 80036dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80036ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3718      	adds	r7, #24
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}

080036f4 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d101      	bne.n	8003706 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e04f      	b.n	80037a6 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800370c:	b2db      	uxtb	r3, r3
 800370e:	2b02      	cmp	r3, #2
 8003710:	d008      	beq.n	8003724 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2204      	movs	r2, #4
 8003716:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e040      	b.n	80037a6 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f022 020e 	bic.w	r2, r2, #14
 8003732:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800373e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003742:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f022 0201 	bic.w	r2, r2, #1
 8003752:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003758:	f003 021c 	and.w	r2, r3, #28
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003760:	2101      	movs	r1, #1
 8003762:	fa01 f202 	lsl.w	r2, r1, r2
 8003766:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003770:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003776:	2b00      	cmp	r3, #0
 8003778:	d00c      	beq.n	8003794 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003784:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003788:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003792:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	370c      	adds	r7, #12
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bc80      	pop	{r7}
 80037ae:	4770      	bx	lr

080037b0 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037b8:	2300      	movs	r3, #0
 80037ba:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d005      	beq.n	80037d4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2204      	movs	r2, #4
 80037cc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	73fb      	strb	r3, [r7, #15]
 80037d2:	e047      	b.n	8003864 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f022 020e 	bic.w	r2, r2, #14
 80037e2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f022 0201 	bic.w	r2, r2, #1
 80037f2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003802:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003808:	f003 021c 	and.w	r2, r3, #28
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003810:	2101      	movs	r1, #1
 8003812:	fa01 f202 	lsl.w	r2, r1, r2
 8003816:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003820:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003826:	2b00      	cmp	r3, #0
 8003828:	d00c      	beq.n	8003844 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003834:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003838:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003842:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003858:	2b00      	cmp	r3, #0
 800385a:	d003      	beq.n	8003864 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	4798      	blx	r3
    }
  }
  return status;
 8003864:	7bfb      	ldrb	r3, [r7, #15]
}
 8003866:	4618      	mov	r0, r3
 8003868:	3710      	adds	r7, #16
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
	...

08003870 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800388c:	f003 031c 	and.w	r3, r3, #28
 8003890:	2204      	movs	r2, #4
 8003892:	409a      	lsls	r2, r3
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	4013      	ands	r3, r2
 8003898:	2b00      	cmp	r3, #0
 800389a:	d027      	beq.n	80038ec <HAL_DMA_IRQHandler+0x7c>
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	f003 0304 	and.w	r3, r3, #4
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d022      	beq.n	80038ec <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0320 	and.w	r3, r3, #32
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d107      	bne.n	80038c4 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f022 0204 	bic.w	r2, r2, #4
 80038c2:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c8:	f003 021c 	and.w	r2, r3, #28
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d0:	2104      	movs	r1, #4
 80038d2:	fa01 f202 	lsl.w	r2, r1, r2
 80038d6:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038dc:	2b00      	cmp	r3, #0
 80038de:	f000 8081 	beq.w	80039e4 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80038ea:	e07b      	b.n	80039e4 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f0:	f003 031c 	and.w	r3, r3, #28
 80038f4:	2202      	movs	r2, #2
 80038f6:	409a      	lsls	r2, r3
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	4013      	ands	r3, r2
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d03d      	beq.n	800397c <HAL_DMA_IRQHandler+0x10c>
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	f003 0302 	and.w	r3, r3, #2
 8003906:	2b00      	cmp	r3, #0
 8003908:	d038      	beq.n	800397c <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0320 	and.w	r3, r3, #32
 8003914:	2b00      	cmp	r3, #0
 8003916:	d10b      	bne.n	8003930 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f022 020a 	bic.w	r2, r2, #10
 8003926:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	461a      	mov	r2, r3
 8003936:	4b2e      	ldr	r3, [pc, #184]	; (80039f0 <HAL_DMA_IRQHandler+0x180>)
 8003938:	429a      	cmp	r2, r3
 800393a:	d909      	bls.n	8003950 <HAL_DMA_IRQHandler+0xe0>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003940:	f003 031c 	and.w	r3, r3, #28
 8003944:	4a2b      	ldr	r2, [pc, #172]	; (80039f4 <HAL_DMA_IRQHandler+0x184>)
 8003946:	2102      	movs	r1, #2
 8003948:	fa01 f303 	lsl.w	r3, r1, r3
 800394c:	6053      	str	r3, [r2, #4]
 800394e:	e008      	b.n	8003962 <HAL_DMA_IRQHandler+0xf2>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003954:	f003 031c 	and.w	r3, r3, #28
 8003958:	4a27      	ldr	r2, [pc, #156]	; (80039f8 <HAL_DMA_IRQHandler+0x188>)
 800395a:	2102      	movs	r1, #2
 800395c:	fa01 f303 	lsl.w	r3, r1, r3
 8003960:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800396e:	2b00      	cmp	r3, #0
 8003970:	d038      	beq.n	80039e4 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800397a:	e033      	b.n	80039e4 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003980:	f003 031c 	and.w	r3, r3, #28
 8003984:	2208      	movs	r2, #8
 8003986:	409a      	lsls	r2, r3
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	4013      	ands	r3, r2
 800398c:	2b00      	cmp	r3, #0
 800398e:	d02a      	beq.n	80039e6 <HAL_DMA_IRQHandler+0x176>
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	f003 0308 	and.w	r3, r3, #8
 8003996:	2b00      	cmp	r3, #0
 8003998:	d025      	beq.n	80039e6 <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f022 020e 	bic.w	r2, r2, #14
 80039a8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ae:	f003 021c 	and.w	r2, r3, #28
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b6:	2101      	movs	r1, #1
 80039b8:	fa01 f202 	lsl.w	r2, r1, r2
 80039bc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2201      	movs	r2, #1
 80039c2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d004      	beq.n	80039e6 <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80039e4:	bf00      	nop
 80039e6:	bf00      	nop
}
 80039e8:	3710      	adds	r7, #16
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	40020080 	.word	0x40020080
 80039f4:	40020400 	.word	0x40020400
 80039f8:	40020000 	.word	0x40020000

080039fc <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b085      	sub	sp, #20
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	60b9      	str	r1, [r7, #8]
 8003a06:	607a      	str	r2, [r7, #4]
 8003a08:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a0e:	68fa      	ldr	r2, [r7, #12]
 8003a10:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003a12:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d004      	beq.n	8003a26 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a20:	68fa      	ldr	r2, [r7, #12]
 8003a22:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003a24:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a2a:	f003 021c 	and.w	r2, r3, #28
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a32:	2101      	movs	r1, #1
 8003a34:	fa01 f202 	lsl.w	r2, r1, r2
 8003a38:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	683a      	ldr	r2, [r7, #0]
 8003a40:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	2b10      	cmp	r3, #16
 8003a48:	d108      	bne.n	8003a5c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	68ba      	ldr	r2, [r7, #8]
 8003a58:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003a5a:	e007      	b.n	8003a6c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	68ba      	ldr	r2, [r7, #8]
 8003a62:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	60da      	str	r2, [r3, #12]
}
 8003a6c:	bf00      	nop
 8003a6e:	3714      	adds	r7, #20
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bc80      	pop	{r7}
 8003a74:	4770      	bx	lr
	...

08003a78 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b085      	sub	sp, #20
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	461a      	mov	r2, r3
 8003a86:	4b1c      	ldr	r3, [pc, #112]	; (8003af8 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d813      	bhi.n	8003ab4 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a90:	089b      	lsrs	r3, r3, #2
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003a98:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	3b08      	subs	r3, #8
 8003aa8:	4a14      	ldr	r2, [pc, #80]	; (8003afc <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8003aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8003aae:	091b      	lsrs	r3, r3, #4
 8003ab0:	60fb      	str	r3, [r7, #12]
 8003ab2:	e011      	b.n	8003ad8 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ab8:	089b      	lsrs	r3, r3, #2
 8003aba:	009a      	lsls	r2, r3, #2
 8003abc:	4b10      	ldr	r3, [pc, #64]	; (8003b00 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8003abe:	4413      	add	r3, r2
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	3b08      	subs	r3, #8
 8003acc:	4a0b      	ldr	r2, [pc, #44]	; (8003afc <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8003ace:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad2:	091b      	lsrs	r3, r3, #4
 8003ad4:	3307      	adds	r3, #7
 8003ad6:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	4a0a      	ldr	r2, [pc, #40]	; (8003b04 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8003adc:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	f003 031f 	and.w	r3, r3, #31
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	409a      	lsls	r2, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003aec:	bf00      	nop
 8003aee:	3714      	adds	r7, #20
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bc80      	pop	{r7}
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop
 8003af8:	40020407 	.word	0x40020407
 8003afc:	cccccccd 	.word	0xcccccccd
 8003b00:	4002081c 	.word	0x4002081c
 8003b04:	40020880 	.word	0x40020880

08003b08 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b085      	sub	sp, #20
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b18:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003b1a:	68fa      	ldr	r2, [r7, #12]
 8003b1c:	4b0a      	ldr	r3, [pc, #40]	; (8003b48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003b1e:	4413      	add	r3, r2
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	461a      	mov	r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	4a08      	ldr	r2, [pc, #32]	; (8003b4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003b2c:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	3b01      	subs	r3, #1
 8003b32:	f003 0303 	and.w	r3, r3, #3
 8003b36:	2201      	movs	r2, #1
 8003b38:	409a      	lsls	r2, r3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003b3e:	bf00      	nop
 8003b40:	3714      	adds	r7, #20
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bc80      	pop	{r7}
 8003b46:	4770      	bx	lr
 8003b48:	1000823f 	.word	0x1000823f
 8003b4c:	40020940 	.word	0x40020940

08003b50 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b087      	sub	sp, #28
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b5e:	e140      	b.n	8003de2 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	2101      	movs	r1, #1
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	fa01 f303 	lsl.w	r3, r1, r3
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	f000 8132 	beq.w	8003ddc <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	f003 0303 	and.w	r3, r3, #3
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d005      	beq.n	8003b90 <HAL_GPIO_Init+0x40>
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f003 0303 	and.w	r3, r3, #3
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d130      	bne.n	8003bf2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	005b      	lsls	r3, r3, #1
 8003b9a:	2203      	movs	r2, #3
 8003b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba0:	43db      	mvns	r3, r3
 8003ba2:	693a      	ldr	r2, [r7, #16]
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	68da      	ldr	r2, [r3, #12]
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	005b      	lsls	r3, r3, #1
 8003bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb4:	693a      	ldr	r2, [r7, #16]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	693a      	ldr	r2, [r7, #16]
 8003bbe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	fa02 f303 	lsl.w	r3, r2, r3
 8003bce:	43db      	mvns	r3, r3
 8003bd0:	693a      	ldr	r2, [r7, #16]
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	091b      	lsrs	r3, r3, #4
 8003bdc:	f003 0201 	and.w	r2, r3, #1
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	fa02 f303 	lsl.w	r3, r2, r3
 8003be6:	693a      	ldr	r2, [r7, #16]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	693a      	ldr	r2, [r7, #16]
 8003bf0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	f003 0303 	and.w	r3, r3, #3
 8003bfa:	2b03      	cmp	r3, #3
 8003bfc:	d017      	beq.n	8003c2e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	005b      	lsls	r3, r3, #1
 8003c08:	2203      	movs	r2, #3
 8003c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0e:	43db      	mvns	r3, r3
 8003c10:	693a      	ldr	r2, [r7, #16]
 8003c12:	4013      	ands	r3, r2
 8003c14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	689a      	ldr	r2, [r3, #8]
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	005b      	lsls	r3, r3, #1
 8003c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c22:	693a      	ldr	r2, [r7, #16]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	693a      	ldr	r2, [r7, #16]
 8003c2c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	f003 0303 	and.w	r3, r3, #3
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d123      	bne.n	8003c82 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	08da      	lsrs	r2, r3, #3
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	3208      	adds	r2, #8
 8003c42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c46:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	f003 0307 	and.w	r3, r3, #7
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	220f      	movs	r2, #15
 8003c52:	fa02 f303 	lsl.w	r3, r2, r3
 8003c56:	43db      	mvns	r3, r3
 8003c58:	693a      	ldr	r2, [r7, #16]
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	691a      	ldr	r2, [r3, #16]
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	f003 0307 	and.w	r3, r3, #7
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6e:	693a      	ldr	r2, [r7, #16]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	08da      	lsrs	r2, r3, #3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	3208      	adds	r2, #8
 8003c7c:	6939      	ldr	r1, [r7, #16]
 8003c7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	005b      	lsls	r3, r3, #1
 8003c8c:	2203      	movs	r2, #3
 8003c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c92:	43db      	mvns	r3, r3
 8003c94:	693a      	ldr	r2, [r7, #16]
 8003c96:	4013      	ands	r3, r2
 8003c98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	f003 0203 	and.w	r2, r3, #3
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	005b      	lsls	r3, r3, #1
 8003ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8003caa:	693a      	ldr	r2, [r7, #16]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	693a      	ldr	r2, [r7, #16]
 8003cb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	f000 808c 	beq.w	8003ddc <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003cc4:	4a4e      	ldr	r2, [pc, #312]	; (8003e00 <HAL_GPIO_Init+0x2b0>)
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	089b      	lsrs	r3, r3, #2
 8003cca:	3302      	adds	r3, #2
 8003ccc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cd0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	f003 0303 	and.w	r3, r3, #3
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	2207      	movs	r2, #7
 8003cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce0:	43db      	mvns	r3, r3
 8003ce2:	693a      	ldr	r2, [r7, #16]
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003cee:	d00d      	beq.n	8003d0c <HAL_GPIO_Init+0x1bc>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	4a44      	ldr	r2, [pc, #272]	; (8003e04 <HAL_GPIO_Init+0x2b4>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d007      	beq.n	8003d08 <HAL_GPIO_Init+0x1b8>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	4a43      	ldr	r2, [pc, #268]	; (8003e08 <HAL_GPIO_Init+0x2b8>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d101      	bne.n	8003d04 <HAL_GPIO_Init+0x1b4>
 8003d00:	2302      	movs	r3, #2
 8003d02:	e004      	b.n	8003d0e <HAL_GPIO_Init+0x1be>
 8003d04:	2307      	movs	r3, #7
 8003d06:	e002      	b.n	8003d0e <HAL_GPIO_Init+0x1be>
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e000      	b.n	8003d0e <HAL_GPIO_Init+0x1be>
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	697a      	ldr	r2, [r7, #20]
 8003d10:	f002 0203 	and.w	r2, r2, #3
 8003d14:	0092      	lsls	r2, r2, #2
 8003d16:	4093      	lsls	r3, r2
 8003d18:	693a      	ldr	r2, [r7, #16]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003d1e:	4938      	ldr	r1, [pc, #224]	; (8003e00 <HAL_GPIO_Init+0x2b0>)
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	089b      	lsrs	r3, r3, #2
 8003d24:	3302      	adds	r3, #2
 8003d26:	693a      	ldr	r2, [r7, #16]
 8003d28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8003d2c:	4b37      	ldr	r3, [pc, #220]	; (8003e0c <HAL_GPIO_Init+0x2bc>)
 8003d2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d32:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	43db      	mvns	r3, r3
 8003d38:	693a      	ldr	r2, [r7, #16]
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d003      	beq.n	8003d52 <HAL_GPIO_Init+0x202>
        {
          temp |= iocurrent;
 8003d4a:	693a      	ldr	r2, [r7, #16]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8003d52:	4a2e      	ldr	r2, [pc, #184]	; (8003e0c <HAL_GPIO_Init+0x2bc>)
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8003d5a:	4b2c      	ldr	r3, [pc, #176]	; (8003e0c <HAL_GPIO_Init+0x2bc>)
 8003d5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d60:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	43db      	mvns	r3, r3
 8003d66:	693a      	ldr	r2, [r7, #16]
 8003d68:	4013      	ands	r3, r2
 8003d6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d003      	beq.n	8003d80 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003d78:	693a      	ldr	r2, [r7, #16]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8003d80:	4a22      	ldr	r2, [pc, #136]	; (8003e0c <HAL_GPIO_Init+0x2bc>)
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003d88:	4b20      	ldr	r3, [pc, #128]	; (8003e0c <HAL_GPIO_Init+0x2bc>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	43db      	mvns	r3, r3
 8003d92:	693a      	ldr	r2, [r7, #16]
 8003d94:	4013      	ands	r3, r2
 8003d96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d003      	beq.n	8003dac <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8003da4:	693a      	ldr	r2, [r7, #16]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003dac:	4a17      	ldr	r2, [pc, #92]	; (8003e0c <HAL_GPIO_Init+0x2bc>)
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003db2:	4b16      	ldr	r3, [pc, #88]	; (8003e0c <HAL_GPIO_Init+0x2bc>)
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	43db      	mvns	r3, r3
 8003dbc:	693a      	ldr	r2, [r7, #16]
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d003      	beq.n	8003dd6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003dce:	693a      	ldr	r2, [r7, #16]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003dd6:	4a0d      	ldr	r2, [pc, #52]	; (8003e0c <HAL_GPIO_Init+0x2bc>)
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	3301      	adds	r3, #1
 8003de0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	fa22 f303 	lsr.w	r3, r2, r3
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	f47f aeb7 	bne.w	8003b60 <HAL_GPIO_Init+0x10>
  }
}
 8003df2:	bf00      	nop
 8003df4:	bf00      	nop
 8003df6:	371c      	adds	r7, #28
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bc80      	pop	{r7}
 8003dfc:	4770      	bx	lr
 8003dfe:	bf00      	nop
 8003e00:	40010000 	.word	0x40010000
 8003e04:	48000400 	.word	0x48000400
 8003e08:	48000800 	.word	0x48000800
 8003e0c:	58000800 	.word	0x58000800

08003e10 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b087      	sub	sp, #28
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003e1e:	e0af      	b.n	8003f80 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003e20:	2201      	movs	r2, #1
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	fa02 f303 	lsl.w	r3, r2, r3
 8003e28:	683a      	ldr	r2, [r7, #0]
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	f000 80a2 	beq.w	8003f7a <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8003e36:	4a59      	ldr	r2, [pc, #356]	; (8003f9c <HAL_GPIO_DeInit+0x18c>)
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	089b      	lsrs	r3, r3, #2
 8003e3c:	3302      	adds	r3, #2
 8003e3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e42:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	f003 0303 	and.w	r3, r3, #3
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	2207      	movs	r2, #7
 8003e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e52:	68fa      	ldr	r2, [r7, #12]
 8003e54:	4013      	ands	r3, r2
 8003e56:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003e5e:	d00d      	beq.n	8003e7c <HAL_GPIO_DeInit+0x6c>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	4a4f      	ldr	r2, [pc, #316]	; (8003fa0 <HAL_GPIO_DeInit+0x190>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d007      	beq.n	8003e78 <HAL_GPIO_DeInit+0x68>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	4a4e      	ldr	r2, [pc, #312]	; (8003fa4 <HAL_GPIO_DeInit+0x194>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d101      	bne.n	8003e74 <HAL_GPIO_DeInit+0x64>
 8003e70:	2302      	movs	r3, #2
 8003e72:	e004      	b.n	8003e7e <HAL_GPIO_DeInit+0x6e>
 8003e74:	2307      	movs	r3, #7
 8003e76:	e002      	b.n	8003e7e <HAL_GPIO_DeInit+0x6e>
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e000      	b.n	8003e7e <HAL_GPIO_DeInit+0x6e>
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	697a      	ldr	r2, [r7, #20]
 8003e80:	f002 0203 	and.w	r2, r2, #3
 8003e84:	0092      	lsls	r2, r2, #2
 8003e86:	4093      	lsls	r3, r2
 8003e88:	68fa      	ldr	r2, [r7, #12]
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d136      	bne.n	8003efc <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 8003e8e:	4b46      	ldr	r3, [pc, #280]	; (8003fa8 <HAL_GPIO_DeInit+0x198>)
 8003e90:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	43db      	mvns	r3, r3
 8003e98:	4943      	ldr	r1, [pc, #268]	; (8003fa8 <HAL_GPIO_DeInit+0x198>)
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8003ea0:	4b41      	ldr	r3, [pc, #260]	; (8003fa8 <HAL_GPIO_DeInit+0x198>)
 8003ea2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	43db      	mvns	r3, r3
 8003eaa:	493f      	ldr	r1, [pc, #252]	; (8003fa8 <HAL_GPIO_DeInit+0x198>)
 8003eac:	4013      	ands	r3, r2
 8003eae:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8003eb2:	4b3d      	ldr	r3, [pc, #244]	; (8003fa8 <HAL_GPIO_DeInit+0x198>)
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	43db      	mvns	r3, r3
 8003eba:	493b      	ldr	r1, [pc, #236]	; (8003fa8 <HAL_GPIO_DeInit+0x198>)
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8003ec0:	4b39      	ldr	r3, [pc, #228]	; (8003fa8 <HAL_GPIO_DeInit+0x198>)
 8003ec2:	685a      	ldr	r2, [r3, #4]
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	43db      	mvns	r3, r3
 8003ec8:	4937      	ldr	r1, [pc, #220]	; (8003fa8 <HAL_GPIO_DeInit+0x198>)
 8003eca:	4013      	ands	r3, r2
 8003ecc:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	f003 0303 	and.w	r3, r3, #3
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	2207      	movs	r2, #7
 8003ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8003edc:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003ede:	4a2f      	ldr	r2, [pc, #188]	; (8003f9c <HAL_GPIO_DeInit+0x18c>)
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	089b      	lsrs	r3, r3, #2
 8003ee4:	3302      	adds	r3, #2
 8003ee6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	43da      	mvns	r2, r3
 8003eee:	482b      	ldr	r0, [pc, #172]	; (8003f9c <HAL_GPIO_DeInit+0x18c>)
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	089b      	lsrs	r3, r3, #2
 8003ef4:	400a      	ands	r2, r1
 8003ef6:	3302      	adds	r3, #2
 8003ef8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	005b      	lsls	r3, r3, #1
 8003f04:	2103      	movs	r1, #3
 8003f06:	fa01 f303 	lsl.w	r3, r1, r3
 8003f0a:	431a      	orrs	r2, r3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	08da      	lsrs	r2, r3, #3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	3208      	adds	r2, #8
 8003f18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	f003 0307 	and.w	r3, r3, #7
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	220f      	movs	r2, #15
 8003f26:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2a:	43db      	mvns	r3, r3
 8003f2c:	697a      	ldr	r2, [r7, #20]
 8003f2e:	08d2      	lsrs	r2, r2, #3
 8003f30:	4019      	ands	r1, r3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	3208      	adds	r2, #8
 8003f36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	689a      	ldr	r2, [r3, #8]
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	005b      	lsls	r3, r3, #1
 8003f42:	2103      	movs	r1, #3
 8003f44:	fa01 f303 	lsl.w	r3, r1, r3
 8003f48:	43db      	mvns	r3, r3
 8003f4a:	401a      	ands	r2, r3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	685a      	ldr	r2, [r3, #4]
 8003f54:	2101      	movs	r1, #1
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	fa01 f303 	lsl.w	r3, r1, r3
 8003f5c:	43db      	mvns	r3, r3
 8003f5e:	401a      	ands	r2, r3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	68da      	ldr	r2, [r3, #12]
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	005b      	lsls	r3, r3, #1
 8003f6c:	2103      	movs	r1, #3
 8003f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f72:	43db      	mvns	r3, r3
 8003f74:	401a      	ands	r2, r3
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	60da      	str	r2, [r3, #12]
    }

    position++;
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	3301      	adds	r3, #1
 8003f7e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003f80:	683a      	ldr	r2, [r7, #0]
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	fa22 f303 	lsr.w	r3, r2, r3
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	f47f af49 	bne.w	8003e20 <HAL_GPIO_DeInit+0x10>
  }
}
 8003f8e:	bf00      	nop
 8003f90:	bf00      	nop
 8003f92:	371c      	adds	r7, #28
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bc80      	pop	{r7}
 8003f98:	4770      	bx	lr
 8003f9a:	bf00      	nop
 8003f9c:	40010000 	.word	0x40010000
 8003fa0:	48000400 	.word	0x48000400
 8003fa4:	48000800 	.word	0x48000800
 8003fa8:	58000800 	.word	0x58000800

08003fac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	460b      	mov	r3, r1
 8003fb6:	807b      	strh	r3, [r7, #2]
 8003fb8:	4613      	mov	r3, r2
 8003fba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003fbc:	787b      	ldrb	r3, [r7, #1]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d003      	beq.n	8003fca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003fc2:	887a      	ldrh	r2, [r7, #2]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003fc8:	e002      	b.n	8003fd0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003fca:	887a      	ldrh	r2, [r7, #2]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003fd0:	bf00      	nop
 8003fd2:	370c      	adds	r7, #12
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bc80      	pop	{r7}
 8003fd8:	4770      	bx	lr
	...

08003fdc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b082      	sub	sp, #8
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003fe6:	4b08      	ldr	r3, [pc, #32]	; (8004008 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003fe8:	68da      	ldr	r2, [r3, #12]
 8003fea:	88fb      	ldrh	r3, [r7, #6]
 8003fec:	4013      	ands	r3, r2
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d006      	beq.n	8004000 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003ff2:	4a05      	ldr	r2, [pc, #20]	; (8004008 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ff4:	88fb      	ldrh	r3, [r7, #6]
 8003ff6:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003ff8:	88fb      	ldrh	r3, [r7, #6]
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f000 f806 	bl	800400c <HAL_GPIO_EXTI_Callback>
  }
}
 8004000:	bf00      	nop
 8004002:	3708      	adds	r7, #8
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}
 8004008:	58000800 	.word	0x58000800

0800400c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800400c:	b480      	push	{r7}
 800400e:	b083      	sub	sp, #12
 8004010:	af00      	add	r7, sp, #0
 8004012:	4603      	mov	r3, r0
 8004014:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004016:	bf00      	nop
 8004018:	370c      	adds	r7, #12
 800401a:	46bd      	mov	sp, r7
 800401c:	bc80      	pop	{r7}
 800401e:	4770      	bx	lr

08004020 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004020:	b480      	push	{r7}
 8004022:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004024:	4b04      	ldr	r3, [pc, #16]	; (8004038 <HAL_PWR_EnableBkUpAccess+0x18>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a03      	ldr	r2, [pc, #12]	; (8004038 <HAL_PWR_EnableBkUpAccess+0x18>)
 800402a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800402e:	6013      	str	r3, [r2, #0]
}
 8004030:	bf00      	nop
 8004032:	46bd      	mov	sp, r7
 8004034:	bc80      	pop	{r7}
 8004036:	4770      	bx	lr
 8004038:	58000400 	.word	0x58000400

0800403c <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b082      	sub	sp, #8
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	460b      	mov	r3, r1
 8004046:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d10c      	bne.n	8004068 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 800404e:	4b13      	ldr	r3, [pc, #76]	; (800409c <HAL_PWR_EnterSLEEPMode+0x60>)
 8004050:	695b      	ldr	r3, [r3, #20]
 8004052:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004056:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800405a:	d10d      	bne.n	8004078 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 800405c:	f000 f83c 	bl	80040d8 <HAL_PWREx_DisableLowPowerRunMode>
 8004060:	4603      	mov	r3, r0
 8004062:	2b00      	cmp	r3, #0
 8004064:	d008      	beq.n	8004078 <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 8004066:	e015      	b.n	8004094 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8004068:	4b0c      	ldr	r3, [pc, #48]	; (800409c <HAL_PWR_EnterSLEEPMode+0x60>)
 800406a:	695b      	ldr	r3, [r3, #20]
 800406c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004070:	2b00      	cmp	r3, #0
 8004072:	d101      	bne.n	8004078 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8004074:	f000 f822 	bl	80040bc <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004078:	4b09      	ldr	r3, [pc, #36]	; (80040a0 <HAL_PWR_EnterSLEEPMode+0x64>)
 800407a:	691b      	ldr	r3, [r3, #16]
 800407c:	4a08      	ldr	r2, [pc, #32]	; (80040a0 <HAL_PWR_EnterSLEEPMode+0x64>)
 800407e:	f023 0304 	bic.w	r3, r3, #4
 8004082:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8004084:	78fb      	ldrb	r3, [r7, #3]
 8004086:	2b01      	cmp	r3, #1
 8004088:	d101      	bne.n	800408e <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800408a:	bf30      	wfi
 800408c:	e002      	b.n	8004094 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800408e:	bf40      	sev
    __WFE();
 8004090:	bf20      	wfe
    __WFE();
 8004092:	bf20      	wfe
  }
}
 8004094:	3708      	adds	r7, #8
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop
 800409c:	58000400 	.word	0x58000400
 80040a0:	e000ed00 	.word	0xe000ed00

080040a4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80040a4:	b480      	push	{r7}
 80040a6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80040a8:	4b03      	ldr	r3, [pc, #12]	; (80040b8 <HAL_PWREx_GetVoltageRange+0x14>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bc80      	pop	{r7}
 80040b6:	4770      	bx	lr
 80040b8:	58000400 	.word	0x58000400

080040bc <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 80040bc:	b480      	push	{r7}
 80040be:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 80040c0:	4b04      	ldr	r3, [pc, #16]	; (80040d4 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a03      	ldr	r2, [pc, #12]	; (80040d4 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 80040c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80040ca:	6013      	str	r3, [r2, #0]
}
 80040cc:	bf00      	nop
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bc80      	pop	{r7}
 80040d2:	4770      	bx	lr
 80040d4:	58000400 	.word	0x58000400

080040d8 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 80040de:	4b16      	ldr	r3, [pc, #88]	; (8004138 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a15      	ldr	r2, [pc, #84]	; (8004138 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80040e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80040e8:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 80040ea:	4b14      	ldr	r3, [pc, #80]	; (800413c <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	2232      	movs	r2, #50	; 0x32
 80040f0:	fb02 f303 	mul.w	r3, r2, r3
 80040f4:	4a12      	ldr	r2, [pc, #72]	; (8004140 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 80040f6:	fba2 2303 	umull	r2, r3, r2, r3
 80040fa:	0c9b      	lsrs	r3, r3, #18
 80040fc:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80040fe:	e002      	b.n	8004106 <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	3b01      	subs	r3, #1
 8004104:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8004106:	4b0c      	ldr	r3, [pc, #48]	; (8004138 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8004108:	695b      	ldr	r3, [r3, #20]
 800410a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800410e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004112:	d102      	bne.n	800411a <HAL_PWREx_DisableLowPowerRunMode+0x42>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d1f2      	bne.n	8004100 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 800411a:	4b07      	ldr	r3, [pc, #28]	; (8004138 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 800411c:	695b      	ldr	r3, [r3, #20]
 800411e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004122:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004126:	d101      	bne.n	800412c <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 8004128:	2303      	movs	r3, #3
 800412a:	e000      	b.n	800412e <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 800412c:	2300      	movs	r3, #0
}
 800412e:	4618      	mov	r0, r3
 8004130:	370c      	adds	r7, #12
 8004132:	46bd      	mov	sp, r7
 8004134:	bc80      	pop	{r7}
 8004136:	4770      	bx	lr
 8004138:	58000400 	.word	0x58000400
 800413c:	20000000 	.word	0x20000000
 8004140:	431bde83 	.word	0x431bde83

08004144 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	4603      	mov	r3, r0
 800414c:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 800414e:	4b10      	ldr	r3, [pc, #64]	; (8004190 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f023 0307 	bic.w	r3, r3, #7
 8004156:	4a0e      	ldr	r2, [pc, #56]	; (8004190 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8004158:	f043 0302 	orr.w	r3, r3, #2
 800415c:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800415e:	4b0d      	ldr	r3, [pc, #52]	; (8004194 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8004160:	691b      	ldr	r3, [r3, #16]
 8004162:	4a0c      	ldr	r2, [pc, #48]	; (8004194 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8004164:	f043 0304 	orr.w	r3, r3, #4
 8004168:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 800416a:	79fb      	ldrb	r3, [r7, #7]
 800416c:	2b01      	cmp	r3, #1
 800416e:	d101      	bne.n	8004174 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8004170:	bf30      	wfi
 8004172:	e002      	b.n	800417a <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004174:	bf40      	sev
    __WFE();
 8004176:	bf20      	wfe
    __WFE();
 8004178:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800417a:	4b06      	ldr	r3, [pc, #24]	; (8004194 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 800417c:	691b      	ldr	r3, [r3, #16]
 800417e:	4a05      	ldr	r2, [pc, #20]	; (8004194 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8004180:	f023 0304 	bic.w	r3, r3, #4
 8004184:	6113      	str	r3, [r2, #16]
}
 8004186:	bf00      	nop
 8004188:	370c      	adds	r7, #12
 800418a:	46bd      	mov	sp, r7
 800418c:	bc80      	pop	{r7}
 800418e:	4770      	bx	lr
 8004190:	58000400 	.word	0x58000400
 8004194:	e000ed00 	.word	0xe000ed00

08004198 <LL_PWR_IsEnabledBkUpAccess>:
{
 8004198:	b480      	push	{r7}
 800419a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 800419c:	4b06      	ldr	r3, [pc, #24]	; (80041b8 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041a8:	d101      	bne.n	80041ae <LL_PWR_IsEnabledBkUpAccess+0x16>
 80041aa:	2301      	movs	r3, #1
 80041ac:	e000      	b.n	80041b0 <LL_PWR_IsEnabledBkUpAccess+0x18>
 80041ae:	2300      	movs	r3, #0
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bc80      	pop	{r7}
 80041b6:	4770      	bx	lr
 80041b8:	58000400 	.word	0x58000400

080041bc <LL_RCC_HSE_EnableTcxo>:
{
 80041bc:	b480      	push	{r7}
 80041be:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80041c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80041ce:	6013      	str	r3, [r2, #0]
}
 80041d0:	bf00      	nop
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bc80      	pop	{r7}
 80041d6:	4770      	bx	lr

080041d8 <LL_RCC_HSE_DisableTcxo>:
{
 80041d8:	b480      	push	{r7}
 80041da:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80041dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80041ea:	6013      	str	r3, [r2, #0]
}
 80041ec:	bf00      	nop
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bc80      	pop	{r7}
 80041f2:	4770      	bx	lr

080041f4 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80041f4:	b480      	push	{r7}
 80041f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80041f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004202:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004206:	d101      	bne.n	800420c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8004208:	2301      	movs	r3, #1
 800420a:	e000      	b.n	800420e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800420c:	2300      	movs	r3, #0
}
 800420e:	4618      	mov	r0, r3
 8004210:	46bd      	mov	sp, r7
 8004212:	bc80      	pop	{r7}
 8004214:	4770      	bx	lr

08004216 <LL_RCC_HSE_Enable>:
{
 8004216:	b480      	push	{r7}
 8004218:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800421a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004224:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004228:	6013      	str	r3, [r2, #0]
}
 800422a:	bf00      	nop
 800422c:	46bd      	mov	sp, r7
 800422e:	bc80      	pop	{r7}
 8004230:	4770      	bx	lr

08004232 <LL_RCC_HSE_Disable>:
{
 8004232:	b480      	push	{r7}
 8004234:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8004236:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004240:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004244:	6013      	str	r3, [r2, #0]
}
 8004246:	bf00      	nop
 8004248:	46bd      	mov	sp, r7
 800424a:	bc80      	pop	{r7}
 800424c:	4770      	bx	lr

0800424e <LL_RCC_HSE_IsReady>:
{
 800424e:	b480      	push	{r7}
 8004250:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004252:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800425c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004260:	d101      	bne.n	8004266 <LL_RCC_HSE_IsReady+0x18>
 8004262:	2301      	movs	r3, #1
 8004264:	e000      	b.n	8004268 <LL_RCC_HSE_IsReady+0x1a>
 8004266:	2300      	movs	r3, #0
}
 8004268:	4618      	mov	r0, r3
 800426a:	46bd      	mov	sp, r7
 800426c:	bc80      	pop	{r7}
 800426e:	4770      	bx	lr

08004270 <LL_RCC_HSI_Enable>:
{
 8004270:	b480      	push	{r7}
 8004272:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004274:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800427e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004282:	6013      	str	r3, [r2, #0]
}
 8004284:	bf00      	nop
 8004286:	46bd      	mov	sp, r7
 8004288:	bc80      	pop	{r7}
 800428a:	4770      	bx	lr

0800428c <LL_RCC_HSI_Disable>:
{
 800428c:	b480      	push	{r7}
 800428e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004290:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800429a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800429e:	6013      	str	r3, [r2, #0]
}
 80042a0:	bf00      	nop
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bc80      	pop	{r7}
 80042a6:	4770      	bx	lr

080042a8 <LL_RCC_HSI_IsReady>:
{
 80042a8:	b480      	push	{r7}
 80042aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80042ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042ba:	d101      	bne.n	80042c0 <LL_RCC_HSI_IsReady+0x18>
 80042bc:	2301      	movs	r3, #1
 80042be:	e000      	b.n	80042c2 <LL_RCC_HSI_IsReady+0x1a>
 80042c0:	2300      	movs	r3, #0
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bc80      	pop	{r7}
 80042c8:	4770      	bx	lr

080042ca <LL_RCC_HSI_SetCalibTrimming>:
{
 80042ca:	b480      	push	{r7}
 80042cc:	b083      	sub	sp, #12
 80042ce:	af00      	add	r7, sp, #0
 80042d0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80042d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	061b      	lsls	r3, r3, #24
 80042e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042e4:	4313      	orrs	r3, r2
 80042e6:	604b      	str	r3, [r1, #4]
}
 80042e8:	bf00      	nop
 80042ea:	370c      	adds	r7, #12
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bc80      	pop	{r7}
 80042f0:	4770      	bx	lr

080042f2 <LL_RCC_LSE_IsReady>:
{
 80042f2:	b480      	push	{r7}
 80042f4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80042f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042fe:	f003 0302 	and.w	r3, r3, #2
 8004302:	2b02      	cmp	r3, #2
 8004304:	d101      	bne.n	800430a <LL_RCC_LSE_IsReady+0x18>
 8004306:	2301      	movs	r3, #1
 8004308:	e000      	b.n	800430c <LL_RCC_LSE_IsReady+0x1a>
 800430a:	2300      	movs	r3, #0
}
 800430c:	4618      	mov	r0, r3
 800430e:	46bd      	mov	sp, r7
 8004310:	bc80      	pop	{r7}
 8004312:	4770      	bx	lr

08004314 <LL_RCC_LSI_Enable>:
{
 8004314:	b480      	push	{r7}
 8004316:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8004318:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800431c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004320:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004324:	f043 0301 	orr.w	r3, r3, #1
 8004328:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800432c:	bf00      	nop
 800432e:	46bd      	mov	sp, r7
 8004330:	bc80      	pop	{r7}
 8004332:	4770      	bx	lr

08004334 <LL_RCC_LSI_Disable>:
{
 8004334:	b480      	push	{r7}
 8004336:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8004338:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800433c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004340:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004344:	f023 0301 	bic.w	r3, r3, #1
 8004348:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800434c:	bf00      	nop
 800434e:	46bd      	mov	sp, r7
 8004350:	bc80      	pop	{r7}
 8004352:	4770      	bx	lr

08004354 <LL_RCC_LSI_IsReady>:
{
 8004354:	b480      	push	{r7}
 8004356:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8004358:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800435c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004360:	f003 0302 	and.w	r3, r3, #2
 8004364:	2b02      	cmp	r3, #2
 8004366:	d101      	bne.n	800436c <LL_RCC_LSI_IsReady+0x18>
 8004368:	2301      	movs	r3, #1
 800436a:	e000      	b.n	800436e <LL_RCC_LSI_IsReady+0x1a>
 800436c:	2300      	movs	r3, #0
}
 800436e:	4618      	mov	r0, r3
 8004370:	46bd      	mov	sp, r7
 8004372:	bc80      	pop	{r7}
 8004374:	4770      	bx	lr

08004376 <LL_RCC_MSI_Enable>:
{
 8004376:	b480      	push	{r7}
 8004378:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800437a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004384:	f043 0301 	orr.w	r3, r3, #1
 8004388:	6013      	str	r3, [r2, #0]
}
 800438a:	bf00      	nop
 800438c:	46bd      	mov	sp, r7
 800438e:	bc80      	pop	{r7}
 8004390:	4770      	bx	lr

08004392 <LL_RCC_MSI_Disable>:
{
 8004392:	b480      	push	{r7}
 8004394:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8004396:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043a0:	f023 0301 	bic.w	r3, r3, #1
 80043a4:	6013      	str	r3, [r2, #0]
}
 80043a6:	bf00      	nop
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bc80      	pop	{r7}
 80043ac:	4770      	bx	lr

080043ae <LL_RCC_MSI_IsReady>:
{
 80043ae:	b480      	push	{r7}
 80043b0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80043b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0302 	and.w	r3, r3, #2
 80043bc:	2b02      	cmp	r3, #2
 80043be:	d101      	bne.n	80043c4 <LL_RCC_MSI_IsReady+0x16>
 80043c0:	2301      	movs	r3, #1
 80043c2:	e000      	b.n	80043c6 <LL_RCC_MSI_IsReady+0x18>
 80043c4:	2300      	movs	r3, #0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bc80      	pop	{r7}
 80043cc:	4770      	bx	lr

080043ce <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 80043ce:	b480      	push	{r7}
 80043d0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80043d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0308 	and.w	r3, r3, #8
 80043dc:	2b08      	cmp	r3, #8
 80043de:	d101      	bne.n	80043e4 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80043e0:	2301      	movs	r3, #1
 80043e2:	e000      	b.n	80043e6 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 80043e4:	2300      	movs	r3, #0
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bc80      	pop	{r7}
 80043ec:	4770      	bx	lr

080043ee <LL_RCC_MSI_GetRange>:
{
 80043ee:	b480      	push	{r7}
 80043f0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80043f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	46bd      	mov	sp, r7
 8004400:	bc80      	pop	{r7}
 8004402:	4770      	bx	lr

08004404 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8004404:	b480      	push	{r7}
 8004406:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8004408:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800440c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004410:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8004414:	4618      	mov	r0, r3
 8004416:	46bd      	mov	sp, r7
 8004418:	bc80      	pop	{r7}
 800441a:	4770      	bx	lr

0800441c <LL_RCC_MSI_SetCalibTrimming>:
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004424:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	021b      	lsls	r3, r3, #8
 8004432:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004436:	4313      	orrs	r3, r2
 8004438:	604b      	str	r3, [r1, #4]
}
 800443a:	bf00      	nop
 800443c:	370c      	adds	r7, #12
 800443e:	46bd      	mov	sp, r7
 8004440:	bc80      	pop	{r7}
 8004442:	4770      	bx	lr

08004444 <LL_RCC_SetSysClkSource>:
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800444c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	f023 0203 	bic.w	r2, r3, #3
 8004456:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4313      	orrs	r3, r2
 800445e:	608b      	str	r3, [r1, #8]
}
 8004460:	bf00      	nop
 8004462:	370c      	adds	r7, #12
 8004464:	46bd      	mov	sp, r7
 8004466:	bc80      	pop	{r7}
 8004468:	4770      	bx	lr

0800446a <LL_RCC_GetSysClkSource>:
{
 800446a:	b480      	push	{r7}
 800446c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800446e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	f003 030c 	and.w	r3, r3, #12
}
 8004478:	4618      	mov	r0, r3
 800447a:	46bd      	mov	sp, r7
 800447c:	bc80      	pop	{r7}
 800447e:	4770      	bx	lr

08004480 <LL_RCC_SetAHBPrescaler>:
{
 8004480:	b480      	push	{r7}
 8004482:	b083      	sub	sp, #12
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004488:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004492:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4313      	orrs	r3, r2
 800449a:	608b      	str	r3, [r1, #8]
}
 800449c:	bf00      	nop
 800449e:	370c      	adds	r7, #12
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bc80      	pop	{r7}
 80044a4:	4770      	bx	lr

080044a6 <LL_RCC_SetAHB3Prescaler>:
{
 80044a6:	b480      	push	{r7}
 80044a8:	b083      	sub	sp, #12
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80044ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044b2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80044b6:	f023 020f 	bic.w	r2, r3, #15
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	091b      	lsrs	r3, r3, #4
 80044be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80044c2:	4313      	orrs	r3, r2
 80044c4:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80044c8:	bf00      	nop
 80044ca:	370c      	adds	r7, #12
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bc80      	pop	{r7}
 80044d0:	4770      	bx	lr

080044d2 <LL_RCC_SetAPB1Prescaler>:
{
 80044d2:	b480      	push	{r7}
 80044d4:	b083      	sub	sp, #12
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80044da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80044e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	608b      	str	r3, [r1, #8]
}
 80044ee:	bf00      	nop
 80044f0:	370c      	adds	r7, #12
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bc80      	pop	{r7}
 80044f6:	4770      	bx	lr

080044f8 <LL_RCC_SetAPB2Prescaler>:
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004500:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800450a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4313      	orrs	r3, r2
 8004512:	608b      	str	r3, [r1, #8]
}
 8004514:	bf00      	nop
 8004516:	370c      	adds	r7, #12
 8004518:	46bd      	mov	sp, r7
 800451a:	bc80      	pop	{r7}
 800451c:	4770      	bx	lr

0800451e <LL_RCC_GetAHBPrescaler>:
{
 800451e:	b480      	push	{r7}
 8004520:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004522:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800452c:	4618      	mov	r0, r3
 800452e:	46bd      	mov	sp, r7
 8004530:	bc80      	pop	{r7}
 8004532:	4770      	bx	lr

08004534 <LL_RCC_GetAHB3Prescaler>:
{
 8004534:	b480      	push	{r7}
 8004536:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004538:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800453c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004540:	011b      	lsls	r3, r3, #4
 8004542:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004546:	4618      	mov	r0, r3
 8004548:	46bd      	mov	sp, r7
 800454a:	bc80      	pop	{r7}
 800454c:	4770      	bx	lr

0800454e <LL_RCC_GetAPB1Prescaler>:
{
 800454e:	b480      	push	{r7}
 8004550:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004552:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800455c:	4618      	mov	r0, r3
 800455e:	46bd      	mov	sp, r7
 8004560:	bc80      	pop	{r7}
 8004562:	4770      	bx	lr

08004564 <LL_RCC_GetAPB2Prescaler>:
{
 8004564:	b480      	push	{r7}
 8004566:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004568:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8004572:	4618      	mov	r0, r3
 8004574:	46bd      	mov	sp, r7
 8004576:	bc80      	pop	{r7}
 8004578:	4770      	bx	lr

0800457a <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800457a:	b480      	push	{r7}
 800457c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800457e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004588:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800458c:	6013      	str	r3, [r2, #0]
}
 800458e:	bf00      	nop
 8004590:	46bd      	mov	sp, r7
 8004592:	bc80      	pop	{r7}
 8004594:	4770      	bx	lr

08004596 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8004596:	b480      	push	{r7}
 8004598:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800459a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045a8:	6013      	str	r3, [r2, #0]
}
 80045aa:	bf00      	nop
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bc80      	pop	{r7}
 80045b0:	4770      	bx	lr

080045b2 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80045b2:	b480      	push	{r7}
 80045b4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80045b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80045c4:	d101      	bne.n	80045ca <LL_RCC_PLL_IsReady+0x18>
 80045c6:	2301      	movs	r3, #1
 80045c8:	e000      	b.n	80045cc <LL_RCC_PLL_IsReady+0x1a>
 80045ca:	2300      	movs	r3, #0
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bc80      	pop	{r7}
 80045d2:	4770      	bx	lr

080045d4 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80045d4:	b480      	push	{r7}
 80045d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80045d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045dc:	68db      	ldr	r3, [r3, #12]
 80045de:	0a1b      	lsrs	r3, r3, #8
 80045e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bc80      	pop	{r7}
 80045ea:	4770      	bx	lr

080045ec <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80045ec:	b480      	push	{r7}
 80045ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80045f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bc80      	pop	{r7}
 8004600:	4770      	bx	lr

08004602 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8004602:	b480      	push	{r7}
 8004604:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004606:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8004610:	4618      	mov	r0, r3
 8004612:	46bd      	mov	sp, r7
 8004614:	bc80      	pop	{r7}
 8004616:	4770      	bx	lr

08004618 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004618:	b480      	push	{r7}
 800461a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800461c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004620:	68db      	ldr	r3, [r3, #12]
 8004622:	f003 0303 	and.w	r3, r3, #3
}
 8004626:	4618      	mov	r0, r3
 8004628:	46bd      	mov	sp, r7
 800462a:	bc80      	pop	{r7}
 800462c:	4770      	bx	lr

0800462e <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800462e:	b480      	push	{r7}
 8004630:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004632:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800463c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004640:	d101      	bne.n	8004646 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8004642:	2301      	movs	r3, #1
 8004644:	e000      	b.n	8004648 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8004646:	2300      	movs	r3, #0
}
 8004648:	4618      	mov	r0, r3
 800464a:	46bd      	mov	sp, r7
 800464c:	bc80      	pop	{r7}
 800464e:	4770      	bx	lr

08004650 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8004650:	b480      	push	{r7}
 8004652:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004654:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004658:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800465c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004660:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004664:	d101      	bne.n	800466a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8004666:	2301      	movs	r3, #1
 8004668:	e000      	b.n	800466c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800466a:	2300      	movs	r3, #0
}
 800466c:	4618      	mov	r0, r3
 800466e:	46bd      	mov	sp, r7
 8004670:	bc80      	pop	{r7}
 8004672:	4770      	bx	lr

08004674 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8004674:	b480      	push	{r7}
 8004676:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004678:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004682:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004686:	d101      	bne.n	800468c <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8004688:	2301      	movs	r3, #1
 800468a:	e000      	b.n	800468e <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800468c:	2300      	movs	r3, #0
}
 800468e:	4618      	mov	r0, r3
 8004690:	46bd      	mov	sp, r7
 8004692:	bc80      	pop	{r7}
 8004694:	4770      	bx	lr

08004696 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8004696:	b480      	push	{r7}
 8004698:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800469a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046a4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80046a8:	d101      	bne.n	80046ae <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80046aa:	2301      	movs	r3, #1
 80046ac:	e000      	b.n	80046b0 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80046ae:	2300      	movs	r3, #0
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bc80      	pop	{r7}
 80046b6:	4770      	bx	lr

080046b8 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b088      	sub	sp, #32
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d101      	bne.n	80046ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e38a      	b.n	8004de0 <HAL_RCC_OscConfig+0x728>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046ca:	f7ff fece 	bl	800446a <LL_RCC_GetSysClkSource>
 80046ce:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80046d0:	f7ff ffa2 	bl	8004618 <LL_RCC_PLL_GetMainSource>
 80046d4:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 0320 	and.w	r3, r3, #32
 80046de:	2b00      	cmp	r3, #0
 80046e0:	f000 80c9 	beq.w	8004876 <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80046e4:	69fb      	ldr	r3, [r7, #28]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d005      	beq.n	80046f6 <HAL_RCC_OscConfig+0x3e>
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	2b0c      	cmp	r3, #12
 80046ee:	d17b      	bne.n	80047e8 <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80046f0:	69bb      	ldr	r3, [r7, #24]
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d178      	bne.n	80047e8 <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80046f6:	f7ff fe5a 	bl	80043ae <LL_RCC_MSI_IsReady>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d005      	beq.n	800470c <HAL_RCC_OscConfig+0x54>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6a1b      	ldr	r3, [r3, #32]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d101      	bne.n	800470c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e369      	b.n	8004de0 <HAL_RCC_OscConfig+0x728>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004710:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 0308 	and.w	r3, r3, #8
 800471a:	2b00      	cmp	r3, #0
 800471c:	d005      	beq.n	800472a <HAL_RCC_OscConfig+0x72>
 800471e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004728:	e006      	b.n	8004738 <HAL_RCC_OscConfig+0x80>
 800472a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800472e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004732:	091b      	lsrs	r3, r3, #4
 8004734:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004738:	4293      	cmp	r3, r2
 800473a:	d222      	bcs.n	8004782 <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004740:	4618      	mov	r0, r3
 8004742:	f000 fd4f 	bl	80051e4 <RCC_SetFlashLatencyFromMSIRange>
 8004746:	4603      	mov	r3, r0
 8004748:	2b00      	cmp	r3, #0
 800474a:	d001      	beq.n	8004750 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	e347      	b.n	8004de0 <HAL_RCC_OscConfig+0x728>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004750:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800475a:	f043 0308 	orr.w	r3, r3, #8
 800475e:	6013      	str	r3, [r2, #0]
 8004760:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800476e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004772:	4313      	orrs	r3, r2
 8004774:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477a:	4618      	mov	r0, r3
 800477c:	f7ff fe4e 	bl	800441c <LL_RCC_MSI_SetCalibTrimming>
 8004780:	e021      	b.n	80047c6 <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004782:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800478c:	f043 0308 	orr.w	r3, r3, #8
 8004790:	6013      	str	r3, [r2, #0]
 8004792:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80047a4:	4313      	orrs	r3, r2
 80047a6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ac:	4618      	mov	r0, r3
 80047ae:	f7ff fe35 	bl	800441c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047b6:	4618      	mov	r0, r3
 80047b8:	f000 fd14 	bl	80051e4 <RCC_SetFlashLatencyFromMSIRange>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d001      	beq.n	80047c6 <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e30c      	b.n	8004de0 <HAL_RCC_OscConfig+0x728>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80047c6:	f000 fcd5 	bl	8005174 <HAL_RCC_GetHCLKFreq>
 80047ca:	4603      	mov	r3, r0
 80047cc:	4ab4      	ldr	r2, [pc, #720]	; (8004aa0 <HAL_RCC_OscConfig+0x3e8>)
 80047ce:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80047d0:	4bb4      	ldr	r3, [pc, #720]	; (8004aa4 <HAL_RCC_OscConfig+0x3ec>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4618      	mov	r0, r3
 80047d6:	f7fd fc43 	bl	8002060 <HAL_InitTick>
 80047da:	4603      	mov	r3, r0
 80047dc:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 80047de:	7cfb      	ldrb	r3, [r7, #19]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d047      	beq.n	8004874 <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 80047e4:	7cfb      	ldrb	r3, [r7, #19]
 80047e6:	e2fb      	b.n	8004de0 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6a1b      	ldr	r3, [r3, #32]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d02c      	beq.n	800484a <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80047f0:	f7ff fdc1 	bl	8004376 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80047f4:	f7fc ff7c 	bl	80016f0 <HAL_GetTick>
 80047f8:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80047fa:	e008      	b.n	800480e <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80047fc:	f7fc ff78 	bl	80016f0 <HAL_GetTick>
 8004800:	4602      	mov	r2, r0
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	2b02      	cmp	r3, #2
 8004808:	d901      	bls.n	800480e <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 800480a:	2303      	movs	r3, #3
 800480c:	e2e8      	b.n	8004de0 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_MSI_IsReady() == 0U)
 800480e:	f7ff fdce 	bl	80043ae <LL_RCC_MSI_IsReady>
 8004812:	4603      	mov	r3, r0
 8004814:	2b00      	cmp	r3, #0
 8004816:	d0f1      	beq.n	80047fc <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004818:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004822:	f043 0308 	orr.w	r3, r3, #8
 8004826:	6013      	str	r3, [r2, #0]
 8004828:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004836:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800483a:	4313      	orrs	r3, r2
 800483c:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004842:	4618      	mov	r0, r3
 8004844:	f7ff fdea 	bl	800441c <LL_RCC_MSI_SetCalibTrimming>
 8004848:	e015      	b.n	8004876 <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800484a:	f7ff fda2 	bl	8004392 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800484e:	f7fc ff4f 	bl	80016f0 <HAL_GetTick>
 8004852:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8004854:	e008      	b.n	8004868 <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004856:	f7fc ff4b 	bl	80016f0 <HAL_GetTick>
 800485a:	4602      	mov	r2, r0
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	1ad3      	subs	r3, r2, r3
 8004860:	2b02      	cmp	r3, #2
 8004862:	d901      	bls.n	8004868 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8004864:	2303      	movs	r3, #3
 8004866:	e2bb      	b.n	8004de0 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_MSI_IsReady() != 0U)
 8004868:	f7ff fda1 	bl	80043ae <LL_RCC_MSI_IsReady>
 800486c:	4603      	mov	r3, r0
 800486e:	2b00      	cmp	r3, #0
 8004870:	d1f1      	bne.n	8004856 <HAL_RCC_OscConfig+0x19e>
 8004872:	e000      	b.n	8004876 <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004874:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 0301 	and.w	r3, r3, #1
 800487e:	2b00      	cmp	r3, #0
 8004880:	d05f      	beq.n	8004942 <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	2b08      	cmp	r3, #8
 8004886:	d005      	beq.n	8004894 <HAL_RCC_OscConfig+0x1dc>
 8004888:	69fb      	ldr	r3, [r7, #28]
 800488a:	2b0c      	cmp	r3, #12
 800488c:	d10d      	bne.n	80048aa <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800488e:	69bb      	ldr	r3, [r7, #24]
 8004890:	2b03      	cmp	r3, #3
 8004892:	d10a      	bne.n	80048aa <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004894:	f7ff fcdb 	bl	800424e <LL_RCC_HSE_IsReady>
 8004898:	4603      	mov	r3, r0
 800489a:	2b00      	cmp	r3, #0
 800489c:	d050      	beq.n	8004940 <HAL_RCC_OscConfig+0x288>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d14c      	bne.n	8004940 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e29a      	b.n	8004de0 <HAL_RCC_OscConfig+0x728>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 80048aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80048bc:	4313      	orrs	r3, r2
 80048be:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048c8:	d102      	bne.n	80048d0 <HAL_RCC_OscConfig+0x218>
 80048ca:	f7ff fca4 	bl	8004216 <LL_RCC_HSE_Enable>
 80048ce:	e00d      	b.n	80048ec <HAL_RCC_OscConfig+0x234>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80048d8:	d104      	bne.n	80048e4 <HAL_RCC_OscConfig+0x22c>
 80048da:	f7ff fc6f 	bl	80041bc <LL_RCC_HSE_EnableTcxo>
 80048de:	f7ff fc9a 	bl	8004216 <LL_RCC_HSE_Enable>
 80048e2:	e003      	b.n	80048ec <HAL_RCC_OscConfig+0x234>
 80048e4:	f7ff fca5 	bl	8004232 <LL_RCC_HSE_Disable>
 80048e8:	f7ff fc76 	bl	80041d8 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d012      	beq.n	800491a <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048f4:	f7fc fefc 	bl	80016f0 <HAL_GetTick>
 80048f8:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80048fa:	e008      	b.n	800490e <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048fc:	f7fc fef8 	bl	80016f0 <HAL_GetTick>
 8004900:	4602      	mov	r2, r0
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	2b64      	cmp	r3, #100	; 0x64
 8004908:	d901      	bls.n	800490e <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800490a:	2303      	movs	r3, #3
 800490c:	e268      	b.n	8004de0 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSE_IsReady() == 0U)
 800490e:	f7ff fc9e 	bl	800424e <LL_RCC_HSE_IsReady>
 8004912:	4603      	mov	r3, r0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d0f1      	beq.n	80048fc <HAL_RCC_OscConfig+0x244>
 8004918:	e013      	b.n	8004942 <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800491a:	f7fc fee9 	bl	80016f0 <HAL_GetTick>
 800491e:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8004920:	e008      	b.n	8004934 <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004922:	f7fc fee5 	bl	80016f0 <HAL_GetTick>
 8004926:	4602      	mov	r2, r0
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	1ad3      	subs	r3, r2, r3
 800492c:	2b64      	cmp	r3, #100	; 0x64
 800492e:	d901      	bls.n	8004934 <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 8004930:	2303      	movs	r3, #3
 8004932:	e255      	b.n	8004de0 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004934:	f7ff fc8b 	bl	800424e <LL_RCC_HSE_IsReady>
 8004938:	4603      	mov	r3, r0
 800493a:	2b00      	cmp	r3, #0
 800493c:	d1f1      	bne.n	8004922 <HAL_RCC_OscConfig+0x26a>
 800493e:	e000      	b.n	8004942 <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004940:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 0302 	and.w	r3, r3, #2
 800494a:	2b00      	cmp	r3, #0
 800494c:	d04b      	beq.n	80049e6 <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	2b04      	cmp	r3, #4
 8004952:	d005      	beq.n	8004960 <HAL_RCC_OscConfig+0x2a8>
 8004954:	69fb      	ldr	r3, [r7, #28]
 8004956:	2b0c      	cmp	r3, #12
 8004958:	d113      	bne.n	8004982 <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800495a:	69bb      	ldr	r3, [r7, #24]
 800495c:	2b02      	cmp	r3, #2
 800495e:	d110      	bne.n	8004982 <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004960:	f7ff fca2 	bl	80042a8 <LL_RCC_HSI_IsReady>
 8004964:	4603      	mov	r3, r0
 8004966:	2b00      	cmp	r3, #0
 8004968:	d005      	beq.n	8004976 <HAL_RCC_OscConfig+0x2be>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	691b      	ldr	r3, [r3, #16]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d101      	bne.n	8004976 <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e234      	b.n	8004de0 <HAL_RCC_OscConfig+0x728>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	695b      	ldr	r3, [r3, #20]
 800497a:	4618      	mov	r0, r3
 800497c:	f7ff fca5 	bl	80042ca <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004980:	e031      	b.n	80049e6 <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	691b      	ldr	r3, [r3, #16]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d019      	beq.n	80049be <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800498a:	f7ff fc71 	bl	8004270 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800498e:	f7fc feaf 	bl	80016f0 <HAL_GetTick>
 8004992:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8004994:	e008      	b.n	80049a8 <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004996:	f7fc feab 	bl	80016f0 <HAL_GetTick>
 800499a:	4602      	mov	r2, r0
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	1ad3      	subs	r3, r2, r3
 80049a0:	2b02      	cmp	r3, #2
 80049a2:	d901      	bls.n	80049a8 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 80049a4:	2303      	movs	r3, #3
 80049a6:	e21b      	b.n	8004de0 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSI_IsReady() == 0U)
 80049a8:	f7ff fc7e 	bl	80042a8 <LL_RCC_HSI_IsReady>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d0f1      	beq.n	8004996 <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	695b      	ldr	r3, [r3, #20]
 80049b6:	4618      	mov	r0, r3
 80049b8:	f7ff fc87 	bl	80042ca <LL_RCC_HSI_SetCalibTrimming>
 80049bc:	e013      	b.n	80049e6 <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049be:	f7ff fc65 	bl	800428c <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049c2:	f7fc fe95 	bl	80016f0 <HAL_GetTick>
 80049c6:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80049c8:	e008      	b.n	80049dc <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049ca:	f7fc fe91 	bl	80016f0 <HAL_GetTick>
 80049ce:	4602      	mov	r2, r0
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	1ad3      	subs	r3, r2, r3
 80049d4:	2b02      	cmp	r3, #2
 80049d6:	d901      	bls.n	80049dc <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 80049d8:	2303      	movs	r3, #3
 80049da:	e201      	b.n	8004de0 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSI_IsReady() != 0U)
 80049dc:	f7ff fc64 	bl	80042a8 <LL_RCC_HSI_IsReady>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d1f1      	bne.n	80049ca <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 0308 	and.w	r3, r3, #8
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d06e      	beq.n	8004ad0 <HAL_RCC_OscConfig+0x418>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	699b      	ldr	r3, [r3, #24]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d056      	beq.n	8004aa8 <HAL_RCC_OscConfig+0x3f0>
    {
      uint32_t csr_temp = RCC->CSR;
 80049fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a02:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	69da      	ldr	r2, [r3, #28]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f003 0310 	and.w	r3, r3, #16
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d031      	beq.n	8004a76 <HAL_RCC_OscConfig+0x3be>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	f003 0302 	and.w	r3, r3, #2
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d006      	beq.n	8004a2a <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d101      	bne.n	8004a2a <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e1da      	b.n	8004de0 <HAL_RCC_OscConfig+0x728>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f003 0301 	and.w	r3, r3, #1
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d013      	beq.n	8004a5c <HAL_RCC_OscConfig+0x3a4>
        {
          __HAL_RCC_LSI_DISABLE();
 8004a34:	f7ff fc7e 	bl	8004334 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004a38:	f7fc fe5a 	bl	80016f0 <HAL_GetTick>
 8004a3c:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8004a3e:	e008      	b.n	8004a52 <HAL_RCC_OscConfig+0x39a>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a40:	f7fc fe56 	bl	80016f0 <HAL_GetTick>
 8004a44:	4602      	mov	r2, r0
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	2b11      	cmp	r3, #17
 8004a4c:	d901      	bls.n	8004a52 <HAL_RCC_OscConfig+0x39a>
            {
              return HAL_TIMEOUT;
 8004a4e:	2303      	movs	r3, #3
 8004a50:	e1c6      	b.n	8004de0 <HAL_RCC_OscConfig+0x728>
          while (LL_RCC_LSI_IsReady() != 0U)
 8004a52:	f7ff fc7f 	bl	8004354 <LL_RCC_LSI_IsReady>
 8004a56:	4603      	mov	r3, r0
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d1f1      	bne.n	8004a40 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8004a5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a64:	f023 0210 	bic.w	r2, r3, #16
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	69db      	ldr	r3, [r3, #28]
 8004a6c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a70:	4313      	orrs	r3, r2
 8004a72:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a76:	f7ff fc4d 	bl	8004314 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a7a:	f7fc fe39 	bl	80016f0 <HAL_GetTick>
 8004a7e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8004a80:	e008      	b.n	8004a94 <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a82:	f7fc fe35 	bl	80016f0 <HAL_GetTick>
 8004a86:	4602      	mov	r2, r0
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	1ad3      	subs	r3, r2, r3
 8004a8c:	2b11      	cmp	r3, #17
 8004a8e:	d901      	bls.n	8004a94 <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 8004a90:	2303      	movs	r3, #3
 8004a92:	e1a5      	b.n	8004de0 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSI_IsReady() == 0U)
 8004a94:	f7ff fc5e 	bl	8004354 <LL_RCC_LSI_IsReady>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d0f1      	beq.n	8004a82 <HAL_RCC_OscConfig+0x3ca>
 8004a9e:	e017      	b.n	8004ad0 <HAL_RCC_OscConfig+0x418>
 8004aa0:	20000000 	.word	0x20000000
 8004aa4:	20000004 	.word	0x20000004
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004aa8:	f7ff fc44 	bl	8004334 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aac:	f7fc fe20 	bl	80016f0 <HAL_GetTick>
 8004ab0:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8004ab2:	e008      	b.n	8004ac6 <HAL_RCC_OscConfig+0x40e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ab4:	f7fc fe1c 	bl	80016f0 <HAL_GetTick>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	1ad3      	subs	r3, r2, r3
 8004abe:	2b11      	cmp	r3, #17
 8004ac0:	d901      	bls.n	8004ac6 <HAL_RCC_OscConfig+0x40e>
        {
          return HAL_TIMEOUT;
 8004ac2:	2303      	movs	r3, #3
 8004ac4:	e18c      	b.n	8004de0 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSI_IsReady() != 0U)
 8004ac6:	f7ff fc45 	bl	8004354 <LL_RCC_LSI_IsReady>
 8004aca:	4603      	mov	r3, r0
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d1f1      	bne.n	8004ab4 <HAL_RCC_OscConfig+0x3fc>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 0304 	and.w	r3, r3, #4
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	f000 80d8 	beq.w	8004c8e <HAL_RCC_OscConfig+0x5d6>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8004ade:	f7ff fb5b 	bl	8004198 <LL_PWR_IsEnabledBkUpAccess>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d113      	bne.n	8004b10 <HAL_RCC_OscConfig+0x458>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004ae8:	f7ff fa9a 	bl	8004020 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004aec:	f7fc fe00 	bl	80016f0 <HAL_GetTick>
 8004af0:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8004af2:	e008      	b.n	8004b06 <HAL_RCC_OscConfig+0x44e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004af4:	f7fc fdfc 	bl	80016f0 <HAL_GetTick>
 8004af8:	4602      	mov	r2, r0
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	1ad3      	subs	r3, r2, r3
 8004afe:	2b02      	cmp	r3, #2
 8004b00:	d901      	bls.n	8004b06 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8004b02:	2303      	movs	r3, #3
 8004b04:	e16c      	b.n	8004de0 <HAL_RCC_OscConfig+0x728>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8004b06:	f7ff fb47 	bl	8004198 <LL_PWR_IsEnabledBkUpAccess>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d0f1      	beq.n	8004af4 <HAL_RCC_OscConfig+0x43c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d07b      	beq.n	8004c10 <HAL_RCC_OscConfig+0x558>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	2b85      	cmp	r3, #133	; 0x85
 8004b1e:	d003      	beq.n	8004b28 <HAL_RCC_OscConfig+0x470>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	2b05      	cmp	r3, #5
 8004b26:	d109      	bne.n	8004b3c <HAL_RCC_OscConfig+0x484>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004b28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b34:	f043 0304 	orr.w	r3, r3, #4
 8004b38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b3c:	f7fc fdd8 	bl	80016f0 <HAL_GetTick>
 8004b40:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004b42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b4e:	f043 0301 	orr.w	r3, r3, #1
 8004b52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004b56:	e00a      	b.n	8004b6e <HAL_RCC_OscConfig+0x4b6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b58:	f7fc fdca 	bl	80016f0 <HAL_GetTick>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d901      	bls.n	8004b6e <HAL_RCC_OscConfig+0x4b6>
        {
          return HAL_TIMEOUT;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	e138      	b.n	8004de0 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004b6e:	f7ff fbc0 	bl	80042f2 <LL_RCC_LSE_IsReady>
 8004b72:	4603      	mov	r3, r0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d0ef      	beq.n	8004b58 <HAL_RCC_OscConfig+0x4a0>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	2b81      	cmp	r3, #129	; 0x81
 8004b7e:	d003      	beq.n	8004b88 <HAL_RCC_OscConfig+0x4d0>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	2b85      	cmp	r3, #133	; 0x85
 8004b86:	d121      	bne.n	8004bcc <HAL_RCC_OscConfig+0x514>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b88:	f7fc fdb2 	bl	80016f0 <HAL_GetTick>
 8004b8c:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004b8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004ba2:	e00a      	b.n	8004bba <HAL_RCC_OscConfig+0x502>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ba4:	f7fc fda4 	bl	80016f0 <HAL_GetTick>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d901      	bls.n	8004bba <HAL_RCC_OscConfig+0x502>
          {
            return HAL_TIMEOUT;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	e112      	b.n	8004de0 <HAL_RCC_OscConfig+0x728>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004bba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d0ec      	beq.n	8004ba4 <HAL_RCC_OscConfig+0x4ec>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8004bca:	e060      	b.n	8004c8e <HAL_RCC_OscConfig+0x5d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bcc:	f7fc fd90 	bl	80016f0 <HAL_GetTick>
 8004bd0:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004bd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bda:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004bde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004be2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004be6:	e00a      	b.n	8004bfe <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004be8:	f7fc fd82 	bl	80016f0 <HAL_GetTick>
 8004bec:	4602      	mov	r2, r0
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d901      	bls.n	8004bfe <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	e0f0      	b.n	8004de0 <HAL_RCC_OscConfig+0x728>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004bfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d1ec      	bne.n	8004be8 <HAL_RCC_OscConfig+0x530>
 8004c0e:	e03e      	b.n	8004c8e <HAL_RCC_OscConfig+0x5d6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c10:	f7fc fd6e 	bl	80016f0 <HAL_GetTick>
 8004c14:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004c16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004c2a:	e00a      	b.n	8004c42 <HAL_RCC_OscConfig+0x58a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c2c:	f7fc fd60 	bl	80016f0 <HAL_GetTick>
 8004c30:	4602      	mov	r2, r0
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	1ad3      	subs	r3, r2, r3
 8004c36:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d901      	bls.n	8004c42 <HAL_RCC_OscConfig+0x58a>
        {
          return HAL_TIMEOUT;
 8004c3e:	2303      	movs	r3, #3
 8004c40:	e0ce      	b.n	8004de0 <HAL_RCC_OscConfig+0x728>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004c42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d1ec      	bne.n	8004c2c <HAL_RCC_OscConfig+0x574>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c52:	f7fc fd4d 	bl	80016f0 <HAL_GetTick>
 8004c56:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004c58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c64:	f023 0301 	bic.w	r3, r3, #1
 8004c68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8004c6c:	e00a      	b.n	8004c84 <HAL_RCC_OscConfig+0x5cc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c6e:	f7fc fd3f 	bl	80016f0 <HAL_GetTick>
 8004c72:	4602      	mov	r2, r0
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	1ad3      	subs	r3, r2, r3
 8004c78:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d901      	bls.n	8004c84 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8004c80:	2303      	movs	r3, #3
 8004c82:	e0ad      	b.n	8004de0 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSE_IsReady() != 0U)
 8004c84:	f7ff fb35 	bl	80042f2 <LL_RCC_LSE_IsReady>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d1ef      	bne.n	8004c6e <HAL_RCC_OscConfig+0x5b6>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	f000 80a3 	beq.w	8004dde <HAL_RCC_OscConfig+0x726>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c98:	69fb      	ldr	r3, [r7, #28]
 8004c9a:	2b0c      	cmp	r3, #12
 8004c9c:	d076      	beq.n	8004d8c <HAL_RCC_OscConfig+0x6d4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca2:	2b02      	cmp	r3, #2
 8004ca4:	d14b      	bne.n	8004d3e <HAL_RCC_OscConfig+0x686>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ca6:	f7ff fc76 	bl	8004596 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004caa:	f7fc fd21 	bl	80016f0 <HAL_GetTick>
 8004cae:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8004cb0:	e008      	b.n	8004cc4 <HAL_RCC_OscConfig+0x60c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cb2:	f7fc fd1d 	bl	80016f0 <HAL_GetTick>
 8004cb6:	4602      	mov	r2, r0
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	1ad3      	subs	r3, r2, r3
 8004cbc:	2b0a      	cmp	r3, #10
 8004cbe:	d901      	bls.n	8004cc4 <HAL_RCC_OscConfig+0x60c>
          {
            return HAL_TIMEOUT;
 8004cc0:	2303      	movs	r3, #3
 8004cc2:	e08d      	b.n	8004de0 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() != 0U)
 8004cc4:	f7ff fc75 	bl	80045b2 <LL_RCC_PLL_IsReady>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d1f1      	bne.n	8004cb2 <HAL_RCC_OscConfig+0x5fa>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004cce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cd2:	68da      	ldr	r2, [r3, #12]
 8004cd4:	4b44      	ldr	r3, [pc, #272]	; (8004de8 <HAL_RCC_OscConfig+0x730>)
 8004cd6:	4013      	ands	r3, r2
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004ce0:	4311      	orrs	r1, r2
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004ce6:	0212      	lsls	r2, r2, #8
 8004ce8:	4311      	orrs	r1, r2
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004cee:	4311      	orrs	r1, r2
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004cf4:	4311      	orrs	r1, r2
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004cfa:	430a      	orrs	r2, r1
 8004cfc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d00:	4313      	orrs	r3, r2
 8004d02:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d04:	f7ff fc39 	bl	800457a <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004d08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d0c:	68db      	ldr	r3, [r3, #12]
 8004d0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d16:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d18:	f7fc fcea 	bl	80016f0 <HAL_GetTick>
 8004d1c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8004d1e:	e008      	b.n	8004d32 <HAL_RCC_OscConfig+0x67a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d20:	f7fc fce6 	bl	80016f0 <HAL_GetTick>
 8004d24:	4602      	mov	r2, r0
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	2b0a      	cmp	r3, #10
 8004d2c:	d901      	bls.n	8004d32 <HAL_RCC_OscConfig+0x67a>
          {
            return HAL_TIMEOUT;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	e056      	b.n	8004de0 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() == 0U)
 8004d32:	f7ff fc3e 	bl	80045b2 <LL_RCC_PLL_IsReady>
 8004d36:	4603      	mov	r3, r0
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d0f1      	beq.n	8004d20 <HAL_RCC_OscConfig+0x668>
 8004d3c:	e04f      	b.n	8004dde <HAL_RCC_OscConfig+0x726>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d3e:	f7ff fc2a 	bl	8004596 <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8004d42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d4c:	f023 0303 	bic.w	r3, r3, #3
 8004d50:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 8004d52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d5c:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8004d60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d64:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d66:	f7fc fcc3 	bl	80016f0 <HAL_GetTick>
 8004d6a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8004d6c:	e008      	b.n	8004d80 <HAL_RCC_OscConfig+0x6c8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d6e:	f7fc fcbf 	bl	80016f0 <HAL_GetTick>
 8004d72:	4602      	mov	r2, r0
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	1ad3      	subs	r3, r2, r3
 8004d78:	2b0a      	cmp	r3, #10
 8004d7a:	d901      	bls.n	8004d80 <HAL_RCC_OscConfig+0x6c8>
          {
            return HAL_TIMEOUT;
 8004d7c:	2303      	movs	r3, #3
 8004d7e:	e02f      	b.n	8004de0 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() != 0U)
 8004d80:	f7ff fc17 	bl	80045b2 <LL_RCC_PLL_IsReady>
 8004d84:	4603      	mov	r3, r0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d1f1      	bne.n	8004d6e <HAL_RCC_OscConfig+0x6b6>
 8004d8a:	e028      	b.n	8004dde <HAL_RCC_OscConfig+0x726>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d101      	bne.n	8004d98 <HAL_RCC_OscConfig+0x6e0>
      {
        return HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	e023      	b.n	8004de0 <HAL_RCC_OscConfig+0x728>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004d98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8004da0:	69bb      	ldr	r3, [r7, #24]
 8004da2:	f003 0203 	and.w	r2, r3, #3
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d115      	bne.n	8004dda <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8004dae:	69bb      	ldr	r3, [r7, #24]
 8004db0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d10e      	bne.n	8004dda <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8004dbc:	69bb      	ldr	r3, [r7, #24]
 8004dbe:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc6:	021b      	lsls	r3, r3, #8
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d106      	bne.n	8004dda <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8004dcc:	69bb      	ldr	r3, [r7, #24]
 8004dce:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d001      	beq.n	8004dde <HAL_RCC_OscConfig+0x726>
        {
          return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e000      	b.n	8004de0 <HAL_RCC_OscConfig+0x728>
        }
      }
    }
  }
  return HAL_OK;
 8004dde:	2300      	movs	r3, #0
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3720      	adds	r7, #32
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	11c1808c 	.word	0x11c1808c

08004dec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b084      	sub	sp, #16
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d101      	bne.n	8004e00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e10f      	b.n	8005020 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e00:	4b89      	ldr	r3, [pc, #548]	; (8005028 <HAL_RCC_ClockConfig+0x23c>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 0307 	and.w	r3, r3, #7
 8004e08:	683a      	ldr	r2, [r7, #0]
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d91b      	bls.n	8004e46 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e0e:	4b86      	ldr	r3, [pc, #536]	; (8005028 <HAL_RCC_ClockConfig+0x23c>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f023 0207 	bic.w	r2, r3, #7
 8004e16:	4984      	ldr	r1, [pc, #528]	; (8005028 <HAL_RCC_ClockConfig+0x23c>)
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e1e:	f7fc fc67 	bl	80016f0 <HAL_GetTick>
 8004e22:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e24:	e008      	b.n	8004e38 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004e26:	f7fc fc63 	bl	80016f0 <HAL_GetTick>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	1ad3      	subs	r3, r2, r3
 8004e30:	2b02      	cmp	r3, #2
 8004e32:	d901      	bls.n	8004e38 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004e34:	2303      	movs	r3, #3
 8004e36:	e0f3      	b.n	8005020 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e38:	4b7b      	ldr	r3, [pc, #492]	; (8005028 <HAL_RCC_ClockConfig+0x23c>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 0307 	and.w	r3, r3, #7
 8004e40:	683a      	ldr	r2, [r7, #0]
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d1ef      	bne.n	8004e26 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 0302 	and.w	r3, r3, #2
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d016      	beq.n	8004e80 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	4618      	mov	r0, r3
 8004e58:	f7ff fb12 	bl	8004480 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004e5c:	f7fc fc48 	bl	80016f0 <HAL_GetTick>
 8004e60:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004e62:	e008      	b.n	8004e76 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004e64:	f7fc fc44 	bl	80016f0 <HAL_GetTick>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	1ad3      	subs	r3, r2, r3
 8004e6e:	2b02      	cmp	r3, #2
 8004e70:	d901      	bls.n	8004e76 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8004e72:	2303      	movs	r3, #3
 8004e74:	e0d4      	b.n	8005020 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004e76:	f7ff fbda 	bl	800462e <LL_RCC_IsActiveFlag_HPRE>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d0f1      	beq.n	8004e64 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d016      	beq.n	8004eba <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	695b      	ldr	r3, [r3, #20]
 8004e90:	4618      	mov	r0, r3
 8004e92:	f7ff fb08 	bl	80044a6 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004e96:	f7fc fc2b 	bl	80016f0 <HAL_GetTick>
 8004e9a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004e9c:	e008      	b.n	8004eb0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004e9e:	f7fc fc27 	bl	80016f0 <HAL_GetTick>
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	1ad3      	subs	r3, r2, r3
 8004ea8:	2b02      	cmp	r3, #2
 8004eaa:	d901      	bls.n	8004eb0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004eac:	2303      	movs	r3, #3
 8004eae:	e0b7      	b.n	8005020 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004eb0:	f7ff fbce 	bl	8004650 <LL_RCC_IsActiveFlag_SHDHPRE>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d0f1      	beq.n	8004e9e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 0304 	and.w	r3, r3, #4
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d016      	beq.n	8004ef4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	68db      	ldr	r3, [r3, #12]
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f7ff fb01 	bl	80044d2 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004ed0:	f7fc fc0e 	bl	80016f0 <HAL_GetTick>
 8004ed4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004ed6:	e008      	b.n	8004eea <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004ed8:	f7fc fc0a 	bl	80016f0 <HAL_GetTick>
 8004edc:	4602      	mov	r2, r0
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	1ad3      	subs	r3, r2, r3
 8004ee2:	2b02      	cmp	r3, #2
 8004ee4:	d901      	bls.n	8004eea <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	e09a      	b.n	8005020 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004eea:	f7ff fbc3 	bl	8004674 <LL_RCC_IsActiveFlag_PPRE1>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d0f1      	beq.n	8004ed8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f003 0308 	and.w	r3, r3, #8
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d017      	beq.n	8004f30 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	691b      	ldr	r3, [r3, #16]
 8004f04:	00db      	lsls	r3, r3, #3
 8004f06:	4618      	mov	r0, r3
 8004f08:	f7ff faf6 	bl	80044f8 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004f0c:	f7fc fbf0 	bl	80016f0 <HAL_GetTick>
 8004f10:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004f12:	e008      	b.n	8004f26 <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004f14:	f7fc fbec 	bl	80016f0 <HAL_GetTick>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	1ad3      	subs	r3, r2, r3
 8004f1e:	2b02      	cmp	r3, #2
 8004f20:	d901      	bls.n	8004f26 <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8004f22:	2303      	movs	r3, #3
 8004f24:	e07c      	b.n	8005020 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004f26:	f7ff fbb6 	bl	8004696 <LL_RCC_IsActiveFlag_PPRE2>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d0f1      	beq.n	8004f14 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 0301 	and.w	r3, r3, #1
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d043      	beq.n	8004fc4 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	2b02      	cmp	r3, #2
 8004f42:	d106      	bne.n	8004f52 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8004f44:	f7ff f983 	bl	800424e <LL_RCC_HSE_IsReady>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d11e      	bne.n	8004f8c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e066      	b.n	8005020 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	2b03      	cmp	r3, #3
 8004f58:	d106      	bne.n	8004f68 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8004f5a:	f7ff fb2a 	bl	80045b2 <LL_RCC_PLL_IsReady>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d113      	bne.n	8004f8c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004f64:	2301      	movs	r3, #1
 8004f66:	e05b      	b.n	8005020 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d106      	bne.n	8004f7e <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8004f70:	f7ff fa1d 	bl	80043ae <LL_RCC_MSI_IsReady>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d108      	bne.n	8004f8c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e050      	b.n	8005020 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8004f7e:	f7ff f993 	bl	80042a8 <LL_RCC_HSI_IsReady>
 8004f82:	4603      	mov	r3, r0
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d101      	bne.n	8004f8c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e049      	b.n	8005020 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	4618      	mov	r0, r3
 8004f92:	f7ff fa57 	bl	8004444 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f96:	f7fc fbab 	bl	80016f0 <HAL_GetTick>
 8004f9a:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f9c:	e00a      	b.n	8004fb4 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f9e:	f7fc fba7 	bl	80016f0 <HAL_GetTick>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	1ad3      	subs	r3, r2, r3
 8004fa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d901      	bls.n	8004fb4 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8004fb0:	2303      	movs	r3, #3
 8004fb2:	e035      	b.n	8005020 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fb4:	f7ff fa59 	bl	800446a <LL_RCC_GetSysClkSource>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d1ec      	bne.n	8004f9e <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004fc4:	4b18      	ldr	r3, [pc, #96]	; (8005028 <HAL_RCC_ClockConfig+0x23c>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 0307 	and.w	r3, r3, #7
 8004fcc:	683a      	ldr	r2, [r7, #0]
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d21b      	bcs.n	800500a <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fd2:	4b15      	ldr	r3, [pc, #84]	; (8005028 <HAL_RCC_ClockConfig+0x23c>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f023 0207 	bic.w	r2, r3, #7
 8004fda:	4913      	ldr	r1, [pc, #76]	; (8005028 <HAL_RCC_ClockConfig+0x23c>)
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fe2:	f7fc fb85 	bl	80016f0 <HAL_GetTick>
 8004fe6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fe8:	e008      	b.n	8004ffc <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004fea:	f7fc fb81 	bl	80016f0 <HAL_GetTick>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	1ad3      	subs	r3, r2, r3
 8004ff4:	2b02      	cmp	r3, #2
 8004ff6:	d901      	bls.n	8004ffc <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8004ff8:	2303      	movs	r3, #3
 8004ffa:	e011      	b.n	8005020 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ffc:	4b0a      	ldr	r3, [pc, #40]	; (8005028 <HAL_RCC_ClockConfig+0x23c>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 0307 	and.w	r3, r3, #7
 8005004:	683a      	ldr	r2, [r7, #0]
 8005006:	429a      	cmp	r2, r3
 8005008:	d1ef      	bne.n	8004fea <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800500a:	f000 f8b3 	bl	8005174 <HAL_RCC_GetHCLKFreq>
 800500e:	4603      	mov	r3, r0
 8005010:	4a06      	ldr	r2, [pc, #24]	; (800502c <HAL_RCC_ClockConfig+0x240>)
 8005012:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005014:	4b06      	ldr	r3, [pc, #24]	; (8005030 <HAL_RCC_ClockConfig+0x244>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4618      	mov	r0, r3
 800501a:	f7fd f821 	bl	8002060 <HAL_InitTick>
 800501e:	4603      	mov	r3, r0
}
 8005020:	4618      	mov	r0, r3
 8005022:	3710      	adds	r7, #16
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}
 8005028:	58004000 	.word	0x58004000
 800502c:	20000000 	.word	0x20000000
 8005030:	20000004 	.word	0x20000004

08005034 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005034:	b590      	push	{r4, r7, lr}
 8005036:	b087      	sub	sp, #28
 8005038:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 800503a:	2300      	movs	r3, #0
 800503c:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 800503e:	2300      	movs	r3, #0
 8005040:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005042:	f7ff fa12 	bl	800446a <LL_RCC_GetSysClkSource>
 8005046:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005048:	f7ff fae6 	bl	8004618 <LL_RCC_PLL_GetMainSource>
 800504c:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d005      	beq.n	8005060 <HAL_RCC_GetSysClockFreq+0x2c>
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	2b0c      	cmp	r3, #12
 8005058:	d139      	bne.n	80050ce <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2b01      	cmp	r3, #1
 800505e:	d136      	bne.n	80050ce <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8005060:	f7ff f9b5 	bl	80043ce <LL_RCC_MSI_IsEnabledRangeSelect>
 8005064:	4603      	mov	r3, r0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d115      	bne.n	8005096 <HAL_RCC_GetSysClockFreq+0x62>
 800506a:	f7ff f9b0 	bl	80043ce <LL_RCC_MSI_IsEnabledRangeSelect>
 800506e:	4603      	mov	r3, r0
 8005070:	2b01      	cmp	r3, #1
 8005072:	d106      	bne.n	8005082 <HAL_RCC_GetSysClockFreq+0x4e>
 8005074:	f7ff f9bb 	bl	80043ee <LL_RCC_MSI_GetRange>
 8005078:	4603      	mov	r3, r0
 800507a:	0a1b      	lsrs	r3, r3, #8
 800507c:	f003 030f 	and.w	r3, r3, #15
 8005080:	e005      	b.n	800508e <HAL_RCC_GetSysClockFreq+0x5a>
 8005082:	f7ff f9bf 	bl	8004404 <LL_RCC_MSI_GetRangeAfterStandby>
 8005086:	4603      	mov	r3, r0
 8005088:	0a1b      	lsrs	r3, r3, #8
 800508a:	f003 030f 	and.w	r3, r3, #15
 800508e:	4a36      	ldr	r2, [pc, #216]	; (8005168 <HAL_RCC_GetSysClockFreq+0x134>)
 8005090:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005094:	e014      	b.n	80050c0 <HAL_RCC_GetSysClockFreq+0x8c>
 8005096:	f7ff f99a 	bl	80043ce <LL_RCC_MSI_IsEnabledRangeSelect>
 800509a:	4603      	mov	r3, r0
 800509c:	2b01      	cmp	r3, #1
 800509e:	d106      	bne.n	80050ae <HAL_RCC_GetSysClockFreq+0x7a>
 80050a0:	f7ff f9a5 	bl	80043ee <LL_RCC_MSI_GetRange>
 80050a4:	4603      	mov	r3, r0
 80050a6:	091b      	lsrs	r3, r3, #4
 80050a8:	f003 030f 	and.w	r3, r3, #15
 80050ac:	e005      	b.n	80050ba <HAL_RCC_GetSysClockFreq+0x86>
 80050ae:	f7ff f9a9 	bl	8004404 <LL_RCC_MSI_GetRangeAfterStandby>
 80050b2:	4603      	mov	r3, r0
 80050b4:	091b      	lsrs	r3, r3, #4
 80050b6:	f003 030f 	and.w	r3, r3, #15
 80050ba:	4a2b      	ldr	r2, [pc, #172]	; (8005168 <HAL_RCC_GetSysClockFreq+0x134>)
 80050bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050c0:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d115      	bne.n	80050f4 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80050cc:	e012      	b.n	80050f4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	2b04      	cmp	r3, #4
 80050d2:	d102      	bne.n	80050da <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80050d4:	4b25      	ldr	r3, [pc, #148]	; (800516c <HAL_RCC_GetSysClockFreq+0x138>)
 80050d6:	617b      	str	r3, [r7, #20]
 80050d8:	e00c      	b.n	80050f4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	2b08      	cmp	r3, #8
 80050de:	d109      	bne.n	80050f4 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80050e0:	f7ff f888 	bl	80041f4 <LL_RCC_HSE_IsEnabledDiv2>
 80050e4:	4603      	mov	r3, r0
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d102      	bne.n	80050f0 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80050ea:	4b20      	ldr	r3, [pc, #128]	; (800516c <HAL_RCC_GetSysClockFreq+0x138>)
 80050ec:	617b      	str	r3, [r7, #20]
 80050ee:	e001      	b.n	80050f4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80050f0:	4b1f      	ldr	r3, [pc, #124]	; (8005170 <HAL_RCC_GetSysClockFreq+0x13c>)
 80050f2:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80050f4:	f7ff f9b9 	bl	800446a <LL_RCC_GetSysClkSource>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b0c      	cmp	r3, #12
 80050fc:	d12f      	bne.n	800515e <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80050fe:	f7ff fa8b 	bl	8004618 <LL_RCC_PLL_GetMainSource>
 8005102:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2b02      	cmp	r3, #2
 8005108:	d003      	beq.n	8005112 <HAL_RCC_GetSysClockFreq+0xde>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2b03      	cmp	r3, #3
 800510e:	d003      	beq.n	8005118 <HAL_RCC_GetSysClockFreq+0xe4>
 8005110:	e00d      	b.n	800512e <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8005112:	4b16      	ldr	r3, [pc, #88]	; (800516c <HAL_RCC_GetSysClockFreq+0x138>)
 8005114:	60fb      	str	r3, [r7, #12]
        break;
 8005116:	e00d      	b.n	8005134 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005118:	f7ff f86c 	bl	80041f4 <LL_RCC_HSE_IsEnabledDiv2>
 800511c:	4603      	mov	r3, r0
 800511e:	2b01      	cmp	r3, #1
 8005120:	d102      	bne.n	8005128 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8005122:	4b12      	ldr	r3, [pc, #72]	; (800516c <HAL_RCC_GetSysClockFreq+0x138>)
 8005124:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8005126:	e005      	b.n	8005134 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8005128:	4b11      	ldr	r3, [pc, #68]	; (8005170 <HAL_RCC_GetSysClockFreq+0x13c>)
 800512a:	60fb      	str	r3, [r7, #12]
        break;
 800512c:	e002      	b.n	8005134 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	60fb      	str	r3, [r7, #12]
        break;
 8005132:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005134:	f7ff fa4e 	bl	80045d4 <LL_RCC_PLL_GetN>
 8005138:	4602      	mov	r2, r0
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	fb03 f402 	mul.w	r4, r3, r2
 8005140:	f7ff fa5f 	bl	8004602 <LL_RCC_PLL_GetDivider>
 8005144:	4603      	mov	r3, r0
 8005146:	091b      	lsrs	r3, r3, #4
 8005148:	3301      	adds	r3, #1
 800514a:	fbb4 f4f3 	udiv	r4, r4, r3
 800514e:	f7ff fa4d 	bl	80045ec <LL_RCC_PLL_GetR>
 8005152:	4603      	mov	r3, r0
 8005154:	0f5b      	lsrs	r3, r3, #29
 8005156:	3301      	adds	r3, #1
 8005158:	fbb4 f3f3 	udiv	r3, r4, r3
 800515c:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800515e:	697b      	ldr	r3, [r7, #20]
}
 8005160:	4618      	mov	r0, r3
 8005162:	371c      	adds	r7, #28
 8005164:	46bd      	mov	sp, r7
 8005166:	bd90      	pop	{r4, r7, pc}
 8005168:	08019874 	.word	0x08019874
 800516c:	00f42400 	.word	0x00f42400
 8005170:	01e84800 	.word	0x01e84800

08005174 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005174:	b598      	push	{r3, r4, r7, lr}
 8005176:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005178:	f7ff ff5c 	bl	8005034 <HAL_RCC_GetSysClockFreq>
 800517c:	4604      	mov	r4, r0
 800517e:	f7ff f9ce 	bl	800451e <LL_RCC_GetAHBPrescaler>
 8005182:	4603      	mov	r3, r0
 8005184:	091b      	lsrs	r3, r3, #4
 8005186:	f003 030f 	and.w	r3, r3, #15
 800518a:	4a03      	ldr	r2, [pc, #12]	; (8005198 <HAL_RCC_GetHCLKFreq+0x24>)
 800518c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005190:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8005194:	4618      	mov	r0, r3
 8005196:	bd98      	pop	{r3, r4, r7, pc}
 8005198:	08019814 	.word	0x08019814

0800519c <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800519c:	b598      	push	{r3, r4, r7, lr}
 800519e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80051a0:	f7ff ffe8 	bl	8005174 <HAL_RCC_GetHCLKFreq>
 80051a4:	4604      	mov	r4, r0
 80051a6:	f7ff f9d2 	bl	800454e <LL_RCC_GetAPB1Prescaler>
 80051aa:	4603      	mov	r3, r0
 80051ac:	0a1b      	lsrs	r3, r3, #8
 80051ae:	4a03      	ldr	r2, [pc, #12]	; (80051bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80051b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051b4:	fa24 f303 	lsr.w	r3, r4, r3
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	bd98      	pop	{r3, r4, r7, pc}
 80051bc:	08019854 	.word	0x08019854

080051c0 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051c0:	b598      	push	{r3, r4, r7, lr}
 80051c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80051c4:	f7ff ffd6 	bl	8005174 <HAL_RCC_GetHCLKFreq>
 80051c8:	4604      	mov	r4, r0
 80051ca:	f7ff f9cb 	bl	8004564 <LL_RCC_GetAPB2Prescaler>
 80051ce:	4603      	mov	r3, r0
 80051d0:	0adb      	lsrs	r3, r3, #11
 80051d2:	4a03      	ldr	r2, [pc, #12]	; (80051e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80051d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051d8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80051dc:	4618      	mov	r0, r3
 80051de:	bd98      	pop	{r3, r4, r7, pc}
 80051e0:	08019854 	.word	0x08019854

080051e4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80051e4:	b590      	push	{r4, r7, lr}
 80051e6:	b085      	sub	sp, #20
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	091b      	lsrs	r3, r3, #4
 80051f0:	f003 030f 	and.w	r3, r3, #15
 80051f4:	4a10      	ldr	r2, [pc, #64]	; (8005238 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 80051f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051fa:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80051fc:	f7ff f99a 	bl	8004534 <LL_RCC_GetAHB3Prescaler>
 8005200:	4603      	mov	r3, r0
 8005202:	091b      	lsrs	r3, r3, #4
 8005204:	f003 030f 	and.w	r3, r3, #15
 8005208:	4a0c      	ldr	r2, [pc, #48]	; (800523c <RCC_SetFlashLatencyFromMSIRange+0x58>)
 800520a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800520e:	68fa      	ldr	r2, [r7, #12]
 8005210:	fbb2 f3f3 	udiv	r3, r2, r3
 8005214:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	4a09      	ldr	r2, [pc, #36]	; (8005240 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 800521a:	fba2 2303 	umull	r2, r3, r2, r3
 800521e:	0c9c      	lsrs	r4, r3, #18
 8005220:	f7fe ff40 	bl	80040a4 <HAL_PWREx_GetVoltageRange>
 8005224:	4603      	mov	r3, r0
 8005226:	4619      	mov	r1, r3
 8005228:	4620      	mov	r0, r4
 800522a:	f000 f80b 	bl	8005244 <RCC_SetFlashLatency>
 800522e:	4603      	mov	r3, r0
}
 8005230:	4618      	mov	r0, r3
 8005232:	3714      	adds	r7, #20
 8005234:	46bd      	mov	sp, r7
 8005236:	bd90      	pop	{r4, r7, pc}
 8005238:	08019874 	.word	0x08019874
 800523c:	08019814 	.word	0x08019814
 8005240:	431bde83 	.word	0x431bde83

08005244 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b08e      	sub	sp, #56	; 0x38
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
 800524c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 800524e:	4a3c      	ldr	r2, [pc, #240]	; (8005340 <RCC_SetFlashLatency+0xfc>)
 8005250:	f107 0320 	add.w	r3, r7, #32
 8005254:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005258:	6018      	str	r0, [r3, #0]
 800525a:	3304      	adds	r3, #4
 800525c:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 800525e:	4a39      	ldr	r2, [pc, #228]	; (8005344 <RCC_SetFlashLatency+0x100>)
 8005260:	f107 0318 	add.w	r3, r7, #24
 8005264:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005268:	6018      	str	r0, [r3, #0]
 800526a:	3304      	adds	r3, #4
 800526c:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 800526e:	4a36      	ldr	r2, [pc, #216]	; (8005348 <RCC_SetFlashLatency+0x104>)
 8005270:	f107 030c 	add.w	r3, r7, #12
 8005274:	ca07      	ldmia	r2, {r0, r1, r2}
 8005276:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800527a:	2300      	movs	r3, #0
 800527c:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005284:	d11d      	bne.n	80052c2 <RCC_SetFlashLatency+0x7e>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005286:	2300      	movs	r3, #0
 8005288:	633b      	str	r3, [r7, #48]	; 0x30
 800528a:	e016      	b.n	80052ba <RCC_SetFlashLatency+0x76>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800528c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800528e:	005b      	lsls	r3, r3, #1
 8005290:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005294:	4413      	add	r3, r2
 8005296:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800529a:	461a      	mov	r2, r3
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4293      	cmp	r3, r2
 80052a0:	d808      	bhi.n	80052b4 <RCC_SetFlashLatency+0x70>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80052a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a4:	009b      	lsls	r3, r3, #2
 80052a6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80052aa:	4413      	add	r3, r2
 80052ac:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80052b0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80052b2:	e023      	b.n	80052fc <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80052b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b6:	3301      	adds	r3, #1
 80052b8:	633b      	str	r3, [r7, #48]	; 0x30
 80052ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052bc:	2b02      	cmp	r3, #2
 80052be:	d9e5      	bls.n	800528c <RCC_SetFlashLatency+0x48>
 80052c0:	e01c      	b.n	80052fc <RCC_SetFlashLatency+0xb8>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80052c2:	2300      	movs	r3, #0
 80052c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052c6:	e016      	b.n	80052f6 <RCC_SetFlashLatency+0xb2>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80052c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ca:	005b      	lsls	r3, r3, #1
 80052cc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80052d0:	4413      	add	r3, r2
 80052d2:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80052d6:	461a      	mov	r2, r3
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	4293      	cmp	r3, r2
 80052dc:	d808      	bhi.n	80052f0 <RCC_SetFlashLatency+0xac>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80052de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052e0:	009b      	lsls	r3, r3, #2
 80052e2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80052e6:	4413      	add	r3, r2
 80052e8:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80052ec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80052ee:	e005      	b.n	80052fc <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80052f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052f2:	3301      	adds	r3, #1
 80052f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052f8:	2b02      	cmp	r3, #2
 80052fa:	d9e5      	bls.n	80052c8 <RCC_SetFlashLatency+0x84>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80052fc:	4b13      	ldr	r3, [pc, #76]	; (800534c <RCC_SetFlashLatency+0x108>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f023 0207 	bic.w	r2, r3, #7
 8005304:	4911      	ldr	r1, [pc, #68]	; (800534c <RCC_SetFlashLatency+0x108>)
 8005306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005308:	4313      	orrs	r3, r2
 800530a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800530c:	f7fc f9f0 	bl	80016f0 <HAL_GetTick>
 8005310:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005312:	e008      	b.n	8005326 <RCC_SetFlashLatency+0xe2>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005314:	f7fc f9ec 	bl	80016f0 <HAL_GetTick>
 8005318:	4602      	mov	r2, r0
 800531a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800531c:	1ad3      	subs	r3, r2, r3
 800531e:	2b02      	cmp	r3, #2
 8005320:	d901      	bls.n	8005326 <RCC_SetFlashLatency+0xe2>
    {
      return HAL_TIMEOUT;
 8005322:	2303      	movs	r3, #3
 8005324:	e007      	b.n	8005336 <RCC_SetFlashLatency+0xf2>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005326:	4b09      	ldr	r3, [pc, #36]	; (800534c <RCC_SetFlashLatency+0x108>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 0307 	and.w	r3, r3, #7
 800532e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005330:	429a      	cmp	r2, r3
 8005332:	d1ef      	bne.n	8005314 <RCC_SetFlashLatency+0xd0>
    }
  }
  return HAL_OK;
 8005334:	2300      	movs	r3, #0
}
 8005336:	4618      	mov	r0, r3
 8005338:	3738      	adds	r7, #56	; 0x38
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
 800533e:	bf00      	nop
 8005340:	0801920c 	.word	0x0801920c
 8005344:	08019214 	.word	0x08019214
 8005348:	0801921c 	.word	0x0801921c
 800534c:	58004000 	.word	0x58004000

08005350 <LL_RCC_LSE_IsReady>:
{
 8005350:	b480      	push	{r7}
 8005352:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005354:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005358:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800535c:	f003 0302 	and.w	r3, r3, #2
 8005360:	2b02      	cmp	r3, #2
 8005362:	d101      	bne.n	8005368 <LL_RCC_LSE_IsReady+0x18>
 8005364:	2301      	movs	r3, #1
 8005366:	e000      	b.n	800536a <LL_RCC_LSE_IsReady+0x1a>
 8005368:	2300      	movs	r3, #0
}
 800536a:	4618      	mov	r0, r3
 800536c:	46bd      	mov	sp, r7
 800536e:	bc80      	pop	{r7}
 8005370:	4770      	bx	lr

08005372 <LL_RCC_SetUSARTClockSource>:
{
 8005372:	b480      	push	{r7}
 8005374:	b083      	sub	sp, #12
 8005376:	af00      	add	r7, sp, #0
 8005378:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 800537a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800537e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	0c1b      	lsrs	r3, r3, #16
 8005386:	43db      	mvns	r3, r3
 8005388:	401a      	ands	r2, r3
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	b29b      	uxth	r3, r3
 800538e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005392:	4313      	orrs	r3, r2
 8005394:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005398:	bf00      	nop
 800539a:	370c      	adds	r7, #12
 800539c:	46bd      	mov	sp, r7
 800539e:	bc80      	pop	{r7}
 80053a0:	4770      	bx	lr

080053a2 <LL_RCC_SetI2SClockSource>:
{
 80053a2:	b480      	push	{r7}
 80053a4:	b083      	sub	sp, #12
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 80053aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80053b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	4313      	orrs	r3, r2
 80053be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80053c2:	bf00      	nop
 80053c4:	370c      	adds	r7, #12
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bc80      	pop	{r7}
 80053ca:	4770      	bx	lr

080053cc <LL_RCC_SetLPUARTClockSource>:
{
 80053cc:	b480      	push	{r7}
 80053ce:	b083      	sub	sp, #12
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80053d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053dc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80053e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	4313      	orrs	r3, r2
 80053e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80053ec:	bf00      	nop
 80053ee:	370c      	adds	r7, #12
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bc80      	pop	{r7}
 80053f4:	4770      	bx	lr

080053f6 <LL_RCC_SetI2CClockSource>:
{
 80053f6:	b480      	push	{r7}
 80053f8:	b083      	sub	sp, #12
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80053fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005402:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	091b      	lsrs	r3, r3, #4
 800540a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800540e:	43db      	mvns	r3, r3
 8005410:	401a      	ands	r2, r3
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	011b      	lsls	r3, r3, #4
 8005416:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800541a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800541e:	4313      	orrs	r3, r2
 8005420:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005424:	bf00      	nop
 8005426:	370c      	adds	r7, #12
 8005428:	46bd      	mov	sp, r7
 800542a:	bc80      	pop	{r7}
 800542c:	4770      	bx	lr

0800542e <LL_RCC_SetLPTIMClockSource>:
{
 800542e:	b480      	push	{r7}
 8005430:	b083      	sub	sp, #12
 8005432:	af00      	add	r7, sp, #0
 8005434:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8005436:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800543a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	0c1b      	lsrs	r3, r3, #16
 8005442:	041b      	lsls	r3, r3, #16
 8005444:	43db      	mvns	r3, r3
 8005446:	401a      	ands	r2, r3
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	041b      	lsls	r3, r3, #16
 800544c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005450:	4313      	orrs	r3, r2
 8005452:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005456:	bf00      	nop
 8005458:	370c      	adds	r7, #12
 800545a:	46bd      	mov	sp, r7
 800545c:	bc80      	pop	{r7}
 800545e:	4770      	bx	lr

08005460 <LL_RCC_SetRNGClockSource>:
{
 8005460:	b480      	push	{r7}
 8005462:	b083      	sub	sp, #12
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005468:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800546c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005470:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005474:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	4313      	orrs	r3, r2
 800547c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005480:	bf00      	nop
 8005482:	370c      	adds	r7, #12
 8005484:	46bd      	mov	sp, r7
 8005486:	bc80      	pop	{r7}
 8005488:	4770      	bx	lr

0800548a <LL_RCC_SetADCClockSource>:
{
 800548a:	b480      	push	{r7}
 800548c:	b083      	sub	sp, #12
 800548e:	af00      	add	r7, sp, #0
 8005490:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8005492:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800549a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800549e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	4313      	orrs	r3, r2
 80054a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80054aa:	bf00      	nop
 80054ac:	370c      	adds	r7, #12
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bc80      	pop	{r7}
 80054b2:	4770      	bx	lr

080054b4 <LL_RCC_SetRTCClockSource>:
{
 80054b4:	b480      	push	{r7}
 80054b6:	b083      	sub	sp, #12
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80054bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80054c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80054d4:	bf00      	nop
 80054d6:	370c      	adds	r7, #12
 80054d8:	46bd      	mov	sp, r7
 80054da:	bc80      	pop	{r7}
 80054dc:	4770      	bx	lr

080054de <LL_RCC_GetRTCClockSource>:
{
 80054de:	b480      	push	{r7}
 80054e0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80054e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bc80      	pop	{r7}
 80054f4:	4770      	bx	lr

080054f6 <LL_RCC_ForceBackupDomainReset>:
{
 80054f6:	b480      	push	{r7}
 80054f8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80054fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005502:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005506:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800550a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800550e:	bf00      	nop
 8005510:	46bd      	mov	sp, r7
 8005512:	bc80      	pop	{r7}
 8005514:	4770      	bx	lr

08005516 <LL_RCC_ReleaseBackupDomainReset>:
{
 8005516:	b480      	push	{r7}
 8005518:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800551a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800551e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005522:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005526:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800552a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800552e:	bf00      	nop
 8005530:	46bd      	mov	sp, r7
 8005532:	bc80      	pop	{r7}
 8005534:	4770      	bx	lr
	...

08005538 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b086      	sub	sp, #24
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8005540:	2300      	movs	r3, #0
 8005542:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8005544:	2300      	movs	r3, #0
 8005546:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005548:	2300      	movs	r3, #0
 800554a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005554:	2b00      	cmp	r3, #0
 8005556:	d058      	beq.n	800560a <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8005558:	f7fe fd62 	bl	8004020 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800555c:	f7fc f8c8 	bl	80016f0 <HAL_GetTick>
 8005560:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8005562:	e009      	b.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005564:	f7fc f8c4 	bl	80016f0 <HAL_GetTick>
 8005568:	4602      	mov	r2, r0
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	1ad3      	subs	r3, r2, r3
 800556e:	2b02      	cmp	r3, #2
 8005570:	d902      	bls.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8005572:	2303      	movs	r3, #3
 8005574:	74fb      	strb	r3, [r7, #19]
        break;
 8005576:	e006      	b.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8005578:	4b7b      	ldr	r3, [pc, #492]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005580:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005584:	d1ee      	bne.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8005586:	7cfb      	ldrb	r3, [r7, #19]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d13c      	bne.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 800558c:	f7ff ffa7 	bl	80054de <LL_RCC_GetRTCClockSource>
 8005590:	4602      	mov	r2, r0
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005596:	429a      	cmp	r2, r3
 8005598:	d00f      	beq.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800559a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800559e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055a6:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80055a8:	f7ff ffa5 	bl	80054f6 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 80055ac:	f7ff ffb3 	bl	8005516 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80055b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	f003 0302 	and.w	r3, r3, #2
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d014      	beq.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055c4:	f7fc f894 	bl	80016f0 <HAL_GetTick>
 80055c8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 80055ca:	e00b      	b.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055cc:	f7fc f890 	bl	80016f0 <HAL_GetTick>
 80055d0:	4602      	mov	r2, r0
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	1ad3      	subs	r3, r2, r3
 80055d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80055da:	4293      	cmp	r3, r2
 80055dc:	d902      	bls.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 80055de:	2303      	movs	r3, #3
 80055e0:	74fb      	strb	r3, [r7, #19]
            break;
 80055e2:	e004      	b.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 80055e4:	f7ff feb4 	bl	8005350 <LL_RCC_LSE_IsReady>
 80055e8:	4603      	mov	r3, r0
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d1ee      	bne.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 80055ee:	7cfb      	ldrb	r3, [r7, #19]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d105      	bne.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055f8:	4618      	mov	r0, r3
 80055fa:	f7ff ff5b 	bl	80054b4 <LL_RCC_SetRTCClockSource>
 80055fe:	e004      	b.n	800560a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005600:	7cfb      	ldrb	r3, [r7, #19]
 8005602:	74bb      	strb	r3, [r7, #18]
 8005604:	e001      	b.n	800560a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005606:	7cfb      	ldrb	r3, [r7, #19]
 8005608:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f003 0301 	and.w	r3, r3, #1
 8005612:	2b00      	cmp	r3, #0
 8005614:	d004      	beq.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	4618      	mov	r0, r3
 800561c:	f7ff fea9 	bl	8005372 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 0302 	and.w	r3, r3, #2
 8005628:	2b00      	cmp	r3, #0
 800562a:	d004      	beq.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	4618      	mov	r0, r3
 8005632:	f7ff fe9e 	bl	8005372 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f003 0320 	and.w	r3, r3, #32
 800563e:	2b00      	cmp	r3, #0
 8005640:	d004      	beq.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	691b      	ldr	r3, [r3, #16]
 8005646:	4618      	mov	r0, r3
 8005648:	f7ff fec0 	bl	80053cc <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005654:	2b00      	cmp	r3, #0
 8005656:	d004      	beq.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6a1b      	ldr	r3, [r3, #32]
 800565c:	4618      	mov	r0, r3
 800565e:	f7ff fee6 	bl	800542e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800566a:	2b00      	cmp	r3, #0
 800566c:	d004      	beq.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005672:	4618      	mov	r0, r3
 8005674:	f7ff fedb 	bl	800542e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005680:	2b00      	cmp	r3, #0
 8005682:	d004      	beq.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005688:	4618      	mov	r0, r3
 800568a:	f7ff fed0 	bl	800542e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005696:	2b00      	cmp	r3, #0
 8005698:	d004      	beq.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	695b      	ldr	r3, [r3, #20]
 800569e:	4618      	mov	r0, r3
 80056a0:	f7ff fea9 	bl	80053f6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d004      	beq.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	699b      	ldr	r3, [r3, #24]
 80056b4:	4618      	mov	r0, r3
 80056b6:	f7ff fe9e 	bl	80053f6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d004      	beq.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	69db      	ldr	r3, [r3, #28]
 80056ca:	4618      	mov	r0, r3
 80056cc:	f7ff fe93 	bl	80053f6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 0310 	and.w	r3, r3, #16
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d011      	beq.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	4618      	mov	r0, r3
 80056e2:	f7ff fe5e 	bl	80053a2 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	68db      	ldr	r3, [r3, #12]
 80056ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056ee:	d107      	bne.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 80056f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056f4:	68db      	ldr	r3, [r3, #12]
 80056f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80056fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80056fe:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005708:	2b00      	cmp	r3, #0
 800570a:	d010      	beq.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005710:	4618      	mov	r0, r3
 8005712:	f7ff fea5 	bl	8005460 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800571a:	2b00      	cmp	r3, #0
 800571c:	d107      	bne.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800571e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005728:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800572c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005736:	2b00      	cmp	r3, #0
 8005738:	d011      	beq.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800573e:	4618      	mov	r0, r3
 8005740:	f7ff fea3 	bl	800548a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005748:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800574c:	d107      	bne.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800574e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005758:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800575c:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 800575e:	7cbb      	ldrb	r3, [r7, #18]
}
 8005760:	4618      	mov	r0, r3
 8005762:	3718      	adds	r7, #24
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}
 8005768:	58000400 	.word	0x58000400

0800576c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b084      	sub	sp, #16
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d068      	beq.n	8005850 <HAL_RTC_Init+0xe4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005784:	b2db      	uxtb	r3, r3
 8005786:	2b00      	cmp	r3, #0
 8005788:	d106      	bne.n	8005798 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2200      	movs	r2, #0
 800578e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f7fb fd0e 	bl	80011b4 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2202      	movs	r2, #2
 800579c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80057a0:	4b2e      	ldr	r3, [pc, #184]	; (800585c <HAL_RTC_Init+0xf0>)
 80057a2:	22ca      	movs	r2, #202	; 0xca
 80057a4:	625a      	str	r2, [r3, #36]	; 0x24
 80057a6:	4b2d      	ldr	r3, [pc, #180]	; (800585c <HAL_RTC_Init+0xf0>)
 80057a8:	2253      	movs	r2, #83	; 0x53
 80057aa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f000 fa0f 	bl	8005bd0 <RTC_EnterInitMode>
 80057b2:	4603      	mov	r3, r0
 80057b4:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 80057b6:	7bfb      	ldrb	r3, [r7, #15]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d13f      	bne.n	800583c <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 80057bc:	4b27      	ldr	r3, [pc, #156]	; (800585c <HAL_RTC_Init+0xf0>)
 80057be:	699b      	ldr	r3, [r3, #24]
 80057c0:	4a26      	ldr	r2, [pc, #152]	; (800585c <HAL_RTC_Init+0xf0>)
 80057c2:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 80057c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057ca:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 80057cc:	4b23      	ldr	r3, [pc, #140]	; (800585c <HAL_RTC_Init+0xf0>)
 80057ce:	699a      	ldr	r2, [r3, #24]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6859      	ldr	r1, [r3, #4]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	691b      	ldr	r3, [r3, #16]
 80057d8:	4319      	orrs	r1, r3
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	699b      	ldr	r3, [r3, #24]
 80057de:	430b      	orrs	r3, r1
 80057e0:	491e      	ldr	r1, [pc, #120]	; (800585c <HAL_RTC_Init+0xf0>)
 80057e2:	4313      	orrs	r3, r2
 80057e4:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	68da      	ldr	r2, [r3, #12]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	041b      	lsls	r3, r3, #16
 80057f0:	491a      	ldr	r1, [pc, #104]	; (800585c <HAL_RTC_Init+0xf0>)
 80057f2:	4313      	orrs	r3, r2
 80057f4:	610b      	str	r3, [r1, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 80057f6:	4b19      	ldr	r3, [pc, #100]	; (800585c <HAL_RTC_Init+0xf0>)
 80057f8:	68db      	ldr	r3, [r3, #12]
 80057fa:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005806:	430b      	orrs	r3, r1
 8005808:	4914      	ldr	r1, [pc, #80]	; (800585c <HAL_RTC_Init+0xf0>)
 800580a:	4313      	orrs	r3, r2
 800580c:	60cb      	str	r3, [r1, #12]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f000 fa12 	bl	8005c38 <RTC_ExitInitMode>
 8005814:	4603      	mov	r3, r0
 8005816:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8005818:	7bfb      	ldrb	r3, [r7, #15]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d10e      	bne.n	800583c <HAL_RTC_Init+0xd0>
      {
        MODIFY_REG(RTC->CR, \
 800581e:	4b0f      	ldr	r3, [pc, #60]	; (800585c <HAL_RTC_Init+0xf0>)
 8005820:	699b      	ldr	r3, [r3, #24]
 8005822:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6a19      	ldr	r1, [r3, #32]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	69db      	ldr	r3, [r3, #28]
 800582e:	4319      	orrs	r1, r3
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	695b      	ldr	r3, [r3, #20]
 8005834:	430b      	orrs	r3, r1
 8005836:	4909      	ldr	r1, [pc, #36]	; (800585c <HAL_RTC_Init+0xf0>)
 8005838:	4313      	orrs	r3, r2
 800583a:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800583c:	4b07      	ldr	r3, [pc, #28]	; (800585c <HAL_RTC_Init+0xf0>)
 800583e:	22ff      	movs	r2, #255	; 0xff
 8005840:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 8005842:	7bfb      	ldrb	r3, [r7, #15]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d103      	bne.n	8005850 <HAL_RTC_Init+0xe4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2201      	movs	r2, #1
 800584c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 8005850:	7bfb      	ldrb	r3, [r7, #15]
}
 8005852:	4618      	mov	r0, r3
 8005854:	3710      	adds	r7, #16
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}
 800585a:	bf00      	nop
 800585c:	40002800 	.word	0x40002800

08005860 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005860:	b590      	push	{r4, r7, lr}
 8005862:	b087      	sub	sp, #28
 8005864:	af00      	add	r7, sp, #0
 8005866:	60f8      	str	r0, [r7, #12]
 8005868:	60b9      	str	r1, [r7, #8]
 800586a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800586c:	2300      	movs	r3, #0
 800586e:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005876:	2b01      	cmp	r3, #1
 8005878:	d101      	bne.n	800587e <HAL_RTC_SetAlarm_IT+0x1e>
 800587a:	2302      	movs	r3, #2
 800587c:	e0f3      	b.n	8005a66 <HAL_RTC_SetAlarm_IT+0x206>
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2201      	movs	r2, #1
 8005882:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2202      	movs	r2, #2
 800588a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 800588e:	4b78      	ldr	r3, [pc, #480]	; (8005a70 <HAL_RTC_SetAlarm_IT+0x210>)
 8005890:	68db      	ldr	r3, [r3, #12]
 8005892:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005896:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800589e:	d06a      	beq.n	8005976 <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d13a      	bne.n	800591c <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80058a6:	4b72      	ldr	r3, [pc, #456]	; (8005a70 <HAL_RTC_SetAlarm_IT+0x210>)
 80058a8:	699b      	ldr	r3, [r3, #24]
 80058aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d102      	bne.n	80058b8 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	2200      	movs	r2, #0
 80058b6:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	695b      	ldr	r3, [r3, #20]
 80058bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	781b      	ldrb	r3, [r3, #0]
 80058c4:	4618      	mov	r0, r3
 80058c6:	f000 f9f5 	bl	8005cb4 <RTC_ByteToBcd2>
 80058ca:	4603      	mov	r3, r0
 80058cc:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	785b      	ldrb	r3, [r3, #1]
 80058d2:	4618      	mov	r0, r3
 80058d4:	f000 f9ee 	bl	8005cb4 <RTC_ByteToBcd2>
 80058d8:	4603      	mov	r3, r0
 80058da:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80058dc:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	789b      	ldrb	r3, [r3, #2]
 80058e2:	4618      	mov	r0, r3
 80058e4:	f000 f9e6 	bl	8005cb4 <RTC_ByteToBcd2>
 80058e8:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80058ea:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	78db      	ldrb	r3, [r3, #3]
 80058f2:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80058f4:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80058fe:	4618      	mov	r0, r3
 8005900:	f000 f9d8 	bl	8005cb4 <RTC_ByteToBcd2>
 8005904:	4603      	mov	r3, r0
 8005906:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005908:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005910:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005916:	4313      	orrs	r3, r2
 8005918:	617b      	str	r3, [r7, #20]
 800591a:	e02c      	b.n	8005976 <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	695b      	ldr	r3, [r3, #20]
 8005920:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 8005924:	d00d      	beq.n	8005942 <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	695b      	ldr	r3, [r3, #20]
 800592a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800592e:	d008      	beq.n	8005942 <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8005930:	4b4f      	ldr	r3, [pc, #316]	; (8005a70 <HAL_RTC_SetAlarm_IT+0x210>)
 8005932:	699b      	ldr	r3, [r3, #24]
 8005934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005938:	2b00      	cmp	r3, #0
 800593a:	d102      	bne.n	8005942 <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	2200      	movs	r2, #0
 8005940:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	781b      	ldrb	r3, [r3, #0]
 8005946:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	785b      	ldrb	r3, [r3, #1]
 800594c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800594e:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005950:	68ba      	ldr	r2, [r7, #8]
 8005952:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005954:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	78db      	ldrb	r3, [r3, #3]
 800595a:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800595c:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005964:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005966:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800596c:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005972:	4313      	orrs	r3, r2
 8005974:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005976:	4b3e      	ldr	r3, [pc, #248]	; (8005a70 <HAL_RTC_SetAlarm_IT+0x210>)
 8005978:	22ca      	movs	r2, #202	; 0xca
 800597a:	625a      	str	r2, [r3, #36]	; 0x24
 800597c:	4b3c      	ldr	r3, [pc, #240]	; (8005a70 <HAL_RTC_SetAlarm_IT+0x210>)
 800597e:	2253      	movs	r2, #83	; 0x53
 8005980:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005986:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800598a:	d12c      	bne.n	80059e6 <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 800598c:	4b38      	ldr	r3, [pc, #224]	; (8005a70 <HAL_RTC_SetAlarm_IT+0x210>)
 800598e:	699b      	ldr	r3, [r3, #24]
 8005990:	4a37      	ldr	r2, [pc, #220]	; (8005a70 <HAL_RTC_SetAlarm_IT+0x210>)
 8005992:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005996:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8005998:	4b35      	ldr	r3, [pc, #212]	; (8005a70 <HAL_RTC_SetAlarm_IT+0x210>)
 800599a:	2201      	movs	r2, #1
 800599c:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059a4:	d107      	bne.n	80059b6 <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	699a      	ldr	r2, [r3, #24]
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	69db      	ldr	r3, [r3, #28]
 80059ae:	4930      	ldr	r1, [pc, #192]	; (8005a70 <HAL_RTC_SetAlarm_IT+0x210>)
 80059b0:	4313      	orrs	r3, r2
 80059b2:	644b      	str	r3, [r1, #68]	; 0x44
 80059b4:	e006      	b.n	80059c4 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 80059b6:	4a2e      	ldr	r2, [pc, #184]	; (8005a70 <HAL_RTC_SetAlarm_IT+0x210>)
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 80059bc:	4a2c      	ldr	r2, [pc, #176]	; (8005a70 <HAL_RTC_SetAlarm_IT+0x210>)
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	699b      	ldr	r3, [r3, #24]
 80059c2:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 80059c4:	4a2a      	ldr	r2, [pc, #168]	; (8005a70 <HAL_RTC_SetAlarm_IT+0x210>)
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059d0:	f043 0201 	orr.w	r2, r3, #1
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80059d8:	4b25      	ldr	r3, [pc, #148]	; (8005a70 <HAL_RTC_SetAlarm_IT+0x210>)
 80059da:	699b      	ldr	r3, [r3, #24]
 80059dc:	4a24      	ldr	r2, [pc, #144]	; (8005a70 <HAL_RTC_SetAlarm_IT+0x210>)
 80059de:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 80059e2:	6193      	str	r3, [r2, #24]
 80059e4:	e02b      	b.n	8005a3e <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80059e6:	4b22      	ldr	r3, [pc, #136]	; (8005a70 <HAL_RTC_SetAlarm_IT+0x210>)
 80059e8:	699b      	ldr	r3, [r3, #24]
 80059ea:	4a21      	ldr	r2, [pc, #132]	; (8005a70 <HAL_RTC_SetAlarm_IT+0x210>)
 80059ec:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 80059f0:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80059f2:	4b1f      	ldr	r3, [pc, #124]	; (8005a70 <HAL_RTC_SetAlarm_IT+0x210>)
 80059f4:	2202      	movs	r2, #2
 80059f6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059fe:	d107      	bne.n	8005a10 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	699a      	ldr	r2, [r3, #24]
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	69db      	ldr	r3, [r3, #28]
 8005a08:	4919      	ldr	r1, [pc, #100]	; (8005a70 <HAL_RTC_SetAlarm_IT+0x210>)
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005a0e:	e006      	b.n	8005a1e <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8005a10:	4a17      	ldr	r2, [pc, #92]	; (8005a70 <HAL_RTC_SetAlarm_IT+0x210>)
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8005a16:	4a16      	ldr	r2, [pc, #88]	; (8005a70 <HAL_RTC_SetAlarm_IT+0x210>)
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	699b      	ldr	r3, [r3, #24]
 8005a1c:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8005a1e:	4a14      	ldr	r2, [pc, #80]	; (8005a70 <HAL_RTC_SetAlarm_IT+0x210>)
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a2a:	f043 0202 	orr.w	r2, r3, #2
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8005a32:	4b0f      	ldr	r3, [pc, #60]	; (8005a70 <HAL_RTC_SetAlarm_IT+0x210>)
 8005a34:	699b      	ldr	r3, [r3, #24]
 8005a36:	4a0e      	ldr	r2, [pc, #56]	; (8005a70 <HAL_RTC_SetAlarm_IT+0x210>)
 8005a38:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 8005a3c:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8005a3e:	4b0d      	ldr	r3, [pc, #52]	; (8005a74 <HAL_RTC_SetAlarm_IT+0x214>)
 8005a40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a44:	4a0b      	ldr	r2, [pc, #44]	; (8005a74 <HAL_RTC_SetAlarm_IT+0x214>)
 8005a46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a4a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a4e:	4b08      	ldr	r3, [pc, #32]	; (8005a70 <HAL_RTC_SetAlarm_IT+0x210>)
 8005a50:	22ff      	movs	r2, #255	; 0xff
 8005a52:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2201      	movs	r2, #1
 8005a58:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005a64:	2300      	movs	r3, #0
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	371c      	adds	r7, #28
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd90      	pop	{r4, r7, pc}
 8005a6e:	bf00      	nop
 8005a70:	40002800 	.word	0x40002800
 8005a74:	58000800 	.word	0x58000800

08005a78 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
 8005a80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d101      	bne.n	8005a90 <HAL_RTC_DeactivateAlarm+0x18>
 8005a8c:	2302      	movs	r3, #2
 8005a8e:	e048      	b.n	8005b22 <HAL_RTC_DeactivateAlarm+0xaa>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2201      	movs	r2, #1
 8005a94:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2202      	movs	r2, #2
 8005a9c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005aa0:	4b22      	ldr	r3, [pc, #136]	; (8005b2c <HAL_RTC_DeactivateAlarm+0xb4>)
 8005aa2:	22ca      	movs	r2, #202	; 0xca
 8005aa4:	625a      	str	r2, [r3, #36]	; 0x24
 8005aa6:	4b21      	ldr	r3, [pc, #132]	; (8005b2c <HAL_RTC_DeactivateAlarm+0xb4>)
 8005aa8:	2253      	movs	r2, #83	; 0x53
 8005aaa:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ab2:	d115      	bne.n	8005ae0 <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8005ab4:	4b1d      	ldr	r3, [pc, #116]	; (8005b2c <HAL_RTC_DeactivateAlarm+0xb4>)
 8005ab6:	699b      	ldr	r3, [r3, #24]
 8005ab8:	4a1c      	ldr	r2, [pc, #112]	; (8005b2c <HAL_RTC_DeactivateAlarm+0xb4>)
 8005aba:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005abe:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8005ac0:	4b1a      	ldr	r3, [pc, #104]	; (8005b2c <HAL_RTC_DeactivateAlarm+0xb4>)
 8005ac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ac4:	4a19      	ldr	r2, [pc, #100]	; (8005b2c <HAL_RTC_DeactivateAlarm+0xb4>)
 8005ac6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005aca:	6453      	str	r3, [r2, #68]	; 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ad0:	f023 0201 	bic.w	r2, r3, #1
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8005ad8:	4b14      	ldr	r3, [pc, #80]	; (8005b2c <HAL_RTC_DeactivateAlarm+0xb4>)
 8005ada:	2201      	movs	r2, #1
 8005adc:	65da      	str	r2, [r3, #92]	; 0x5c
 8005ade:	e014      	b.n	8005b0a <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8005ae0:	4b12      	ldr	r3, [pc, #72]	; (8005b2c <HAL_RTC_DeactivateAlarm+0xb4>)
 8005ae2:	699b      	ldr	r3, [r3, #24]
 8005ae4:	4a11      	ldr	r2, [pc, #68]	; (8005b2c <HAL_RTC_DeactivateAlarm+0xb4>)
 8005ae6:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8005aea:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8005aec:	4b0f      	ldr	r3, [pc, #60]	; (8005b2c <HAL_RTC_DeactivateAlarm+0xb4>)
 8005aee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005af0:	4a0e      	ldr	r2, [pc, #56]	; (8005b2c <HAL_RTC_DeactivateAlarm+0xb4>)
 8005af2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005af6:	64d3      	str	r3, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005afc:	f023 0202 	bic.w	r2, r3, #2
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8005b04:	4b09      	ldr	r3, [pc, #36]	; (8005b2c <HAL_RTC_DeactivateAlarm+0xb4>)
 8005b06:	2202      	movs	r2, #2
 8005b08:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b0a:	4b08      	ldr	r3, [pc, #32]	; (8005b2c <HAL_RTC_DeactivateAlarm+0xb4>)
 8005b0c:	22ff      	movs	r2, #255	; 0xff
 8005b0e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2201      	movs	r2, #1
 8005b14:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005b20:	2300      	movs	r3, #0
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	370c      	adds	r7, #12
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bc80      	pop	{r7}
 8005b2a:	4770      	bx	lr
 8005b2c:	40002800 	.word	0x40002800

08005b30 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b084      	sub	sp, #16
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8005b38:	4b11      	ldr	r3, [pc, #68]	; (8005b80 <HAL_RTC_AlarmIRQHandler+0x50>)
 8005b3a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b40:	4013      	ands	r3, r2
 8005b42:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f003 0301 	and.w	r3, r3, #1
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d005      	beq.n	8005b5a <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8005b4e:	4b0c      	ldr	r3, [pc, #48]	; (8005b80 <HAL_RTC_AlarmIRQHandler+0x50>)
 8005b50:	2201      	movs	r2, #1
 8005b52:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f7fb ff41 	bl	80019dc <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	f003 0302 	and.w	r3, r3, #2
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d005      	beq.n	8005b70 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8005b64:	4b06      	ldr	r3, [pc, #24]	; (8005b80 <HAL_RTC_AlarmIRQHandler+0x50>)
 8005b66:	2202      	movs	r2, #2
 8005b68:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f000 f94a 	bl	8005e04 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2201      	movs	r2, #1
 8005b74:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8005b78:	bf00      	nop
 8005b7a:	3710      	adds	r7, #16
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}
 8005b80:	40002800 	.word	0x40002800

08005b84 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b084      	sub	sp, #16
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8005b8c:	4b0f      	ldr	r3, [pc, #60]	; (8005bcc <HAL_RTC_WaitForSynchro+0x48>)
 8005b8e:	68db      	ldr	r3, [r3, #12]
 8005b90:	4a0e      	ldr	r2, [pc, #56]	; (8005bcc <HAL_RTC_WaitForSynchro+0x48>)
 8005b92:	f023 0320 	bic.w	r3, r3, #32
 8005b96:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8005b98:	f7fb fdaa 	bl	80016f0 <HAL_GetTick>
 8005b9c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8005b9e:	e009      	b.n	8005bb4 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005ba0:	f7fb fda6 	bl	80016f0 <HAL_GetTick>
 8005ba4:	4602      	mov	r2, r0
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	1ad3      	subs	r3, r2, r3
 8005baa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005bae:	d901      	bls.n	8005bb4 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8005bb0:	2303      	movs	r3, #3
 8005bb2:	e006      	b.n	8005bc2 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8005bb4:	4b05      	ldr	r3, [pc, #20]	; (8005bcc <HAL_RTC_WaitForSynchro+0x48>)
 8005bb6:	68db      	ldr	r3, [r3, #12]
 8005bb8:	f003 0320 	and.w	r3, r3, #32
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d0ef      	beq.n	8005ba0 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8005bc0:	2300      	movs	r3, #0
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3710      	adds	r7, #16
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	bf00      	nop
 8005bcc:	40002800 	.word	0x40002800

08005bd0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b084      	sub	sp, #16
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005bd8:	2300      	movs	r3, #0
 8005bda:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8005bdc:	4b15      	ldr	r3, [pc, #84]	; (8005c34 <RTC_EnterInitMode+0x64>)
 8005bde:	68db      	ldr	r3, [r3, #12]
 8005be0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d120      	bne.n	8005c2a <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005be8:	4b12      	ldr	r3, [pc, #72]	; (8005c34 <RTC_EnterInitMode+0x64>)
 8005bea:	68db      	ldr	r3, [r3, #12]
 8005bec:	4a11      	ldr	r2, [pc, #68]	; (8005c34 <RTC_EnterInitMode+0x64>)
 8005bee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bf2:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8005bf4:	f7fb fd7c 	bl	80016f0 <HAL_GetTick>
 8005bf8:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005bfa:	e00d      	b.n	8005c18 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005bfc:	f7fb fd78 	bl	80016f0 <HAL_GetTick>
 8005c00:	4602      	mov	r2, r0
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	1ad3      	subs	r3, r2, r3
 8005c06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c0a:	d905      	bls.n	8005c18 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8005c0c:	2303      	movs	r3, #3
 8005c0e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2203      	movs	r2, #3
 8005c14:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005c18:	4b06      	ldr	r3, [pc, #24]	; (8005c34 <RTC_EnterInitMode+0x64>)
 8005c1a:	68db      	ldr	r3, [r3, #12]
 8005c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d102      	bne.n	8005c2a <RTC_EnterInitMode+0x5a>
 8005c24:	7bfb      	ldrb	r3, [r7, #15]
 8005c26:	2b03      	cmp	r3, #3
 8005c28:	d1e8      	bne.n	8005bfc <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8005c2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3710      	adds	r7, #16
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}
 8005c34:	40002800 	.word	0x40002800

08005c38 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b084      	sub	sp, #16
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c40:	2300      	movs	r3, #0
 8005c42:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005c44:	4b1a      	ldr	r3, [pc, #104]	; (8005cb0 <RTC_ExitInitMode+0x78>)
 8005c46:	68db      	ldr	r3, [r3, #12]
 8005c48:	4a19      	ldr	r2, [pc, #100]	; (8005cb0 <RTC_ExitInitMode+0x78>)
 8005c4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c4e:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005c50:	4b17      	ldr	r3, [pc, #92]	; (8005cb0 <RTC_ExitInitMode+0x78>)
 8005c52:	699b      	ldr	r3, [r3, #24]
 8005c54:	f003 0320 	and.w	r3, r3, #32
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d10c      	bne.n	8005c76 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f7ff ff91 	bl	8005b84 <HAL_RTC_WaitForSynchro>
 8005c62:	4603      	mov	r3, r0
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d01e      	beq.n	8005ca6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2203      	movs	r2, #3
 8005c6c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8005c70:	2303      	movs	r3, #3
 8005c72:	73fb      	strb	r3, [r7, #15]
 8005c74:	e017      	b.n	8005ca6 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005c76:	4b0e      	ldr	r3, [pc, #56]	; (8005cb0 <RTC_ExitInitMode+0x78>)
 8005c78:	699b      	ldr	r3, [r3, #24]
 8005c7a:	4a0d      	ldr	r2, [pc, #52]	; (8005cb0 <RTC_ExitInitMode+0x78>)
 8005c7c:	f023 0320 	bic.w	r3, r3, #32
 8005c80:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f7ff ff7e 	bl	8005b84 <HAL_RTC_WaitForSynchro>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d005      	beq.n	8005c9a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2203      	movs	r2, #3
 8005c92:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8005c96:	2303      	movs	r3, #3
 8005c98:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005c9a:	4b05      	ldr	r3, [pc, #20]	; (8005cb0 <RTC_ExitInitMode+0x78>)
 8005c9c:	699b      	ldr	r3, [r3, #24]
 8005c9e:	4a04      	ldr	r2, [pc, #16]	; (8005cb0 <RTC_ExitInitMode+0x78>)
 8005ca0:	f043 0320 	orr.w	r3, r3, #32
 8005ca4:	6193      	str	r3, [r2, #24]
  }

  return status;
 8005ca6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3710      	adds	r7, #16
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}
 8005cb0:	40002800 	.word	0x40002800

08005cb4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b085      	sub	sp, #20
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	4603      	mov	r3, r0
 8005cbc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8005cc2:	79fb      	ldrb	r3, [r7, #7]
 8005cc4:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8005cc6:	e005      	b.n	8005cd4 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	3301      	adds	r3, #1
 8005ccc:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8005cce:	7afb      	ldrb	r3, [r7, #11]
 8005cd0:	3b0a      	subs	r3, #10
 8005cd2:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8005cd4:	7afb      	ldrb	r3, [r7, #11]
 8005cd6:	2b09      	cmp	r3, #9
 8005cd8:	d8f6      	bhi.n	8005cc8 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	b2db      	uxtb	r3, r3
 8005cde:	011b      	lsls	r3, r3, #4
 8005ce0:	b2da      	uxtb	r2, r3
 8005ce2:	7afb      	ldrb	r3, [r7, #11]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	b2db      	uxtb	r3, r3
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3714      	adds	r7, #20
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bc80      	pop	{r7}
 8005cf0:	4770      	bx	lr
	...

08005cf4 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b083      	sub	sp, #12
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d101      	bne.n	8005d0a <HAL_RTCEx_EnableBypassShadow+0x16>
 8005d06:	2302      	movs	r3, #2
 8005d08:	e01f      	b.n	8005d4a <HAL_RTCEx_EnableBypassShadow+0x56>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2202      	movs	r2, #2
 8005d16:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005d1a:	4b0e      	ldr	r3, [pc, #56]	; (8005d54 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8005d1c:	22ca      	movs	r2, #202	; 0xca
 8005d1e:	625a      	str	r2, [r3, #36]	; 0x24
 8005d20:	4b0c      	ldr	r3, [pc, #48]	; (8005d54 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8005d22:	2253      	movs	r2, #83	; 0x53
 8005d24:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005d26:	4b0b      	ldr	r3, [pc, #44]	; (8005d54 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8005d28:	699b      	ldr	r3, [r3, #24]
 8005d2a:	4a0a      	ldr	r2, [pc, #40]	; (8005d54 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8005d2c:	f043 0320 	orr.w	r3, r3, #32
 8005d30:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d32:	4b08      	ldr	r3, [pc, #32]	; (8005d54 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8005d34:	22ff      	movs	r2, #255	; 0xff
 8005d36:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2200      	movs	r2, #0
 8005d44:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005d48:	2300      	movs	r3, #0
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	370c      	adds	r7, #12
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bc80      	pop	{r7}
 8005d52:	4770      	bx	lr
 8005d54:	40002800 	.word	0x40002800

08005d58 <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b083      	sub	sp, #12
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005d66:	2b01      	cmp	r3, #1
 8005d68:	d101      	bne.n	8005d6e <HAL_RTCEx_SetSSRU_IT+0x16>
 8005d6a:	2302      	movs	r3, #2
 8005d6c:	e027      	b.n	8005dbe <HAL_RTCEx_SetSSRU_IT+0x66>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2201      	movs	r2, #1
 8005d72:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2202      	movs	r2, #2
 8005d7a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005d7e:	4b12      	ldr	r3, [pc, #72]	; (8005dc8 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8005d80:	22ca      	movs	r2, #202	; 0xca
 8005d82:	625a      	str	r2, [r3, #36]	; 0x24
 8005d84:	4b10      	ldr	r3, [pc, #64]	; (8005dc8 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8005d86:	2253      	movs	r2, #83	; 0x53
 8005d88:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 8005d8a:	4b0f      	ldr	r3, [pc, #60]	; (8005dc8 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8005d8c:	699b      	ldr	r3, [r3, #24]
 8005d8e:	4a0e      	ldr	r2, [pc, #56]	; (8005dc8 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8005d90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d94:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 8005d96:	4b0d      	ldr	r3, [pc, #52]	; (8005dcc <HAL_RTCEx_SetSSRU_IT+0x74>)
 8005d98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d9c:	4a0b      	ldr	r2, [pc, #44]	; (8005dcc <HAL_RTCEx_SetSSRU_IT+0x74>)
 8005d9e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005da2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005da6:	4b08      	ldr	r3, [pc, #32]	; (8005dc8 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8005da8:	22ff      	movs	r2, #255	; 0xff
 8005daa:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2201      	movs	r2, #1
 8005db0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2200      	movs	r2, #0
 8005db8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005dbc:	2300      	movs	r3, #0
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	370c      	adds	r7, #12
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bc80      	pop	{r7}
 8005dc6:	4770      	bx	lr
 8005dc8:	40002800 	.word	0x40002800
 8005dcc:	58000800 	.word	0x58000800

08005dd0 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b082      	sub	sp, #8
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8005dd8:	4b09      	ldr	r3, [pc, #36]	; (8005e00 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8005dda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d005      	beq.n	8005df0 <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 8005de4:	4b06      	ldr	r3, [pc, #24]	; (8005e00 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8005de6:	2240      	movs	r2, #64	; 0x40
 8005de8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f7fb fe00 	bl	80019f0 <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8005df8:	bf00      	nop
 8005dfa:	3708      	adds	r7, #8
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}
 8005e00:	40002800 	.word	0x40002800

08005e04 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b083      	sub	sp, #12
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8005e0c:	bf00      	nop
 8005e0e:	370c      	adds	r7, #12
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bc80      	pop	{r7}
 8005e14:	4770      	bx	lr
	...

08005e18 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b087      	sub	sp, #28
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	60f8      	str	r0, [r7, #12]
 8005e20:	60b9      	str	r1, [r7, #8]
 8005e22:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8005e24:	4b07      	ldr	r3, [pc, #28]	; (8005e44 <HAL_RTCEx_BKUPWrite+0x2c>)
 8005e26:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	009b      	lsls	r3, r3, #2
 8005e2c:	697a      	ldr	r2, [r7, #20]
 8005e2e:	4413      	add	r3, r2
 8005e30:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	687a      	ldr	r2, [r7, #4]
 8005e36:	601a      	str	r2, [r3, #0]
}
 8005e38:	bf00      	nop
 8005e3a:	371c      	adds	r7, #28
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bc80      	pop	{r7}
 8005e40:	4770      	bx	lr
 8005e42:	bf00      	nop
 8005e44:	4000b100 	.word	0x4000b100

08005e48 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b085      	sub	sp, #20
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8005e52:	4b07      	ldr	r3, [pc, #28]	; (8005e70 <HAL_RTCEx_BKUPRead+0x28>)
 8005e54:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	009b      	lsls	r3, r3, #2
 8005e5a:	68fa      	ldr	r2, [r7, #12]
 8005e5c:	4413      	add	r3, r2
 8005e5e:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3714      	adds	r7, #20
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bc80      	pop	{r7}
 8005e6c:	4770      	bx	lr
 8005e6e:	bf00      	nop
 8005e70:	4000b100 	.word	0x4000b100

08005e74 <LL_PWR_SetRadioBusyTrigger>:
{
 8005e74:	b480      	push	{r7}
 8005e76:	b083      	sub	sp, #12
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8005e7c:	4b06      	ldr	r3, [pc, #24]	; (8005e98 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005e84:	4904      	ldr	r1, [pc, #16]	; (8005e98 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	608b      	str	r3, [r1, #8]
}
 8005e8c:	bf00      	nop
 8005e8e:	370c      	adds	r7, #12
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bc80      	pop	{r7}
 8005e94:	4770      	bx	lr
 8005e96:	bf00      	nop
 8005e98:	58000400 	.word	0x58000400

08005e9c <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005ea0:	4b05      	ldr	r3, [pc, #20]	; (8005eb8 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8005ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ea6:	4a04      	ldr	r2, [pc, #16]	; (8005eb8 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8005ea8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005eac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005eb0:	bf00      	nop
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bc80      	pop	{r7}
 8005eb6:	4770      	bx	lr
 8005eb8:	58000400 	.word	0x58000400

08005ebc <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005ec0:	4b05      	ldr	r3, [pc, #20]	; (8005ed8 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8005ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ec6:	4a04      	ldr	r2, [pc, #16]	; (8005ed8 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8005ec8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005ecc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005ed0:	bf00      	nop
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bc80      	pop	{r7}
 8005ed6:	4770      	bx	lr
 8005ed8:	58000400 	.word	0x58000400

08005edc <LL_PWR_ClearFlag_RFBUSY>:
{
 8005edc:	b480      	push	{r7}
 8005ede:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8005ee0:	4b03      	ldr	r3, [pc, #12]	; (8005ef0 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8005ee2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ee6:	619a      	str	r2, [r3, #24]
}
 8005ee8:	bf00      	nop
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bc80      	pop	{r7}
 8005eee:	4770      	bx	lr
 8005ef0:	58000400 	.word	0x58000400

08005ef4 <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8005ef8:	4b06      	ldr	r3, [pc, #24]	; (8005f14 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8005efa:	695b      	ldr	r3, [r3, #20]
 8005efc:	f003 0302 	and.w	r3, r3, #2
 8005f00:	2b02      	cmp	r3, #2
 8005f02:	d101      	bne.n	8005f08 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8005f04:	2301      	movs	r3, #1
 8005f06:	e000      	b.n	8005f0a <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8005f08:	2300      	movs	r3, #0
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bc80      	pop	{r7}
 8005f10:	4770      	bx	lr
 8005f12:	bf00      	nop
 8005f14:	58000400 	.word	0x58000400

08005f18 <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 8005f18:	b480      	push	{r7}
 8005f1a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8005f1c:	4b06      	ldr	r3, [pc, #24]	; (8005f38 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8005f1e:	695b      	ldr	r3, [r3, #20]
 8005f20:	f003 0304 	and.w	r3, r3, #4
 8005f24:	2b04      	cmp	r3, #4
 8005f26:	d101      	bne.n	8005f2c <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8005f28:	2301      	movs	r3, #1
 8005f2a:	e000      	b.n	8005f2e <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8005f2c:	2300      	movs	r3, #0
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bc80      	pop	{r7}
 8005f34:	4770      	bx	lr
 8005f36:	bf00      	nop
 8005f38:	58000400 	.word	0x58000400

08005f3c <LL_RCC_RF_DisableReset>:
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8005f40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f4c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005f50:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005f54:	bf00      	nop
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bc80      	pop	{r7}
 8005f5a:	4770      	bx	lr

08005f5c <LL_RCC_IsRFUnderReset>:
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8005f60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f70:	d101      	bne.n	8005f76 <LL_RCC_IsRFUnderReset+0x1a>
 8005f72:	2301      	movs	r3, #1
 8005f74:	e000      	b.n	8005f78 <LL_RCC_IsRFUnderReset+0x1c>
 8005f76:	2300      	movs	r3, #0
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bc80      	pop	{r7}
 8005f7e:	4770      	bx	lr

08005f80 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b083      	sub	sp, #12
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8005f88:	4b06      	ldr	r3, [pc, #24]	; (8005fa4 <LL_EXTI_EnableIT_32_63+0x24>)
 8005f8a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005f8e:	4905      	ldr	r1, [pc, #20]	; (8005fa4 <LL_EXTI_EnableIT_32_63+0x24>)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	4313      	orrs	r3, r2
 8005f94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8005f98:	bf00      	nop
 8005f9a:	370c      	adds	r7, #12
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bc80      	pop	{r7}
 8005fa0:	4770      	bx	lr
 8005fa2:	bf00      	nop
 8005fa4:	58000800 	.word	0x58000800

08005fa8 <HAL_SUBGHZ_Init>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b084      	sub	sp, #16
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d103      	bne.n	8005fbe <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	73fb      	strb	r3, [r7, #15]
    return status;
 8005fba:	7bfb      	ldrb	r3, [r7, #15]
 8005fbc:	e04b      	b.n	8006056 <HAL_SUBGHZ_Init+0xae>
  }
  else
  {
    status = HAL_OK;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	799b      	ldrb	r3, [r3, #6]
 8005fc6:	b2db      	uxtb	r3, r3
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d105      	bne.n	8005fd8 <HAL_SUBGHZ_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f7fb f9f6 	bl	80013c4 <HAL_SUBGHZ_MspInit>
#endif /* USE_HAL_ SUBGHZ_REGISTER_CALLBACKS */
  }

  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2202      	movs	r2, #2
 8005fdc:	719a      	strb	r2, [r3, #6]

  /* De-asserts the reset signal of the Radio peripheral */
  LL_RCC_RF_DisableReset();
 8005fde:	f7ff ffad 	bl	8005f3c <LL_RCC_RF_DisableReset>

  /* Verify that Radio in reset status flag is set */
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005fe2:	4b1f      	ldr	r3, [pc, #124]	; (8006060 <HAL_SUBGHZ_Init+0xb8>)
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	4613      	mov	r3, r2
 8005fe8:	00db      	lsls	r3, r3, #3
 8005fea:	1a9b      	subs	r3, r3, r2
 8005fec:	009b      	lsls	r3, r3, #2
 8005fee:	0cdb      	lsrs	r3, r3, #19
 8005ff0:	2264      	movs	r2, #100	; 0x64
 8005ff2:	fb02 f303 	mul.w	r3, r2, r3
 8005ff6:	60bb      	str	r3, [r7, #8]

  do
  {
    if (count == 0U)
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d105      	bne.n	800600a <HAL_SUBGHZ_Init+0x62>
    {
      status  = HAL_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	73fb      	strb	r3, [r7, #15]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2201      	movs	r2, #1
 8006006:	609a      	str	r2, [r3, #8]
      break;
 8006008:	e007      	b.n	800601a <HAL_SUBGHZ_Init+0x72>
    }
    count--;
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	3b01      	subs	r3, #1
 800600e:	60bb      	str	r3, [r7, #8]
  } while (LL_RCC_IsRFUnderReset() != 0UL);
 8006010:	f7ff ffa4 	bl	8005f5c <LL_RCC_IsRFUnderReset>
 8006014:	4603      	mov	r3, r0
 8006016:	2b00      	cmp	r3, #0
 8006018:	d1ee      	bne.n	8005ff8 <HAL_SUBGHZ_Init+0x50>

  /* Asserts the reset signal of the Radio peripheral */
  LL_PWR_UnselectSUBGHZSPI_NSS();
 800601a:	f7ff ff3f 	bl	8005e9c <LL_PWR_UnselectSUBGHZSPI_NSS>

  /* Enable wakeup signal of the Radio peripheral */
  LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
  /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 800601e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006022:	f7ff ffad 	bl	8005f80 <LL_EXTI_EnableIT_32_63>

  /* Enable wakeup signal of the Radio peripheral */
  LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8006026:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800602a:	f7ff ff23 	bl	8005e74 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 800602e:	f7ff ff55 	bl	8005edc <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8006032:	7bfb      	ldrb	r3, [r7, #15]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d10a      	bne.n	800604e <HAL_SUBGHZ_Init+0xa6>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4618      	mov	r0, r3
 800603e:	f000 faad 	bl	800659c <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2201      	movs	r2, #1
 8006046:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2200      	movs	r2, #0
 800604c:	609a      	str	r2, [r3, #8]
  }
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2201      	movs	r2, #1
 8006052:	719a      	strb	r2, [r3, #6]

  return status;
 8006054:	7bfb      	ldrb	r3, [r7, #15]
}
 8006056:	4618      	mov	r0, r3
 8006058:	3710      	adds	r7, #16
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}
 800605e:	bf00      	nop
 8006060:	20000000 	.word	0x20000000

08006064 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b086      	sub	sp, #24
 8006068:	af00      	add	r7, sp, #0
 800606a:	60f8      	str	r0, [r7, #12]
 800606c:	607a      	str	r2, [r7, #4]
 800606e:	461a      	mov	r2, r3
 8006070:	460b      	mov	r3, r1
 8006072:	817b      	strh	r3, [r7, #10]
 8006074:	4613      	mov	r3, r2
 8006076:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	799b      	ldrb	r3, [r3, #6]
 800607c:	b2db      	uxtb	r3, r3
 800607e:	2b01      	cmp	r3, #1
 8006080:	d14a      	bne.n	8006118 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	795b      	ldrb	r3, [r3, #5]
 8006086:	2b01      	cmp	r3, #1
 8006088:	d101      	bne.n	800608e <HAL_SUBGHZ_WriteRegisters+0x2a>
 800608a:	2302      	movs	r3, #2
 800608c:	e045      	b.n	800611a <HAL_SUBGHZ_WriteRegisters+0xb6>
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2201      	movs	r2, #1
 8006092:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2202      	movs	r2, #2
 8006098:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800609a:	68f8      	ldr	r0, [r7, #12]
 800609c:	f000 fb4c 	bl	8006738 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80060a0:	f7ff ff0c 	bl	8005ebc <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 80060a4:	210d      	movs	r1, #13
 80060a6:	68f8      	ldr	r0, [r7, #12]
 80060a8:	f000 fa98 	bl	80065dc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80060ac:	897b      	ldrh	r3, [r7, #10]
 80060ae:	0a1b      	lsrs	r3, r3, #8
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	b2db      	uxtb	r3, r3
 80060b4:	4619      	mov	r1, r3
 80060b6:	68f8      	ldr	r0, [r7, #12]
 80060b8:	f000 fa90 	bl	80065dc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80060bc:	897b      	ldrh	r3, [r7, #10]
 80060be:	b2db      	uxtb	r3, r3
 80060c0:	4619      	mov	r1, r3
 80060c2:	68f8      	ldr	r0, [r7, #12]
 80060c4:	f000 fa8a 	bl	80065dc <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80060c8:	2300      	movs	r3, #0
 80060ca:	82bb      	strh	r3, [r7, #20]
 80060cc:	e00a      	b.n	80060e4 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80060ce:	8abb      	ldrh	r3, [r7, #20]
 80060d0:	687a      	ldr	r2, [r7, #4]
 80060d2:	4413      	add	r3, r2
 80060d4:	781b      	ldrb	r3, [r3, #0]
 80060d6:	4619      	mov	r1, r3
 80060d8:	68f8      	ldr	r0, [r7, #12]
 80060da:	f000 fa7f 	bl	80065dc <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80060de:	8abb      	ldrh	r3, [r7, #20]
 80060e0:	3301      	adds	r3, #1
 80060e2:	82bb      	strh	r3, [r7, #20]
 80060e4:	8aba      	ldrh	r2, [r7, #20]
 80060e6:	893b      	ldrh	r3, [r7, #8]
 80060e8:	429a      	cmp	r2, r3
 80060ea:	d3f0      	bcc.n	80060ce <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80060ec:	f7ff fed6 	bl	8005e9c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80060f0:	68f8      	ldr	r0, [r7, #12]
 80060f2:	f000 fb45 	bl	8006780 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	689b      	ldr	r3, [r3, #8]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d002      	beq.n	8006104 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	75fb      	strb	r3, [r7, #23]
 8006102:	e001      	b.n	8006108 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8006104:	2300      	movs	r3, #0
 8006106:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2201      	movs	r2, #1
 800610c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2200      	movs	r2, #0
 8006112:	715a      	strb	r2, [r3, #5]

    return status;
 8006114:	7dfb      	ldrb	r3, [r7, #23]
 8006116:	e000      	b.n	800611a <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8006118:	2302      	movs	r3, #2
  }
}
 800611a:	4618      	mov	r0, r3
 800611c:	3718      	adds	r7, #24
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}

08006122 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8006122:	b580      	push	{r7, lr}
 8006124:	b088      	sub	sp, #32
 8006126:	af00      	add	r7, sp, #0
 8006128:	60f8      	str	r0, [r7, #12]
 800612a:	607a      	str	r2, [r7, #4]
 800612c:	461a      	mov	r2, r3
 800612e:	460b      	mov	r3, r1
 8006130:	817b      	strh	r3, [r7, #10]
 8006132:	4613      	mov	r3, r2
 8006134:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	799b      	ldrb	r3, [r3, #6]
 800613e:	b2db      	uxtb	r3, r3
 8006140:	2b01      	cmp	r3, #1
 8006142:	d14a      	bne.n	80061da <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	795b      	ldrb	r3, [r3, #5]
 8006148:	2b01      	cmp	r3, #1
 800614a:	d101      	bne.n	8006150 <HAL_SUBGHZ_ReadRegisters+0x2e>
 800614c:	2302      	movs	r3, #2
 800614e:	e045      	b.n	80061dc <HAL_SUBGHZ_ReadRegisters+0xba>
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2201      	movs	r2, #1
 8006154:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006156:	68f8      	ldr	r0, [r7, #12]
 8006158:	f000 faee 	bl	8006738 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800615c:	f7ff feae 	bl	8005ebc <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8006160:	211d      	movs	r1, #29
 8006162:	68f8      	ldr	r0, [r7, #12]
 8006164:	f000 fa3a 	bl	80065dc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8006168:	897b      	ldrh	r3, [r7, #10]
 800616a:	0a1b      	lsrs	r3, r3, #8
 800616c:	b29b      	uxth	r3, r3
 800616e:	b2db      	uxtb	r3, r3
 8006170:	4619      	mov	r1, r3
 8006172:	68f8      	ldr	r0, [r7, #12]
 8006174:	f000 fa32 	bl	80065dc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8006178:	897b      	ldrh	r3, [r7, #10]
 800617a:	b2db      	uxtb	r3, r3
 800617c:	4619      	mov	r1, r3
 800617e:	68f8      	ldr	r0, [r7, #12]
 8006180:	f000 fa2c 	bl	80065dc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8006184:	2100      	movs	r1, #0
 8006186:	68f8      	ldr	r0, [r7, #12]
 8006188:	f000 fa28 	bl	80065dc <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800618c:	2300      	movs	r3, #0
 800618e:	82fb      	strh	r3, [r7, #22]
 8006190:	e009      	b.n	80061a6 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8006192:	69b9      	ldr	r1, [r7, #24]
 8006194:	68f8      	ldr	r0, [r7, #12]
 8006196:	f000 fa77 	bl	8006688 <SUBGHZSPI_Receive>
      pData++;
 800619a:	69bb      	ldr	r3, [r7, #24]
 800619c:	3301      	adds	r3, #1
 800619e:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80061a0:	8afb      	ldrh	r3, [r7, #22]
 80061a2:	3301      	adds	r3, #1
 80061a4:	82fb      	strh	r3, [r7, #22]
 80061a6:	8afa      	ldrh	r2, [r7, #22]
 80061a8:	893b      	ldrh	r3, [r7, #8]
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d3f1      	bcc.n	8006192 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80061ae:	f7ff fe75 	bl	8005e9c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80061b2:	68f8      	ldr	r0, [r7, #12]
 80061b4:	f000 fae4 	bl	8006780 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d002      	beq.n	80061c6 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 80061c0:	2301      	movs	r3, #1
 80061c2:	77fb      	strb	r3, [r7, #31]
 80061c4:	e001      	b.n	80061ca <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 80061c6:	2300      	movs	r3, #0
 80061c8:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2201      	movs	r2, #1
 80061ce:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2200      	movs	r2, #0
 80061d4:	715a      	strb	r2, [r3, #5]

    return status;
 80061d6:	7ffb      	ldrb	r3, [r7, #31]
 80061d8:	e000      	b.n	80061dc <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 80061da:	2302      	movs	r3, #2
  }
}
 80061dc:	4618      	mov	r0, r3
 80061de:	3720      	adds	r7, #32
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}

080061e4 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b086      	sub	sp, #24
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	60f8      	str	r0, [r7, #12]
 80061ec:	607a      	str	r2, [r7, #4]
 80061ee:	461a      	mov	r2, r3
 80061f0:	460b      	mov	r3, r1
 80061f2:	72fb      	strb	r3, [r7, #11]
 80061f4:	4613      	mov	r3, r2
 80061f6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	799b      	ldrb	r3, [r3, #6]
 80061fc:	b2db      	uxtb	r3, r3
 80061fe:	2b01      	cmp	r3, #1
 8006200:	d14a      	bne.n	8006298 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	795b      	ldrb	r3, [r3, #5]
 8006206:	2b01      	cmp	r3, #1
 8006208:	d101      	bne.n	800620e <HAL_SUBGHZ_ExecSetCmd+0x2a>
 800620a:	2302      	movs	r3, #2
 800620c:	e045      	b.n	800629a <HAL_SUBGHZ_ExecSetCmd+0xb6>
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	2201      	movs	r2, #1
 8006212:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006214:	68f8      	ldr	r0, [r7, #12]
 8006216:	f000 fa8f 	bl	8006738 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 800621a:	7afb      	ldrb	r3, [r7, #11]
 800621c:	2b84      	cmp	r3, #132	; 0x84
 800621e:	d002      	beq.n	8006226 <HAL_SUBGHZ_ExecSetCmd+0x42>
 8006220:	7afb      	ldrb	r3, [r7, #11]
 8006222:	2b94      	cmp	r3, #148	; 0x94
 8006224:	d103      	bne.n	800622e <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2201      	movs	r2, #1
 800622a:	711a      	strb	r2, [r3, #4]
 800622c:	e002      	b.n	8006234 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2200      	movs	r2, #0
 8006232:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006234:	f7ff fe42 	bl	8005ebc <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8006238:	7afb      	ldrb	r3, [r7, #11]
 800623a:	4619      	mov	r1, r3
 800623c:	68f8      	ldr	r0, [r7, #12]
 800623e:	f000 f9cd 	bl	80065dc <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8006242:	2300      	movs	r3, #0
 8006244:	82bb      	strh	r3, [r7, #20]
 8006246:	e00a      	b.n	800625e <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8006248:	8abb      	ldrh	r3, [r7, #20]
 800624a:	687a      	ldr	r2, [r7, #4]
 800624c:	4413      	add	r3, r2
 800624e:	781b      	ldrb	r3, [r3, #0]
 8006250:	4619      	mov	r1, r3
 8006252:	68f8      	ldr	r0, [r7, #12]
 8006254:	f000 f9c2 	bl	80065dc <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006258:	8abb      	ldrh	r3, [r7, #20]
 800625a:	3301      	adds	r3, #1
 800625c:	82bb      	strh	r3, [r7, #20]
 800625e:	8aba      	ldrh	r2, [r7, #20]
 8006260:	893b      	ldrh	r3, [r7, #8]
 8006262:	429a      	cmp	r2, r3
 8006264:	d3f0      	bcc.n	8006248 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006266:	f7ff fe19 	bl	8005e9c <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 800626a:	7afb      	ldrb	r3, [r7, #11]
 800626c:	2b84      	cmp	r3, #132	; 0x84
 800626e:	d002      	beq.n	8006276 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006270:	68f8      	ldr	r0, [r7, #12]
 8006272:	f000 fa85 	bl	8006780 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	689b      	ldr	r3, [r3, #8]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d002      	beq.n	8006284 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 800627e:	2301      	movs	r3, #1
 8006280:	75fb      	strb	r3, [r7, #23]
 8006282:	e001      	b.n	8006288 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8006284:	2300      	movs	r3, #0
 8006286:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2201      	movs	r2, #1
 800628c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2200      	movs	r2, #0
 8006292:	715a      	strb	r2, [r3, #5]

    return status;
 8006294:	7dfb      	ldrb	r3, [r7, #23]
 8006296:	e000      	b.n	800629a <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8006298:	2302      	movs	r3, #2
  }
}
 800629a:	4618      	mov	r0, r3
 800629c:	3718      	adds	r7, #24
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}

080062a2 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80062a2:	b580      	push	{r7, lr}
 80062a4:	b088      	sub	sp, #32
 80062a6:	af00      	add	r7, sp, #0
 80062a8:	60f8      	str	r0, [r7, #12]
 80062aa:	607a      	str	r2, [r7, #4]
 80062ac:	461a      	mov	r2, r3
 80062ae:	460b      	mov	r3, r1
 80062b0:	72fb      	strb	r3, [r7, #11]
 80062b2:	4613      	mov	r3, r2
 80062b4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	799b      	ldrb	r3, [r3, #6]
 80062be:	b2db      	uxtb	r3, r3
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	d13d      	bne.n	8006340 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	795b      	ldrb	r3, [r3, #5]
 80062c8:	2b01      	cmp	r3, #1
 80062ca:	d101      	bne.n	80062d0 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 80062cc:	2302      	movs	r3, #2
 80062ce:	e038      	b.n	8006342 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2201      	movs	r2, #1
 80062d4:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80062d6:	68f8      	ldr	r0, [r7, #12]
 80062d8:	f000 fa2e 	bl	8006738 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80062dc:	f7ff fdee 	bl	8005ebc <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80062e0:	7afb      	ldrb	r3, [r7, #11]
 80062e2:	4619      	mov	r1, r3
 80062e4:	68f8      	ldr	r0, [r7, #12]
 80062e6:	f000 f979 	bl	80065dc <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80062ea:	2100      	movs	r1, #0
 80062ec:	68f8      	ldr	r0, [r7, #12]
 80062ee:	f000 f975 	bl	80065dc <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80062f2:	2300      	movs	r3, #0
 80062f4:	82fb      	strh	r3, [r7, #22]
 80062f6:	e009      	b.n	800630c <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80062f8:	69b9      	ldr	r1, [r7, #24]
 80062fa:	68f8      	ldr	r0, [r7, #12]
 80062fc:	f000 f9c4 	bl	8006688 <SUBGHZSPI_Receive>
      pData++;
 8006300:	69bb      	ldr	r3, [r7, #24]
 8006302:	3301      	adds	r3, #1
 8006304:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8006306:	8afb      	ldrh	r3, [r7, #22]
 8006308:	3301      	adds	r3, #1
 800630a:	82fb      	strh	r3, [r7, #22]
 800630c:	8afa      	ldrh	r2, [r7, #22]
 800630e:	893b      	ldrh	r3, [r7, #8]
 8006310:	429a      	cmp	r2, r3
 8006312:	d3f1      	bcc.n	80062f8 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006314:	f7ff fdc2 	bl	8005e9c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006318:	68f8      	ldr	r0, [r7, #12]
 800631a:	f000 fa31 	bl	8006780 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d002      	beq.n	800632c <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8006326:	2301      	movs	r3, #1
 8006328:	77fb      	strb	r3, [r7, #31]
 800632a:	e001      	b.n	8006330 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 800632c:	2300      	movs	r3, #0
 800632e:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2201      	movs	r2, #1
 8006334:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2200      	movs	r2, #0
 800633a:	715a      	strb	r2, [r3, #5]

    return status;
 800633c:	7ffb      	ldrb	r3, [r7, #31]
 800633e:	e000      	b.n	8006342 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006340:	2302      	movs	r3, #2
  }
}
 8006342:	4618      	mov	r0, r3
 8006344:	3720      	adds	r7, #32
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}

0800634a <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 800634a:	b580      	push	{r7, lr}
 800634c:	b086      	sub	sp, #24
 800634e:	af00      	add	r7, sp, #0
 8006350:	60f8      	str	r0, [r7, #12]
 8006352:	607a      	str	r2, [r7, #4]
 8006354:	461a      	mov	r2, r3
 8006356:	460b      	mov	r3, r1
 8006358:	72fb      	strb	r3, [r7, #11]
 800635a:	4613      	mov	r3, r2
 800635c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	799b      	ldrb	r3, [r3, #6]
 8006362:	b2db      	uxtb	r3, r3
 8006364:	2b01      	cmp	r3, #1
 8006366:	d13e      	bne.n	80063e6 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	795b      	ldrb	r3, [r3, #5]
 800636c:	2b01      	cmp	r3, #1
 800636e:	d101      	bne.n	8006374 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8006370:	2302      	movs	r3, #2
 8006372:	e039      	b.n	80063e8 <HAL_SUBGHZ_WriteBuffer+0x9e>
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2201      	movs	r2, #1
 8006378:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800637a:	68f8      	ldr	r0, [r7, #12]
 800637c:	f000 f9dc 	bl	8006738 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006380:	f7ff fd9c 	bl	8005ebc <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8006384:	210e      	movs	r1, #14
 8006386:	68f8      	ldr	r0, [r7, #12]
 8006388:	f000 f928 	bl	80065dc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800638c:	7afb      	ldrb	r3, [r7, #11]
 800638e:	4619      	mov	r1, r3
 8006390:	68f8      	ldr	r0, [r7, #12]
 8006392:	f000 f923 	bl	80065dc <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8006396:	2300      	movs	r3, #0
 8006398:	82bb      	strh	r3, [r7, #20]
 800639a:	e00a      	b.n	80063b2 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800639c:	8abb      	ldrh	r3, [r7, #20]
 800639e:	687a      	ldr	r2, [r7, #4]
 80063a0:	4413      	add	r3, r2
 80063a2:	781b      	ldrb	r3, [r3, #0]
 80063a4:	4619      	mov	r1, r3
 80063a6:	68f8      	ldr	r0, [r7, #12]
 80063a8:	f000 f918 	bl	80065dc <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80063ac:	8abb      	ldrh	r3, [r7, #20]
 80063ae:	3301      	adds	r3, #1
 80063b0:	82bb      	strh	r3, [r7, #20]
 80063b2:	8aba      	ldrh	r2, [r7, #20]
 80063b4:	893b      	ldrh	r3, [r7, #8]
 80063b6:	429a      	cmp	r2, r3
 80063b8:	d3f0      	bcc.n	800639c <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80063ba:	f7ff fd6f 	bl	8005e9c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80063be:	68f8      	ldr	r0, [r7, #12]
 80063c0:	f000 f9de 	bl	8006780 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	689b      	ldr	r3, [r3, #8]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d002      	beq.n	80063d2 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 80063cc:	2301      	movs	r3, #1
 80063ce:	75fb      	strb	r3, [r7, #23]
 80063d0:	e001      	b.n	80063d6 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 80063d2:	2300      	movs	r3, #0
 80063d4:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2201      	movs	r2, #1
 80063da:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2200      	movs	r2, #0
 80063e0:	715a      	strb	r2, [r3, #5]

    return status;
 80063e2:	7dfb      	ldrb	r3, [r7, #23]
 80063e4:	e000      	b.n	80063e8 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80063e6:	2302      	movs	r3, #2
  }
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	3718      	adds	r7, #24
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd80      	pop	{r7, pc}

080063f0 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b088      	sub	sp, #32
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	60f8      	str	r0, [r7, #12]
 80063f8:	607a      	str	r2, [r7, #4]
 80063fa:	461a      	mov	r2, r3
 80063fc:	460b      	mov	r3, r1
 80063fe:	72fb      	strb	r3, [r7, #11]
 8006400:	4613      	mov	r3, r2
 8006402:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	799b      	ldrb	r3, [r3, #6]
 800640c:	b2db      	uxtb	r3, r3
 800640e:	2b01      	cmp	r3, #1
 8006410:	d141      	bne.n	8006496 <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	795b      	ldrb	r3, [r3, #5]
 8006416:	2b01      	cmp	r3, #1
 8006418:	d101      	bne.n	800641e <HAL_SUBGHZ_ReadBuffer+0x2e>
 800641a:	2302      	movs	r3, #2
 800641c:	e03c      	b.n	8006498 <HAL_SUBGHZ_ReadBuffer+0xa8>
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	2201      	movs	r2, #1
 8006422:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006424:	68f8      	ldr	r0, [r7, #12]
 8006426:	f000 f987 	bl	8006738 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800642a:	f7ff fd47 	bl	8005ebc <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 800642e:	211e      	movs	r1, #30
 8006430:	68f8      	ldr	r0, [r7, #12]
 8006432:	f000 f8d3 	bl	80065dc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8006436:	7afb      	ldrb	r3, [r7, #11]
 8006438:	4619      	mov	r1, r3
 800643a:	68f8      	ldr	r0, [r7, #12]
 800643c:	f000 f8ce 	bl	80065dc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8006440:	2100      	movs	r1, #0
 8006442:	68f8      	ldr	r0, [r7, #12]
 8006444:	f000 f8ca 	bl	80065dc <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8006448:	2300      	movs	r3, #0
 800644a:	82fb      	strh	r3, [r7, #22]
 800644c:	e009      	b.n	8006462 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800644e:	69b9      	ldr	r1, [r7, #24]
 8006450:	68f8      	ldr	r0, [r7, #12]
 8006452:	f000 f919 	bl	8006688 <SUBGHZSPI_Receive>
      pData++;
 8006456:	69bb      	ldr	r3, [r7, #24]
 8006458:	3301      	adds	r3, #1
 800645a:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800645c:	8afb      	ldrh	r3, [r7, #22]
 800645e:	3301      	adds	r3, #1
 8006460:	82fb      	strh	r3, [r7, #22]
 8006462:	8afa      	ldrh	r2, [r7, #22]
 8006464:	893b      	ldrh	r3, [r7, #8]
 8006466:	429a      	cmp	r2, r3
 8006468:	d3f1      	bcc.n	800644e <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800646a:	f7ff fd17 	bl	8005e9c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800646e:	68f8      	ldr	r0, [r7, #12]
 8006470:	f000 f986 	bl	8006780 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	689b      	ldr	r3, [r3, #8]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d002      	beq.n	8006482 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	77fb      	strb	r3, [r7, #31]
 8006480:	e001      	b.n	8006486 <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8006482:	2300      	movs	r3, #0
 8006484:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2201      	movs	r2, #1
 800648a:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2200      	movs	r2, #0
 8006490:	715a      	strb	r2, [r3, #5]

    return status;
 8006492:	7ffb      	ldrb	r3, [r7, #31]
 8006494:	e000      	b.n	8006498 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8006496:	2302      	movs	r3, #2
  }
}
 8006498:	4618      	mov	r0, r3
 800649a:	3720      	adds	r7, #32
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}

080064a0 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b084      	sub	sp, #16
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2] = {0};
 80064a8:	2300      	movs	r3, #0
 80064aa:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2);
 80064ac:	f107 020c 	add.w	r2, r7, #12
 80064b0:	2302      	movs	r3, #2
 80064b2:	2112      	movs	r1, #18
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f7ff fef4 	bl	80062a2 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0];
 80064ba:	7b3b      	ldrb	r3, [r7, #12]
 80064bc:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8) | tmpisr[1];
 80064be:	89fb      	ldrh	r3, [r7, #14]
 80064c0:	021b      	lsls	r3, r3, #8
 80064c2:	b21a      	sxth	r2, r3
 80064c4:	7b7b      	ldrb	r3, [r7, #13]
 80064c6:	b21b      	sxth	r3, r3
 80064c8:	4313      	orrs	r3, r2
 80064ca:	b21b      	sxth	r3, r3
 80064cc:	81fb      	strh	r3, [r7, #14]

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 80064ce:	89fb      	ldrh	r3, [r7, #14]
 80064d0:	f003 0301 	and.w	r3, r3, #1
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d002      	beq.n	80064de <HAL_SUBGHZ_IRQHandler+0x3e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f011 f8a5 	bl	8017628 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 80064de:	89fb      	ldrh	r3, [r7, #14]
 80064e0:	085b      	lsrs	r3, r3, #1
 80064e2:	f003 0301 	and.w	r3, r3, #1
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d002      	beq.n	80064f0 <HAL_SUBGHZ_IRQHandler+0x50>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f011 f8aa 	bl	8017644 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 80064f0:	89fb      	ldrh	r3, [r7, #14]
 80064f2:	089b      	lsrs	r3, r3, #2
 80064f4:	f003 0301 	and.w	r3, r3, #1
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d002      	beq.n	8006502 <HAL_SUBGHZ_IRQHandler+0x62>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f011 f8f9 	bl	80176f4 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8006502:	89fb      	ldrh	r3, [r7, #14]
 8006504:	08db      	lsrs	r3, r3, #3
 8006506:	f003 0301 	and.w	r3, r3, #1
 800650a:	2b00      	cmp	r3, #0
 800650c:	d002      	beq.n	8006514 <HAL_SUBGHZ_IRQHandler+0x74>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f011 f8fe 	bl	8017710 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8006514:	89fb      	ldrh	r3, [r7, #14]
 8006516:	091b      	lsrs	r3, r3, #4
 8006518:	f003 0301 	and.w	r3, r3, #1
 800651c:	2b00      	cmp	r3, #0
 800651e:	d002      	beq.n	8006526 <HAL_SUBGHZ_IRQHandler+0x86>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f011 f903 	bl	801772c <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8006526:	89fb      	ldrh	r3, [r7, #14]
 8006528:	095b      	lsrs	r3, r3, #5
 800652a:	f003 0301 	and.w	r3, r3, #1
 800652e:	2b00      	cmp	r3, #0
 8006530:	d002      	beq.n	8006538 <HAL_SUBGHZ_IRQHandler+0x98>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f011 f8d0 	bl	80176d8 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8006538:	89fb      	ldrh	r3, [r7, #14]
 800653a:	099b      	lsrs	r3, r3, #6
 800653c:	f003 0301 	and.w	r3, r3, #1
 8006540:	2b00      	cmp	r3, #0
 8006542:	d002      	beq.n	800654a <HAL_SUBGHZ_IRQHandler+0xaa>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f011 f88b 	bl	8017660 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 800654a:	89fb      	ldrh	r3, [r7, #14]
 800654c:	09db      	lsrs	r3, r3, #7
 800654e:	f003 0301 	and.w	r3, r3, #1
 8006552:	2b00      	cmp	r3, #0
 8006554:	d00e      	beq.n	8006574 <HAL_SUBGHZ_IRQHandler+0xd4>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8006556:	89fb      	ldrh	r3, [r7, #14]
 8006558:	0a1b      	lsrs	r3, r3, #8
 800655a:	f003 0301 	and.w	r3, r3, #1
 800655e:	2b00      	cmp	r3, #0
 8006560:	d004      	beq.n	800656c <HAL_SUBGHZ_IRQHandler+0xcc>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8006562:	2101      	movs	r1, #1
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f011 f889 	bl	801767c <HAL_SUBGHZ_CADStatusCallback>
 800656a:	e003      	b.n	8006574 <HAL_SUBGHZ_IRQHandler+0xd4>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 800656c:	2100      	movs	r1, #0
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f011 f884 	bl	801767c <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8006574:	89fb      	ldrh	r3, [r7, #14]
 8006576:	0a5b      	lsrs	r3, r3, #9
 8006578:	f003 0301 	and.w	r3, r3, #1
 800657c:	2b00      	cmp	r3, #0
 800657e:	d002      	beq.n	8006586 <HAL_SUBGHZ_IRQHandler+0xe6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f011 f899 	bl	80176b8 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 8006586:	f107 020c 	add.w	r2, r7, #12
 800658a:	2302      	movs	r3, #2
 800658c:	2102      	movs	r1, #2
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f7ff fe28 	bl	80061e4 <HAL_SUBGHZ_ExecSetCmd>
}
 8006594:	bf00      	nop
 8006596:	3710      	adds	r7, #16
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}

0800659c <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 800659c:	b480      	push	{r7}
 800659e:	b083      	sub	sp, #12
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80065a4:	4b0c      	ldr	r3, [pc, #48]	; (80065d8 <SUBGHZSPI_Init+0x3c>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a0b      	ldr	r2, [pc, #44]	; (80065d8 <SUBGHZSPI_Init+0x3c>)
 80065aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065ae:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 80065b0:	4a09      	ldr	r2, [pc, #36]	; (80065d8 <SUBGHZSPI_Init+0x3c>)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 80065b8:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 80065ba:	4b07      	ldr	r3, [pc, #28]	; (80065d8 <SUBGHZSPI_Init+0x3c>)
 80065bc:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 80065c0:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80065c2:	4b05      	ldr	r3, [pc, #20]	; (80065d8 <SUBGHZSPI_Init+0x3c>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a04      	ldr	r2, [pc, #16]	; (80065d8 <SUBGHZSPI_Init+0x3c>)
 80065c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065cc:	6013      	str	r3, [r2, #0]
}
 80065ce:	bf00      	nop
 80065d0:	370c      	adds	r7, #12
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bc80      	pop	{r7}
 80065d6:	4770      	bx	lr
 80065d8:	58010000 	.word	0x58010000

080065dc <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 80065dc:	b480      	push	{r7}
 80065de:	b087      	sub	sp, #28
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	460b      	mov	r3, r1
 80065e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80065e8:	2300      	movs	r3, #0
 80065ea:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80065ec:	4b23      	ldr	r3, [pc, #140]	; (800667c <SUBGHZSPI_Transmit+0xa0>)
 80065ee:	681a      	ldr	r2, [r3, #0]
 80065f0:	4613      	mov	r3, r2
 80065f2:	00db      	lsls	r3, r3, #3
 80065f4:	1a9b      	subs	r3, r3, r2
 80065f6:	009b      	lsls	r3, r3, #2
 80065f8:	0cdb      	lsrs	r3, r3, #19
 80065fa:	2264      	movs	r2, #100	; 0x64
 80065fc:	fb02 f303 	mul.w	r3, r2, r3
 8006600:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d105      	bne.n	8006614 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8006608:	2301      	movs	r3, #1
 800660a:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2201      	movs	r2, #1
 8006610:	609a      	str	r2, [r3, #8]
      break;
 8006612:	e008      	b.n	8006626 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	3b01      	subs	r3, #1
 8006618:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800661a:	4b19      	ldr	r3, [pc, #100]	; (8006680 <SUBGHZSPI_Transmit+0xa4>)
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	f003 0302 	and.w	r3, r3, #2
 8006622:	2b02      	cmp	r3, #2
 8006624:	d1ed      	bne.n	8006602 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8006626:	4b17      	ldr	r3, [pc, #92]	; (8006684 <SUBGHZSPI_Transmit+0xa8>)
 8006628:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	78fa      	ldrb	r2, [r7, #3]
 800662e:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006630:	4b12      	ldr	r3, [pc, #72]	; (800667c <SUBGHZSPI_Transmit+0xa0>)
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	4613      	mov	r3, r2
 8006636:	00db      	lsls	r3, r3, #3
 8006638:	1a9b      	subs	r3, r3, r2
 800663a:	009b      	lsls	r3, r3, #2
 800663c:	0cdb      	lsrs	r3, r3, #19
 800663e:	2264      	movs	r2, #100	; 0x64
 8006640:	fb02 f303 	mul.w	r3, r2, r3
 8006644:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d105      	bne.n	8006658 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 800664c:	2301      	movs	r3, #1
 800664e:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2201      	movs	r2, #1
 8006654:	609a      	str	r2, [r3, #8]
      break;
 8006656:	e008      	b.n	800666a <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	3b01      	subs	r3, #1
 800665c:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800665e:	4b08      	ldr	r3, [pc, #32]	; (8006680 <SUBGHZSPI_Transmit+0xa4>)
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	f003 0301 	and.w	r3, r3, #1
 8006666:	2b01      	cmp	r3, #1
 8006668:	d1ed      	bne.n	8006646 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 800666a:	4b05      	ldr	r3, [pc, #20]	; (8006680 <SUBGHZSPI_Transmit+0xa4>)
 800666c:	68db      	ldr	r3, [r3, #12]

  return status;
 800666e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006670:	4618      	mov	r0, r3
 8006672:	371c      	adds	r7, #28
 8006674:	46bd      	mov	sp, r7
 8006676:	bc80      	pop	{r7}
 8006678:	4770      	bx	lr
 800667a:	bf00      	nop
 800667c:	20000000 	.word	0x20000000
 8006680:	58010000 	.word	0x58010000
 8006684:	5801000c 	.word	0x5801000c

08006688 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8006688:	b480      	push	{r7}
 800668a:	b087      	sub	sp, #28
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006692:	2300      	movs	r3, #0
 8006694:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006696:	4b25      	ldr	r3, [pc, #148]	; (800672c <SUBGHZSPI_Receive+0xa4>)
 8006698:	681a      	ldr	r2, [r3, #0]
 800669a:	4613      	mov	r3, r2
 800669c:	00db      	lsls	r3, r3, #3
 800669e:	1a9b      	subs	r3, r3, r2
 80066a0:	009b      	lsls	r3, r3, #2
 80066a2:	0cdb      	lsrs	r3, r3, #19
 80066a4:	2264      	movs	r2, #100	; 0x64
 80066a6:	fb02 f303 	mul.w	r3, r2, r3
 80066aa:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d105      	bne.n	80066be <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 80066b2:	2301      	movs	r3, #1
 80066b4:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2201      	movs	r2, #1
 80066ba:	609a      	str	r2, [r3, #8]
      break;
 80066bc:	e008      	b.n	80066d0 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	3b01      	subs	r3, #1
 80066c2:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 80066c4:	4b1a      	ldr	r3, [pc, #104]	; (8006730 <SUBGHZSPI_Receive+0xa8>)
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	f003 0302 	and.w	r3, r3, #2
 80066cc:	2b02      	cmp	r3, #2
 80066ce:	d1ed      	bne.n	80066ac <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 80066d0:	4b18      	ldr	r3, [pc, #96]	; (8006734 <SUBGHZSPI_Receive+0xac>)
 80066d2:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	22ff      	movs	r2, #255	; 0xff
 80066d8:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80066da:	4b14      	ldr	r3, [pc, #80]	; (800672c <SUBGHZSPI_Receive+0xa4>)
 80066dc:	681a      	ldr	r2, [r3, #0]
 80066de:	4613      	mov	r3, r2
 80066e0:	00db      	lsls	r3, r3, #3
 80066e2:	1a9b      	subs	r3, r3, r2
 80066e4:	009b      	lsls	r3, r3, #2
 80066e6:	0cdb      	lsrs	r3, r3, #19
 80066e8:	2264      	movs	r2, #100	; 0x64
 80066ea:	fb02 f303 	mul.w	r3, r2, r3
 80066ee:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d105      	bne.n	8006702 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 80066f6:	2301      	movs	r3, #1
 80066f8:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2201      	movs	r2, #1
 80066fe:	609a      	str	r2, [r3, #8]
      break;
 8006700:	e008      	b.n	8006714 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	3b01      	subs	r3, #1
 8006706:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8006708:	4b09      	ldr	r3, [pc, #36]	; (8006730 <SUBGHZSPI_Receive+0xa8>)
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	f003 0301 	and.w	r3, r3, #1
 8006710:	2b01      	cmp	r3, #1
 8006712:	d1ed      	bne.n	80066f0 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8006714:	4b06      	ldr	r3, [pc, #24]	; (8006730 <SUBGHZSPI_Receive+0xa8>)
 8006716:	68db      	ldr	r3, [r3, #12]
 8006718:	b2da      	uxtb	r2, r3
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	701a      	strb	r2, [r3, #0]

  return status;
 800671e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006720:	4618      	mov	r0, r3
 8006722:	371c      	adds	r7, #28
 8006724:	46bd      	mov	sp, r7
 8006726:	bc80      	pop	{r7}
 8006728:	4770      	bx	lr
 800672a:	bf00      	nop
 800672c:	20000000 	.word	0x20000000
 8006730:	58010000 	.word	0x58010000
 8006734:	5801000c 	.word	0x5801000c

08006738 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b084      	sub	sp, #16
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	791b      	ldrb	r3, [r3, #4]
 8006744:	2b01      	cmp	r3, #1
 8006746:	d111      	bne.n	800676c <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8006748:	4b0c      	ldr	r3, [pc, #48]	; (800677c <SUBGHZ_CheckDeviceReady+0x44>)
 800674a:	681a      	ldr	r2, [r3, #0]
 800674c:	4613      	mov	r3, r2
 800674e:	005b      	lsls	r3, r3, #1
 8006750:	4413      	add	r3, r2
 8006752:	00db      	lsls	r3, r3, #3
 8006754:	0c1b      	lsrs	r3, r3, #16
 8006756:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006758:	f7ff fbb0 	bl	8005ebc <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	3b01      	subs	r3, #1
 8006760:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d1f9      	bne.n	800675c <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006768:	f7ff fb98 	bl	8005e9c <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f000 f807 	bl	8006780 <SUBGHZ_WaitOnBusy>
 8006772:	4603      	mov	r3, r0
}
 8006774:	4618      	mov	r0, r3
 8006776:	3710      	adds	r7, #16
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}
 800677c:	20000000 	.word	0x20000000

08006780 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b086      	sub	sp, #24
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8006788:	2300      	movs	r3, #0
 800678a:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 800678c:	4b12      	ldr	r3, [pc, #72]	; (80067d8 <SUBGHZ_WaitOnBusy+0x58>)
 800678e:	681a      	ldr	r2, [r3, #0]
 8006790:	4613      	mov	r3, r2
 8006792:	005b      	lsls	r3, r3, #1
 8006794:	4413      	add	r3, r2
 8006796:	00db      	lsls	r3, r3, #3
 8006798:	0d1b      	lsrs	r3, r3, #20
 800679a:	2264      	movs	r2, #100	; 0x64
 800679c:	fb02 f303 	mul.w	r3, r2, r3
 80067a0:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 80067a2:	f7ff fbb9 	bl	8005f18 <LL_PWR_IsActiveFlag_RFBUSYMS>
 80067a6:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d105      	bne.n	80067ba <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 80067ae:	2301      	movs	r3, #1
 80067b0:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2202      	movs	r2, #2
 80067b6:	609a      	str	r2, [r3, #8]
      break;
 80067b8:	e009      	b.n	80067ce <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	3b01      	subs	r3, #1
 80067be:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 80067c0:	f7ff fb98 	bl	8005ef4 <LL_PWR_IsActiveFlag_RFBUSYS>
 80067c4:	4602      	mov	r2, r0
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	4013      	ands	r3, r2
 80067ca:	2b01      	cmp	r3, #1
 80067cc:	d0e9      	beq.n	80067a2 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 80067ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3718      	adds	r7, #24
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}
 80067d8:	20000000 	.word	0x20000000

080067dc <LL_RCC_GetUSARTClockSource>:
{
 80067dc:	b480      	push	{r7}
 80067de:	b083      	sub	sp, #12
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 80067e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067e8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	401a      	ands	r2, r3
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	041b      	lsls	r3, r3, #16
 80067f4:	4313      	orrs	r3, r2
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	370c      	adds	r7, #12
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bc80      	pop	{r7}
 80067fe:	4770      	bx	lr

08006800 <LL_RCC_GetLPUARTClockSource>:
{
 8006800:	b480      	push	{r7}
 8006802:	b083      	sub	sp, #12
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8006808:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800680c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	4013      	ands	r3, r2
}
 8006814:	4618      	mov	r0, r3
 8006816:	370c      	adds	r7, #12
 8006818:	46bd      	mov	sp, r7
 800681a:	bc80      	pop	{r7}
 800681c:	4770      	bx	lr

0800681e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800681e:	b580      	push	{r7, lr}
 8006820:	b082      	sub	sp, #8
 8006822:	af00      	add	r7, sp, #0
 8006824:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d101      	bne.n	8006830 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800682c:	2301      	movs	r3, #1
 800682e:	e042      	b.n	80068b6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006836:	2b00      	cmp	r3, #0
 8006838:	d106      	bne.n	8006848 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2200      	movs	r2, #0
 800683e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f7fb fa2c 	bl	8001ca0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2224      	movs	r2, #36	; 0x24
 800684c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	681a      	ldr	r2, [r3, #0]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f022 0201 	bic.w	r2, r2, #1
 800685e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f000 fc4b 	bl	80070fc <UART_SetConfig>
 8006866:	4603      	mov	r3, r0
 8006868:	2b01      	cmp	r3, #1
 800686a:	d101      	bne.n	8006870 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800686c:	2301      	movs	r3, #1
 800686e:	e022      	b.n	80068b6 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006874:	2b00      	cmp	r3, #0
 8006876:	d002      	beq.n	800687e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f000 fe8f 	bl	800759c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	685a      	ldr	r2, [r3, #4]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800688c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	689a      	ldr	r2, [r3, #8]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800689c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	681a      	ldr	r2, [r3, #0]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f042 0201 	orr.w	r2, r2, #1
 80068ac:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f000 ff15 	bl	80076de <UART_CheckIdleState>
 80068b4:	4603      	mov	r3, r0
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3708      	adds	r7, #8
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}
	...

080068c0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b08a      	sub	sp, #40	; 0x28
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	60f8      	str	r0, [r7, #12]
 80068c8:	60b9      	str	r1, [r7, #8]
 80068ca:	4613      	mov	r3, r2
 80068cc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068d4:	2b20      	cmp	r3, #32
 80068d6:	d142      	bne.n	800695e <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d002      	beq.n	80068e4 <HAL_UART_Receive_IT+0x24>
 80068de:	88fb      	ldrh	r3, [r7, #6]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d101      	bne.n	80068e8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80068e4:	2301      	movs	r3, #1
 80068e6:	e03b      	b.n	8006960 <HAL_UART_Receive_IT+0xa0>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80068ee:	2b01      	cmp	r3, #1
 80068f0:	d101      	bne.n	80068f6 <HAL_UART_Receive_IT+0x36>
 80068f2:	2302      	movs	r3, #2
 80068f4:	e034      	b.n	8006960 <HAL_UART_Receive_IT+0xa0>
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2201      	movs	r2, #1
 80068fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2200      	movs	r2, #0
 8006902:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a17      	ldr	r2, [pc, #92]	; (8006968 <HAL_UART_Receive_IT+0xa8>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d01f      	beq.n	800694e <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006918:	2b00      	cmp	r3, #0
 800691a:	d018      	beq.n	800694e <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	e853 3f00 	ldrex	r3, [r3]
 8006928:	613b      	str	r3, [r7, #16]
   return(result);
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006930:	627b      	str	r3, [r7, #36]	; 0x24
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	461a      	mov	r2, r3
 8006938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800693a:	623b      	str	r3, [r7, #32]
 800693c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800693e:	69f9      	ldr	r1, [r7, #28]
 8006940:	6a3a      	ldr	r2, [r7, #32]
 8006942:	e841 2300 	strex	r3, r2, [r1]
 8006946:	61bb      	str	r3, [r7, #24]
   return(result);
 8006948:	69bb      	ldr	r3, [r7, #24]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d1e6      	bne.n	800691c <HAL_UART_Receive_IT+0x5c>
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 800694e:	88fb      	ldrh	r3, [r7, #6]
 8006950:	461a      	mov	r2, r3
 8006952:	68b9      	ldr	r1, [r7, #8]
 8006954:	68f8      	ldr	r0, [r7, #12]
 8006956:	f000 ffd5 	bl	8007904 <UART_Start_Receive_IT>
 800695a:	4603      	mov	r3, r0
 800695c:	e000      	b.n	8006960 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800695e:	2302      	movs	r3, #2
  }
}
 8006960:	4618      	mov	r0, r3
 8006962:	3728      	adds	r7, #40	; 0x28
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}
 8006968:	40008000 	.word	0x40008000

0800696c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b08a      	sub	sp, #40	; 0x28
 8006970:	af00      	add	r7, sp, #0
 8006972:	60f8      	str	r0, [r7, #12]
 8006974:	60b9      	str	r1, [r7, #8]
 8006976:	4613      	mov	r3, r2
 8006978:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006980:	2b20      	cmp	r3, #32
 8006982:	d17a      	bne.n	8006a7a <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d002      	beq.n	8006990 <HAL_UART_Transmit_DMA+0x24>
 800698a:	88fb      	ldrh	r3, [r7, #6]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d101      	bne.n	8006994 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8006990:	2301      	movs	r3, #1
 8006992:	e073      	b.n	8006a7c <HAL_UART_Transmit_DMA+0x110>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800699a:	2b01      	cmp	r3, #1
 800699c:	d101      	bne.n	80069a2 <HAL_UART_Transmit_DMA+0x36>
 800699e:	2302      	movs	r3, #2
 80069a0:	e06c      	b.n	8006a7c <HAL_UART_Transmit_DMA+0x110>
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2201      	movs	r2, #1
 80069a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	68ba      	ldr	r2, [r7, #8]
 80069ae:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	88fa      	ldrh	r2, [r7, #6]
 80069b4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	88fa      	ldrh	r2, [r7, #6]
 80069bc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2200      	movs	r2, #0
 80069c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2221      	movs	r2, #33	; 0x21
 80069cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d02c      	beq.n	8006a32 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80069dc:	4a29      	ldr	r2, [pc, #164]	; (8006a84 <HAL_UART_Transmit_DMA+0x118>)
 80069de:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80069e4:	4a28      	ldr	r2, [pc, #160]	; (8006a88 <HAL_UART_Transmit_DMA+0x11c>)
 80069e6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80069ec:	4a27      	ldr	r2, [pc, #156]	; (8006a8c <HAL_UART_Transmit_DMA+0x120>)
 80069ee:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80069f4:	2200      	movs	r2, #0
 80069f6:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	6f98      	ldr	r0, [r3, #120]	; 0x78
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a00:	4619      	mov	r1, r3
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	3328      	adds	r3, #40	; 0x28
 8006a08:	461a      	mov	r2, r3
 8006a0a:	88fb      	ldrh	r3, [r7, #6]
 8006a0c:	f7fc fdf4 	bl	80035f8 <HAL_DMA_Start_IT>
 8006a10:	4603      	mov	r3, r0
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d00d      	beq.n	8006a32 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2210      	movs	r2, #16
 8006a1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2200      	movs	r2, #0
 8006a22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	2220      	movs	r2, #32
 8006a2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	e024      	b.n	8006a7c <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	2240      	movs	r2, #64	; 0x40
 8006a38:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	3308      	adds	r3, #8
 8006a48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	e853 3f00 	ldrex	r3, [r3]
 8006a50:	613b      	str	r3, [r7, #16]
   return(result);
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a58:	627b      	str	r3, [r7, #36]	; 0x24
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	3308      	adds	r3, #8
 8006a60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a62:	623a      	str	r2, [r7, #32]
 8006a64:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a66:	69f9      	ldr	r1, [r7, #28]
 8006a68:	6a3a      	ldr	r2, [r7, #32]
 8006a6a:	e841 2300 	strex	r3, r2, [r1]
 8006a6e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a70:	69bb      	ldr	r3, [r7, #24]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d1e5      	bne.n	8006a42 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 8006a76:	2300      	movs	r3, #0
 8006a78:	e000      	b.n	8006a7c <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 8006a7a:	2302      	movs	r3, #2
  }
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3728      	adds	r7, #40	; 0x28
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}
 8006a84:	08007c53 	.word	0x08007c53
 8006a88:	08007ced 	.word	0x08007ced
 8006a8c:	08007d09 	.word	0x08007d09

08006a90 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b0ba      	sub	sp, #232	; 0xe8
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	69db      	ldr	r3, [r3, #28]
 8006a9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	689b      	ldr	r3, [r3, #8]
 8006ab2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006ab6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006aba:	f640 030f 	movw	r3, #2063	; 0x80f
 8006abe:	4013      	ands	r3, r2
 8006ac0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006ac4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d11b      	bne.n	8006b04 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006acc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ad0:	f003 0320 	and.w	r3, r3, #32
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d015      	beq.n	8006b04 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006ad8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006adc:	f003 0320 	and.w	r3, r3, #32
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d105      	bne.n	8006af0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006ae4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ae8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d009      	beq.n	8006b04 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	f000 82d6 	beq.w	80070a6 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	4798      	blx	r3
      }
      return;
 8006b02:	e2d0      	b.n	80070a6 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006b04:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	f000 811f 	beq.w	8006d4c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006b0e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006b12:	4b8b      	ldr	r3, [pc, #556]	; (8006d40 <HAL_UART_IRQHandler+0x2b0>)
 8006b14:	4013      	ands	r3, r2
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d106      	bne.n	8006b28 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006b1a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006b1e:	4b89      	ldr	r3, [pc, #548]	; (8006d44 <HAL_UART_IRQHandler+0x2b4>)
 8006b20:	4013      	ands	r3, r2
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	f000 8112 	beq.w	8006d4c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006b28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b2c:	f003 0301 	and.w	r3, r3, #1
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d011      	beq.n	8006b58 <HAL_UART_IRQHandler+0xc8>
 8006b34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d00b      	beq.n	8006b58 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	2201      	movs	r2, #1
 8006b46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b4e:	f043 0201 	orr.w	r2, r3, #1
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b5c:	f003 0302 	and.w	r3, r3, #2
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d011      	beq.n	8006b88 <HAL_UART_IRQHandler+0xf8>
 8006b64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b68:	f003 0301 	and.w	r3, r3, #1
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d00b      	beq.n	8006b88 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	2202      	movs	r2, #2
 8006b76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b7e:	f043 0204 	orr.w	r2, r3, #4
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b8c:	f003 0304 	and.w	r3, r3, #4
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d011      	beq.n	8006bb8 <HAL_UART_IRQHandler+0x128>
 8006b94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b98:	f003 0301 	and.w	r3, r3, #1
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d00b      	beq.n	8006bb8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	2204      	movs	r2, #4
 8006ba6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bae:	f043 0202 	orr.w	r2, r3, #2
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006bb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bbc:	f003 0308 	and.w	r3, r3, #8
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d017      	beq.n	8006bf4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006bc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bc8:	f003 0320 	and.w	r3, r3, #32
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d105      	bne.n	8006bdc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006bd0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006bd4:	4b5a      	ldr	r3, [pc, #360]	; (8006d40 <HAL_UART_IRQHandler+0x2b0>)
 8006bd6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d00b      	beq.n	8006bf4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	2208      	movs	r2, #8
 8006be2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bea:	f043 0208 	orr.w	r2, r3, #8
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006bf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bf8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d012      	beq.n	8006c26 <HAL_UART_IRQHandler+0x196>
 8006c00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c04:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d00c      	beq.n	8006c26 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c14:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c1c:	f043 0220 	orr.w	r2, r3, #32
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	f000 823c 	beq.w	80070aa <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006c32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c36:	f003 0320 	and.w	r3, r3, #32
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d013      	beq.n	8006c66 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006c3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c42:	f003 0320 	and.w	r3, r3, #32
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d105      	bne.n	8006c56 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006c4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d007      	beq.n	8006c66 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d003      	beq.n	8006c66 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c6c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c7a:	2b40      	cmp	r3, #64	; 0x40
 8006c7c:	d005      	beq.n	8006c8a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006c7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c82:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d04f      	beq.n	8006d2a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f000 ff7c 	bl	8007b88 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	689b      	ldr	r3, [r3, #8]
 8006c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c9a:	2b40      	cmp	r3, #64	; 0x40
 8006c9c:	d141      	bne.n	8006d22 <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	3308      	adds	r3, #8
 8006ca4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ca8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006cac:	e853 3f00 	ldrex	r3, [r3]
 8006cb0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006cb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006cb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cbc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	3308      	adds	r3, #8
 8006cc6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006cca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006cce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cd2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006cd6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006cda:	e841 2300 	strex	r3, r2, [r1]
 8006cde:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006ce2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d1d9      	bne.n	8006c9e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d013      	beq.n	8006d1a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006cf6:	4a14      	ldr	r2, [pc, #80]	; (8006d48 <HAL_UART_IRQHandler+0x2b8>)
 8006cf8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f7fc fd56 	bl	80037b0 <HAL_DMA_Abort_IT>
 8006d04:	4603      	mov	r3, r0
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d017      	beq.n	8006d3a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d10:	687a      	ldr	r2, [r7, #4]
 8006d12:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8006d14:	4610      	mov	r0, r2
 8006d16:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d18:	e00f      	b.n	8006d3a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f000 f9d9 	bl	80070d2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d20:	e00b      	b.n	8006d3a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f000 f9d5 	bl	80070d2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d28:	e007      	b.n	8006d3a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f000 f9d1 	bl	80070d2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2200      	movs	r2, #0
 8006d34:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8006d38:	e1b7      	b.n	80070aa <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d3a:	bf00      	nop
    return;
 8006d3c:	e1b5      	b.n	80070aa <HAL_UART_IRQHandler+0x61a>
 8006d3e:	bf00      	nop
 8006d40:	10000001 	.word	0x10000001
 8006d44:	04000120 	.word	0x04000120
 8006d48:	08007d89 	.word	0x08007d89

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	f040 814a 	bne.w	8006fea <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8006d56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d5a:	f003 0310 	and.w	r3, r3, #16
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	f000 8143 	beq.w	8006fea <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8006d64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d68:	f003 0310 	and.w	r3, r3, #16
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	f000 813c 	beq.w	8006fea <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	2210      	movs	r2, #16
 8006d78:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	689b      	ldr	r3, [r3, #8]
 8006d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d84:	2b40      	cmp	r3, #64	; 0x40
 8006d86:	f040 80b5 	bne.w	8006ef4 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if (  (nb_remaining_rx_data > 0U)
 8006d96:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	f000 8187 	beq.w	80070ae <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006da6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006daa:	429a      	cmp	r2, r3
 8006dac:	f080 817f 	bcs.w	80070ae <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006db6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f003 0320 	and.w	r3, r3, #32
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	f040 8086 	bne.w	8006ed8 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006dd8:	e853 3f00 	ldrex	r3, [r3]
 8006ddc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006de0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006de4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006de8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	461a      	mov	r2, r3
 8006df2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006df6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006dfa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dfe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006e02:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006e06:	e841 2300 	strex	r3, r2, [r1]
 8006e0a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006e0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d1da      	bne.n	8006dcc <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	3308      	adds	r3, #8
 8006e1c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e20:	e853 3f00 	ldrex	r3, [r3]
 8006e24:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006e26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006e28:	f023 0301 	bic.w	r3, r3, #1
 8006e2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	3308      	adds	r3, #8
 8006e36:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006e3a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006e3e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e40:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006e42:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006e46:	e841 2300 	strex	r3, r2, [r1]
 8006e4a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006e4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d1e1      	bne.n	8006e16 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	3308      	adds	r3, #8
 8006e58:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006e5c:	e853 3f00 	ldrex	r3, [r3]
 8006e60:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006e62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	3308      	adds	r3, #8
 8006e72:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006e76:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006e78:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e7a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006e7c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006e7e:	e841 2300 	strex	r3, r2, [r1]
 8006e82:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006e84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d1e3      	bne.n	8006e52 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2220      	movs	r2, #32
 8006e8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2200      	movs	r2, #0
 8006e96:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ea0:	e853 3f00 	ldrex	r3, [r3]
 8006ea4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006ea6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ea8:	f023 0310 	bic.w	r3, r3, #16
 8006eac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	461a      	mov	r2, r3
 8006eb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006eba:	65bb      	str	r3, [r7, #88]	; 0x58
 8006ebc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ebe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006ec0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006ec2:	e841 2300 	strex	r3, r2, [r1]
 8006ec6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006ec8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d1e4      	bne.n	8006e98 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f7fc fc0e 	bl	80036f4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	1ad3      	subs	r3, r2, r3
 8006ee8:	b29b      	uxth	r3, r3
 8006eea:	4619      	mov	r1, r3
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f000 f8f9 	bl	80070e4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006ef2:	e0dc      	b.n	80070ae <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006f00:	b29b      	uxth	r3, r3
 8006f02:	1ad3      	subs	r3, r2, r3
 8006f04:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if (  (huart->RxXferCount > 0U)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	f000 80ce 	beq.w	80070b2 <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 8006f16:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	f000 80c9 	beq.w	80070b2 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f28:	e853 3f00 	ldrex	r3, [r3]
 8006f2c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006f2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f34:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	461a      	mov	r2, r3
 8006f3e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006f42:	647b      	str	r3, [r7, #68]	; 0x44
 8006f44:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f46:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006f48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f4a:	e841 2300 	strex	r3, r2, [r1]
 8006f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006f50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d1e4      	bne.n	8006f20 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	3308      	adds	r3, #8
 8006f5c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f60:	e853 3f00 	ldrex	r3, [r3]
 8006f64:	623b      	str	r3, [r7, #32]
   return(result);
 8006f66:	6a3b      	ldr	r3, [r7, #32]
 8006f68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f6c:	f023 0301 	bic.w	r3, r3, #1
 8006f70:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	3308      	adds	r3, #8
 8006f7a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006f7e:	633a      	str	r2, [r7, #48]	; 0x30
 8006f80:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006f84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f86:	e841 2300 	strex	r3, r2, [r1]
 8006f8a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d1e1      	bne.n	8006f56 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2220      	movs	r2, #32
 8006f96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fac:	693b      	ldr	r3, [r7, #16]
 8006fae:	e853 3f00 	ldrex	r3, [r3]
 8006fb2:	60fb      	str	r3, [r7, #12]
   return(result);
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	f023 0310 	bic.w	r3, r3, #16
 8006fba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	461a      	mov	r2, r3
 8006fc4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006fc8:	61fb      	str	r3, [r7, #28]
 8006fca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fcc:	69b9      	ldr	r1, [r7, #24]
 8006fce:	69fa      	ldr	r2, [r7, #28]
 8006fd0:	e841 2300 	strex	r3, r2, [r1]
 8006fd4:	617b      	str	r3, [r7, #20]
   return(result);
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d1e4      	bne.n	8006fa6 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006fdc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006fe0:	4619      	mov	r1, r3
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f000 f87e 	bl	80070e4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006fe8:	e063      	b.n	80070b2 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006fea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d00e      	beq.n	8007014 <HAL_UART_IRQHandler+0x584>
 8006ff6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ffa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d008      	beq.n	8007014 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800700a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f001 fb59 	bl	80086c4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007012:	e051      	b.n	80070b8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007014:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007018:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800701c:	2b00      	cmp	r3, #0
 800701e:	d014      	beq.n	800704a <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007020:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007024:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007028:	2b00      	cmp	r3, #0
 800702a:	d105      	bne.n	8007038 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800702c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007030:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007034:	2b00      	cmp	r3, #0
 8007036:	d008      	beq.n	800704a <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800703c:	2b00      	cmp	r3, #0
 800703e:	d03a      	beq.n	80070b6 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	4798      	blx	r3
    }
    return;
 8007048:	e035      	b.n	80070b6 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800704a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800704e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007052:	2b00      	cmp	r3, #0
 8007054:	d009      	beq.n	800706a <HAL_UART_IRQHandler+0x5da>
 8007056:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800705a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800705e:	2b00      	cmp	r3, #0
 8007060:	d003      	beq.n	800706a <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f000 fea6 	bl	8007db4 <UART_EndTransmit_IT>
    return;
 8007068:	e026      	b.n	80070b8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800706a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800706e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007072:	2b00      	cmp	r3, #0
 8007074:	d009      	beq.n	800708a <HAL_UART_IRQHandler+0x5fa>
 8007076:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800707a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800707e:	2b00      	cmp	r3, #0
 8007080:	d003      	beq.n	800708a <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f001 fb30 	bl	80086e8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007088:	e016      	b.n	80070b8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800708a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800708e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007092:	2b00      	cmp	r3, #0
 8007094:	d010      	beq.n	80070b8 <HAL_UART_IRQHandler+0x628>
 8007096:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800709a:	2b00      	cmp	r3, #0
 800709c:	da0c      	bge.n	80070b8 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f001 fb19 	bl	80086d6 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80070a4:	e008      	b.n	80070b8 <HAL_UART_IRQHandler+0x628>
      return;
 80070a6:	bf00      	nop
 80070a8:	e006      	b.n	80070b8 <HAL_UART_IRQHandler+0x628>
    return;
 80070aa:	bf00      	nop
 80070ac:	e004      	b.n	80070b8 <HAL_UART_IRQHandler+0x628>
      return;
 80070ae:	bf00      	nop
 80070b0:	e002      	b.n	80070b8 <HAL_UART_IRQHandler+0x628>
      return;
 80070b2:	bf00      	nop
 80070b4:	e000      	b.n	80070b8 <HAL_UART_IRQHandler+0x628>
    return;
 80070b6:	bf00      	nop
  }
}
 80070b8:	37e8      	adds	r7, #232	; 0xe8
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}
 80070be:	bf00      	nop

080070c0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b083      	sub	sp, #12
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80070c8:	bf00      	nop
 80070ca:	370c      	adds	r7, #12
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bc80      	pop	{r7}
 80070d0:	4770      	bx	lr

080070d2 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80070d2:	b480      	push	{r7}
 80070d4:	b083      	sub	sp, #12
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80070da:	bf00      	nop
 80070dc:	370c      	adds	r7, #12
 80070de:	46bd      	mov	sp, r7
 80070e0:	bc80      	pop	{r7}
 80070e2:	4770      	bx	lr

080070e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b083      	sub	sp, #12
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
 80070ec:	460b      	mov	r3, r1
 80070ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80070f0:	bf00      	nop
 80070f2:	370c      	adds	r7, #12
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bc80      	pop	{r7}
 80070f8:	4770      	bx	lr
	...

080070fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80070fc:	b5b0      	push	{r4, r5, r7, lr}
 80070fe:	b088      	sub	sp, #32
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007104:	2300      	movs	r3, #0
 8007106:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	689a      	ldr	r2, [r3, #8]
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	691b      	ldr	r3, [r3, #16]
 8007110:	431a      	orrs	r2, r3
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	695b      	ldr	r3, [r3, #20]
 8007116:	431a      	orrs	r2, r3
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	69db      	ldr	r3, [r3, #28]
 800711c:	4313      	orrs	r3, r2
 800711e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	681a      	ldr	r2, [r3, #0]
 8007126:	4bab      	ldr	r3, [pc, #684]	; (80073d4 <UART_SetConfig+0x2d8>)
 8007128:	4013      	ands	r3, r2
 800712a:	687a      	ldr	r2, [r7, #4]
 800712c:	6812      	ldr	r2, [r2, #0]
 800712e:	69f9      	ldr	r1, [r7, #28]
 8007130:	430b      	orrs	r3, r1
 8007132:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	68da      	ldr	r2, [r3, #12]
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	430a      	orrs	r2, r1
 8007148:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	699b      	ldr	r3, [r3, #24]
 800714e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4aa0      	ldr	r2, [pc, #640]	; (80073d8 <UART_SetConfig+0x2dc>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d004      	beq.n	8007164 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6a1b      	ldr	r3, [r3, #32]
 800715e:	69fa      	ldr	r2, [r7, #28]
 8007160:	4313      	orrs	r3, r2
 8007162:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	689b      	ldr	r3, [r3, #8]
 800716a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800716e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007172:	687a      	ldr	r2, [r7, #4]
 8007174:	6812      	ldr	r2, [r2, #0]
 8007176:	69f9      	ldr	r1, [r7, #28]
 8007178:	430b      	orrs	r3, r1
 800717a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007182:	f023 010f 	bic.w	r1, r3, #15
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	430a      	orrs	r2, r1
 8007190:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4a91      	ldr	r2, [pc, #580]	; (80073dc <UART_SetConfig+0x2e0>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d122      	bne.n	80071e2 <UART_SetConfig+0xe6>
 800719c:	2003      	movs	r0, #3
 800719e:	f7ff fb1d 	bl	80067dc <LL_RCC_GetUSARTClockSource>
 80071a2:	4603      	mov	r3, r0
 80071a4:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 80071a8:	2b03      	cmp	r3, #3
 80071aa:	d817      	bhi.n	80071dc <UART_SetConfig+0xe0>
 80071ac:	a201      	add	r2, pc, #4	; (adr r2, 80071b4 <UART_SetConfig+0xb8>)
 80071ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071b2:	bf00      	nop
 80071b4:	080071c5 	.word	0x080071c5
 80071b8:	080071d1 	.word	0x080071d1
 80071bc:	080071cb 	.word	0x080071cb
 80071c0:	080071d7 	.word	0x080071d7
 80071c4:	2301      	movs	r3, #1
 80071c6:	76fb      	strb	r3, [r7, #27]
 80071c8:	e072      	b.n	80072b0 <UART_SetConfig+0x1b4>
 80071ca:	2302      	movs	r3, #2
 80071cc:	76fb      	strb	r3, [r7, #27]
 80071ce:	e06f      	b.n	80072b0 <UART_SetConfig+0x1b4>
 80071d0:	2304      	movs	r3, #4
 80071d2:	76fb      	strb	r3, [r7, #27]
 80071d4:	e06c      	b.n	80072b0 <UART_SetConfig+0x1b4>
 80071d6:	2308      	movs	r3, #8
 80071d8:	76fb      	strb	r3, [r7, #27]
 80071da:	e069      	b.n	80072b0 <UART_SetConfig+0x1b4>
 80071dc:	2310      	movs	r3, #16
 80071de:	76fb      	strb	r3, [r7, #27]
 80071e0:	e066      	b.n	80072b0 <UART_SetConfig+0x1b4>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a7e      	ldr	r2, [pc, #504]	; (80073e0 <UART_SetConfig+0x2e4>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d134      	bne.n	8007256 <UART_SetConfig+0x15a>
 80071ec:	200c      	movs	r0, #12
 80071ee:	f7ff faf5 	bl	80067dc <LL_RCC_GetUSARTClockSource>
 80071f2:	4603      	mov	r3, r0
 80071f4:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 80071f8:	2b0c      	cmp	r3, #12
 80071fa:	d829      	bhi.n	8007250 <UART_SetConfig+0x154>
 80071fc:	a201      	add	r2, pc, #4	; (adr r2, 8007204 <UART_SetConfig+0x108>)
 80071fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007202:	bf00      	nop
 8007204:	08007239 	.word	0x08007239
 8007208:	08007251 	.word	0x08007251
 800720c:	08007251 	.word	0x08007251
 8007210:	08007251 	.word	0x08007251
 8007214:	08007245 	.word	0x08007245
 8007218:	08007251 	.word	0x08007251
 800721c:	08007251 	.word	0x08007251
 8007220:	08007251 	.word	0x08007251
 8007224:	0800723f 	.word	0x0800723f
 8007228:	08007251 	.word	0x08007251
 800722c:	08007251 	.word	0x08007251
 8007230:	08007251 	.word	0x08007251
 8007234:	0800724b 	.word	0x0800724b
 8007238:	2300      	movs	r3, #0
 800723a:	76fb      	strb	r3, [r7, #27]
 800723c:	e038      	b.n	80072b0 <UART_SetConfig+0x1b4>
 800723e:	2302      	movs	r3, #2
 8007240:	76fb      	strb	r3, [r7, #27]
 8007242:	e035      	b.n	80072b0 <UART_SetConfig+0x1b4>
 8007244:	2304      	movs	r3, #4
 8007246:	76fb      	strb	r3, [r7, #27]
 8007248:	e032      	b.n	80072b0 <UART_SetConfig+0x1b4>
 800724a:	2308      	movs	r3, #8
 800724c:	76fb      	strb	r3, [r7, #27]
 800724e:	e02f      	b.n	80072b0 <UART_SetConfig+0x1b4>
 8007250:	2310      	movs	r3, #16
 8007252:	76fb      	strb	r3, [r7, #27]
 8007254:	e02c      	b.n	80072b0 <UART_SetConfig+0x1b4>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4a5f      	ldr	r2, [pc, #380]	; (80073d8 <UART_SetConfig+0x2dc>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d125      	bne.n	80072ac <UART_SetConfig+0x1b0>
 8007260:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8007264:	f7ff facc 	bl	8006800 <LL_RCC_GetLPUARTClockSource>
 8007268:	4603      	mov	r3, r0
 800726a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800726e:	d017      	beq.n	80072a0 <UART_SetConfig+0x1a4>
 8007270:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007274:	d817      	bhi.n	80072a6 <UART_SetConfig+0x1aa>
 8007276:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800727a:	d00b      	beq.n	8007294 <UART_SetConfig+0x198>
 800727c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007280:	d811      	bhi.n	80072a6 <UART_SetConfig+0x1aa>
 8007282:	2b00      	cmp	r3, #0
 8007284:	d003      	beq.n	800728e <UART_SetConfig+0x192>
 8007286:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800728a:	d006      	beq.n	800729a <UART_SetConfig+0x19e>
 800728c:	e00b      	b.n	80072a6 <UART_SetConfig+0x1aa>
 800728e:	2300      	movs	r3, #0
 8007290:	76fb      	strb	r3, [r7, #27]
 8007292:	e00d      	b.n	80072b0 <UART_SetConfig+0x1b4>
 8007294:	2302      	movs	r3, #2
 8007296:	76fb      	strb	r3, [r7, #27]
 8007298:	e00a      	b.n	80072b0 <UART_SetConfig+0x1b4>
 800729a:	2304      	movs	r3, #4
 800729c:	76fb      	strb	r3, [r7, #27]
 800729e:	e007      	b.n	80072b0 <UART_SetConfig+0x1b4>
 80072a0:	2308      	movs	r3, #8
 80072a2:	76fb      	strb	r3, [r7, #27]
 80072a4:	e004      	b.n	80072b0 <UART_SetConfig+0x1b4>
 80072a6:	2310      	movs	r3, #16
 80072a8:	76fb      	strb	r3, [r7, #27]
 80072aa:	e001      	b.n	80072b0 <UART_SetConfig+0x1b4>
 80072ac:	2310      	movs	r3, #16
 80072ae:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a48      	ldr	r2, [pc, #288]	; (80073d8 <UART_SetConfig+0x2dc>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	f040 8098 	bne.w	80073ec <UART_SetConfig+0x2f0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80072bc:	7efb      	ldrb	r3, [r7, #27]
 80072be:	2b08      	cmp	r3, #8
 80072c0:	d823      	bhi.n	800730a <UART_SetConfig+0x20e>
 80072c2:	a201      	add	r2, pc, #4	; (adr r2, 80072c8 <UART_SetConfig+0x1cc>)
 80072c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072c8:	080072ed 	.word	0x080072ed
 80072cc:	0800730b 	.word	0x0800730b
 80072d0:	080072f5 	.word	0x080072f5
 80072d4:	0800730b 	.word	0x0800730b
 80072d8:	080072fb 	.word	0x080072fb
 80072dc:	0800730b 	.word	0x0800730b
 80072e0:	0800730b 	.word	0x0800730b
 80072e4:	0800730b 	.word	0x0800730b
 80072e8:	08007303 	.word	0x08007303
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072ec:	f7fd ff56 	bl	800519c <HAL_RCC_GetPCLK1Freq>
 80072f0:	6178      	str	r0, [r7, #20]
        break;
 80072f2:	e00f      	b.n	8007314 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80072f4:	4b3b      	ldr	r3, [pc, #236]	; (80073e4 <UART_SetConfig+0x2e8>)
 80072f6:	617b      	str	r3, [r7, #20]
        break;
 80072f8:	e00c      	b.n	8007314 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80072fa:	f7fd fe9b 	bl	8005034 <HAL_RCC_GetSysClockFreq>
 80072fe:	6178      	str	r0, [r7, #20]
        break;
 8007300:	e008      	b.n	8007314 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007302:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007306:	617b      	str	r3, [r7, #20]
        break;
 8007308:	e004      	b.n	8007314 <UART_SetConfig+0x218>
      default:
        pclk = 0U;
 800730a:	2300      	movs	r3, #0
 800730c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800730e:	2301      	movs	r3, #1
 8007310:	76bb      	strb	r3, [r7, #26]
        break;
 8007312:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	2b00      	cmp	r3, #0
 8007318:	f000 8128 	beq.w	800756c <UART_SetConfig+0x470>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007320:	4a31      	ldr	r2, [pc, #196]	; (80073e8 <UART_SetConfig+0x2ec>)
 8007322:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007326:	461a      	mov	r2, r3
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	fbb3 f3f2 	udiv	r3, r3, r2
 800732e:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	685a      	ldr	r2, [r3, #4]
 8007334:	4613      	mov	r3, r2
 8007336:	005b      	lsls	r3, r3, #1
 8007338:	4413      	add	r3, r2
 800733a:	68ba      	ldr	r2, [r7, #8]
 800733c:	429a      	cmp	r2, r3
 800733e:	d305      	bcc.n	800734c <UART_SetConfig+0x250>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	685b      	ldr	r3, [r3, #4]
 8007344:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007346:	68ba      	ldr	r2, [r7, #8]
 8007348:	429a      	cmp	r2, r3
 800734a:	d902      	bls.n	8007352 <UART_SetConfig+0x256>
      {
        ret = HAL_ERROR;
 800734c:	2301      	movs	r3, #1
 800734e:	76bb      	strb	r3, [r7, #26]
 8007350:	e10c      	b.n	800756c <UART_SetConfig+0x470>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	4618      	mov	r0, r3
 8007356:	f04f 0100 	mov.w	r1, #0
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800735e:	4a22      	ldr	r2, [pc, #136]	; (80073e8 <UART_SetConfig+0x2ec>)
 8007360:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007364:	b29a      	uxth	r2, r3
 8007366:	f04f 0300 	mov.w	r3, #0
 800736a:	f7f9 fa87 	bl	800087c <__aeabi_uldivmod>
 800736e:	4602      	mov	r2, r0
 8007370:	460b      	mov	r3, r1
 8007372:	4610      	mov	r0, r2
 8007374:	4619      	mov	r1, r3
 8007376:	f04f 0200 	mov.w	r2, #0
 800737a:	f04f 0300 	mov.w	r3, #0
 800737e:	020b      	lsls	r3, r1, #8
 8007380:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007384:	0202      	lsls	r2, r0, #8
 8007386:	6879      	ldr	r1, [r7, #4]
 8007388:	6849      	ldr	r1, [r1, #4]
 800738a:	0849      	lsrs	r1, r1, #1
 800738c:	4608      	mov	r0, r1
 800738e:	f04f 0100 	mov.w	r1, #0
 8007392:	1814      	adds	r4, r2, r0
 8007394:	eb43 0501 	adc.w	r5, r3, r1
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	461a      	mov	r2, r3
 800739e:	f04f 0300 	mov.w	r3, #0
 80073a2:	4620      	mov	r0, r4
 80073a4:	4629      	mov	r1, r5
 80073a6:	f7f9 fa69 	bl	800087c <__aeabi_uldivmod>
 80073aa:	4602      	mov	r2, r0
 80073ac:	460b      	mov	r3, r1
 80073ae:	4613      	mov	r3, r2
 80073b0:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80073b8:	d308      	bcc.n	80073cc <UART_SetConfig+0x2d0>
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80073c0:	d204      	bcs.n	80073cc <UART_SetConfig+0x2d0>
        {
          huart->Instance->BRR = usartdiv;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	693a      	ldr	r2, [r7, #16]
 80073c8:	60da      	str	r2, [r3, #12]
 80073ca:	e0cf      	b.n	800756c <UART_SetConfig+0x470>
        }
        else
        {
          ret = HAL_ERROR;
 80073cc:	2301      	movs	r3, #1
 80073ce:	76bb      	strb	r3, [r7, #26]
 80073d0:	e0cc      	b.n	800756c <UART_SetConfig+0x470>
 80073d2:	bf00      	nop
 80073d4:	cfff69f3 	.word	0xcfff69f3
 80073d8:	40008000 	.word	0x40008000
 80073dc:	40013800 	.word	0x40013800
 80073e0:	40004400 	.word	0x40004400
 80073e4:	00f42400 	.word	0x00f42400
 80073e8:	08019904 	.word	0x08019904
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	69db      	ldr	r3, [r3, #28]
 80073f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073f4:	d165      	bne.n	80074c2 <UART_SetConfig+0x3c6>
  {
    switch (clocksource)
 80073f6:	7efb      	ldrb	r3, [r7, #27]
 80073f8:	2b08      	cmp	r3, #8
 80073fa:	d828      	bhi.n	800744e <UART_SetConfig+0x352>
 80073fc:	a201      	add	r2, pc, #4	; (adr r2, 8007404 <UART_SetConfig+0x308>)
 80073fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007402:	bf00      	nop
 8007404:	08007429 	.word	0x08007429
 8007408:	08007431 	.word	0x08007431
 800740c:	08007439 	.word	0x08007439
 8007410:	0800744f 	.word	0x0800744f
 8007414:	0800743f 	.word	0x0800743f
 8007418:	0800744f 	.word	0x0800744f
 800741c:	0800744f 	.word	0x0800744f
 8007420:	0800744f 	.word	0x0800744f
 8007424:	08007447 	.word	0x08007447
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007428:	f7fd feb8 	bl	800519c <HAL_RCC_GetPCLK1Freq>
 800742c:	6178      	str	r0, [r7, #20]
        break;
 800742e:	e013      	b.n	8007458 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007430:	f7fd fec6 	bl	80051c0 <HAL_RCC_GetPCLK2Freq>
 8007434:	6178      	str	r0, [r7, #20]
        break;
 8007436:	e00f      	b.n	8007458 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007438:	4b56      	ldr	r3, [pc, #344]	; (8007594 <UART_SetConfig+0x498>)
 800743a:	617b      	str	r3, [r7, #20]
        break;
 800743c:	e00c      	b.n	8007458 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800743e:	f7fd fdf9 	bl	8005034 <HAL_RCC_GetSysClockFreq>
 8007442:	6178      	str	r0, [r7, #20]
        break;
 8007444:	e008      	b.n	8007458 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007446:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800744a:	617b      	str	r3, [r7, #20]
        break;
 800744c:	e004      	b.n	8007458 <UART_SetConfig+0x35c>
      default:
        pclk = 0U;
 800744e:	2300      	movs	r3, #0
 8007450:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007452:	2301      	movs	r3, #1
 8007454:	76bb      	strb	r3, [r7, #26]
        break;
 8007456:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	2b00      	cmp	r3, #0
 800745c:	f000 8086 	beq.w	800756c <UART_SetConfig+0x470>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007464:	4a4c      	ldr	r2, [pc, #304]	; (8007598 <UART_SetConfig+0x49c>)
 8007466:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800746a:	461a      	mov	r2, r3
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007472:	005a      	lsls	r2, r3, #1
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	685b      	ldr	r3, [r3, #4]
 8007478:	085b      	lsrs	r3, r3, #1
 800747a:	441a      	add	r2, r3
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	fbb2 f3f3 	udiv	r3, r2, r3
 8007484:	b29b      	uxth	r3, r3
 8007486:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	2b0f      	cmp	r3, #15
 800748c:	d916      	bls.n	80074bc <UART_SetConfig+0x3c0>
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007494:	d212      	bcs.n	80074bc <UART_SetConfig+0x3c0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	b29b      	uxth	r3, r3
 800749a:	f023 030f 	bic.w	r3, r3, #15
 800749e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	085b      	lsrs	r3, r3, #1
 80074a4:	b29b      	uxth	r3, r3
 80074a6:	f003 0307 	and.w	r3, r3, #7
 80074aa:	b29a      	uxth	r2, r3
 80074ac:	89fb      	ldrh	r3, [r7, #14]
 80074ae:	4313      	orrs	r3, r2
 80074b0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	89fa      	ldrh	r2, [r7, #14]
 80074b8:	60da      	str	r2, [r3, #12]
 80074ba:	e057      	b.n	800756c <UART_SetConfig+0x470>
      }
      else
      {
        ret = HAL_ERROR;
 80074bc:	2301      	movs	r3, #1
 80074be:	76bb      	strb	r3, [r7, #26]
 80074c0:	e054      	b.n	800756c <UART_SetConfig+0x470>
      }
    }
  }
  else
  {
    switch (clocksource)
 80074c2:	7efb      	ldrb	r3, [r7, #27]
 80074c4:	2b08      	cmp	r3, #8
 80074c6:	d828      	bhi.n	800751a <UART_SetConfig+0x41e>
 80074c8:	a201      	add	r2, pc, #4	; (adr r2, 80074d0 <UART_SetConfig+0x3d4>)
 80074ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ce:	bf00      	nop
 80074d0:	080074f5 	.word	0x080074f5
 80074d4:	080074fd 	.word	0x080074fd
 80074d8:	08007505 	.word	0x08007505
 80074dc:	0800751b 	.word	0x0800751b
 80074e0:	0800750b 	.word	0x0800750b
 80074e4:	0800751b 	.word	0x0800751b
 80074e8:	0800751b 	.word	0x0800751b
 80074ec:	0800751b 	.word	0x0800751b
 80074f0:	08007513 	.word	0x08007513
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074f4:	f7fd fe52 	bl	800519c <HAL_RCC_GetPCLK1Freq>
 80074f8:	6178      	str	r0, [r7, #20]
        break;
 80074fa:	e013      	b.n	8007524 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80074fc:	f7fd fe60 	bl	80051c0 <HAL_RCC_GetPCLK2Freq>
 8007500:	6178      	str	r0, [r7, #20]
        break;
 8007502:	e00f      	b.n	8007524 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007504:	4b23      	ldr	r3, [pc, #140]	; (8007594 <UART_SetConfig+0x498>)
 8007506:	617b      	str	r3, [r7, #20]
        break;
 8007508:	e00c      	b.n	8007524 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800750a:	f7fd fd93 	bl	8005034 <HAL_RCC_GetSysClockFreq>
 800750e:	6178      	str	r0, [r7, #20]
        break;
 8007510:	e008      	b.n	8007524 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007512:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007516:	617b      	str	r3, [r7, #20]
        break;
 8007518:	e004      	b.n	8007524 <UART_SetConfig+0x428>
      default:
        pclk = 0U;
 800751a:	2300      	movs	r3, #0
 800751c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800751e:	2301      	movs	r3, #1
 8007520:	76bb      	strb	r3, [r7, #26]
        break;
 8007522:	bf00      	nop
    }

    if (pclk != 0U)
 8007524:	697b      	ldr	r3, [r7, #20]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d020      	beq.n	800756c <UART_SetConfig+0x470>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800752e:	4a1a      	ldr	r2, [pc, #104]	; (8007598 <UART_SetConfig+0x49c>)
 8007530:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007534:	461a      	mov	r2, r3
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	fbb3 f2f2 	udiv	r2, r3, r2
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	685b      	ldr	r3, [r3, #4]
 8007540:	085b      	lsrs	r3, r3, #1
 8007542:	441a      	add	r2, r3
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	685b      	ldr	r3, [r3, #4]
 8007548:	fbb2 f3f3 	udiv	r3, r2, r3
 800754c:	b29b      	uxth	r3, r3
 800754e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	2b0f      	cmp	r3, #15
 8007554:	d908      	bls.n	8007568 <UART_SetConfig+0x46c>
 8007556:	693b      	ldr	r3, [r7, #16]
 8007558:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800755c:	d204      	bcs.n	8007568 <UART_SetConfig+0x46c>
      {
        huart->Instance->BRR = usartdiv;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	693a      	ldr	r2, [r7, #16]
 8007564:	60da      	str	r2, [r3, #12]
 8007566:	e001      	b.n	800756c <UART_SetConfig+0x470>
      }
      else
      {
        ret = HAL_ERROR;
 8007568:	2301      	movs	r3, #1
 800756a:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2201      	movs	r2, #1
 8007570:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2201      	movs	r2, #1
 8007578:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2200      	movs	r2, #0
 8007580:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2200      	movs	r2, #0
 8007586:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007588:	7ebb      	ldrb	r3, [r7, #26]
}
 800758a:	4618      	mov	r0, r3
 800758c:	3720      	adds	r7, #32
 800758e:	46bd      	mov	sp, r7
 8007590:	bdb0      	pop	{r4, r5, r7, pc}
 8007592:	bf00      	nop
 8007594:	00f42400 	.word	0x00f42400
 8007598:	08019904 	.word	0x08019904

0800759c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800759c:	b480      	push	{r7}
 800759e:	b083      	sub	sp, #12
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075a8:	f003 0301 	and.w	r3, r3, #1
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d00a      	beq.n	80075c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	685b      	ldr	r3, [r3, #4]
 80075b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	430a      	orrs	r2, r1
 80075c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075ca:	f003 0302 	and.w	r3, r3, #2
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d00a      	beq.n	80075e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	685b      	ldr	r3, [r3, #4]
 80075d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	430a      	orrs	r2, r1
 80075e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075ec:	f003 0304 	and.w	r3, r3, #4
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d00a      	beq.n	800760a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	685b      	ldr	r3, [r3, #4]
 80075fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	430a      	orrs	r2, r1
 8007608:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800760e:	f003 0308 	and.w	r3, r3, #8
 8007612:	2b00      	cmp	r3, #0
 8007614:	d00a      	beq.n	800762c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	430a      	orrs	r2, r1
 800762a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007630:	f003 0310 	and.w	r3, r3, #16
 8007634:	2b00      	cmp	r3, #0
 8007636:	d00a      	beq.n	800764e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	689b      	ldr	r3, [r3, #8]
 800763e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	430a      	orrs	r2, r1
 800764c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007652:	f003 0320 	and.w	r3, r3, #32
 8007656:	2b00      	cmp	r3, #0
 8007658:	d00a      	beq.n	8007670 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	689b      	ldr	r3, [r3, #8]
 8007660:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	430a      	orrs	r2, r1
 800766e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007678:	2b00      	cmp	r3, #0
 800767a:	d01a      	beq.n	80076b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	685b      	ldr	r3, [r3, #4]
 8007682:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	430a      	orrs	r2, r1
 8007690:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007696:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800769a:	d10a      	bne.n	80076b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	685b      	ldr	r3, [r3, #4]
 80076a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	430a      	orrs	r2, r1
 80076b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d00a      	beq.n	80076d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	430a      	orrs	r2, r1
 80076d2:	605a      	str	r2, [r3, #4]
  }
}
 80076d4:	bf00      	nop
 80076d6:	370c      	adds	r7, #12
 80076d8:	46bd      	mov	sp, r7
 80076da:	bc80      	pop	{r7}
 80076dc:	4770      	bx	lr

080076de <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80076de:	b580      	push	{r7, lr}
 80076e0:	b086      	sub	sp, #24
 80076e2:	af02      	add	r7, sp, #8
 80076e4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2200      	movs	r2, #0
 80076ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80076ee:	f7f9 ffff 	bl	80016f0 <HAL_GetTick>
 80076f2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f003 0308 	and.w	r3, r3, #8
 80076fe:	2b08      	cmp	r3, #8
 8007700:	d10e      	bne.n	8007720 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007702:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007706:	9300      	str	r3, [sp, #0]
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	2200      	movs	r2, #0
 800770c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f000 f82f 	bl	8007774 <UART_WaitOnFlagUntilTimeout>
 8007716:	4603      	mov	r3, r0
 8007718:	2b00      	cmp	r3, #0
 800771a:	d001      	beq.n	8007720 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800771c:	2303      	movs	r3, #3
 800771e:	e025      	b.n	800776c <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f003 0304 	and.w	r3, r3, #4
 800772a:	2b04      	cmp	r3, #4
 800772c:	d10e      	bne.n	800774c <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800772e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007732:	9300      	str	r3, [sp, #0]
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	2200      	movs	r2, #0
 8007738:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f000 f819 	bl	8007774 <UART_WaitOnFlagUntilTimeout>
 8007742:	4603      	mov	r3, r0
 8007744:	2b00      	cmp	r3, #0
 8007746:	d001      	beq.n	800774c <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007748:	2303      	movs	r3, #3
 800774a:	e00f      	b.n	800776c <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2220      	movs	r2, #32
 8007750:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2220      	movs	r2, #32
 8007758:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2200      	movs	r2, #0
 8007760:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2200      	movs	r2, #0
 8007766:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800776a:	2300      	movs	r3, #0
}
 800776c:	4618      	mov	r0, r3
 800776e:	3710      	adds	r7, #16
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}

08007774 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b09c      	sub	sp, #112	; 0x70
 8007778:	af00      	add	r7, sp, #0
 800777a:	60f8      	str	r0, [r7, #12]
 800777c:	60b9      	str	r1, [r7, #8]
 800777e:	603b      	str	r3, [r7, #0]
 8007780:	4613      	mov	r3, r2
 8007782:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007784:	e0a9      	b.n	80078da <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007786:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800778c:	f000 80a5 	beq.w	80078da <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007790:	f7f9 ffae 	bl	80016f0 <HAL_GetTick>
 8007794:	4602      	mov	r2, r0
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	1ad3      	subs	r3, r2, r3
 800779a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800779c:	429a      	cmp	r2, r3
 800779e:	d302      	bcc.n	80077a6 <UART_WaitOnFlagUntilTimeout+0x32>
 80077a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d140      	bne.n	8007828 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077ae:	e853 3f00 	ldrex	r3, [r3]
 80077b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80077b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077b6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80077ba:	667b      	str	r3, [r7, #100]	; 0x64
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	461a      	mov	r2, r3
 80077c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80077c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80077c6:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077c8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80077ca:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80077cc:	e841 2300 	strex	r3, r2, [r1]
 80077d0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80077d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d1e6      	bne.n	80077a6 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	3308      	adds	r3, #8
 80077de:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077e2:	e853 3f00 	ldrex	r3, [r3]
 80077e6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80077e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077ea:	f023 0301 	bic.w	r3, r3, #1
 80077ee:	663b      	str	r3, [r7, #96]	; 0x60
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	3308      	adds	r3, #8
 80077f6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80077f8:	64ba      	str	r2, [r7, #72]	; 0x48
 80077fa:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077fc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80077fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007800:	e841 2300 	strex	r3, r2, [r1]
 8007804:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007806:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007808:	2b00      	cmp	r3, #0
 800780a:	d1e5      	bne.n	80077d8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2220      	movs	r2, #32
 8007810:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2220      	movs	r2, #32
 8007818:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2200      	movs	r2, #0
 8007820:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007824:	2303      	movs	r3, #3
 8007826:	e069      	b.n	80078fc <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f003 0304 	and.w	r3, r3, #4
 8007832:	2b00      	cmp	r3, #0
 8007834:	d051      	beq.n	80078da <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	69db      	ldr	r3, [r3, #28]
 800783c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007840:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007844:	d149      	bne.n	80078da <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800784e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007858:	e853 3f00 	ldrex	r3, [r3]
 800785c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800785e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007860:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007864:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	461a      	mov	r2, r3
 800786c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800786e:	637b      	str	r3, [r7, #52]	; 0x34
 8007870:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007872:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007874:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007876:	e841 2300 	strex	r3, r2, [r1]
 800787a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800787c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800787e:	2b00      	cmp	r3, #0
 8007880:	d1e6      	bne.n	8007850 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	3308      	adds	r3, #8
 8007888:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	e853 3f00 	ldrex	r3, [r3]
 8007890:	613b      	str	r3, [r7, #16]
   return(result);
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	f023 0301 	bic.w	r3, r3, #1
 8007898:	66bb      	str	r3, [r7, #104]	; 0x68
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	3308      	adds	r3, #8
 80078a0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80078a2:	623a      	str	r2, [r7, #32]
 80078a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078a6:	69f9      	ldr	r1, [r7, #28]
 80078a8:	6a3a      	ldr	r2, [r7, #32]
 80078aa:	e841 2300 	strex	r3, r2, [r1]
 80078ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80078b0:	69bb      	ldr	r3, [r7, #24]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d1e5      	bne.n	8007882 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2220      	movs	r2, #32
 80078ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2220      	movs	r2, #32
 80078c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	2220      	movs	r2, #32
 80078ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	2200      	movs	r2, #0
 80078d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80078d6:	2303      	movs	r3, #3
 80078d8:	e010      	b.n	80078fc <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	69da      	ldr	r2, [r3, #28]
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	4013      	ands	r3, r2
 80078e4:	68ba      	ldr	r2, [r7, #8]
 80078e6:	429a      	cmp	r2, r3
 80078e8:	bf0c      	ite	eq
 80078ea:	2301      	moveq	r3, #1
 80078ec:	2300      	movne	r3, #0
 80078ee:	b2db      	uxtb	r3, r3
 80078f0:	461a      	mov	r2, r3
 80078f2:	79fb      	ldrb	r3, [r7, #7]
 80078f4:	429a      	cmp	r2, r3
 80078f6:	f43f af46 	beq.w	8007786 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80078fa:	2300      	movs	r3, #0
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	3770      	adds	r7, #112	; 0x70
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}

08007904 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007904:	b480      	push	{r7}
 8007906:	b09d      	sub	sp, #116	; 0x74
 8007908:	af00      	add	r7, sp, #0
 800790a:	60f8      	str	r0, [r7, #12]
 800790c:	60b9      	str	r1, [r7, #8]
 800790e:	4613      	mov	r3, r2
 8007910:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	68ba      	ldr	r2, [r7, #8]
 8007916:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	88fa      	ldrh	r2, [r7, #6]
 800791c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	88fa      	ldrh	r2, [r7, #6]
 8007924:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	2200      	movs	r2, #0
 800792c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	689b      	ldr	r3, [r3, #8]
 8007932:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007936:	d10e      	bne.n	8007956 <UART_Start_Receive_IT+0x52>
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	691b      	ldr	r3, [r3, #16]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d105      	bne.n	800794c <UART_Start_Receive_IT+0x48>
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007946:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800794a:	e02d      	b.n	80079a8 <UART_Start_Receive_IT+0xa4>
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	22ff      	movs	r2, #255	; 0xff
 8007950:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007954:	e028      	b.n	80079a8 <UART_Start_Receive_IT+0xa4>
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	689b      	ldr	r3, [r3, #8]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d10d      	bne.n	800797a <UART_Start_Receive_IT+0x76>
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	691b      	ldr	r3, [r3, #16]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d104      	bne.n	8007970 <UART_Start_Receive_IT+0x6c>
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	22ff      	movs	r2, #255	; 0xff
 800796a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800796e:	e01b      	b.n	80079a8 <UART_Start_Receive_IT+0xa4>
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	227f      	movs	r2, #127	; 0x7f
 8007974:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007978:	e016      	b.n	80079a8 <UART_Start_Receive_IT+0xa4>
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	689b      	ldr	r3, [r3, #8]
 800797e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007982:	d10d      	bne.n	80079a0 <UART_Start_Receive_IT+0x9c>
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	691b      	ldr	r3, [r3, #16]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d104      	bne.n	8007996 <UART_Start_Receive_IT+0x92>
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	227f      	movs	r2, #127	; 0x7f
 8007990:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007994:	e008      	b.n	80079a8 <UART_Start_Receive_IT+0xa4>
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	223f      	movs	r2, #63	; 0x3f
 800799a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800799e:	e003      	b.n	80079a8 <UART_Start_Receive_IT+0xa4>
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	2200      	movs	r2, #0
 80079a4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	2200      	movs	r2, #0
 80079ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	2222      	movs	r2, #34	; 0x22
 80079b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	3308      	adds	r3, #8
 80079be:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079c2:	e853 3f00 	ldrex	r3, [r3]
 80079c6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80079c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079ca:	f043 0301 	orr.w	r3, r3, #1
 80079ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	3308      	adds	r3, #8
 80079d6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80079d8:	65fa      	str	r2, [r7, #92]	; 0x5c
 80079da:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079dc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80079de:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80079e0:	e841 2300 	strex	r3, r2, [r1]
 80079e4:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80079e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d1e5      	bne.n	80079b8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80079f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079f4:	d14d      	bne.n	8007a92 <UART_Start_Receive_IT+0x18e>
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80079fc:	88fa      	ldrh	r2, [r7, #6]
 80079fe:	429a      	cmp	r2, r3
 8007a00:	d347      	bcc.n	8007a92 <UART_Start_Receive_IT+0x18e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	689b      	ldr	r3, [r3, #8]
 8007a06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a0a:	d107      	bne.n	8007a1c <UART_Start_Receive_IT+0x118>
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	691b      	ldr	r3, [r3, #16]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d103      	bne.n	8007a1c <UART_Start_Receive_IT+0x118>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	4a38      	ldr	r2, [pc, #224]	; (8007af8 <UART_Start_Receive_IT+0x1f4>)
 8007a18:	671a      	str	r2, [r3, #112]	; 0x70
 8007a1a:	e002      	b.n	8007a22 <UART_Start_Receive_IT+0x11e>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	4a37      	ldr	r2, [pc, #220]	; (8007afc <UART_Start_Receive_IT+0x1f8>)
 8007a20:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	2200      	movs	r2, #0
 8007a26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a32:	e853 3f00 	ldrex	r3, [r3]
 8007a36:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a3e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	461a      	mov	r2, r3
 8007a46:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007a48:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a4a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a4c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007a4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a50:	e841 2300 	strex	r3, r2, [r1]
 8007a54:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007a56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d1e6      	bne.n	8007a2a <UART_Start_Receive_IT+0x126>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	3308      	adds	r3, #8
 8007a62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a66:	e853 3f00 	ldrex	r3, [r3]
 8007a6a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a72:	667b      	str	r3, [r7, #100]	; 0x64
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	3308      	adds	r3, #8
 8007a7a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007a7c:	637a      	str	r2, [r7, #52]	; 0x34
 8007a7e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a80:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007a82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a84:	e841 2300 	strex	r3, r2, [r1]
 8007a88:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d1e5      	bne.n	8007a5c <UART_Start_Receive_IT+0x158>
 8007a90:	e02c      	b.n	8007aec <UART_Start_Receive_IT+0x1e8>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	689b      	ldr	r3, [r3, #8]
 8007a96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a9a:	d107      	bne.n	8007aac <UART_Start_Receive_IT+0x1a8>
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	691b      	ldr	r3, [r3, #16]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d103      	bne.n	8007aac <UART_Start_Receive_IT+0x1a8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	4a16      	ldr	r2, [pc, #88]	; (8007b00 <UART_Start_Receive_IT+0x1fc>)
 8007aa8:	671a      	str	r2, [r3, #112]	; 0x70
 8007aaa:	e002      	b.n	8007ab2 <UART_Start_Receive_IT+0x1ae>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	4a15      	ldr	r2, [pc, #84]	; (8007b04 <UART_Start_Receive_IT+0x200>)
 8007ab0:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	e853 3f00 	ldrex	r3, [r3]
 8007ac6:	613b      	str	r3, [r7, #16]
   return(result);
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007ace:	663b      	str	r3, [r7, #96]	; 0x60
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	461a      	mov	r2, r3
 8007ad6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007ad8:	623b      	str	r3, [r7, #32]
 8007ada:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007adc:	69f9      	ldr	r1, [r7, #28]
 8007ade:	6a3a      	ldr	r2, [r7, #32]
 8007ae0:	e841 2300 	strex	r3, r2, [r1]
 8007ae4:	61bb      	str	r3, [r7, #24]
   return(result);
 8007ae6:	69bb      	ldr	r3, [r7, #24]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d1e6      	bne.n	8007aba <UART_Start_Receive_IT+0x1b6>
  }
  return HAL_OK;
 8007aec:	2300      	movs	r3, #0
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	3774      	adds	r7, #116	; 0x74
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bc80      	pop	{r7}
 8007af6:	4770      	bx	lr
 8007af8:	080083c5 	.word	0x080083c5
 8007afc:	080080cd 	.word	0x080080cd
 8007b00:	08007f6b 	.word	0x08007f6b
 8007b04:	08007e0b 	.word	0x08007e0b

08007b08 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b08f      	sub	sp, #60	; 0x3c
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b16:	6a3b      	ldr	r3, [r7, #32]
 8007b18:	e853 3f00 	ldrex	r3, [r3]
 8007b1c:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b1e:	69fb      	ldr	r3, [r7, #28]
 8007b20:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007b24:	637b      	str	r3, [r7, #52]	; 0x34
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	461a      	mov	r2, r3
 8007b2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b30:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b32:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007b34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b36:	e841 2300 	strex	r3, r2, [r1]
 8007b3a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d1e6      	bne.n	8007b10 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	3308      	adds	r3, #8
 8007b48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	e853 3f00 	ldrex	r3, [r3]
 8007b50:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007b58:	633b      	str	r3, [r7, #48]	; 0x30
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	3308      	adds	r3, #8
 8007b60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b62:	61ba      	str	r2, [r7, #24]
 8007b64:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b66:	6979      	ldr	r1, [r7, #20]
 8007b68:	69ba      	ldr	r2, [r7, #24]
 8007b6a:	e841 2300 	strex	r3, r2, [r1]
 8007b6e:	613b      	str	r3, [r7, #16]
   return(result);
 8007b70:	693b      	ldr	r3, [r7, #16]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d1e5      	bne.n	8007b42 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2220      	movs	r2, #32
 8007b7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8007b7e:	bf00      	nop
 8007b80:	373c      	adds	r7, #60	; 0x3c
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bc80      	pop	{r7}
 8007b86:	4770      	bx	lr

08007b88 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007b88:	b480      	push	{r7}
 8007b8a:	b095      	sub	sp, #84	; 0x54
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b98:	e853 3f00 	ldrex	r3, [r3]
 8007b9c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ba0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007ba4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	461a      	mov	r2, r3
 8007bac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bae:	643b      	str	r3, [r7, #64]	; 0x40
 8007bb0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bb2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007bb4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007bb6:	e841 2300 	strex	r3, r2, [r1]
 8007bba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d1e6      	bne.n	8007b90 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	3308      	adds	r3, #8
 8007bc8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bca:	6a3b      	ldr	r3, [r7, #32]
 8007bcc:	e853 3f00 	ldrex	r3, [r3]
 8007bd0:	61fb      	str	r3, [r7, #28]
   return(result);
 8007bd2:	69fb      	ldr	r3, [r7, #28]
 8007bd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007bd8:	f023 0301 	bic.w	r3, r3, #1
 8007bdc:	64bb      	str	r3, [r7, #72]	; 0x48
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	3308      	adds	r3, #8
 8007be4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007be6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007be8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007bec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007bee:	e841 2300 	strex	r3, r2, [r1]
 8007bf2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d1e3      	bne.n	8007bc2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007bfe:	2b01      	cmp	r3, #1
 8007c00:	d118      	bne.n	8007c34 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	e853 3f00 	ldrex	r3, [r3]
 8007c0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	f023 0310 	bic.w	r3, r3, #16
 8007c16:	647b      	str	r3, [r7, #68]	; 0x44
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	461a      	mov	r2, r3
 8007c1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c20:	61bb      	str	r3, [r7, #24]
 8007c22:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c24:	6979      	ldr	r1, [r7, #20]
 8007c26:	69ba      	ldr	r2, [r7, #24]
 8007c28:	e841 2300 	strex	r3, r2, [r1]
 8007c2c:	613b      	str	r3, [r7, #16]
   return(result);
 8007c2e:	693b      	ldr	r3, [r7, #16]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d1e6      	bne.n	8007c02 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2220      	movs	r2, #32
 8007c38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2200      	movs	r2, #0
 8007c46:	671a      	str	r2, [r3, #112]	; 0x70
}
 8007c48:	bf00      	nop
 8007c4a:	3754      	adds	r7, #84	; 0x54
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bc80      	pop	{r7}
 8007c50:	4770      	bx	lr

08007c52 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007c52:	b580      	push	{r7, lr}
 8007c54:	b090      	sub	sp, #64	; 0x40
 8007c56:	af00      	add	r7, sp, #0
 8007c58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c5e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f003 0320 	and.w	r3, r3, #32
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d137      	bne.n	8007cde <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8007c6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c70:	2200      	movs	r2, #0
 8007c72:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007c76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	3308      	adds	r3, #8
 8007c7c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c80:	e853 3f00 	ldrex	r3, [r3]
 8007c84:	623b      	str	r3, [r7, #32]
   return(result);
 8007c86:	6a3b      	ldr	r3, [r7, #32]
 8007c88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c8c:	63bb      	str	r3, [r7, #56]	; 0x38
 8007c8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	3308      	adds	r3, #8
 8007c94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c96:	633a      	str	r2, [r7, #48]	; 0x30
 8007c98:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007c9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c9e:	e841 2300 	strex	r3, r2, [r1]
 8007ca2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d1e5      	bne.n	8007c76 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007caa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cb0:	693b      	ldr	r3, [r7, #16]
 8007cb2:	e853 3f00 	ldrex	r3, [r3]
 8007cb6:	60fb      	str	r3, [r7, #12]
   return(result);
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cbe:	637b      	str	r3, [r7, #52]	; 0x34
 8007cc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	461a      	mov	r2, r3
 8007cc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cc8:	61fb      	str	r3, [r7, #28]
 8007cca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ccc:	69b9      	ldr	r1, [r7, #24]
 8007cce:	69fa      	ldr	r2, [r7, #28]
 8007cd0:	e841 2300 	strex	r3, r2, [r1]
 8007cd4:	617b      	str	r3, [r7, #20]
   return(result);
 8007cd6:	697b      	ldr	r3, [r7, #20]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d1e6      	bne.n	8007caa <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007cdc:	e002      	b.n	8007ce4 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007cde:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007ce0:	f7fa f946 	bl	8001f70 <HAL_UART_TxCpltCallback>
}
 8007ce4:	bf00      	nop
 8007ce6:	3740      	adds	r7, #64	; 0x40
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}

08007cec <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b084      	sub	sp, #16
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cf8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007cfa:	68f8      	ldr	r0, [r7, #12]
 8007cfc:	f7ff f9e0 	bl	80070c0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d00:	bf00      	nop
 8007d02:	3710      	adds	r7, #16
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}

08007d08 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b086      	sub	sp, #24
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d14:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007d16:	697b      	ldr	r3, [r7, #20]
 8007d18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d1c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d24:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007d26:	697b      	ldr	r3, [r7, #20]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	689b      	ldr	r3, [r3, #8]
 8007d2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d30:	2b80      	cmp	r3, #128	; 0x80
 8007d32:	d109      	bne.n	8007d48 <UART_DMAError+0x40>
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	2b21      	cmp	r3, #33	; 0x21
 8007d38:	d106      	bne.n	8007d48 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007d3a:	697b      	ldr	r3, [r7, #20]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8007d42:	6978      	ldr	r0, [r7, #20]
 8007d44:	f7ff fee0 	bl	8007b08 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007d48:	697b      	ldr	r3, [r7, #20]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	689b      	ldr	r3, [r3, #8]
 8007d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d52:	2b40      	cmp	r3, #64	; 0x40
 8007d54:	d109      	bne.n	8007d6a <UART_DMAError+0x62>
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	2b22      	cmp	r3, #34	; 0x22
 8007d5a:	d106      	bne.n	8007d6a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007d5c:	697b      	ldr	r3, [r7, #20]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8007d64:	6978      	ldr	r0, [r7, #20]
 8007d66:	f7ff ff0f 	bl	8007b88 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d70:	f043 0210 	orr.w	r2, r3, #16
 8007d74:	697b      	ldr	r3, [r7, #20]
 8007d76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007d7a:	6978      	ldr	r0, [r7, #20]
 8007d7c:	f7ff f9a9 	bl	80070d2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d80:	bf00      	nop
 8007d82:	3718      	adds	r7, #24
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}

08007d88 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b084      	sub	sp, #16
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d94:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	2200      	movs	r2, #0
 8007da2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007da6:	68f8      	ldr	r0, [r7, #12]
 8007da8:	f7ff f993 	bl	80070d2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007dac:	bf00      	nop
 8007dae:	3710      	adds	r7, #16
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}

08007db4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b088      	sub	sp, #32
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	e853 3f00 	ldrex	r3, [r3]
 8007dc8:	60bb      	str	r3, [r7, #8]
   return(result);
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007dd0:	61fb      	str	r3, [r7, #28]
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	461a      	mov	r2, r3
 8007dd8:	69fb      	ldr	r3, [r7, #28]
 8007dda:	61bb      	str	r3, [r7, #24]
 8007ddc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dde:	6979      	ldr	r1, [r7, #20]
 8007de0:	69ba      	ldr	r2, [r7, #24]
 8007de2:	e841 2300 	strex	r3, r2, [r1]
 8007de6:	613b      	str	r3, [r7, #16]
   return(result);
 8007de8:	693b      	ldr	r3, [r7, #16]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d1e6      	bne.n	8007dbc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2220      	movs	r2, #32
 8007df2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2200      	movs	r2, #0
 8007dfa:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f7fa f8b7 	bl	8001f70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e02:	bf00      	nop
 8007e04:	3720      	adds	r7, #32
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}

08007e0a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007e0a:	b580      	push	{r7, lr}
 8007e0c:	b096      	sub	sp, #88	; 0x58
 8007e0e:	af00      	add	r7, sp, #0
 8007e10:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007e18:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e22:	2b22      	cmp	r3, #34	; 0x22
 8007e24:	f040 8095 	bne.w	8007f52 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e2e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007e32:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007e36:	b2d9      	uxtb	r1, r3
 8007e38:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007e3c:	b2da      	uxtb	r2, r3
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e42:	400a      	ands	r2, r1
 8007e44:	b2d2      	uxtb	r2, r2
 8007e46:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e4c:	1c5a      	adds	r2, r3, #1
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007e58:	b29b      	uxth	r3, r3
 8007e5a:	3b01      	subs	r3, #1
 8007e5c:	b29a      	uxth	r2, r3
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007e6a:	b29b      	uxth	r3, r3
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d178      	bne.n	8007f62 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e78:	e853 3f00 	ldrex	r3, [r3]
 8007e7c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007e7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e80:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007e84:	653b      	str	r3, [r7, #80]	; 0x50
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	461a      	mov	r2, r3
 8007e8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e8e:	647b      	str	r3, [r7, #68]	; 0x44
 8007e90:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e92:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007e94:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e96:	e841 2300 	strex	r3, r2, [r1]
 8007e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007e9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d1e6      	bne.n	8007e70 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	3308      	adds	r3, #8
 8007ea8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eac:	e853 3f00 	ldrex	r3, [r3]
 8007eb0:	623b      	str	r3, [r7, #32]
   return(result);
 8007eb2:	6a3b      	ldr	r3, [r7, #32]
 8007eb4:	f023 0301 	bic.w	r3, r3, #1
 8007eb8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	3308      	adds	r3, #8
 8007ec0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007ec2:	633a      	str	r2, [r7, #48]	; 0x30
 8007ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ec6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ec8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007eca:	e841 2300 	strex	r3, r2, [r1]
 8007ece:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d1e5      	bne.n	8007ea2 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2220      	movs	r2, #32
 8007eda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ee8:	2b01      	cmp	r3, #1
 8007eea:	d12e      	bne.n	8007f4a <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ef8:	693b      	ldr	r3, [r7, #16]
 8007efa:	e853 3f00 	ldrex	r3, [r3]
 8007efe:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	f023 0310 	bic.w	r3, r3, #16
 8007f06:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	461a      	mov	r2, r3
 8007f0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f10:	61fb      	str	r3, [r7, #28]
 8007f12:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f14:	69b9      	ldr	r1, [r7, #24]
 8007f16:	69fa      	ldr	r2, [r7, #28]
 8007f18:	e841 2300 	strex	r3, r2, [r1]
 8007f1c:	617b      	str	r3, [r7, #20]
   return(result);
 8007f1e:	697b      	ldr	r3, [r7, #20]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d1e6      	bne.n	8007ef2 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	69db      	ldr	r3, [r3, #28]
 8007f2a:	f003 0310 	and.w	r3, r3, #16
 8007f2e:	2b10      	cmp	r3, #16
 8007f30:	d103      	bne.n	8007f3a <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	2210      	movs	r2, #16
 8007f38:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007f40:	4619      	mov	r1, r3
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f7ff f8ce 	bl	80070e4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007f48:	e00b      	b.n	8007f62 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f7fa f81e 	bl	8001f8c <HAL_UART_RxCpltCallback>
}
 8007f50:	e007      	b.n	8007f62 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	699a      	ldr	r2, [r3, #24]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f042 0208 	orr.w	r2, r2, #8
 8007f60:	619a      	str	r2, [r3, #24]
}
 8007f62:	bf00      	nop
 8007f64:	3758      	adds	r7, #88	; 0x58
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}

08007f6a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007f6a:	b580      	push	{r7, lr}
 8007f6c:	b096      	sub	sp, #88	; 0x58
 8007f6e:	af00      	add	r7, sp, #0
 8007f70:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007f78:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f82:	2b22      	cmp	r3, #34	; 0x22
 8007f84:	f040 8095 	bne.w	80080b2 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f8e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f96:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007f98:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8007f9c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007fa0:	4013      	ands	r3, r2
 8007fa2:	b29a      	uxth	r2, r3
 8007fa4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007fa6:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fac:	1c9a      	adds	r2, r3, #2
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007fb8:	b29b      	uxth	r3, r3
 8007fba:	3b01      	subs	r3, #1
 8007fbc:	b29a      	uxth	r2, r3
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007fca:	b29b      	uxth	r3, r3
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d178      	bne.n	80080c2 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fd8:	e853 3f00 	ldrex	r3, [r3]
 8007fdc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007fe4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	461a      	mov	r2, r3
 8007fec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fee:	643b      	str	r3, [r7, #64]	; 0x40
 8007ff0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ff2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007ff4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007ff6:	e841 2300 	strex	r3, r2, [r1]
 8007ffa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d1e6      	bne.n	8007fd0 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	3308      	adds	r3, #8
 8008008:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800800a:	6a3b      	ldr	r3, [r7, #32]
 800800c:	e853 3f00 	ldrex	r3, [r3]
 8008010:	61fb      	str	r3, [r7, #28]
   return(result);
 8008012:	69fb      	ldr	r3, [r7, #28]
 8008014:	f023 0301 	bic.w	r3, r3, #1
 8008018:	64bb      	str	r3, [r7, #72]	; 0x48
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	3308      	adds	r3, #8
 8008020:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008022:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008024:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008026:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008028:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800802a:	e841 2300 	strex	r3, r2, [r1]
 800802e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008032:	2b00      	cmp	r3, #0
 8008034:	d1e5      	bne.n	8008002 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2220      	movs	r2, #32
 800803a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2200      	movs	r2, #0
 8008042:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008048:	2b01      	cmp	r3, #1
 800804a:	d12e      	bne.n	80080aa <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2200      	movs	r2, #0
 8008050:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	e853 3f00 	ldrex	r3, [r3]
 800805e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	f023 0310 	bic.w	r3, r3, #16
 8008066:	647b      	str	r3, [r7, #68]	; 0x44
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	461a      	mov	r2, r3
 800806e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008070:	61bb      	str	r3, [r7, #24]
 8008072:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008074:	6979      	ldr	r1, [r7, #20]
 8008076:	69ba      	ldr	r2, [r7, #24]
 8008078:	e841 2300 	strex	r3, r2, [r1]
 800807c:	613b      	str	r3, [r7, #16]
   return(result);
 800807e:	693b      	ldr	r3, [r7, #16]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d1e6      	bne.n	8008052 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	69db      	ldr	r3, [r3, #28]
 800808a:	f003 0310 	and.w	r3, r3, #16
 800808e:	2b10      	cmp	r3, #16
 8008090:	d103      	bne.n	800809a <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	2210      	movs	r2, #16
 8008098:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80080a0:	4619      	mov	r1, r3
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f7ff f81e 	bl	80070e4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80080a8:	e00b      	b.n	80080c2 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f7f9 ff6e 	bl	8001f8c <HAL_UART_RxCpltCallback>
}
 80080b0:	e007      	b.n	80080c2 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	699a      	ldr	r2, [r3, #24]
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f042 0208 	orr.w	r2, r2, #8
 80080c0:	619a      	str	r2, [r3, #24]
}
 80080c2:	bf00      	nop
 80080c4:	3758      	adds	r7, #88	; 0x58
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}
	...

080080cc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b0a6      	sub	sp, #152	; 0x98
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80080da:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	69db      	ldr	r3, [r3, #28]
 80080e4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	689b      	ldr	r3, [r3, #8]
 80080f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008102:	2b22      	cmp	r3, #34	; 0x22
 8008104:	f040 814f 	bne.w	80083a6 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800810e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008112:	e0f6      	b.n	8008302 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800811a:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800811e:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8008122:	b2d9      	uxtb	r1, r3
 8008124:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8008128:	b2da      	uxtb	r2, r3
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800812e:	400a      	ands	r2, r1
 8008130:	b2d2      	uxtb	r2, r2
 8008132:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008138:	1c5a      	adds	r2, r3, #1
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008144:	b29b      	uxth	r3, r3
 8008146:	3b01      	subs	r3, #1
 8008148:	b29a      	uxth	r2, r3
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	69db      	ldr	r3, [r3, #28]
 8008156:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800815a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800815e:	f003 0307 	and.w	r3, r3, #7
 8008162:	2b00      	cmp	r3, #0
 8008164:	d053      	beq.n	800820e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008166:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800816a:	f003 0301 	and.w	r3, r3, #1
 800816e:	2b00      	cmp	r3, #0
 8008170:	d011      	beq.n	8008196 <UART_RxISR_8BIT_FIFOEN+0xca>
 8008172:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008176:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800817a:	2b00      	cmp	r3, #0
 800817c:	d00b      	beq.n	8008196 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	2201      	movs	r2, #1
 8008184:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800818c:	f043 0201 	orr.w	r2, r3, #1
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008196:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800819a:	f003 0302 	and.w	r3, r3, #2
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d011      	beq.n	80081c6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80081a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80081a6:	f003 0301 	and.w	r3, r3, #1
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d00b      	beq.n	80081c6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	2202      	movs	r2, #2
 80081b4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081bc:	f043 0204 	orr.w	r2, r3, #4
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80081c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80081ca:	f003 0304 	and.w	r3, r3, #4
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d011      	beq.n	80081f6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80081d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80081d6:	f003 0301 	and.w	r3, r3, #1
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d00b      	beq.n	80081f6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	2204      	movs	r2, #4
 80081e4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081ec:	f043 0202 	orr.w	r2, r3, #2
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d006      	beq.n	800820e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f7fe ff66 	bl	80070d2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2200      	movs	r2, #0
 800820a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008214:	b29b      	uxth	r3, r3
 8008216:	2b00      	cmp	r3, #0
 8008218:	d173      	bne.n	8008302 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008220:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008222:	e853 3f00 	ldrex	r3, [r3]
 8008226:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8008228:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800822a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800822e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	461a      	mov	r2, r3
 8008238:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800823c:	66bb      	str	r3, [r7, #104]	; 0x68
 800823e:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008240:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8008242:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008244:	e841 2300 	strex	r3, r2, [r1]
 8008248:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800824a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800824c:	2b00      	cmp	r3, #0
 800824e:	d1e4      	bne.n	800821a <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	3308      	adds	r3, #8
 8008256:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008258:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800825a:	e853 3f00 	ldrex	r3, [r3]
 800825e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008260:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008262:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008266:	f023 0301 	bic.w	r3, r3, #1
 800826a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	3308      	adds	r3, #8
 8008272:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008274:	657a      	str	r2, [r7, #84]	; 0x54
 8008276:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008278:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800827a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800827c:	e841 2300 	strex	r3, r2, [r1]
 8008280:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008282:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008284:	2b00      	cmp	r3, #0
 8008286:	d1e3      	bne.n	8008250 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2220      	movs	r2, #32
 800828c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2200      	movs	r2, #0
 8008294:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800829a:	2b01      	cmp	r3, #1
 800829c:	d12e      	bne.n	80082fc <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2200      	movs	r2, #0
 80082a2:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082ac:	e853 3f00 	ldrex	r3, [r3]
 80082b0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80082b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082b4:	f023 0310 	bic.w	r3, r3, #16
 80082b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	461a      	mov	r2, r3
 80082c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80082c2:	643b      	str	r3, [r7, #64]	; 0x40
 80082c4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082c6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80082c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80082ca:	e841 2300 	strex	r3, r2, [r1]
 80082ce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80082d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d1e6      	bne.n	80082a4 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	69db      	ldr	r3, [r3, #28]
 80082dc:	f003 0310 	and.w	r3, r3, #16
 80082e0:	2b10      	cmp	r3, #16
 80082e2:	d103      	bne.n	80082ec <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	2210      	movs	r2, #16
 80082ea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80082f2:	4619      	mov	r1, r3
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f7fe fef5 	bl	80070e4 <HAL_UARTEx_RxEventCallback>
 80082fa:	e002      	b.n	8008302 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f7f9 fe45 	bl	8001f8c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008302:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8008306:	2b00      	cmp	r3, #0
 8008308:	d006      	beq.n	8008318 <UART_RxISR_8BIT_FIFOEN+0x24c>
 800830a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800830e:	f003 0320 	and.w	r3, r3, #32
 8008312:	2b00      	cmp	r3, #0
 8008314:	f47f aefe 	bne.w	8008114 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800831e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008322:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8008326:	2b00      	cmp	r3, #0
 8008328:	d045      	beq.n	80083b6 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008330:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008334:	429a      	cmp	r2, r3
 8008336:	d23e      	bcs.n	80083b6 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	3308      	adds	r3, #8
 800833e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008340:	6a3b      	ldr	r3, [r7, #32]
 8008342:	e853 3f00 	ldrex	r3, [r3]
 8008346:	61fb      	str	r3, [r7, #28]
   return(result);
 8008348:	69fb      	ldr	r3, [r7, #28]
 800834a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800834e:	673b      	str	r3, [r7, #112]	; 0x70
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	3308      	adds	r3, #8
 8008356:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008358:	62fa      	str	r2, [r7, #44]	; 0x2c
 800835a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800835c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800835e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008360:	e841 2300 	strex	r3, r2, [r1]
 8008364:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008368:	2b00      	cmp	r3, #0
 800836a:	d1e5      	bne.n	8008338 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	4a14      	ldr	r2, [pc, #80]	; (80083c0 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8008370:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	e853 3f00 	ldrex	r3, [r3]
 800837e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	f043 0320 	orr.w	r3, r3, #32
 8008386:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	461a      	mov	r2, r3
 800838e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008390:	61bb      	str	r3, [r7, #24]
 8008392:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008394:	6979      	ldr	r1, [r7, #20]
 8008396:	69ba      	ldr	r2, [r7, #24]
 8008398:	e841 2300 	strex	r3, r2, [r1]
 800839c:	613b      	str	r3, [r7, #16]
   return(result);
 800839e:	693b      	ldr	r3, [r7, #16]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d1e6      	bne.n	8008372 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80083a4:	e007      	b.n	80083b6 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	699a      	ldr	r2, [r3, #24]
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f042 0208 	orr.w	r2, r2, #8
 80083b4:	619a      	str	r2, [r3, #24]
}
 80083b6:	bf00      	nop
 80083b8:	3798      	adds	r7, #152	; 0x98
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}
 80083be:	bf00      	nop
 80083c0:	08007e0b 	.word	0x08007e0b

080083c4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b0a8      	sub	sp, #160	; 0xa0
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80083d2:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	69db      	ldr	r3, [r3, #28]
 80083dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	689b      	ldr	r3, [r3, #8]
 80083f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083fa:	2b22      	cmp	r3, #34	; 0x22
 80083fc:	f040 8153 	bne.w	80086a6 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008406:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800840a:	e0fa      	b.n	8008602 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008412:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800841a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800841e:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8008422:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8008426:	4013      	ands	r3, r2
 8008428:	b29a      	uxth	r2, r3
 800842a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800842e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008434:	1c9a      	adds	r2, r3, #2
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008440:	b29b      	uxth	r3, r3
 8008442:	3b01      	subs	r3, #1
 8008444:	b29a      	uxth	r2, r3
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	69db      	ldr	r3, [r3, #28]
 8008452:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008456:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800845a:	f003 0307 	and.w	r3, r3, #7
 800845e:	2b00      	cmp	r3, #0
 8008460:	d053      	beq.n	800850a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008462:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008466:	f003 0301 	and.w	r3, r3, #1
 800846a:	2b00      	cmp	r3, #0
 800846c:	d011      	beq.n	8008492 <UART_RxISR_16BIT_FIFOEN+0xce>
 800846e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008476:	2b00      	cmp	r3, #0
 8008478:	d00b      	beq.n	8008492 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	2201      	movs	r2, #1
 8008480:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008488:	f043 0201 	orr.w	r2, r3, #1
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008492:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008496:	f003 0302 	and.w	r3, r3, #2
 800849a:	2b00      	cmp	r3, #0
 800849c:	d011      	beq.n	80084c2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800849e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80084a2:	f003 0301 	and.w	r3, r3, #1
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d00b      	beq.n	80084c2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	2202      	movs	r2, #2
 80084b0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084b8:	f043 0204 	orr.w	r2, r3, #4
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80084c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80084c6:	f003 0304 	and.w	r3, r3, #4
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d011      	beq.n	80084f2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80084ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80084d2:	f003 0301 	and.w	r3, r3, #1
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d00b      	beq.n	80084f2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	2204      	movs	r2, #4
 80084e0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084e8:	f043 0202 	orr.w	r2, r3, #2
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d006      	beq.n	800850a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	f7fe fde8 	bl	80070d2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2200      	movs	r2, #0
 8008506:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008510:	b29b      	uxth	r3, r3
 8008512:	2b00      	cmp	r3, #0
 8008514:	d175      	bne.n	8008602 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800851c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800851e:	e853 3f00 	ldrex	r3, [r3]
 8008522:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008524:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008526:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800852a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	461a      	mov	r2, r3
 8008534:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008538:	66fb      	str	r3, [r7, #108]	; 0x6c
 800853a:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800853c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800853e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008540:	e841 2300 	strex	r3, r2, [r1]
 8008544:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008546:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008548:	2b00      	cmp	r3, #0
 800854a:	d1e4      	bne.n	8008516 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	3308      	adds	r3, #8
 8008552:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008554:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008556:	e853 3f00 	ldrex	r3, [r3]
 800855a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800855c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800855e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008562:	f023 0301 	bic.w	r3, r3, #1
 8008566:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	3308      	adds	r3, #8
 8008570:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008574:	65ba      	str	r2, [r7, #88]	; 0x58
 8008576:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008578:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800857a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800857c:	e841 2300 	strex	r3, r2, [r1]
 8008580:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008582:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008584:	2b00      	cmp	r3, #0
 8008586:	d1e1      	bne.n	800854c <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2220      	movs	r2, #32
 800858c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2200      	movs	r2, #0
 8008594:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800859a:	2b01      	cmp	r3, #1
 800859c:	d12e      	bne.n	80085fc <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2200      	movs	r2, #0
 80085a2:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085ac:	e853 3f00 	ldrex	r3, [r3]
 80085b0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80085b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085b4:	f023 0310 	bic.w	r3, r3, #16
 80085b8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	461a      	mov	r2, r3
 80085c0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80085c2:	647b      	str	r3, [r7, #68]	; 0x44
 80085c4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80085c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80085ca:	e841 2300 	strex	r3, r2, [r1]
 80085ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80085d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d1e6      	bne.n	80085a4 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	69db      	ldr	r3, [r3, #28]
 80085dc:	f003 0310 	and.w	r3, r3, #16
 80085e0:	2b10      	cmp	r3, #16
 80085e2:	d103      	bne.n	80085ec <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	2210      	movs	r2, #16
 80085ea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80085f2:	4619      	mov	r1, r3
 80085f4:	6878      	ldr	r0, [r7, #4]
 80085f6:	f7fe fd75 	bl	80070e4 <HAL_UARTEx_RxEventCallback>
 80085fa:	e002      	b.n	8008602 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	f7f9 fcc5 	bl	8001f8c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008602:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008606:	2b00      	cmp	r3, #0
 8008608:	d006      	beq.n	8008618 <UART_RxISR_16BIT_FIFOEN+0x254>
 800860a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800860e:	f003 0320 	and.w	r3, r3, #32
 8008612:	2b00      	cmp	r3, #0
 8008614:	f47f aefa 	bne.w	800840c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800861e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008622:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8008626:	2b00      	cmp	r3, #0
 8008628:	d045      	beq.n	80086b6 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008630:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8008634:	429a      	cmp	r2, r3
 8008636:	d23e      	bcs.n	80086b6 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	3308      	adds	r3, #8
 800863e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008642:	e853 3f00 	ldrex	r3, [r3]
 8008646:	623b      	str	r3, [r7, #32]
   return(result);
 8008648:	6a3b      	ldr	r3, [r7, #32]
 800864a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800864e:	677b      	str	r3, [r7, #116]	; 0x74
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	3308      	adds	r3, #8
 8008656:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008658:	633a      	str	r2, [r7, #48]	; 0x30
 800865a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800865c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800865e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008660:	e841 2300 	strex	r3, r2, [r1]
 8008664:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008668:	2b00      	cmp	r3, #0
 800866a:	d1e5      	bne.n	8008638 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	4a14      	ldr	r2, [pc, #80]	; (80086c0 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8008670:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008678:	693b      	ldr	r3, [r7, #16]
 800867a:	e853 3f00 	ldrex	r3, [r3]
 800867e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	f043 0320 	orr.w	r3, r3, #32
 8008686:	673b      	str	r3, [r7, #112]	; 0x70
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	461a      	mov	r2, r3
 800868e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008690:	61fb      	str	r3, [r7, #28]
 8008692:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008694:	69b9      	ldr	r1, [r7, #24]
 8008696:	69fa      	ldr	r2, [r7, #28]
 8008698:	e841 2300 	strex	r3, r2, [r1]
 800869c:	617b      	str	r3, [r7, #20]
   return(result);
 800869e:	697b      	ldr	r3, [r7, #20]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d1e6      	bne.n	8008672 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80086a4:	e007      	b.n	80086b6 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	699a      	ldr	r2, [r3, #24]
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f042 0208 	orr.w	r2, r2, #8
 80086b4:	619a      	str	r2, [r3, #24]
}
 80086b6:	bf00      	nop
 80086b8:	37a0      	adds	r7, #160	; 0xa0
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}
 80086be:	bf00      	nop
 80086c0:	08007f6b 	.word	0x08007f6b

080086c4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80086c4:	b480      	push	{r7}
 80086c6:	b083      	sub	sp, #12
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80086cc:	bf00      	nop
 80086ce:	370c      	adds	r7, #12
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bc80      	pop	{r7}
 80086d4:	4770      	bx	lr

080086d6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80086d6:	b480      	push	{r7}
 80086d8:	b083      	sub	sp, #12
 80086da:	af00      	add	r7, sp, #0
 80086dc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80086de:	bf00      	nop
 80086e0:	370c      	adds	r7, #12
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bc80      	pop	{r7}
 80086e6:	4770      	bx	lr

080086e8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80086e8:	b480      	push	{r7}
 80086ea:	b083      	sub	sp, #12
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80086f0:	bf00      	nop
 80086f2:	370c      	adds	r7, #12
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bc80      	pop	{r7}
 80086f8:	4770      	bx	lr

080086fa <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 80086fa:	b580      	push	{r7, lr}
 80086fc:	b088      	sub	sp, #32
 80086fe:	af02      	add	r7, sp, #8
 8008700:	60f8      	str	r0, [r7, #12]
 8008702:	1d3b      	adds	r3, r7, #4
 8008704:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 8008708:	2300      	movs	r3, #0
 800870a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008712:	2b01      	cmp	r3, #1
 8008714:	d101      	bne.n	800871a <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 8008716:	2302      	movs	r3, #2
 8008718:	e046      	b.n	80087a8 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	2201      	movs	r2, #1
 800871e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	2224      	movs	r2, #36	; 0x24
 8008726:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	681a      	ldr	r2, [r3, #0]
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f022 0201 	bic.w	r2, r2, #1
 8008738:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	689b      	ldr	r3, [r3, #8]
 8008740:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8008744:	687a      	ldr	r2, [r7, #4]
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	430a      	orrs	r2, r1
 800874c:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d105      	bne.n	8008760 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8008754:	1d3b      	adds	r3, r7, #4
 8008756:	e893 0006 	ldmia.w	r3, {r1, r2}
 800875a:	68f8      	ldr	r0, [r7, #12]
 800875c:	f000 f90e 	bl	800897c <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	681a      	ldr	r2, [r3, #0]
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f042 0201 	orr.w	r2, r2, #1
 800876e:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008770:	f7f8 ffbe 	bl	80016f0 <HAL_GetTick>
 8008774:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008776:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800877a:	9300      	str	r3, [sp, #0]
 800877c:	693b      	ldr	r3, [r7, #16]
 800877e:	2200      	movs	r2, #0
 8008780:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008784:	68f8      	ldr	r0, [r7, #12]
 8008786:	f7fe fff5 	bl	8007774 <UART_WaitOnFlagUntilTimeout>
 800878a:	4603      	mov	r3, r0
 800878c:	2b00      	cmp	r3, #0
 800878e:	d002      	beq.n	8008796 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 8008790:	2303      	movs	r3, #3
 8008792:	75fb      	strb	r3, [r7, #23]
 8008794:	e003      	b.n	800879e <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	2220      	movs	r2, #32
 800879a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	2200      	movs	r2, #0
 80087a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return status;
 80087a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80087a8:	4618      	mov	r0, r3
 80087aa:	3718      	adds	r7, #24
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}

080087b0 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 80087b0:	b480      	push	{r7}
 80087b2:	b089      	sub	sp, #36	; 0x24
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80087be:	2b01      	cmp	r3, #1
 80087c0:	d101      	bne.n	80087c6 <HAL_UARTEx_EnableStopMode+0x16>
 80087c2:	2302      	movs	r3, #2
 80087c4:	e021      	b.n	800880a <HAL_UARTEx_EnableStopMode+0x5a>
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2201      	movs	r2, #1
 80087ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	e853 3f00 	ldrex	r3, [r3]
 80087da:	60bb      	str	r3, [r7, #8]
   return(result);
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	f043 0302 	orr.w	r3, r3, #2
 80087e2:	61fb      	str	r3, [r7, #28]
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	461a      	mov	r2, r3
 80087ea:	69fb      	ldr	r3, [r7, #28]
 80087ec:	61bb      	str	r3, [r7, #24]
 80087ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087f0:	6979      	ldr	r1, [r7, #20]
 80087f2:	69ba      	ldr	r2, [r7, #24]
 80087f4:	e841 2300 	strex	r3, r2, [r1]
 80087f8:	613b      	str	r3, [r7, #16]
   return(result);
 80087fa:	693b      	ldr	r3, [r7, #16]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d1e6      	bne.n	80087ce <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2200      	movs	r2, #0
 8008804:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008808:	2300      	movs	r3, #0
}
 800880a:	4618      	mov	r0, r3
 800880c:	3724      	adds	r7, #36	; 0x24
 800880e:	46bd      	mov	sp, r7
 8008810:	bc80      	pop	{r7}
 8008812:	4770      	bx	lr

08008814 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008814:	b480      	push	{r7}
 8008816:	b085      	sub	sp, #20
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008822:	2b01      	cmp	r3, #1
 8008824:	d101      	bne.n	800882a <HAL_UARTEx_DisableFifoMode+0x16>
 8008826:	2302      	movs	r3, #2
 8008828:	e027      	b.n	800887a <HAL_UARTEx_DisableFifoMode+0x66>
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2201      	movs	r2, #1
 800882e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2224      	movs	r2, #36	; 0x24
 8008836:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	681a      	ldr	r2, [r3, #0]
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f022 0201 	bic.w	r2, r2, #1
 8008850:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008858:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2200      	movs	r2, #0
 800885e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	68fa      	ldr	r2, [r7, #12]
 8008866:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2220      	movs	r2, #32
 800886c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2200      	movs	r2, #0
 8008874:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008878:	2300      	movs	r3, #0
}
 800887a:	4618      	mov	r0, r3
 800887c:	3714      	adds	r7, #20
 800887e:	46bd      	mov	sp, r7
 8008880:	bc80      	pop	{r7}
 8008882:	4770      	bx	lr

08008884 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b084      	sub	sp, #16
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
 800888c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008894:	2b01      	cmp	r3, #1
 8008896:	d101      	bne.n	800889c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008898:	2302      	movs	r3, #2
 800889a:	e02d      	b.n	80088f8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2201      	movs	r2, #1
 80088a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2224      	movs	r2, #36	; 0x24
 80088a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	681a      	ldr	r2, [r3, #0]
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f022 0201 	bic.w	r2, r2, #1
 80088c2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	689b      	ldr	r3, [r3, #8]
 80088ca:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	683a      	ldr	r2, [r7, #0]
 80088d4:	430a      	orrs	r2, r1
 80088d6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	f000 f871 	bl	80089c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	68fa      	ldr	r2, [r7, #12]
 80088e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2220      	movs	r2, #32
 80088ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2200      	movs	r2, #0
 80088f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80088f6:	2300      	movs	r3, #0
}
 80088f8:	4618      	mov	r0, r3
 80088fa:	3710      	adds	r7, #16
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bd80      	pop	{r7, pc}

08008900 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b084      	sub	sp, #16
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
 8008908:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008910:	2b01      	cmp	r3, #1
 8008912:	d101      	bne.n	8008918 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008914:	2302      	movs	r3, #2
 8008916:	e02d      	b.n	8008974 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2201      	movs	r2, #1
 800891c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2224      	movs	r2, #36	; 0x24
 8008924:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	681a      	ldr	r2, [r3, #0]
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f022 0201 	bic.w	r2, r2, #1
 800893e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	689b      	ldr	r3, [r3, #8]
 8008946:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	683a      	ldr	r2, [r7, #0]
 8008950:	430a      	orrs	r2, r1
 8008952:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	f000 f833 	bl	80089c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	68fa      	ldr	r2, [r7, #12]
 8008960:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2220      	movs	r2, #32
 8008966:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2200      	movs	r2, #0
 800896e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008972:	2300      	movs	r3, #0
}
 8008974:	4618      	mov	r0, r3
 8008976:	3710      	adds	r7, #16
 8008978:	46bd      	mov	sp, r7
 800897a:	bd80      	pop	{r7, pc}

0800897c <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800897c:	b480      	push	{r7}
 800897e:	b085      	sub	sp, #20
 8008980:	af00      	add	r7, sp, #0
 8008982:	60f8      	str	r0, [r7, #12]
 8008984:	1d3b      	adds	r3, r7, #4
 8008986:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	685b      	ldr	r3, [r3, #4]
 8008990:	f023 0210 	bic.w	r2, r3, #16
 8008994:	893b      	ldrh	r3, [r7, #8]
 8008996:	4619      	mov	r1, r3
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	430a      	orrs	r2, r1
 800899e:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	685b      	ldr	r3, [r3, #4]
 80089a6:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 80089aa:	7abb      	ldrb	r3, [r7, #10]
 80089ac:	061a      	lsls	r2, r3, #24
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	430a      	orrs	r2, r1
 80089b4:	605a      	str	r2, [r3, #4]
}
 80089b6:	bf00      	nop
 80089b8:	3714      	adds	r7, #20
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bc80      	pop	{r7}
 80089be:	4770      	bx	lr

080089c0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80089c0:	b480      	push	{r7}
 80089c2:	b085      	sub	sp, #20
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d108      	bne.n	80089e2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2201      	movs	r2, #1
 80089d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2201      	movs	r2, #1
 80089dc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80089e0:	e031      	b.n	8008a46 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80089e2:	2308      	movs	r3, #8
 80089e4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80089e6:	2308      	movs	r3, #8
 80089e8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	689b      	ldr	r3, [r3, #8]
 80089f0:	0e5b      	lsrs	r3, r3, #25
 80089f2:	b2db      	uxtb	r3, r3
 80089f4:	f003 0307 	and.w	r3, r3, #7
 80089f8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	689b      	ldr	r3, [r3, #8]
 8008a00:	0f5b      	lsrs	r3, r3, #29
 8008a02:	b2db      	uxtb	r3, r3
 8008a04:	f003 0307 	and.w	r3, r3, #7
 8008a08:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008a0a:	7bbb      	ldrb	r3, [r7, #14]
 8008a0c:	7b3a      	ldrb	r2, [r7, #12]
 8008a0e:	4910      	ldr	r1, [pc, #64]	; (8008a50 <UARTEx_SetNbDataToProcess+0x90>)
 8008a10:	5c8a      	ldrb	r2, [r1, r2]
 8008a12:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008a16:	7b3a      	ldrb	r2, [r7, #12]
 8008a18:	490e      	ldr	r1, [pc, #56]	; (8008a54 <UARTEx_SetNbDataToProcess+0x94>)
 8008a1a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008a1c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008a20:	b29a      	uxth	r2, r3
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008a28:	7bfb      	ldrb	r3, [r7, #15]
 8008a2a:	7b7a      	ldrb	r2, [r7, #13]
 8008a2c:	4908      	ldr	r1, [pc, #32]	; (8008a50 <UARTEx_SetNbDataToProcess+0x90>)
 8008a2e:	5c8a      	ldrb	r2, [r1, r2]
 8008a30:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008a34:	7b7a      	ldrb	r2, [r7, #13]
 8008a36:	4907      	ldr	r1, [pc, #28]	; (8008a54 <UARTEx_SetNbDataToProcess+0x94>)
 8008a38:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008a3a:	fb93 f3f2 	sdiv	r3, r3, r2
 8008a3e:	b29a      	uxth	r2, r3
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008a46:	bf00      	nop
 8008a48:	3714      	adds	r7, #20
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bc80      	pop	{r7}
 8008a4e:	4770      	bx	lr
 8008a50:	0801991c 	.word	0x0801991c
 8008a54:	08019924 	.word	0x08019924

08008a58 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 8008a5c:	f7f8 fcfa 	bl	8001454 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 8008a60:	f000 f80a 	bl	8008a78 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 8008a64:	bf00      	nop
 8008a66:	bd80      	pop	{r7, pc}

08008a68 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8008a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a70:	f00f fc52 	bl	8018318 <UTIL_SEQ_Run>
	//SendTxData();
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 8008a74:	bf00      	nop
 8008a76:	bd80      	pop	{r7, pc}

08008a78 <LoRaWAN_Init>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b082      	sub	sp, #8
 8008a7c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN LoRaWAN_Init_1 */

  /* USER CODE END LoRaWAN_Init_1 */

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 8008a7e:	4a17      	ldr	r2, [pc, #92]	; (8008adc <LoRaWAN_Init+0x64>)
 8008a80:	2100      	movs	r1, #0
 8008a82:	2001      	movs	r0, #1
 8008a84:	f00f fd2c 	bl	80184e0 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 8008a88:	4a15      	ldr	r2, [pc, #84]	; (8008ae0 <LoRaWAN_Init+0x68>)
 8008a8a:	2100      	movs	r1, #0
 8008a8c:	2002      	movs	r0, #2
 8008a8e:	f00f fd27 	bl	80184e0 <UTIL_SEQ_RegTask>
  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 8008a92:	f000 f931 	bl	8008cf8 <LoraInfo_Init>

  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks);
 8008a96:	4813      	ldr	r0, [pc, #76]	; (8008ae4 <LoRaWAN_Init+0x6c>)
 8008a98:	f001 fdb2 	bl	800a600 <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 8008a9c:	4812      	ldr	r0, [pc, #72]	; (8008ae8 <LoRaWAN_Init+0x70>)
 8008a9e:	f001 fdfb 	bl	800a698 <LmHandlerConfigure>

  /* USER CODE BEGIN LoRaWAN_Init_2 */
  /* USER CODE END LoRaWAN_Init_2 */

  LmHandlerJoin(ActivationType);
 8008aa2:	4b12      	ldr	r3, [pc, #72]	; (8008aec <LoRaWAN_Init+0x74>)
 8008aa4:	781b      	ldrb	r3, [r3, #0]
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	f001 ff22 	bl	800a8f0 <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 8008aac:	4b10      	ldr	r3, [pc, #64]	; (8008af0 <LoRaWAN_Init+0x78>)
 8008aae:	781b      	ldrb	r3, [r3, #0]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d110      	bne.n	8008ad6 <LoRaWAN_Init+0x5e>
  {
    /* send every time timer elapses */
    UTIL_TIMER_Create(&TxTimer,  0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	9300      	str	r3, [sp, #0]
 8008ab8:	4b0e      	ldr	r3, [pc, #56]	; (8008af4 <LoRaWAN_Init+0x7c>)
 8008aba:	2200      	movs	r2, #0
 8008abc:	f04f 31ff 	mov.w	r1, #4294967295
 8008ac0:	480d      	ldr	r0, [pc, #52]	; (8008af8 <LoRaWAN_Init+0x80>)
 8008ac2:	f00f fdaf 	bl	8018624 <UTIL_TIMER_Create>
    UTIL_TIMER_SetPeriod(&TxTimer,  APP_TX_DUTYCYCLE);
 8008ac6:	f242 7110 	movw	r1, #10000	; 0x2710
 8008aca:	480b      	ldr	r0, [pc, #44]	; (8008af8 <LoRaWAN_Init+0x80>)
 8008acc:	f00f febe 	bl	801884c <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 8008ad0:	4809      	ldr	r0, [pc, #36]	; (8008af8 <LoRaWAN_Init+0x80>)
 8008ad2:	f00f fddd 	bl	8018690 <UTIL_TIMER_Start>
  }

  /* USER CODE BEGIN LoRaWAN_Init_Last */

  /* USER CODE END LoRaWAN_Init_Last */
}
 8008ad6:	bf00      	nop
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}
 8008adc:	0800a8dd 	.word	0x0800a8dd
 8008ae0:	08008c19 	.word	0x08008c19
 8008ae4:	2000000c 	.word	0x2000000c
 8008ae8:	20000040 	.word	0x20000040
 8008aec:	20000009 	.word	0x20000009
 8008af0:	20000130 	.word	0x20000130
 8008af4:	08008ca1 	.word	0x08008ca1
 8008af8:	20000134 	.word	0x20000134

08008afc <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 8008afc:	b5b0      	push	{r4, r5, r7, lr}
 8008afe:	b088      	sub	sp, #32
 8008b00:	af06      	add	r7, sp, #24
 8008b02:	6078      	str	r0, [r7, #4]
 8008b04:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */

	if ((appData != NULL) && (params != NULL))
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d06f      	beq.n	8008bec <OnRxData+0xf0>
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d06c      	beq.n	8008bec <OnRxData+0xf0>
	{
		static const char *slotStrings[] = { "1", "2", "C", "C Multicast", "B Ping-Slot", "B Multicast Ping-Slot" };

		APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Indication ==========\r\n");
 8008b12:	4b3b      	ldr	r3, [pc, #236]	; (8008c00 <OnRxData+0x104>)
 8008b14:	2200      	movs	r2, #0
 8008b16:	2100      	movs	r1, #0
 8008b18:	2002      	movs	r0, #2
 8008b1a:	f010 f831 	bl	8018b80 <UTIL_ADV_TRACE_COND_FSend>
		APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | SLOT:%s | PORT:%d | DR:%d | RSSI:%d | SNR:%d\r\n",
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	689b      	ldr	r3, [r3, #8]
 8008b22:	683a      	ldr	r2, [r7, #0]
 8008b24:	f992 200c 	ldrsb.w	r2, [r2, #12]
 8008b28:	4611      	mov	r1, r2
 8008b2a:	4a36      	ldr	r2, [pc, #216]	; (8008c04 <OnRxData+0x108>)
 8008b2c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8008b30:	6879      	ldr	r1, [r7, #4]
 8008b32:	7809      	ldrb	r1, [r1, #0]
 8008b34:	4608      	mov	r0, r1
 8008b36:	6839      	ldr	r1, [r7, #0]
 8008b38:	f991 1002 	ldrsb.w	r1, [r1, #2]
 8008b3c:	460c      	mov	r4, r1
 8008b3e:	6839      	ldr	r1, [r7, #0]
 8008b40:	f991 1003 	ldrsb.w	r1, [r1, #3]
 8008b44:	460d      	mov	r5, r1
 8008b46:	6839      	ldr	r1, [r7, #0]
 8008b48:	f991 1004 	ldrsb.w	r1, [r1, #4]
 8008b4c:	9105      	str	r1, [sp, #20]
 8008b4e:	9504      	str	r5, [sp, #16]
 8008b50:	9403      	str	r4, [sp, #12]
 8008b52:	9002      	str	r0, [sp, #8]
 8008b54:	9201      	str	r2, [sp, #4]
 8008b56:	9300      	str	r3, [sp, #0]
 8008b58:	4b2b      	ldr	r3, [pc, #172]	; (8008c08 <OnRxData+0x10c>)
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	2100      	movs	r1, #0
 8008b5e:	2003      	movs	r0, #3
 8008b60:	f010 f80e 	bl	8018b80 <UTIL_ADV_TRACE_COND_FSend>
				params->DownlinkCounter, slotStrings[params->RxSlot], appData->Port, params->Datarate, params->Rssi, params->Snr);
		switch (appData->Port)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	781b      	ldrb	r3, [r3, #0]
 8008b68:	2b02      	cmp	r3, #2
 8008b6a:	d021      	beq.n	8008bb0 <OnRxData+0xb4>
 8008b6c:	2b03      	cmp	r3, #3
 8008b6e:	d13f      	bne.n	8008bf0 <OnRxData+0xf4>
		{
		  case LORAWAN_SWITCH_CLASS_PORT:
			/*this port switches the class*/
			if (appData->BufferSize == 1)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	785b      	ldrb	r3, [r3, #1]
 8008b74:	2b01      	cmp	r3, #1
 8008b76:	d117      	bne.n	8008ba8 <OnRxData+0xac>
			{
			  switch (appData->Buffer[0])
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	685b      	ldr	r3, [r3, #4]
 8008b7c:	781b      	ldrb	r3, [r3, #0]
 8008b7e:	2b02      	cmp	r3, #2
 8008b80:	d00e      	beq.n	8008ba0 <OnRxData+0xa4>
 8008b82:	2b02      	cmp	r3, #2
 8008b84:	dc12      	bgt.n	8008bac <OnRxData+0xb0>
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d002      	beq.n	8008b90 <OnRxData+0x94>
 8008b8a:	2b01      	cmp	r3, #1
 8008b8c:	d004      	beq.n	8008b98 <OnRxData+0x9c>
				{
				  LmHandlerRequestClass(CLASS_C);
				  break;
				}
				default:
				  break;
 8008b8e:	e00d      	b.n	8008bac <OnRxData+0xb0>
				  LmHandlerRequestClass(CLASS_A);
 8008b90:	2000      	movs	r0, #0
 8008b92:	f002 f80f 	bl	800abb4 <LmHandlerRequestClass>
				  break;
 8008b96:	e00a      	b.n	8008bae <OnRxData+0xb2>
				  LmHandlerRequestClass(CLASS_B);
 8008b98:	2001      	movs	r0, #1
 8008b9a:	f002 f80b 	bl	800abb4 <LmHandlerRequestClass>
				  break;
 8008b9e:	e006      	b.n	8008bae <OnRxData+0xb2>
				  LmHandlerRequestClass(CLASS_C);
 8008ba0:	2002      	movs	r0, #2
 8008ba2:	f002 f807 	bl	800abb4 <LmHandlerRequestClass>
				  break;
 8008ba6:	e002      	b.n	8008bae <OnRxData+0xb2>
			  }
			}
 8008ba8:	bf00      	nop
 8008baa:	e024      	b.n	8008bf6 <OnRxData+0xfa>
				  break;
 8008bac:	bf00      	nop
			break;
 8008bae:	e022      	b.n	8008bf6 <OnRxData+0xfa>
		  case LORAWAN_USER_APP_PORT:
			if (appData->BufferSize == 1)
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	785b      	ldrb	r3, [r3, #1]
 8008bb4:	2b01      	cmp	r3, #1
 8008bb6:	d11d      	bne.n	8008bf4 <OnRxData+0xf8>
			{
			  AppLedStateOn = appData->Buffer[0] & 0x01;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	685b      	ldr	r3, [r3, #4]
 8008bbc:	781b      	ldrb	r3, [r3, #0]
 8008bbe:	f003 0301 	and.w	r3, r3, #1
 8008bc2:	b2da      	uxtb	r2, r3
 8008bc4:	4b11      	ldr	r3, [pc, #68]	; (8008c0c <OnRxData+0x110>)
 8008bc6:	701a      	strb	r2, [r3, #0]
			  if (AppLedStateOn == RESET)
 8008bc8:	4b10      	ldr	r3, [pc, #64]	; (8008c0c <OnRxData+0x110>)
 8008bca:	781b      	ldrb	r3, [r3, #0]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d106      	bne.n	8008bde <OnRxData+0xe2>
			  {
				APP_LOG(TS_OFF, VLEVEL_H,   "LED OFF\r\n");
 8008bd0:	4b0f      	ldr	r3, [pc, #60]	; (8008c10 <OnRxData+0x114>)
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	2100      	movs	r1, #0
 8008bd6:	2003      	movs	r0, #3
 8008bd8:	f00f ffd2 	bl	8018b80 <UTIL_ADV_TRACE_COND_FSend>
			  else
			  {
				APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
			  }
			}
			break;
 8008bdc:	e00a      	b.n	8008bf4 <OnRxData+0xf8>
				APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 8008bde:	4b0d      	ldr	r3, [pc, #52]	; (8008c14 <OnRxData+0x118>)
 8008be0:	2200      	movs	r2, #0
 8008be2:	2100      	movs	r1, #0
 8008be4:	2003      	movs	r0, #3
 8008be6:	f00f ffcb 	bl	8018b80 <UTIL_ADV_TRACE_COND_FSend>
			break;
 8008bea:	e003      	b.n	8008bf4 <OnRxData+0xf8>
		  default:

			break;

		}
	}
 8008bec:	bf00      	nop
 8008bee:	e002      	b.n	8008bf6 <OnRxData+0xfa>
			break;
 8008bf0:	bf00      	nop
 8008bf2:	e000      	b.n	8008bf6 <OnRxData+0xfa>
			break;
 8008bf4:	bf00      	nop
  /* USER CODE END OnRxData_1 */
}
 8008bf6:	bf00      	nop
 8008bf8:	3708      	adds	r7, #8
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bdb0      	pop	{r4, r5, r7, pc}
 8008bfe:	bf00      	nop
 8008c00:	08019228 	.word	0x08019228
 8008c04:	20000058 	.word	0x20000058
 8008c08:	0801925c 	.word	0x0801925c
 8008c0c:	2000014c 	.word	0x2000014c
 8008c10:	080192a4 	.word	0x080192a4
 8008c14:	080192b0 	.word	0x080192b0

08008c18 <SendTxData>:

static void SendTxData(void)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b084      	sub	sp, #16
 8008c1c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SendTxData_1 */

	UTIL_TIMER_Time_t nextTxIn = 0;
 8008c1e:	2300      	movs	r3, #0
 8008c20:	603b      	str	r3, [r7, #0]

	uint32_t i = 0;
 8008c22:	2300      	movs	r3, #0
 8008c24:	607b      	str	r3, [r7, #4]

	AppData.Port = LORAWAN_USER_APP_PORT;
 8008c26:	4b19      	ldr	r3, [pc, #100]	; (8008c8c <SendTxData+0x74>)
 8008c28:	2202      	movs	r2, #2
 8008c2a:	701a      	strb	r2, [r3, #0]

	AppData.Buffer[i++] = AppLedStateOn;
 8008c2c:	4b17      	ldr	r3, [pc, #92]	; (8008c8c <SendTxData+0x74>)
 8008c2e:	685a      	ldr	r2, [r3, #4]
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	1c59      	adds	r1, r3, #1
 8008c34:	6079      	str	r1, [r7, #4]
 8008c36:	4413      	add	r3, r2
 8008c38:	4a15      	ldr	r2, [pc, #84]	; (8008c90 <SendTxData+0x78>)
 8008c3a:	7812      	ldrb	r2, [r2, #0]
 8008c3c:	701a      	strb	r2, [r3, #0]

	AppData.BufferSize = i;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	b2da      	uxtb	r2, r3
 8008c42:	4b12      	ldr	r3, [pc, #72]	; (8008c8c <SendTxData+0x74>)
 8008c44:	705a      	strb	r2, [r3, #1]

	if (LORAMAC_HANDLER_SUCCESS == LmHandlerSend(&AppData, LORAWAN_DEFAULT_CONFIRMED_MSG_STATE, &nextTxIn, false))
 8008c46:	463a      	mov	r2, r7
 8008c48:	2300      	movs	r3, #0
 8008c4a:	2100      	movs	r1, #0
 8008c4c:	480f      	ldr	r0, [pc, #60]	; (8008c8c <SendTxData+0x74>)
 8008c4e:	f001 fec5 	bl	800a9dc <LmHandlerSend>
 8008c52:	4603      	mov	r3, r0
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d106      	bne.n	8008c66 <SendTxData+0x4e>
	{
	APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 8008c58:	4b0e      	ldr	r3, [pc, #56]	; (8008c94 <SendTxData+0x7c>)
 8008c5a:	2201      	movs	r2, #1
 8008c5c:	2100      	movs	r1, #0
 8008c5e:	2001      	movs	r0, #1
 8008c60:	f00f ff8e 	bl	8018b80 <UTIL_ADV_TRACE_COND_FSend>
	else if (nextTxIn > 0)
	{
	APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
	}
  /* USER CODE END SendTxData_1 */
}
 8008c64:	e00e      	b.n	8008c84 <SendTxData+0x6c>
	else if (nextTxIn > 0)
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d00b      	beq.n	8008c84 <SendTxData+0x6c>
	APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	4a0a      	ldr	r2, [pc, #40]	; (8008c98 <SendTxData+0x80>)
 8008c70:	fba2 2303 	umull	r2, r3, r2, r3
 8008c74:	099b      	lsrs	r3, r3, #6
 8008c76:	9300      	str	r3, [sp, #0]
 8008c78:	4b08      	ldr	r3, [pc, #32]	; (8008c9c <SendTxData+0x84>)
 8008c7a:	2201      	movs	r2, #1
 8008c7c:	2100      	movs	r1, #0
 8008c7e:	2001      	movs	r0, #1
 8008c80:	f00f ff7e 	bl	8018b80 <UTIL_ADV_TRACE_COND_FSend>
}
 8008c84:	bf00      	nop
 8008c86:	3708      	adds	r7, #8
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd80      	pop	{r7, pc}
 8008c8c:	20000050 	.word	0x20000050
 8008c90:	2000014c 	.word	0x2000014c
 8008c94:	080192bc 	.word	0x080192bc
 8008c98:	10624dd3 	.word	0x10624dd3
 8008c9c:	080192cc 	.word	0x080192cc

08008ca0 <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b082      	sub	sp, #8
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerEvent_1 */

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 8008ca8:	2100      	movs	r1, #0
 8008caa:	2002      	movs	r0, #2
 8008cac:	f00f fc3a 	bl	8018524 <UTIL_SEQ_SetTask>

  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 8008cb0:	4803      	ldr	r0, [pc, #12]	; (8008cc0 <OnTxTimerEvent+0x20>)
 8008cb2:	f00f fced 	bl	8018690 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 8008cb6:	bf00      	nop
 8008cb8:	3708      	adds	r7, #8
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd80      	pop	{r7, pc}
 8008cbe:	bf00      	nop
 8008cc0:	20000134 	.word	0x20000134

08008cc4 <OnTxData>:
/* USER CODE BEGIN PrFD_LedEvents */

/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params)
{
 8008cc4:	b480      	push	{r7}
 8008cc6:	b083      	sub	sp, #12
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */
  /* USER CODE END OnTxData_1 */
}
 8008ccc:	bf00      	nop
 8008cce:	370c      	adds	r7, #12
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bc80      	pop	{r7}
 8008cd4:	4770      	bx	lr

08008cd6 <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 8008cd6:	b480      	push	{r7}
 8008cd8:	b083      	sub	sp, #12
 8008cda:	af00      	add	r7, sp, #0
 8008cdc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */
  /* USER CODE END OnJoinRequest_1 */
}
 8008cde:	bf00      	nop
 8008ce0:	370c      	adds	r7, #12
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bc80      	pop	{r7}
 8008ce6:	4770      	bx	lr

08008ce8 <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 8008cec:	2100      	movs	r1, #0
 8008cee:	2001      	movs	r0, #1
 8008cf0:	f00f fc18 	bl	8018524 <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 8008cf4:	bf00      	nop
 8008cf6:	bd80      	pop	{r7, pc}

08008cf8 <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	af00      	add	r7, sp, #0
  loraInfo.ActivationMode = 0;
 8008cfc:	4b15      	ldr	r3, [pc, #84]	; (8008d54 <LoraInfo_Init+0x5c>)
 8008cfe:	2200      	movs	r2, #0
 8008d00:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 8008d02:	4b14      	ldr	r3, [pc, #80]	; (8008d54 <LoraInfo_Init+0x5c>)
 8008d04:	2200      	movs	r2, #0
 8008d06:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 8008d08:	4b12      	ldr	r3, [pc, #72]	; (8008d54 <LoraInfo_Init+0x5c>)
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 8008d0e:	4b11      	ldr	r3, [pc, #68]	; (8008d54 <LoraInfo_Init+0x5c>)
 8008d10:	2200      	movs	r2, #0
 8008d12:	60da      	str	r2, [r3, #12]
#endif /* REGION_EU868 */
#ifdef  REGION_KR920
  loraInfo.Region |= (1 << LORAMAC_REGION_KR920) ;
#endif /* REGION_KR920 */
#ifdef  REGION_IN865
  loraInfo.Region |= (1 << LORAMAC_REGION_IN865) ;
 8008d14:	4b0f      	ldr	r3, [pc, #60]	; (8008d54 <LoraInfo_Init+0x5c>)
 8008d16:	685b      	ldr	r3, [r3, #4]
 8008d18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d1c:	4a0d      	ldr	r2, [pc, #52]	; (8008d54 <LoraInfo_Init+0x5c>)
 8008d1e:	6053      	str	r3, [r2, #4]
#endif /* REGION_US915 */
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864) ;
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 8008d20:	4b0c      	ldr	r3, [pc, #48]	; (8008d54 <LoraInfo_Init+0x5c>)
 8008d22:	685b      	ldr	r3, [r3, #4]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d10c      	bne.n	8008d42 <LoraInfo_Init+0x4a>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 8008d28:	4b0b      	ldr	r3, [pc, #44]	; (8008d58 <LoraInfo_Init+0x60>)
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	2100      	movs	r1, #0
 8008d2e:	2000      	movs	r0, #0
 8008d30:	f00f ff26 	bl	8018b80 <UTIL_ADV_TRACE_COND_FSend>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 8008d34:	bf00      	nop
 8008d36:	f00f ff11 	bl	8018b5c <UTIL_ADV_TRACE_IsBufferEmpty>
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	2b01      	cmp	r3, #1
 8008d3e:	d1fa      	bne.n	8008d36 <LoraInfo_Init+0x3e>
    {
      /* Wait that all printfs are completed*/
    }
    while (1) {} /* At least one region shall be defined */
 8008d40:	e7fe      	b.n	8008d40 <LoraInfo_Init+0x48>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 8008d42:	4b04      	ldr	r3, [pc, #16]	; (8008d54 <LoraInfo_Init+0x5c>)
 8008d44:	2200      	movs	r2, #0
 8008d46:	60da      	str	r2, [r3, #12]
  loraInfo.ActivationMode = 3;
 8008d48:	4b02      	ldr	r3, [pc, #8]	; (8008d54 <LoraInfo_Init+0x5c>)
 8008d4a:	2203      	movs	r2, #3
 8008d4c:	601a      	str	r2, [r3, #0]
  loraInfo.ActivationMode = ACTIVATION_BY_PERSONALIZATION + (OVER_THE_AIR_ACTIVATION << 1);
#endif /* LORAWAN_KMS */
  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 8008d4e:	bf00      	nop
 8008d50:	bd80      	pop	{r7, pc}
 8008d52:	bf00      	nop
 8008d54:	20000244 	.word	0x20000244
 8008d58:	08019328 	.word	0x08019328

08008d5c <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 8008d60:	4b02      	ldr	r3, [pc, #8]	; (8008d6c <LoraInfo_GetPtr+0x10>)
}
 8008d62:	4618      	mov	r0, r3
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bc80      	pop	{r7}
 8008d68:	4770      	bx	lr
 8008d6a:	bf00      	nop
 8008d6c:	20000244 	.word	0x20000244

08008d70 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 8008d70:	b480      	push	{r7}
 8008d72:	b083      	sub	sp, #12
 8008d74:	af00      	add	r7, sp, #0
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_Init();
#else
  /* 2/ Or implement RBI_Init here */
  int32_t retcode = 0;
 8008d76:	2300      	movs	r3, #0
 8008d78:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
 8008d7a:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	370c      	adds	r7, #12
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bc80      	pop	{r7}
 8008d84:	4770      	bx	lr

08008d86 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 8008d86:	b480      	push	{r7}
 8008d88:	b085      	sub	sp, #20
 8008d8a:	af00      	add	r7, sp, #0
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	71fb      	strb	r3, [r7, #7]
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
#else
  /* 2/ Or implement RBI_ConfigRFSwitch here */
  int32_t retcode = 0;
 8008d90:	2300      	movs	r3, #0
 8008d92:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
 8008d94:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER */
}
 8008d96:	4618      	mov	r0, r3
 8008d98:	3714      	adds	r7, #20
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bc80      	pop	{r7}
 8008d9e:	4770      	bx	lr

08008da0 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 8008da0:	b480      	push	{r7}
 8008da2:	b083      	sub	sp, #12
 8008da4:	af00      	add	r7, sp, #0
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_GetTxConfig();
#else
  /* 2/ Or implement RBI_GetTxConfig here */
  int32_t retcode = RBI_CONF_RFO;
 8008da6:	2300      	movs	r3, #0
 8008da8:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
 8008daa:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER */
}
 8008dac:	4618      	mov	r0, r3
 8008dae:	370c      	adds	r7, #12
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bc80      	pop	{r7}
 8008db4:	4770      	bx	lr

08008db6 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 8008db6:	b480      	push	{r7}
 8008db8:	b083      	sub	sp, #12
 8008dba:	af00      	add	r7, sp, #0
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_IsTCXO();
#else
  /* 2/ Or implement RBI_IsTCXO here */
  int32_t retcode = IS_TCXO_SUPPORTED;
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
 8008dc0:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	370c      	adds	r7, #12
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bc80      	pop	{r7}
 8008dca:	4770      	bx	lr

08008dcc <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 8008dcc:	b480      	push	{r7}
 8008dce:	b083      	sub	sp, #12
 8008dd0:	af00      	add	r7, sp, #0
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_IsDCDC();
#else
  /* 2/ Or implement RBI_IsDCDC here */
  int32_t retcode = IS_DCDC_SUPPORTED;
 8008dd2:	2301      	movs	r3, #1
 8008dd4:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
 8008dd6:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 8008dd8:	4618      	mov	r0, r3
 8008dda:	370c      	adds	r7, #12
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bc80      	pop	{r7}
 8008de0:	4770      	bx	lr

08008de2 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 8008de2:	b580      	push	{r7, lr}
 8008de4:	b082      	sub	sp, #8
 8008de6:	af00      	add	r7, sp, #0
 8008de8:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	33f1      	adds	r3, #241	; 0xf1
 8008dee:	2210      	movs	r2, #16
 8008df0:	2100      	movs	r1, #0
 8008df2:	4618      	mov	r0, r3
 8008df4:	f00b fd04 	bl	8014800 <memset1>
    ctx->M_n = 0;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	22f0      	movs	r2, #240	; 0xf0
 8008e04:	2100      	movs	r1, #0
 8008e06:	4618      	mov	r0, r3
 8008e08:	f00b fcfa 	bl	8014800 <memset1>
}
 8008e0c:	bf00      	nop
 8008e0e:	3708      	adds	r7, #8
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bd80      	pop	{r7, pc}

08008e14 <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b082      	sub	sp, #8
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
 8008e1c:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	461a      	mov	r2, r3
 8008e22:	2110      	movs	r1, #16
 8008e24:	6838      	ldr	r0, [r7, #0]
 8008e26:	f000 fe61 	bl	8009aec <lorawan_aes_set_key>
}
 8008e2a:	bf00      	nop
 8008e2c:	3708      	adds	r7, #8
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}

08008e32 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 8008e32:	b580      	push	{r7, lr}
 8008e34:	b08c      	sub	sp, #48	; 0x30
 8008e36:	af00      	add	r7, sp, #0
 8008e38:	60f8      	str	r0, [r7, #12]
 8008e3a:	60b9      	str	r1, [r7, #8]
 8008e3c:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	f000 80a1 	beq.w	8008f8c <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8008e50:	f1c3 0310 	rsb	r3, r3, #16
 8008e54:	687a      	ldr	r2, [r7, #4]
 8008e56:	4293      	cmp	r3, r2
 8008e58:	bf28      	it	cs
 8008e5a:	4613      	movcs	r3, r2
 8008e5c:	627b      	str	r3, [r7, #36]	; 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	f203 1201 	addw	r2, r3, #257	; 0x101
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8008e6a:	4413      	add	r3, r2
 8008e6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e6e:	b292      	uxth	r2, r2
 8008e70:	68b9      	ldr	r1, [r7, #8]
 8008e72:	4618      	mov	r0, r3
 8008e74:	f00b fc89 	bl	801478a <memcpy1>
        ctx->M_n += mlen;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 8008e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e80:	441a      	add	r2, r3
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8008e8e:	2b0f      	cmp	r3, #15
 8008e90:	f240 808d 	bls.w	8008fae <AES_CMAC_Update+0x17c>
 8008e94:	687a      	ldr	r2, [r7, #4]
 8008e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e98:	429a      	cmp	r2, r3
 8008e9a:	f000 8088 	beq.w	8008fae <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ea2:	e015      	b.n	8008ed0 <AES_CMAC_Update+0x9e>
 8008ea4:	68fa      	ldr	r2, [r7, #12]
 8008ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ea8:	4413      	add	r3, r2
 8008eaa:	33f1      	adds	r3, #241	; 0xf1
 8008eac:	781a      	ldrb	r2, [r3, #0]
 8008eae:	68f9      	ldr	r1, [r7, #12]
 8008eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eb2:	440b      	add	r3, r1
 8008eb4:	f203 1301 	addw	r3, r3, #257	; 0x101
 8008eb8:	781b      	ldrb	r3, [r3, #0]
 8008eba:	4053      	eors	r3, r2
 8008ebc:	b2d9      	uxtb	r1, r3
 8008ebe:	68fa      	ldr	r2, [r7, #12]
 8008ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ec2:	4413      	add	r3, r2
 8008ec4:	33f1      	adds	r3, #241	; 0xf1
 8008ec6:	460a      	mov	r2, r1
 8008ec8:	701a      	strb	r2, [r3, #0]
 8008eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ecc:	3301      	adds	r3, #1
 8008ece:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ed2:	2b0f      	cmp	r3, #15
 8008ed4:	dde6      	ble.n	8008ea4 <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 8008edc:	f107 0314 	add.w	r3, r7, #20
 8008ee0:	2210      	movs	r2, #16
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	f00b fc51 	bl	801478a <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 8008ee8:	68fa      	ldr	r2, [r7, #12]
 8008eea:	f107 0114 	add.w	r1, r7, #20
 8008eee:	f107 0314 	add.w	r3, r7, #20
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	f000 fed8 	bl	8009ca8 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	33f1      	adds	r3, #241	; 0xf1
 8008efc:	f107 0114 	add.w	r1, r7, #20
 8008f00:	2210      	movs	r2, #16
 8008f02:	4618      	mov	r0, r3
 8008f04:	f00b fc41 	bl	801478a <memcpy1>

        data += mlen;
 8008f08:	68ba      	ldr	r2, [r7, #8]
 8008f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f0c:	4413      	add	r3, r2
 8008f0e:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 8008f10:	687a      	ldr	r2, [r7, #4]
 8008f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f14:	1ad3      	subs	r3, r2, r3
 8008f16:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 8008f18:	e038      	b.n	8008f8c <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8008f1e:	e013      	b.n	8008f48 <AES_CMAC_Update+0x116>
 8008f20:	68fa      	ldr	r2, [r7, #12]
 8008f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f24:	4413      	add	r3, r2
 8008f26:	33f1      	adds	r3, #241	; 0xf1
 8008f28:	781a      	ldrb	r2, [r3, #0]
 8008f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f2c:	68b9      	ldr	r1, [r7, #8]
 8008f2e:	440b      	add	r3, r1
 8008f30:	781b      	ldrb	r3, [r3, #0]
 8008f32:	4053      	eors	r3, r2
 8008f34:	b2d9      	uxtb	r1, r3
 8008f36:	68fa      	ldr	r2, [r7, #12]
 8008f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f3a:	4413      	add	r3, r2
 8008f3c:	33f1      	adds	r3, #241	; 0xf1
 8008f3e:	460a      	mov	r2, r1
 8008f40:	701a      	strb	r2, [r3, #0]
 8008f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f44:	3301      	adds	r3, #1
 8008f46:	62bb      	str	r3, [r7, #40]	; 0x28
 8008f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f4a:	2b0f      	cmp	r3, #15
 8008f4c:	dde8      	ble.n	8008f20 <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 8008f54:	f107 0314 	add.w	r3, r7, #20
 8008f58:	2210      	movs	r2, #16
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	f00b fc15 	bl	801478a <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 8008f60:	68fa      	ldr	r2, [r7, #12]
 8008f62:	f107 0114 	add.w	r1, r7, #20
 8008f66:	f107 0314 	add.w	r3, r7, #20
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	f000 fe9c 	bl	8009ca8 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	33f1      	adds	r3, #241	; 0xf1
 8008f74:	f107 0114 	add.w	r1, r7, #20
 8008f78:	2210      	movs	r2, #16
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	f00b fc05 	bl	801478a <memcpy1>

        data += 16;
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	3310      	adds	r3, #16
 8008f84:	60bb      	str	r3, [r7, #8]
        len -= 16;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	3b10      	subs	r3, #16
 8008f8a:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2b10      	cmp	r3, #16
 8008f90:	d8c3      	bhi.n	8008f1a <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	f203 1301 	addw	r3, r3, #257	; 0x101
 8008f98:	687a      	ldr	r2, [r7, #4]
 8008f9a:	b292      	uxth	r2, r2
 8008f9c:	68b9      	ldr	r1, [r7, #8]
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f00b fbf3 	bl	801478a <memcpy1>
    ctx->M_n = len;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	687a      	ldr	r2, [r7, #4]
 8008fa8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 8008fac:	e000      	b.n	8008fb0 <AES_CMAC_Update+0x17e>
            return;
 8008fae:	bf00      	nop
}
 8008fb0:	3730      	adds	r7, #48	; 0x30
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bd80      	pop	{r7, pc}

08008fb6 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 8008fb6:	b580      	push	{r7, lr}
 8008fb8:	b092      	sub	sp, #72	; 0x48
 8008fba:	af00      	add	r7, sp, #0
 8008fbc:	6078      	str	r0, [r7, #4]
 8008fbe:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 8008fc0:	f107 031c 	add.w	r3, r7, #28
 8008fc4:	2210      	movs	r2, #16
 8008fc6:	2100      	movs	r1, #0
 8008fc8:	4618      	mov	r0, r3
 8008fca:	f00b fc19 	bl	8014800 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 8008fce:	683a      	ldr	r2, [r7, #0]
 8008fd0:	f107 011c 	add.w	r1, r7, #28
 8008fd4:	f107 031c 	add.w	r3, r7, #28
 8008fd8:	4618      	mov	r0, r3
 8008fda:	f000 fe65 	bl	8009ca8 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 8008fde:	7f3b      	ldrb	r3, [r7, #28]
 8008fe0:	b25b      	sxtb	r3, r3
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	da31      	bge.n	800904a <AES_CMAC_Final+0x94>
    {
        LSHIFT( K, K );
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	647b      	str	r3, [r7, #68]	; 0x44
 8008fea:	e01c      	b.n	8009026 <AES_CMAC_Final+0x70>
 8008fec:	f107 021c 	add.w	r2, r7, #28
 8008ff0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ff2:	4413      	add	r3, r2
 8008ff4:	781b      	ldrb	r3, [r3, #0]
 8008ff6:	005b      	lsls	r3, r3, #1
 8008ff8:	b25a      	sxtb	r2, r3
 8008ffa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ffc:	3301      	adds	r3, #1
 8008ffe:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8009002:	440b      	add	r3, r1
 8009004:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8009008:	09db      	lsrs	r3, r3, #7
 800900a:	b2db      	uxtb	r3, r3
 800900c:	b25b      	sxtb	r3, r3
 800900e:	4313      	orrs	r3, r2
 8009010:	b25b      	sxtb	r3, r3
 8009012:	b2d9      	uxtb	r1, r3
 8009014:	f107 021c 	add.w	r2, r7, #28
 8009018:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800901a:	4413      	add	r3, r2
 800901c:	460a      	mov	r2, r1
 800901e:	701a      	strb	r2, [r3, #0]
 8009020:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009022:	3301      	adds	r3, #1
 8009024:	647b      	str	r3, [r7, #68]	; 0x44
 8009026:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009028:	2b0e      	cmp	r3, #14
 800902a:	dddf      	ble.n	8008fec <AES_CMAC_Final+0x36>
 800902c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009030:	005b      	lsls	r3, r3, #1
 8009032:	b2db      	uxtb	r3, r3
 8009034:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        K[15] ^= 0x87;
 8009038:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800903c:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 8009040:	43db      	mvns	r3, r3
 8009042:	b2db      	uxtb	r3, r3
 8009044:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009048:	e028      	b.n	800909c <AES_CMAC_Final+0xe6>
    }
    else
        LSHIFT( K, K );
 800904a:	2300      	movs	r3, #0
 800904c:	643b      	str	r3, [r7, #64]	; 0x40
 800904e:	e01c      	b.n	800908a <AES_CMAC_Final+0xd4>
 8009050:	f107 021c 	add.w	r2, r7, #28
 8009054:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009056:	4413      	add	r3, r2
 8009058:	781b      	ldrb	r3, [r3, #0]
 800905a:	005b      	lsls	r3, r3, #1
 800905c:	b25a      	sxtb	r2, r3
 800905e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009060:	3301      	adds	r3, #1
 8009062:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8009066:	440b      	add	r3, r1
 8009068:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800906c:	09db      	lsrs	r3, r3, #7
 800906e:	b2db      	uxtb	r3, r3
 8009070:	b25b      	sxtb	r3, r3
 8009072:	4313      	orrs	r3, r2
 8009074:	b25b      	sxtb	r3, r3
 8009076:	b2d9      	uxtb	r1, r3
 8009078:	f107 021c 	add.w	r2, r7, #28
 800907c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800907e:	4413      	add	r3, r2
 8009080:	460a      	mov	r2, r1
 8009082:	701a      	strb	r2, [r3, #0]
 8009084:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009086:	3301      	adds	r3, #1
 8009088:	643b      	str	r3, [r7, #64]	; 0x40
 800908a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800908c:	2b0e      	cmp	r3, #14
 800908e:	dddf      	ble.n	8009050 <AES_CMAC_Final+0x9a>
 8009090:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009094:	005b      	lsls	r3, r3, #1
 8009096:	b2db      	uxtb	r3, r3
 8009098:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if( ctx->M_n == 16 )
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80090a2:	2b10      	cmp	r3, #16
 80090a4:	d11d      	bne.n	80090e2 <AES_CMAC_Final+0x12c>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 80090a6:	2300      	movs	r3, #0
 80090a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80090aa:	e016      	b.n	80090da <AES_CMAC_Final+0x124>
 80090ac:	683a      	ldr	r2, [r7, #0]
 80090ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090b0:	4413      	add	r3, r2
 80090b2:	f203 1301 	addw	r3, r3, #257	; 0x101
 80090b6:	781a      	ldrb	r2, [r3, #0]
 80090b8:	f107 011c 	add.w	r1, r7, #28
 80090bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090be:	440b      	add	r3, r1
 80090c0:	781b      	ldrb	r3, [r3, #0]
 80090c2:	4053      	eors	r3, r2
 80090c4:	b2d9      	uxtb	r1, r3
 80090c6:	683a      	ldr	r2, [r7, #0]
 80090c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090ca:	4413      	add	r3, r2
 80090cc:	f203 1301 	addw	r3, r3, #257	; 0x101
 80090d0:	460a      	mov	r2, r1
 80090d2:	701a      	strb	r2, [r3, #0]
 80090d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090d6:	3301      	adds	r3, #1
 80090d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80090da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090dc:	2b0f      	cmp	r3, #15
 80090de:	dde5      	ble.n	80090ac <AES_CMAC_Final+0xf6>
 80090e0:	e098      	b.n	8009214 <AES_CMAC_Final+0x25e>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 80090e2:	7f3b      	ldrb	r3, [r7, #28]
 80090e4:	b25b      	sxtb	r3, r3
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	da31      	bge.n	800914e <AES_CMAC_Final+0x198>
        {
            LSHIFT( K, K );
 80090ea:	2300      	movs	r3, #0
 80090ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80090ee:	e01c      	b.n	800912a <AES_CMAC_Final+0x174>
 80090f0:	f107 021c 	add.w	r2, r7, #28
 80090f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090f6:	4413      	add	r3, r2
 80090f8:	781b      	ldrb	r3, [r3, #0]
 80090fa:	005b      	lsls	r3, r3, #1
 80090fc:	b25a      	sxtb	r2, r3
 80090fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009100:	3301      	adds	r3, #1
 8009102:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8009106:	440b      	add	r3, r1
 8009108:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800910c:	09db      	lsrs	r3, r3, #7
 800910e:	b2db      	uxtb	r3, r3
 8009110:	b25b      	sxtb	r3, r3
 8009112:	4313      	orrs	r3, r2
 8009114:	b25b      	sxtb	r3, r3
 8009116:	b2d9      	uxtb	r1, r3
 8009118:	f107 021c 	add.w	r2, r7, #28
 800911c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800911e:	4413      	add	r3, r2
 8009120:	460a      	mov	r2, r1
 8009122:	701a      	strb	r2, [r3, #0]
 8009124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009126:	3301      	adds	r3, #1
 8009128:	63bb      	str	r3, [r7, #56]	; 0x38
 800912a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800912c:	2b0e      	cmp	r3, #14
 800912e:	dddf      	ble.n	80090f0 <AES_CMAC_Final+0x13a>
 8009130:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009134:	005b      	lsls	r3, r3, #1
 8009136:	b2db      	uxtb	r3, r3
 8009138:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            K[15] ^= 0x87;
 800913c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009140:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 8009144:	43db      	mvns	r3, r3
 8009146:	b2db      	uxtb	r3, r3
 8009148:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800914c:	e028      	b.n	80091a0 <AES_CMAC_Final+0x1ea>
        }
        else
            LSHIFT( K, K );
 800914e:	2300      	movs	r3, #0
 8009150:	637b      	str	r3, [r7, #52]	; 0x34
 8009152:	e01c      	b.n	800918e <AES_CMAC_Final+0x1d8>
 8009154:	f107 021c 	add.w	r2, r7, #28
 8009158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800915a:	4413      	add	r3, r2
 800915c:	781b      	ldrb	r3, [r3, #0]
 800915e:	005b      	lsls	r3, r3, #1
 8009160:	b25a      	sxtb	r2, r3
 8009162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009164:	3301      	adds	r3, #1
 8009166:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800916a:	440b      	add	r3, r1
 800916c:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8009170:	09db      	lsrs	r3, r3, #7
 8009172:	b2db      	uxtb	r3, r3
 8009174:	b25b      	sxtb	r3, r3
 8009176:	4313      	orrs	r3, r2
 8009178:	b25b      	sxtb	r3, r3
 800917a:	b2d9      	uxtb	r1, r3
 800917c:	f107 021c 	add.w	r2, r7, #28
 8009180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009182:	4413      	add	r3, r2
 8009184:	460a      	mov	r2, r1
 8009186:	701a      	strb	r2, [r3, #0]
 8009188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800918a:	3301      	adds	r3, #1
 800918c:	637b      	str	r3, [r7, #52]	; 0x34
 800918e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009190:	2b0e      	cmp	r3, #14
 8009192:	dddf      	ble.n	8009154 <AES_CMAC_Final+0x19e>
 8009194:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009198:	005b      	lsls	r3, r3, #1
 800919a:	b2db      	uxtb	r3, r3
 800919c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80091a6:	683a      	ldr	r2, [r7, #0]
 80091a8:	4413      	add	r3, r2
 80091aa:	2280      	movs	r2, #128	; 0x80
 80091ac:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 80091b0:	e007      	b.n	80091c2 <AES_CMAC_Final+0x20c>
            ctx->M_last[ctx->M_n] = 0;
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80091b8:	683a      	ldr	r2, [r7, #0]
 80091ba:	4413      	add	r3, r2
 80091bc:	2200      	movs	r2, #0
 80091be:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80091c8:	1c5a      	adds	r2, r3, #1
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80091d6:	2b0f      	cmp	r3, #15
 80091d8:	d9eb      	bls.n	80091b2 <AES_CMAC_Final+0x1fc>

        XOR( K, ctx->M_last );
 80091da:	2300      	movs	r3, #0
 80091dc:	633b      	str	r3, [r7, #48]	; 0x30
 80091de:	e016      	b.n	800920e <AES_CMAC_Final+0x258>
 80091e0:	683a      	ldr	r2, [r7, #0]
 80091e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091e4:	4413      	add	r3, r2
 80091e6:	f203 1301 	addw	r3, r3, #257	; 0x101
 80091ea:	781a      	ldrb	r2, [r3, #0]
 80091ec:	f107 011c 	add.w	r1, r7, #28
 80091f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091f2:	440b      	add	r3, r1
 80091f4:	781b      	ldrb	r3, [r3, #0]
 80091f6:	4053      	eors	r3, r2
 80091f8:	b2d9      	uxtb	r1, r3
 80091fa:	683a      	ldr	r2, [r7, #0]
 80091fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091fe:	4413      	add	r3, r2
 8009200:	f203 1301 	addw	r3, r3, #257	; 0x101
 8009204:	460a      	mov	r2, r1
 8009206:	701a      	strb	r2, [r3, #0]
 8009208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800920a:	3301      	adds	r3, #1
 800920c:	633b      	str	r3, [r7, #48]	; 0x30
 800920e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009210:	2b0f      	cmp	r3, #15
 8009212:	dde5      	ble.n	80091e0 <AES_CMAC_Final+0x22a>
    }
    XOR( ctx->M_last, ctx->X );
 8009214:	2300      	movs	r3, #0
 8009216:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009218:	e015      	b.n	8009246 <AES_CMAC_Final+0x290>
 800921a:	683a      	ldr	r2, [r7, #0]
 800921c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800921e:	4413      	add	r3, r2
 8009220:	33f1      	adds	r3, #241	; 0xf1
 8009222:	781a      	ldrb	r2, [r3, #0]
 8009224:	6839      	ldr	r1, [r7, #0]
 8009226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009228:	440b      	add	r3, r1
 800922a:	f203 1301 	addw	r3, r3, #257	; 0x101
 800922e:	781b      	ldrb	r3, [r3, #0]
 8009230:	4053      	eors	r3, r2
 8009232:	b2d9      	uxtb	r1, r3
 8009234:	683a      	ldr	r2, [r7, #0]
 8009236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009238:	4413      	add	r3, r2
 800923a:	33f1      	adds	r3, #241	; 0xf1
 800923c:	460a      	mov	r2, r1
 800923e:	701a      	strb	r2, [r3, #0]
 8009240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009242:	3301      	adds	r3, #1
 8009244:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009248:	2b0f      	cmp	r3, #15
 800924a:	dde6      	ble.n	800921a <AES_CMAC_Final+0x264>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 8009252:	f107 030c 	add.w	r3, r7, #12
 8009256:	2210      	movs	r2, #16
 8009258:	4618      	mov	r0, r3
 800925a:	f00b fa96 	bl	801478a <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800925e:	683a      	ldr	r2, [r7, #0]
 8009260:	f107 030c 	add.w	r3, r7, #12
 8009264:	6879      	ldr	r1, [r7, #4]
 8009266:	4618      	mov	r0, r3
 8009268:	f000 fd1e 	bl	8009ca8 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800926c:	f107 031c 	add.w	r3, r7, #28
 8009270:	2210      	movs	r2, #16
 8009272:	2100      	movs	r1, #0
 8009274:	4618      	mov	r0, r3
 8009276:	f00b fac3 	bl	8014800 <memset1>
}
 800927a:	bf00      	nop
 800927c:	3748      	adds	r7, #72	; 0x48
 800927e:	46bd      	mov	sp, r7
 8009280:	bd80      	pop	{r7, pc}

08009282 <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 8009282:	b480      	push	{r7}
 8009284:	b083      	sub	sp, #12
 8009286:	af00      	add	r7, sp, #0
 8009288:	6078      	str	r0, [r7, #4]
 800928a:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	781a      	ldrb	r2, [r3, #0]
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	3301      	adds	r3, #1
 8009298:	683a      	ldr	r2, [r7, #0]
 800929a:	7852      	ldrb	r2, [r2, #1]
 800929c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	3302      	adds	r3, #2
 80092a2:	683a      	ldr	r2, [r7, #0]
 80092a4:	7892      	ldrb	r2, [r2, #2]
 80092a6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	3303      	adds	r3, #3
 80092ac:	683a      	ldr	r2, [r7, #0]
 80092ae:	78d2      	ldrb	r2, [r2, #3]
 80092b0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	3304      	adds	r3, #4
 80092b6:	683a      	ldr	r2, [r7, #0]
 80092b8:	7912      	ldrb	r2, [r2, #4]
 80092ba:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	3305      	adds	r3, #5
 80092c0:	683a      	ldr	r2, [r7, #0]
 80092c2:	7952      	ldrb	r2, [r2, #5]
 80092c4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	3306      	adds	r3, #6
 80092ca:	683a      	ldr	r2, [r7, #0]
 80092cc:	7992      	ldrb	r2, [r2, #6]
 80092ce:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	3307      	adds	r3, #7
 80092d4:	683a      	ldr	r2, [r7, #0]
 80092d6:	79d2      	ldrb	r2, [r2, #7]
 80092d8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	3308      	adds	r3, #8
 80092de:	683a      	ldr	r2, [r7, #0]
 80092e0:	7a12      	ldrb	r2, [r2, #8]
 80092e2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	3309      	adds	r3, #9
 80092e8:	683a      	ldr	r2, [r7, #0]
 80092ea:	7a52      	ldrb	r2, [r2, #9]
 80092ec:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	330a      	adds	r3, #10
 80092f2:	683a      	ldr	r2, [r7, #0]
 80092f4:	7a92      	ldrb	r2, [r2, #10]
 80092f6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	330b      	adds	r3, #11
 80092fc:	683a      	ldr	r2, [r7, #0]
 80092fe:	7ad2      	ldrb	r2, [r2, #11]
 8009300:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	330c      	adds	r3, #12
 8009306:	683a      	ldr	r2, [r7, #0]
 8009308:	7b12      	ldrb	r2, [r2, #12]
 800930a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	330d      	adds	r3, #13
 8009310:	683a      	ldr	r2, [r7, #0]
 8009312:	7b52      	ldrb	r2, [r2, #13]
 8009314:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	330e      	adds	r3, #14
 800931a:	683a      	ldr	r2, [r7, #0]
 800931c:	7b92      	ldrb	r2, [r2, #14]
 800931e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	330f      	adds	r3, #15
 8009324:	683a      	ldr	r2, [r7, #0]
 8009326:	7bd2      	ldrb	r2, [r2, #15]
 8009328:	701a      	strb	r2, [r3, #0]
#endif
}
 800932a:	bf00      	nop
 800932c:	370c      	adds	r7, #12
 800932e:	46bd      	mov	sp, r7
 8009330:	bc80      	pop	{r7}
 8009332:	4770      	bx	lr

08009334 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 8009334:	b480      	push	{r7}
 8009336:	b085      	sub	sp, #20
 8009338:	af00      	add	r7, sp, #0
 800933a:	60f8      	str	r0, [r7, #12]
 800933c:	60b9      	str	r1, [r7, #8]
 800933e:	4613      	mov	r3, r2
 8009340:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 8009342:	e007      	b.n	8009354 <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 8009344:	68ba      	ldr	r2, [r7, #8]
 8009346:	1c53      	adds	r3, r2, #1
 8009348:	60bb      	str	r3, [r7, #8]
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	1c59      	adds	r1, r3, #1
 800934e:	60f9      	str	r1, [r7, #12]
 8009350:	7812      	ldrb	r2, [r2, #0]
 8009352:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 8009354:	79fb      	ldrb	r3, [r7, #7]
 8009356:	1e5a      	subs	r2, r3, #1
 8009358:	71fa      	strb	r2, [r7, #7]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d1f2      	bne.n	8009344 <copy_block_nn+0x10>
}
 800935e:	bf00      	nop
 8009360:	bf00      	nop
 8009362:	3714      	adds	r7, #20
 8009364:	46bd      	mov	sp, r7
 8009366:	bc80      	pop	{r7}
 8009368:	4770      	bx	lr

0800936a <xor_block>:

static void xor_block( void *d, const void *s )
{
 800936a:	b480      	push	{r7}
 800936c:	b083      	sub	sp, #12
 800936e:	af00      	add	r7, sp, #0
 8009370:	6078      	str	r0, [r7, #4]
 8009372:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	781a      	ldrb	r2, [r3, #0]
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	781b      	ldrb	r3, [r3, #0]
 800937c:	4053      	eors	r3, r2
 800937e:	b2da      	uxtb	r2, r3
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	3301      	adds	r3, #1
 8009388:	7819      	ldrb	r1, [r3, #0]
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	3301      	adds	r3, #1
 800938e:	781a      	ldrb	r2, [r3, #0]
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	3301      	adds	r3, #1
 8009394:	404a      	eors	r2, r1
 8009396:	b2d2      	uxtb	r2, r2
 8009398:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	3302      	adds	r3, #2
 800939e:	7819      	ldrb	r1, [r3, #0]
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	3302      	adds	r3, #2
 80093a4:	781a      	ldrb	r2, [r3, #0]
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	3302      	adds	r3, #2
 80093aa:	404a      	eors	r2, r1
 80093ac:	b2d2      	uxtb	r2, r2
 80093ae:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	3303      	adds	r3, #3
 80093b4:	7819      	ldrb	r1, [r3, #0]
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	3303      	adds	r3, #3
 80093ba:	781a      	ldrb	r2, [r3, #0]
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	3303      	adds	r3, #3
 80093c0:	404a      	eors	r2, r1
 80093c2:	b2d2      	uxtb	r2, r2
 80093c4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	3304      	adds	r3, #4
 80093ca:	7819      	ldrb	r1, [r3, #0]
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	3304      	adds	r3, #4
 80093d0:	781a      	ldrb	r2, [r3, #0]
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	3304      	adds	r3, #4
 80093d6:	404a      	eors	r2, r1
 80093d8:	b2d2      	uxtb	r2, r2
 80093da:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	3305      	adds	r3, #5
 80093e0:	7819      	ldrb	r1, [r3, #0]
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	3305      	adds	r3, #5
 80093e6:	781a      	ldrb	r2, [r3, #0]
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	3305      	adds	r3, #5
 80093ec:	404a      	eors	r2, r1
 80093ee:	b2d2      	uxtb	r2, r2
 80093f0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	3306      	adds	r3, #6
 80093f6:	7819      	ldrb	r1, [r3, #0]
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	3306      	adds	r3, #6
 80093fc:	781a      	ldrb	r2, [r3, #0]
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	3306      	adds	r3, #6
 8009402:	404a      	eors	r2, r1
 8009404:	b2d2      	uxtb	r2, r2
 8009406:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	3307      	adds	r3, #7
 800940c:	7819      	ldrb	r1, [r3, #0]
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	3307      	adds	r3, #7
 8009412:	781a      	ldrb	r2, [r3, #0]
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	3307      	adds	r3, #7
 8009418:	404a      	eors	r2, r1
 800941a:	b2d2      	uxtb	r2, r2
 800941c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	3308      	adds	r3, #8
 8009422:	7819      	ldrb	r1, [r3, #0]
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	3308      	adds	r3, #8
 8009428:	781a      	ldrb	r2, [r3, #0]
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	3308      	adds	r3, #8
 800942e:	404a      	eors	r2, r1
 8009430:	b2d2      	uxtb	r2, r2
 8009432:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	3309      	adds	r3, #9
 8009438:	7819      	ldrb	r1, [r3, #0]
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	3309      	adds	r3, #9
 800943e:	781a      	ldrb	r2, [r3, #0]
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	3309      	adds	r3, #9
 8009444:	404a      	eors	r2, r1
 8009446:	b2d2      	uxtb	r2, r2
 8009448:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	330a      	adds	r3, #10
 800944e:	7819      	ldrb	r1, [r3, #0]
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	330a      	adds	r3, #10
 8009454:	781a      	ldrb	r2, [r3, #0]
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	330a      	adds	r3, #10
 800945a:	404a      	eors	r2, r1
 800945c:	b2d2      	uxtb	r2, r2
 800945e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	330b      	adds	r3, #11
 8009464:	7819      	ldrb	r1, [r3, #0]
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	330b      	adds	r3, #11
 800946a:	781a      	ldrb	r2, [r3, #0]
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	330b      	adds	r3, #11
 8009470:	404a      	eors	r2, r1
 8009472:	b2d2      	uxtb	r2, r2
 8009474:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	330c      	adds	r3, #12
 800947a:	7819      	ldrb	r1, [r3, #0]
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	330c      	adds	r3, #12
 8009480:	781a      	ldrb	r2, [r3, #0]
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	330c      	adds	r3, #12
 8009486:	404a      	eors	r2, r1
 8009488:	b2d2      	uxtb	r2, r2
 800948a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	330d      	adds	r3, #13
 8009490:	7819      	ldrb	r1, [r3, #0]
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	330d      	adds	r3, #13
 8009496:	781a      	ldrb	r2, [r3, #0]
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	330d      	adds	r3, #13
 800949c:	404a      	eors	r2, r1
 800949e:	b2d2      	uxtb	r2, r2
 80094a0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	330e      	adds	r3, #14
 80094a6:	7819      	ldrb	r1, [r3, #0]
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	330e      	adds	r3, #14
 80094ac:	781a      	ldrb	r2, [r3, #0]
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	330e      	adds	r3, #14
 80094b2:	404a      	eors	r2, r1
 80094b4:	b2d2      	uxtb	r2, r2
 80094b6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	330f      	adds	r3, #15
 80094bc:	7819      	ldrb	r1, [r3, #0]
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	330f      	adds	r3, #15
 80094c2:	781a      	ldrb	r2, [r3, #0]
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	330f      	adds	r3, #15
 80094c8:	404a      	eors	r2, r1
 80094ca:	b2d2      	uxtb	r2, r2
 80094cc:	701a      	strb	r2, [r3, #0]
#endif
}
 80094ce:	bf00      	nop
 80094d0:	370c      	adds	r7, #12
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bc80      	pop	{r7}
 80094d6:	4770      	bx	lr

080094d8 <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 80094d8:	b480      	push	{r7}
 80094da:	b085      	sub	sp, #20
 80094dc:	af00      	add	r7, sp, #0
 80094de:	60f8      	str	r0, [r7, #12]
 80094e0:	60b9      	str	r1, [r7, #8]
 80094e2:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 80094e4:	68bb      	ldr	r3, [r7, #8]
 80094e6:	781a      	ldrb	r2, [r3, #0]
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	781b      	ldrb	r3, [r3, #0]
 80094ec:	4053      	eors	r3, r2
 80094ee:	b2da      	uxtb	r2, r3
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 80094f4:	68bb      	ldr	r3, [r7, #8]
 80094f6:	3301      	adds	r3, #1
 80094f8:	7819      	ldrb	r1, [r3, #0]
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	3301      	adds	r3, #1
 80094fe:	781a      	ldrb	r2, [r3, #0]
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	3301      	adds	r3, #1
 8009504:	404a      	eors	r2, r1
 8009506:	b2d2      	uxtb	r2, r2
 8009508:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800950a:	68bb      	ldr	r3, [r7, #8]
 800950c:	3302      	adds	r3, #2
 800950e:	7819      	ldrb	r1, [r3, #0]
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	3302      	adds	r3, #2
 8009514:	781a      	ldrb	r2, [r3, #0]
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	3302      	adds	r3, #2
 800951a:	404a      	eors	r2, r1
 800951c:	b2d2      	uxtb	r2, r2
 800951e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 8009520:	68bb      	ldr	r3, [r7, #8]
 8009522:	3303      	adds	r3, #3
 8009524:	7819      	ldrb	r1, [r3, #0]
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	3303      	adds	r3, #3
 800952a:	781a      	ldrb	r2, [r3, #0]
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	3303      	adds	r3, #3
 8009530:	404a      	eors	r2, r1
 8009532:	b2d2      	uxtb	r2, r2
 8009534:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 8009536:	68bb      	ldr	r3, [r7, #8]
 8009538:	3304      	adds	r3, #4
 800953a:	7819      	ldrb	r1, [r3, #0]
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	3304      	adds	r3, #4
 8009540:	781a      	ldrb	r2, [r3, #0]
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	3304      	adds	r3, #4
 8009546:	404a      	eors	r2, r1
 8009548:	b2d2      	uxtb	r2, r2
 800954a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800954c:	68bb      	ldr	r3, [r7, #8]
 800954e:	3305      	adds	r3, #5
 8009550:	7819      	ldrb	r1, [r3, #0]
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	3305      	adds	r3, #5
 8009556:	781a      	ldrb	r2, [r3, #0]
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	3305      	adds	r3, #5
 800955c:	404a      	eors	r2, r1
 800955e:	b2d2      	uxtb	r2, r2
 8009560:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 8009562:	68bb      	ldr	r3, [r7, #8]
 8009564:	3306      	adds	r3, #6
 8009566:	7819      	ldrb	r1, [r3, #0]
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	3306      	adds	r3, #6
 800956c:	781a      	ldrb	r2, [r3, #0]
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	3306      	adds	r3, #6
 8009572:	404a      	eors	r2, r1
 8009574:	b2d2      	uxtb	r2, r2
 8009576:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 8009578:	68bb      	ldr	r3, [r7, #8]
 800957a:	3307      	adds	r3, #7
 800957c:	7819      	ldrb	r1, [r3, #0]
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	3307      	adds	r3, #7
 8009582:	781a      	ldrb	r2, [r3, #0]
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	3307      	adds	r3, #7
 8009588:	404a      	eors	r2, r1
 800958a:	b2d2      	uxtb	r2, r2
 800958c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800958e:	68bb      	ldr	r3, [r7, #8]
 8009590:	3308      	adds	r3, #8
 8009592:	7819      	ldrb	r1, [r3, #0]
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	3308      	adds	r3, #8
 8009598:	781a      	ldrb	r2, [r3, #0]
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	3308      	adds	r3, #8
 800959e:	404a      	eors	r2, r1
 80095a0:	b2d2      	uxtb	r2, r2
 80095a2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 80095a4:	68bb      	ldr	r3, [r7, #8]
 80095a6:	3309      	adds	r3, #9
 80095a8:	7819      	ldrb	r1, [r3, #0]
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	3309      	adds	r3, #9
 80095ae:	781a      	ldrb	r2, [r3, #0]
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	3309      	adds	r3, #9
 80095b4:	404a      	eors	r2, r1
 80095b6:	b2d2      	uxtb	r2, r2
 80095b8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 80095ba:	68bb      	ldr	r3, [r7, #8]
 80095bc:	330a      	adds	r3, #10
 80095be:	7819      	ldrb	r1, [r3, #0]
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	330a      	adds	r3, #10
 80095c4:	781a      	ldrb	r2, [r3, #0]
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	330a      	adds	r3, #10
 80095ca:	404a      	eors	r2, r1
 80095cc:	b2d2      	uxtb	r2, r2
 80095ce:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 80095d0:	68bb      	ldr	r3, [r7, #8]
 80095d2:	330b      	adds	r3, #11
 80095d4:	7819      	ldrb	r1, [r3, #0]
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	330b      	adds	r3, #11
 80095da:	781a      	ldrb	r2, [r3, #0]
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	330b      	adds	r3, #11
 80095e0:	404a      	eors	r2, r1
 80095e2:	b2d2      	uxtb	r2, r2
 80095e4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 80095e6:	68bb      	ldr	r3, [r7, #8]
 80095e8:	330c      	adds	r3, #12
 80095ea:	7819      	ldrb	r1, [r3, #0]
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	330c      	adds	r3, #12
 80095f0:	781a      	ldrb	r2, [r3, #0]
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	330c      	adds	r3, #12
 80095f6:	404a      	eors	r2, r1
 80095f8:	b2d2      	uxtb	r2, r2
 80095fa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 80095fc:	68bb      	ldr	r3, [r7, #8]
 80095fe:	330d      	adds	r3, #13
 8009600:	7819      	ldrb	r1, [r3, #0]
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	330d      	adds	r3, #13
 8009606:	781a      	ldrb	r2, [r3, #0]
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	330d      	adds	r3, #13
 800960c:	404a      	eors	r2, r1
 800960e:	b2d2      	uxtb	r2, r2
 8009610:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 8009612:	68bb      	ldr	r3, [r7, #8]
 8009614:	330e      	adds	r3, #14
 8009616:	7819      	ldrb	r1, [r3, #0]
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	330e      	adds	r3, #14
 800961c:	781a      	ldrb	r2, [r3, #0]
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	330e      	adds	r3, #14
 8009622:	404a      	eors	r2, r1
 8009624:	b2d2      	uxtb	r2, r2
 8009626:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	330f      	adds	r3, #15
 800962c:	7819      	ldrb	r1, [r3, #0]
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	330f      	adds	r3, #15
 8009632:	781a      	ldrb	r2, [r3, #0]
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	330f      	adds	r3, #15
 8009638:	404a      	eors	r2, r1
 800963a:	b2d2      	uxtb	r2, r2
 800963c:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800963e:	bf00      	nop
 8009640:	3714      	adds	r7, #20
 8009642:	46bd      	mov	sp, r7
 8009644:	bc80      	pop	{r7}
 8009646:	4770      	bx	lr

08009648 <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b082      	sub	sp, #8
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
 8009650:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 8009652:	6839      	ldr	r1, [r7, #0]
 8009654:	6878      	ldr	r0, [r7, #4]
 8009656:	f7ff fe88 	bl	800936a <xor_block>
}
 800965a:	bf00      	nop
 800965c:	3708      	adds	r7, #8
 800965e:	46bd      	mov	sp, r7
 8009660:	bd80      	pop	{r7, pc}
	...

08009664 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 8009664:	b480      	push	{r7}
 8009666:	b085      	sub	sp, #20
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	781b      	ldrb	r3, [r3, #0]
 8009670:	461a      	mov	r2, r3
 8009672:	4b48      	ldr	r3, [pc, #288]	; (8009794 <shift_sub_rows+0x130>)
 8009674:	5c9a      	ldrb	r2, [r3, r2]
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	701a      	strb	r2, [r3, #0]
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	3304      	adds	r3, #4
 800967e:	781b      	ldrb	r3, [r3, #0]
 8009680:	4619      	mov	r1, r3
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	3304      	adds	r3, #4
 8009686:	4a43      	ldr	r2, [pc, #268]	; (8009794 <shift_sub_rows+0x130>)
 8009688:	5c52      	ldrb	r2, [r2, r1]
 800968a:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	3308      	adds	r3, #8
 8009690:	781b      	ldrb	r3, [r3, #0]
 8009692:	4619      	mov	r1, r3
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	3308      	adds	r3, #8
 8009698:	4a3e      	ldr	r2, [pc, #248]	; (8009794 <shift_sub_rows+0x130>)
 800969a:	5c52      	ldrb	r2, [r2, r1]
 800969c:	701a      	strb	r2, [r3, #0]
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	330c      	adds	r3, #12
 80096a2:	781b      	ldrb	r3, [r3, #0]
 80096a4:	4619      	mov	r1, r3
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	330c      	adds	r3, #12
 80096aa:	4a3a      	ldr	r2, [pc, #232]	; (8009794 <shift_sub_rows+0x130>)
 80096ac:	5c52      	ldrb	r2, [r2, r1]
 80096ae:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	785b      	ldrb	r3, [r3, #1]
 80096b4:	73fb      	strb	r3, [r7, #15]
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	3305      	adds	r3, #5
 80096ba:	781b      	ldrb	r3, [r3, #0]
 80096bc:	4619      	mov	r1, r3
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	3301      	adds	r3, #1
 80096c2:	4a34      	ldr	r2, [pc, #208]	; (8009794 <shift_sub_rows+0x130>)
 80096c4:	5c52      	ldrb	r2, [r2, r1]
 80096c6:	701a      	strb	r2, [r3, #0]
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	3309      	adds	r3, #9
 80096cc:	781b      	ldrb	r3, [r3, #0]
 80096ce:	4619      	mov	r1, r3
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	3305      	adds	r3, #5
 80096d4:	4a2f      	ldr	r2, [pc, #188]	; (8009794 <shift_sub_rows+0x130>)
 80096d6:	5c52      	ldrb	r2, [r2, r1]
 80096d8:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	330d      	adds	r3, #13
 80096de:	781b      	ldrb	r3, [r3, #0]
 80096e0:	4619      	mov	r1, r3
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	3309      	adds	r3, #9
 80096e6:	4a2b      	ldr	r2, [pc, #172]	; (8009794 <shift_sub_rows+0x130>)
 80096e8:	5c52      	ldrb	r2, [r2, r1]
 80096ea:	701a      	strb	r2, [r3, #0]
 80096ec:	7bfa      	ldrb	r2, [r7, #15]
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	330d      	adds	r3, #13
 80096f2:	4928      	ldr	r1, [pc, #160]	; (8009794 <shift_sub_rows+0x130>)
 80096f4:	5c8a      	ldrb	r2, [r1, r2]
 80096f6:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	789b      	ldrb	r3, [r3, #2]
 80096fc:	73fb      	strb	r3, [r7, #15]
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	330a      	adds	r3, #10
 8009702:	781b      	ldrb	r3, [r3, #0]
 8009704:	4619      	mov	r1, r3
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	3302      	adds	r3, #2
 800970a:	4a22      	ldr	r2, [pc, #136]	; (8009794 <shift_sub_rows+0x130>)
 800970c:	5c52      	ldrb	r2, [r2, r1]
 800970e:	701a      	strb	r2, [r3, #0]
 8009710:	7bfa      	ldrb	r2, [r7, #15]
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	330a      	adds	r3, #10
 8009716:	491f      	ldr	r1, [pc, #124]	; (8009794 <shift_sub_rows+0x130>)
 8009718:	5c8a      	ldrb	r2, [r1, r2]
 800971a:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	799b      	ldrb	r3, [r3, #6]
 8009720:	73fb      	strb	r3, [r7, #15]
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	330e      	adds	r3, #14
 8009726:	781b      	ldrb	r3, [r3, #0]
 8009728:	4619      	mov	r1, r3
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	3306      	adds	r3, #6
 800972e:	4a19      	ldr	r2, [pc, #100]	; (8009794 <shift_sub_rows+0x130>)
 8009730:	5c52      	ldrb	r2, [r2, r1]
 8009732:	701a      	strb	r2, [r3, #0]
 8009734:	7bfa      	ldrb	r2, [r7, #15]
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	330e      	adds	r3, #14
 800973a:	4916      	ldr	r1, [pc, #88]	; (8009794 <shift_sub_rows+0x130>)
 800973c:	5c8a      	ldrb	r2, [r1, r2]
 800973e:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	7bdb      	ldrb	r3, [r3, #15]
 8009744:	73fb      	strb	r3, [r7, #15]
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	330b      	adds	r3, #11
 800974a:	781b      	ldrb	r3, [r3, #0]
 800974c:	4619      	mov	r1, r3
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	330f      	adds	r3, #15
 8009752:	4a10      	ldr	r2, [pc, #64]	; (8009794 <shift_sub_rows+0x130>)
 8009754:	5c52      	ldrb	r2, [r2, r1]
 8009756:	701a      	strb	r2, [r3, #0]
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	3307      	adds	r3, #7
 800975c:	781b      	ldrb	r3, [r3, #0]
 800975e:	4619      	mov	r1, r3
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	330b      	adds	r3, #11
 8009764:	4a0b      	ldr	r2, [pc, #44]	; (8009794 <shift_sub_rows+0x130>)
 8009766:	5c52      	ldrb	r2, [r2, r1]
 8009768:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	3303      	adds	r3, #3
 800976e:	781b      	ldrb	r3, [r3, #0]
 8009770:	4619      	mov	r1, r3
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	3307      	adds	r3, #7
 8009776:	4a07      	ldr	r2, [pc, #28]	; (8009794 <shift_sub_rows+0x130>)
 8009778:	5c52      	ldrb	r2, [r2, r1]
 800977a:	701a      	strb	r2, [r3, #0]
 800977c:	7bfa      	ldrb	r2, [r7, #15]
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	3303      	adds	r3, #3
 8009782:	4904      	ldr	r1, [pc, #16]	; (8009794 <shift_sub_rows+0x130>)
 8009784:	5c8a      	ldrb	r2, [r1, r2]
 8009786:	701a      	strb	r2, [r3, #0]
}
 8009788:	bf00      	nop
 800978a:	3714      	adds	r7, #20
 800978c:	46bd      	mov	sp, r7
 800978e:	bc80      	pop	{r7}
 8009790:	4770      	bx	lr
 8009792:	bf00      	nop
 8009794:	0801992c 	.word	0x0801992c

08009798 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 8009798:	b580      	push	{r7, lr}
 800979a:	b086      	sub	sp, #24
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 80097a0:	f107 0308 	add.w	r3, r7, #8
 80097a4:	6879      	ldr	r1, [r7, #4]
 80097a6:	4618      	mov	r0, r3
 80097a8:	f7ff fd6b 	bl	8009282 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 80097ac:	7a3b      	ldrb	r3, [r7, #8]
 80097ae:	461a      	mov	r2, r3
 80097b0:	4b9a      	ldr	r3, [pc, #616]	; (8009a1c <mix_sub_columns+0x284>)
 80097b2:	5c9a      	ldrb	r2, [r3, r2]
 80097b4:	7b7b      	ldrb	r3, [r7, #13]
 80097b6:	4619      	mov	r1, r3
 80097b8:	4b99      	ldr	r3, [pc, #612]	; (8009a20 <mix_sub_columns+0x288>)
 80097ba:	5c5b      	ldrb	r3, [r3, r1]
 80097bc:	4053      	eors	r3, r2
 80097be:	b2da      	uxtb	r2, r3
 80097c0:	7cbb      	ldrb	r3, [r7, #18]
 80097c2:	4619      	mov	r1, r3
 80097c4:	4b97      	ldr	r3, [pc, #604]	; (8009a24 <mix_sub_columns+0x28c>)
 80097c6:	5c5b      	ldrb	r3, [r3, r1]
 80097c8:	4053      	eors	r3, r2
 80097ca:	b2da      	uxtb	r2, r3
 80097cc:	7dfb      	ldrb	r3, [r7, #23]
 80097ce:	4619      	mov	r1, r3
 80097d0:	4b94      	ldr	r3, [pc, #592]	; (8009a24 <mix_sub_columns+0x28c>)
 80097d2:	5c5b      	ldrb	r3, [r3, r1]
 80097d4:	4053      	eors	r3, r2
 80097d6:	b2da      	uxtb	r2, r3
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 80097dc:	7a3b      	ldrb	r3, [r7, #8]
 80097de:	461a      	mov	r2, r3
 80097e0:	4b90      	ldr	r3, [pc, #576]	; (8009a24 <mix_sub_columns+0x28c>)
 80097e2:	5c9a      	ldrb	r2, [r3, r2]
 80097e4:	7b7b      	ldrb	r3, [r7, #13]
 80097e6:	4619      	mov	r1, r3
 80097e8:	4b8c      	ldr	r3, [pc, #560]	; (8009a1c <mix_sub_columns+0x284>)
 80097ea:	5c5b      	ldrb	r3, [r3, r1]
 80097ec:	4053      	eors	r3, r2
 80097ee:	b2da      	uxtb	r2, r3
 80097f0:	7cbb      	ldrb	r3, [r7, #18]
 80097f2:	4619      	mov	r1, r3
 80097f4:	4b8a      	ldr	r3, [pc, #552]	; (8009a20 <mix_sub_columns+0x288>)
 80097f6:	5c5b      	ldrb	r3, [r3, r1]
 80097f8:	4053      	eors	r3, r2
 80097fa:	b2d9      	uxtb	r1, r3
 80097fc:	7dfb      	ldrb	r3, [r7, #23]
 80097fe:	461a      	mov	r2, r3
 8009800:	4b88      	ldr	r3, [pc, #544]	; (8009a24 <mix_sub_columns+0x28c>)
 8009802:	5c9a      	ldrb	r2, [r3, r2]
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	3301      	adds	r3, #1
 8009808:	404a      	eors	r2, r1
 800980a:	b2d2      	uxtb	r2, r2
 800980c:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800980e:	7a3b      	ldrb	r3, [r7, #8]
 8009810:	461a      	mov	r2, r3
 8009812:	4b84      	ldr	r3, [pc, #528]	; (8009a24 <mix_sub_columns+0x28c>)
 8009814:	5c9a      	ldrb	r2, [r3, r2]
 8009816:	7b7b      	ldrb	r3, [r7, #13]
 8009818:	4619      	mov	r1, r3
 800981a:	4b82      	ldr	r3, [pc, #520]	; (8009a24 <mix_sub_columns+0x28c>)
 800981c:	5c5b      	ldrb	r3, [r3, r1]
 800981e:	4053      	eors	r3, r2
 8009820:	b2da      	uxtb	r2, r3
 8009822:	7cbb      	ldrb	r3, [r7, #18]
 8009824:	4619      	mov	r1, r3
 8009826:	4b7d      	ldr	r3, [pc, #500]	; (8009a1c <mix_sub_columns+0x284>)
 8009828:	5c5b      	ldrb	r3, [r3, r1]
 800982a:	4053      	eors	r3, r2
 800982c:	b2d9      	uxtb	r1, r3
 800982e:	7dfb      	ldrb	r3, [r7, #23]
 8009830:	461a      	mov	r2, r3
 8009832:	4b7b      	ldr	r3, [pc, #492]	; (8009a20 <mix_sub_columns+0x288>)
 8009834:	5c9a      	ldrb	r2, [r3, r2]
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	3302      	adds	r3, #2
 800983a:	404a      	eors	r2, r1
 800983c:	b2d2      	uxtb	r2, r2
 800983e:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 8009840:	7a3b      	ldrb	r3, [r7, #8]
 8009842:	461a      	mov	r2, r3
 8009844:	4b76      	ldr	r3, [pc, #472]	; (8009a20 <mix_sub_columns+0x288>)
 8009846:	5c9a      	ldrb	r2, [r3, r2]
 8009848:	7b7b      	ldrb	r3, [r7, #13]
 800984a:	4619      	mov	r1, r3
 800984c:	4b75      	ldr	r3, [pc, #468]	; (8009a24 <mix_sub_columns+0x28c>)
 800984e:	5c5b      	ldrb	r3, [r3, r1]
 8009850:	4053      	eors	r3, r2
 8009852:	b2da      	uxtb	r2, r3
 8009854:	7cbb      	ldrb	r3, [r7, #18]
 8009856:	4619      	mov	r1, r3
 8009858:	4b72      	ldr	r3, [pc, #456]	; (8009a24 <mix_sub_columns+0x28c>)
 800985a:	5c5b      	ldrb	r3, [r3, r1]
 800985c:	4053      	eors	r3, r2
 800985e:	b2d9      	uxtb	r1, r3
 8009860:	7dfb      	ldrb	r3, [r7, #23]
 8009862:	461a      	mov	r2, r3
 8009864:	4b6d      	ldr	r3, [pc, #436]	; (8009a1c <mix_sub_columns+0x284>)
 8009866:	5c9a      	ldrb	r2, [r3, r2]
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	3303      	adds	r3, #3
 800986c:	404a      	eors	r2, r1
 800986e:	b2d2      	uxtb	r2, r2
 8009870:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 8009872:	7b3b      	ldrb	r3, [r7, #12]
 8009874:	461a      	mov	r2, r3
 8009876:	4b69      	ldr	r3, [pc, #420]	; (8009a1c <mix_sub_columns+0x284>)
 8009878:	5c9a      	ldrb	r2, [r3, r2]
 800987a:	7c7b      	ldrb	r3, [r7, #17]
 800987c:	4619      	mov	r1, r3
 800987e:	4b68      	ldr	r3, [pc, #416]	; (8009a20 <mix_sub_columns+0x288>)
 8009880:	5c5b      	ldrb	r3, [r3, r1]
 8009882:	4053      	eors	r3, r2
 8009884:	b2da      	uxtb	r2, r3
 8009886:	7dbb      	ldrb	r3, [r7, #22]
 8009888:	4619      	mov	r1, r3
 800988a:	4b66      	ldr	r3, [pc, #408]	; (8009a24 <mix_sub_columns+0x28c>)
 800988c:	5c5b      	ldrb	r3, [r3, r1]
 800988e:	4053      	eors	r3, r2
 8009890:	b2d9      	uxtb	r1, r3
 8009892:	7afb      	ldrb	r3, [r7, #11]
 8009894:	461a      	mov	r2, r3
 8009896:	4b63      	ldr	r3, [pc, #396]	; (8009a24 <mix_sub_columns+0x28c>)
 8009898:	5c9a      	ldrb	r2, [r3, r2]
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	3304      	adds	r3, #4
 800989e:	404a      	eors	r2, r1
 80098a0:	b2d2      	uxtb	r2, r2
 80098a2:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 80098a4:	7b3b      	ldrb	r3, [r7, #12]
 80098a6:	461a      	mov	r2, r3
 80098a8:	4b5e      	ldr	r3, [pc, #376]	; (8009a24 <mix_sub_columns+0x28c>)
 80098aa:	5c9a      	ldrb	r2, [r3, r2]
 80098ac:	7c7b      	ldrb	r3, [r7, #17]
 80098ae:	4619      	mov	r1, r3
 80098b0:	4b5a      	ldr	r3, [pc, #360]	; (8009a1c <mix_sub_columns+0x284>)
 80098b2:	5c5b      	ldrb	r3, [r3, r1]
 80098b4:	4053      	eors	r3, r2
 80098b6:	b2da      	uxtb	r2, r3
 80098b8:	7dbb      	ldrb	r3, [r7, #22]
 80098ba:	4619      	mov	r1, r3
 80098bc:	4b58      	ldr	r3, [pc, #352]	; (8009a20 <mix_sub_columns+0x288>)
 80098be:	5c5b      	ldrb	r3, [r3, r1]
 80098c0:	4053      	eors	r3, r2
 80098c2:	b2d9      	uxtb	r1, r3
 80098c4:	7afb      	ldrb	r3, [r7, #11]
 80098c6:	461a      	mov	r2, r3
 80098c8:	4b56      	ldr	r3, [pc, #344]	; (8009a24 <mix_sub_columns+0x28c>)
 80098ca:	5c9a      	ldrb	r2, [r3, r2]
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	3305      	adds	r3, #5
 80098d0:	404a      	eors	r2, r1
 80098d2:	b2d2      	uxtb	r2, r2
 80098d4:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 80098d6:	7b3b      	ldrb	r3, [r7, #12]
 80098d8:	461a      	mov	r2, r3
 80098da:	4b52      	ldr	r3, [pc, #328]	; (8009a24 <mix_sub_columns+0x28c>)
 80098dc:	5c9a      	ldrb	r2, [r3, r2]
 80098de:	7c7b      	ldrb	r3, [r7, #17]
 80098e0:	4619      	mov	r1, r3
 80098e2:	4b50      	ldr	r3, [pc, #320]	; (8009a24 <mix_sub_columns+0x28c>)
 80098e4:	5c5b      	ldrb	r3, [r3, r1]
 80098e6:	4053      	eors	r3, r2
 80098e8:	b2da      	uxtb	r2, r3
 80098ea:	7dbb      	ldrb	r3, [r7, #22]
 80098ec:	4619      	mov	r1, r3
 80098ee:	4b4b      	ldr	r3, [pc, #300]	; (8009a1c <mix_sub_columns+0x284>)
 80098f0:	5c5b      	ldrb	r3, [r3, r1]
 80098f2:	4053      	eors	r3, r2
 80098f4:	b2d9      	uxtb	r1, r3
 80098f6:	7afb      	ldrb	r3, [r7, #11]
 80098f8:	461a      	mov	r2, r3
 80098fa:	4b49      	ldr	r3, [pc, #292]	; (8009a20 <mix_sub_columns+0x288>)
 80098fc:	5c9a      	ldrb	r2, [r3, r2]
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	3306      	adds	r3, #6
 8009902:	404a      	eors	r2, r1
 8009904:	b2d2      	uxtb	r2, r2
 8009906:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 8009908:	7b3b      	ldrb	r3, [r7, #12]
 800990a:	461a      	mov	r2, r3
 800990c:	4b44      	ldr	r3, [pc, #272]	; (8009a20 <mix_sub_columns+0x288>)
 800990e:	5c9a      	ldrb	r2, [r3, r2]
 8009910:	7c7b      	ldrb	r3, [r7, #17]
 8009912:	4619      	mov	r1, r3
 8009914:	4b43      	ldr	r3, [pc, #268]	; (8009a24 <mix_sub_columns+0x28c>)
 8009916:	5c5b      	ldrb	r3, [r3, r1]
 8009918:	4053      	eors	r3, r2
 800991a:	b2da      	uxtb	r2, r3
 800991c:	7dbb      	ldrb	r3, [r7, #22]
 800991e:	4619      	mov	r1, r3
 8009920:	4b40      	ldr	r3, [pc, #256]	; (8009a24 <mix_sub_columns+0x28c>)
 8009922:	5c5b      	ldrb	r3, [r3, r1]
 8009924:	4053      	eors	r3, r2
 8009926:	b2d9      	uxtb	r1, r3
 8009928:	7afb      	ldrb	r3, [r7, #11]
 800992a:	461a      	mov	r2, r3
 800992c:	4b3b      	ldr	r3, [pc, #236]	; (8009a1c <mix_sub_columns+0x284>)
 800992e:	5c9a      	ldrb	r2, [r3, r2]
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	3307      	adds	r3, #7
 8009934:	404a      	eors	r2, r1
 8009936:	b2d2      	uxtb	r2, r2
 8009938:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800993a:	7c3b      	ldrb	r3, [r7, #16]
 800993c:	461a      	mov	r2, r3
 800993e:	4b37      	ldr	r3, [pc, #220]	; (8009a1c <mix_sub_columns+0x284>)
 8009940:	5c9a      	ldrb	r2, [r3, r2]
 8009942:	7d7b      	ldrb	r3, [r7, #21]
 8009944:	4619      	mov	r1, r3
 8009946:	4b36      	ldr	r3, [pc, #216]	; (8009a20 <mix_sub_columns+0x288>)
 8009948:	5c5b      	ldrb	r3, [r3, r1]
 800994a:	4053      	eors	r3, r2
 800994c:	b2da      	uxtb	r2, r3
 800994e:	7abb      	ldrb	r3, [r7, #10]
 8009950:	4619      	mov	r1, r3
 8009952:	4b34      	ldr	r3, [pc, #208]	; (8009a24 <mix_sub_columns+0x28c>)
 8009954:	5c5b      	ldrb	r3, [r3, r1]
 8009956:	4053      	eors	r3, r2
 8009958:	b2d9      	uxtb	r1, r3
 800995a:	7bfb      	ldrb	r3, [r7, #15]
 800995c:	461a      	mov	r2, r3
 800995e:	4b31      	ldr	r3, [pc, #196]	; (8009a24 <mix_sub_columns+0x28c>)
 8009960:	5c9a      	ldrb	r2, [r3, r2]
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	3308      	adds	r3, #8
 8009966:	404a      	eors	r2, r1
 8009968:	b2d2      	uxtb	r2, r2
 800996a:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800996c:	7c3b      	ldrb	r3, [r7, #16]
 800996e:	461a      	mov	r2, r3
 8009970:	4b2c      	ldr	r3, [pc, #176]	; (8009a24 <mix_sub_columns+0x28c>)
 8009972:	5c9a      	ldrb	r2, [r3, r2]
 8009974:	7d7b      	ldrb	r3, [r7, #21]
 8009976:	4619      	mov	r1, r3
 8009978:	4b28      	ldr	r3, [pc, #160]	; (8009a1c <mix_sub_columns+0x284>)
 800997a:	5c5b      	ldrb	r3, [r3, r1]
 800997c:	4053      	eors	r3, r2
 800997e:	b2da      	uxtb	r2, r3
 8009980:	7abb      	ldrb	r3, [r7, #10]
 8009982:	4619      	mov	r1, r3
 8009984:	4b26      	ldr	r3, [pc, #152]	; (8009a20 <mix_sub_columns+0x288>)
 8009986:	5c5b      	ldrb	r3, [r3, r1]
 8009988:	4053      	eors	r3, r2
 800998a:	b2d9      	uxtb	r1, r3
 800998c:	7bfb      	ldrb	r3, [r7, #15]
 800998e:	461a      	mov	r2, r3
 8009990:	4b24      	ldr	r3, [pc, #144]	; (8009a24 <mix_sub_columns+0x28c>)
 8009992:	5c9a      	ldrb	r2, [r3, r2]
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	3309      	adds	r3, #9
 8009998:	404a      	eors	r2, r1
 800999a:	b2d2      	uxtb	r2, r2
 800999c:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800999e:	7c3b      	ldrb	r3, [r7, #16]
 80099a0:	461a      	mov	r2, r3
 80099a2:	4b20      	ldr	r3, [pc, #128]	; (8009a24 <mix_sub_columns+0x28c>)
 80099a4:	5c9a      	ldrb	r2, [r3, r2]
 80099a6:	7d7b      	ldrb	r3, [r7, #21]
 80099a8:	4619      	mov	r1, r3
 80099aa:	4b1e      	ldr	r3, [pc, #120]	; (8009a24 <mix_sub_columns+0x28c>)
 80099ac:	5c5b      	ldrb	r3, [r3, r1]
 80099ae:	4053      	eors	r3, r2
 80099b0:	b2da      	uxtb	r2, r3
 80099b2:	7abb      	ldrb	r3, [r7, #10]
 80099b4:	4619      	mov	r1, r3
 80099b6:	4b19      	ldr	r3, [pc, #100]	; (8009a1c <mix_sub_columns+0x284>)
 80099b8:	5c5b      	ldrb	r3, [r3, r1]
 80099ba:	4053      	eors	r3, r2
 80099bc:	b2d9      	uxtb	r1, r3
 80099be:	7bfb      	ldrb	r3, [r7, #15]
 80099c0:	461a      	mov	r2, r3
 80099c2:	4b17      	ldr	r3, [pc, #92]	; (8009a20 <mix_sub_columns+0x288>)
 80099c4:	5c9a      	ldrb	r2, [r3, r2]
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	330a      	adds	r3, #10
 80099ca:	404a      	eors	r2, r1
 80099cc:	b2d2      	uxtb	r2, r2
 80099ce:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 80099d0:	7c3b      	ldrb	r3, [r7, #16]
 80099d2:	461a      	mov	r2, r3
 80099d4:	4b12      	ldr	r3, [pc, #72]	; (8009a20 <mix_sub_columns+0x288>)
 80099d6:	5c9a      	ldrb	r2, [r3, r2]
 80099d8:	7d7b      	ldrb	r3, [r7, #21]
 80099da:	4619      	mov	r1, r3
 80099dc:	4b11      	ldr	r3, [pc, #68]	; (8009a24 <mix_sub_columns+0x28c>)
 80099de:	5c5b      	ldrb	r3, [r3, r1]
 80099e0:	4053      	eors	r3, r2
 80099e2:	b2da      	uxtb	r2, r3
 80099e4:	7abb      	ldrb	r3, [r7, #10]
 80099e6:	4619      	mov	r1, r3
 80099e8:	4b0e      	ldr	r3, [pc, #56]	; (8009a24 <mix_sub_columns+0x28c>)
 80099ea:	5c5b      	ldrb	r3, [r3, r1]
 80099ec:	4053      	eors	r3, r2
 80099ee:	b2d9      	uxtb	r1, r3
 80099f0:	7bfb      	ldrb	r3, [r7, #15]
 80099f2:	461a      	mov	r2, r3
 80099f4:	4b09      	ldr	r3, [pc, #36]	; (8009a1c <mix_sub_columns+0x284>)
 80099f6:	5c9a      	ldrb	r2, [r3, r2]
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	330b      	adds	r3, #11
 80099fc:	404a      	eors	r2, r1
 80099fe:	b2d2      	uxtb	r2, r2
 8009a00:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 8009a02:	7d3b      	ldrb	r3, [r7, #20]
 8009a04:	461a      	mov	r2, r3
 8009a06:	4b05      	ldr	r3, [pc, #20]	; (8009a1c <mix_sub_columns+0x284>)
 8009a08:	5c9a      	ldrb	r2, [r3, r2]
 8009a0a:	7a7b      	ldrb	r3, [r7, #9]
 8009a0c:	4619      	mov	r1, r3
 8009a0e:	4b04      	ldr	r3, [pc, #16]	; (8009a20 <mix_sub_columns+0x288>)
 8009a10:	5c5b      	ldrb	r3, [r3, r1]
 8009a12:	4053      	eors	r3, r2
 8009a14:	b2da      	uxtb	r2, r3
 8009a16:	7bbb      	ldrb	r3, [r7, #14]
 8009a18:	4619      	mov	r1, r3
 8009a1a:	e005      	b.n	8009a28 <mix_sub_columns+0x290>
 8009a1c:	08019a2c 	.word	0x08019a2c
 8009a20:	08019b2c 	.word	0x08019b2c
 8009a24:	0801992c 	.word	0x0801992c
 8009a28:	4b2d      	ldr	r3, [pc, #180]	; (8009ae0 <mix_sub_columns+0x348>)
 8009a2a:	5c5b      	ldrb	r3, [r3, r1]
 8009a2c:	4053      	eors	r3, r2
 8009a2e:	b2d9      	uxtb	r1, r3
 8009a30:	7cfb      	ldrb	r3, [r7, #19]
 8009a32:	461a      	mov	r2, r3
 8009a34:	4b2a      	ldr	r3, [pc, #168]	; (8009ae0 <mix_sub_columns+0x348>)
 8009a36:	5c9a      	ldrb	r2, [r3, r2]
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	330c      	adds	r3, #12
 8009a3c:	404a      	eors	r2, r1
 8009a3e:	b2d2      	uxtb	r2, r2
 8009a40:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 8009a42:	7d3b      	ldrb	r3, [r7, #20]
 8009a44:	461a      	mov	r2, r3
 8009a46:	4b26      	ldr	r3, [pc, #152]	; (8009ae0 <mix_sub_columns+0x348>)
 8009a48:	5c9a      	ldrb	r2, [r3, r2]
 8009a4a:	7a7b      	ldrb	r3, [r7, #9]
 8009a4c:	4619      	mov	r1, r3
 8009a4e:	4b25      	ldr	r3, [pc, #148]	; (8009ae4 <mix_sub_columns+0x34c>)
 8009a50:	5c5b      	ldrb	r3, [r3, r1]
 8009a52:	4053      	eors	r3, r2
 8009a54:	b2da      	uxtb	r2, r3
 8009a56:	7bbb      	ldrb	r3, [r7, #14]
 8009a58:	4619      	mov	r1, r3
 8009a5a:	4b23      	ldr	r3, [pc, #140]	; (8009ae8 <mix_sub_columns+0x350>)
 8009a5c:	5c5b      	ldrb	r3, [r3, r1]
 8009a5e:	4053      	eors	r3, r2
 8009a60:	b2d9      	uxtb	r1, r3
 8009a62:	7cfb      	ldrb	r3, [r7, #19]
 8009a64:	461a      	mov	r2, r3
 8009a66:	4b1e      	ldr	r3, [pc, #120]	; (8009ae0 <mix_sub_columns+0x348>)
 8009a68:	5c9a      	ldrb	r2, [r3, r2]
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	330d      	adds	r3, #13
 8009a6e:	404a      	eors	r2, r1
 8009a70:	b2d2      	uxtb	r2, r2
 8009a72:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 8009a74:	7d3b      	ldrb	r3, [r7, #20]
 8009a76:	461a      	mov	r2, r3
 8009a78:	4b19      	ldr	r3, [pc, #100]	; (8009ae0 <mix_sub_columns+0x348>)
 8009a7a:	5c9a      	ldrb	r2, [r3, r2]
 8009a7c:	7a7b      	ldrb	r3, [r7, #9]
 8009a7e:	4619      	mov	r1, r3
 8009a80:	4b17      	ldr	r3, [pc, #92]	; (8009ae0 <mix_sub_columns+0x348>)
 8009a82:	5c5b      	ldrb	r3, [r3, r1]
 8009a84:	4053      	eors	r3, r2
 8009a86:	b2da      	uxtb	r2, r3
 8009a88:	7bbb      	ldrb	r3, [r7, #14]
 8009a8a:	4619      	mov	r1, r3
 8009a8c:	4b15      	ldr	r3, [pc, #84]	; (8009ae4 <mix_sub_columns+0x34c>)
 8009a8e:	5c5b      	ldrb	r3, [r3, r1]
 8009a90:	4053      	eors	r3, r2
 8009a92:	b2d9      	uxtb	r1, r3
 8009a94:	7cfb      	ldrb	r3, [r7, #19]
 8009a96:	461a      	mov	r2, r3
 8009a98:	4b13      	ldr	r3, [pc, #76]	; (8009ae8 <mix_sub_columns+0x350>)
 8009a9a:	5c9a      	ldrb	r2, [r3, r2]
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	330e      	adds	r3, #14
 8009aa0:	404a      	eors	r2, r1
 8009aa2:	b2d2      	uxtb	r2, r2
 8009aa4:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 8009aa6:	7d3b      	ldrb	r3, [r7, #20]
 8009aa8:	461a      	mov	r2, r3
 8009aaa:	4b0f      	ldr	r3, [pc, #60]	; (8009ae8 <mix_sub_columns+0x350>)
 8009aac:	5c9a      	ldrb	r2, [r3, r2]
 8009aae:	7a7b      	ldrb	r3, [r7, #9]
 8009ab0:	4619      	mov	r1, r3
 8009ab2:	4b0b      	ldr	r3, [pc, #44]	; (8009ae0 <mix_sub_columns+0x348>)
 8009ab4:	5c5b      	ldrb	r3, [r3, r1]
 8009ab6:	4053      	eors	r3, r2
 8009ab8:	b2da      	uxtb	r2, r3
 8009aba:	7bbb      	ldrb	r3, [r7, #14]
 8009abc:	4619      	mov	r1, r3
 8009abe:	4b08      	ldr	r3, [pc, #32]	; (8009ae0 <mix_sub_columns+0x348>)
 8009ac0:	5c5b      	ldrb	r3, [r3, r1]
 8009ac2:	4053      	eors	r3, r2
 8009ac4:	b2d9      	uxtb	r1, r3
 8009ac6:	7cfb      	ldrb	r3, [r7, #19]
 8009ac8:	461a      	mov	r2, r3
 8009aca:	4b06      	ldr	r3, [pc, #24]	; (8009ae4 <mix_sub_columns+0x34c>)
 8009acc:	5c9a      	ldrb	r2, [r3, r2]
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	330f      	adds	r3, #15
 8009ad2:	404a      	eors	r2, r1
 8009ad4:	b2d2      	uxtb	r2, r2
 8009ad6:	701a      	strb	r2, [r3, #0]
  }
 8009ad8:	bf00      	nop
 8009ada:	3718      	adds	r7, #24
 8009adc:	46bd      	mov	sp, r7
 8009ade:	bd80      	pop	{r7, pc}
 8009ae0:	0801992c 	.word	0x0801992c
 8009ae4:	08019a2c 	.word	0x08019a2c
 8009ae8:	08019b2c 	.word	0x08019b2c

08009aec <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b086      	sub	sp, #24
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	60f8      	str	r0, [r7, #12]
 8009af4:	460b      	mov	r3, r1
 8009af6:	607a      	str	r2, [r7, #4]
 8009af8:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 8009afa:	7afb      	ldrb	r3, [r7, #11]
 8009afc:	3b10      	subs	r3, #16
 8009afe:	2b10      	cmp	r3, #16
 8009b00:	bf8c      	ite	hi
 8009b02:	2201      	movhi	r2, #1
 8009b04:	2200      	movls	r2, #0
 8009b06:	b2d2      	uxtb	r2, r2
 8009b08:	2a00      	cmp	r2, #0
 8009b0a:	d10d      	bne.n	8009b28 <lorawan_aes_set_key+0x3c>
 8009b0c:	2201      	movs	r2, #1
 8009b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8009b12:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8009b16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	bf14      	ite	ne
 8009b1e:	2301      	movne	r3, #1
 8009b20:	2300      	moveq	r3, #0
 8009b22:	b2db      	uxtb	r3, r3
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d105      	bne.n	8009b34 <lorawan_aes_set_key+0x48>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
        return ( uint8_t )-1;
 8009b30:	23ff      	movs	r3, #255	; 0xff
 8009b32:	e0b2      	b.n	8009c9a <lorawan_aes_set_key+0x1ae>
        break;
 8009b34:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	7afa      	ldrb	r2, [r7, #11]
 8009b3a:	68f9      	ldr	r1, [r7, #12]
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	f7ff fbf9 	bl	8009334 <copy_block_nn>
    hi = (keylen + 28) << 2;
 8009b42:	7afb      	ldrb	r3, [r7, #11]
 8009b44:	331c      	adds	r3, #28
 8009b46:	b2db      	uxtb	r3, r3
 8009b48:	009b      	lsls	r3, r3, #2
 8009b4a:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 8009b4c:	7c7b      	ldrb	r3, [r7, #17]
 8009b4e:	091b      	lsrs	r3, r3, #4
 8009b50:	b2db      	uxtb	r3, r3
 8009b52:	3b01      	subs	r3, #1
 8009b54:	b2da      	uxtb	r2, r3
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8009b5c:	7afb      	ldrb	r3, [r7, #11]
 8009b5e:	75fb      	strb	r3, [r7, #23]
 8009b60:	2301      	movs	r3, #1
 8009b62:	75bb      	strb	r3, [r7, #22]
 8009b64:	e093      	b.n	8009c8e <lorawan_aes_set_key+0x1a2>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 8009b66:	7dfb      	ldrb	r3, [r7, #23]
 8009b68:	3b04      	subs	r3, #4
 8009b6a:	687a      	ldr	r2, [r7, #4]
 8009b6c:	5cd3      	ldrb	r3, [r2, r3]
 8009b6e:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 8009b70:	7dfb      	ldrb	r3, [r7, #23]
 8009b72:	3b03      	subs	r3, #3
 8009b74:	687a      	ldr	r2, [r7, #4]
 8009b76:	5cd3      	ldrb	r3, [r2, r3]
 8009b78:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 8009b7a:	7dfb      	ldrb	r3, [r7, #23]
 8009b7c:	3b02      	subs	r3, #2
 8009b7e:	687a      	ldr	r2, [r7, #4]
 8009b80:	5cd3      	ldrb	r3, [r2, r3]
 8009b82:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 8009b84:	7dfb      	ldrb	r3, [r7, #23]
 8009b86:	3b01      	subs	r3, #1
 8009b88:	687a      	ldr	r2, [r7, #4]
 8009b8a:	5cd3      	ldrb	r3, [r2, r3]
 8009b8c:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 8009b8e:	7dfb      	ldrb	r3, [r7, #23]
 8009b90:	7afa      	ldrb	r2, [r7, #11]
 8009b92:	fbb3 f1f2 	udiv	r1, r3, r2
 8009b96:	fb02 f201 	mul.w	r2, r2, r1
 8009b9a:	1a9b      	subs	r3, r3, r2
 8009b9c:	b2db      	uxtb	r3, r3
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d127      	bne.n	8009bf2 <lorawan_aes_set_key+0x106>
        {
            tt = t0;
 8009ba2:	7d7b      	ldrb	r3, [r7, #21]
 8009ba4:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 8009ba6:	7d3b      	ldrb	r3, [r7, #20]
 8009ba8:	4a3e      	ldr	r2, [pc, #248]	; (8009ca4 <lorawan_aes_set_key+0x1b8>)
 8009baa:	5cd2      	ldrb	r2, [r2, r3]
 8009bac:	7dbb      	ldrb	r3, [r7, #22]
 8009bae:	4053      	eors	r3, r2
 8009bb0:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 8009bb2:	7cfb      	ldrb	r3, [r7, #19]
 8009bb4:	4a3b      	ldr	r2, [pc, #236]	; (8009ca4 <lorawan_aes_set_key+0x1b8>)
 8009bb6:	5cd3      	ldrb	r3, [r2, r3]
 8009bb8:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 8009bba:	7cbb      	ldrb	r3, [r7, #18]
 8009bbc:	4a39      	ldr	r2, [pc, #228]	; (8009ca4 <lorawan_aes_set_key+0x1b8>)
 8009bbe:	5cd3      	ldrb	r3, [r2, r3]
 8009bc0:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 8009bc2:	7c3b      	ldrb	r3, [r7, #16]
 8009bc4:	4a37      	ldr	r2, [pc, #220]	; (8009ca4 <lorawan_aes_set_key+0x1b8>)
 8009bc6:	5cd3      	ldrb	r3, [r2, r3]
 8009bc8:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 8009bca:	7dbb      	ldrb	r3, [r7, #22]
 8009bcc:	005b      	lsls	r3, r3, #1
 8009bce:	b25a      	sxtb	r2, r3
 8009bd0:	7dbb      	ldrb	r3, [r7, #22]
 8009bd2:	09db      	lsrs	r3, r3, #7
 8009bd4:	b2db      	uxtb	r3, r3
 8009bd6:	4619      	mov	r1, r3
 8009bd8:	0049      	lsls	r1, r1, #1
 8009bda:	440b      	add	r3, r1
 8009bdc:	4619      	mov	r1, r3
 8009bde:	00c8      	lsls	r0, r1, #3
 8009be0:	4619      	mov	r1, r3
 8009be2:	4603      	mov	r3, r0
 8009be4:	440b      	add	r3, r1
 8009be6:	b2db      	uxtb	r3, r3
 8009be8:	b25b      	sxtb	r3, r3
 8009bea:	4053      	eors	r3, r2
 8009bec:	b25b      	sxtb	r3, r3
 8009bee:	75bb      	strb	r3, [r7, #22]
 8009bf0:	e01c      	b.n	8009c2c <lorawan_aes_set_key+0x140>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 8009bf2:	7afb      	ldrb	r3, [r7, #11]
 8009bf4:	2b18      	cmp	r3, #24
 8009bf6:	d919      	bls.n	8009c2c <lorawan_aes_set_key+0x140>
 8009bf8:	7dfb      	ldrb	r3, [r7, #23]
 8009bfa:	7afa      	ldrb	r2, [r7, #11]
 8009bfc:	fbb3 f1f2 	udiv	r1, r3, r2
 8009c00:	fb02 f201 	mul.w	r2, r2, r1
 8009c04:	1a9b      	subs	r3, r3, r2
 8009c06:	b2db      	uxtb	r3, r3
 8009c08:	2b10      	cmp	r3, #16
 8009c0a:	d10f      	bne.n	8009c2c <lorawan_aes_set_key+0x140>
        {
            t0 = s_box(t0);
 8009c0c:	7d7b      	ldrb	r3, [r7, #21]
 8009c0e:	4a25      	ldr	r2, [pc, #148]	; (8009ca4 <lorawan_aes_set_key+0x1b8>)
 8009c10:	5cd3      	ldrb	r3, [r2, r3]
 8009c12:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 8009c14:	7d3b      	ldrb	r3, [r7, #20]
 8009c16:	4a23      	ldr	r2, [pc, #140]	; (8009ca4 <lorawan_aes_set_key+0x1b8>)
 8009c18:	5cd3      	ldrb	r3, [r2, r3]
 8009c1a:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 8009c1c:	7cfb      	ldrb	r3, [r7, #19]
 8009c1e:	4a21      	ldr	r2, [pc, #132]	; (8009ca4 <lorawan_aes_set_key+0x1b8>)
 8009c20:	5cd3      	ldrb	r3, [r2, r3]
 8009c22:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 8009c24:	7cbb      	ldrb	r3, [r7, #18]
 8009c26:	4a1f      	ldr	r2, [pc, #124]	; (8009ca4 <lorawan_aes_set_key+0x1b8>)
 8009c28:	5cd3      	ldrb	r3, [r2, r3]
 8009c2a:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 8009c2c:	7dfa      	ldrb	r2, [r7, #23]
 8009c2e:	7afb      	ldrb	r3, [r7, #11]
 8009c30:	1ad3      	subs	r3, r2, r3
 8009c32:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 8009c34:	7c3b      	ldrb	r3, [r7, #16]
 8009c36:	687a      	ldr	r2, [r7, #4]
 8009c38:	5cd1      	ldrb	r1, [r2, r3]
 8009c3a:	7dfb      	ldrb	r3, [r7, #23]
 8009c3c:	7d7a      	ldrb	r2, [r7, #21]
 8009c3e:	404a      	eors	r2, r1
 8009c40:	b2d1      	uxtb	r1, r2
 8009c42:	687a      	ldr	r2, [r7, #4]
 8009c44:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 8009c46:	7c3b      	ldrb	r3, [r7, #16]
 8009c48:	3301      	adds	r3, #1
 8009c4a:	687a      	ldr	r2, [r7, #4]
 8009c4c:	5cd1      	ldrb	r1, [r2, r3]
 8009c4e:	7dfb      	ldrb	r3, [r7, #23]
 8009c50:	3301      	adds	r3, #1
 8009c52:	7d3a      	ldrb	r2, [r7, #20]
 8009c54:	404a      	eors	r2, r1
 8009c56:	b2d1      	uxtb	r1, r2
 8009c58:	687a      	ldr	r2, [r7, #4]
 8009c5a:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 8009c5c:	7c3b      	ldrb	r3, [r7, #16]
 8009c5e:	3302      	adds	r3, #2
 8009c60:	687a      	ldr	r2, [r7, #4]
 8009c62:	5cd1      	ldrb	r1, [r2, r3]
 8009c64:	7dfb      	ldrb	r3, [r7, #23]
 8009c66:	3302      	adds	r3, #2
 8009c68:	7cfa      	ldrb	r2, [r7, #19]
 8009c6a:	404a      	eors	r2, r1
 8009c6c:	b2d1      	uxtb	r1, r2
 8009c6e:	687a      	ldr	r2, [r7, #4]
 8009c70:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 8009c72:	7c3b      	ldrb	r3, [r7, #16]
 8009c74:	3303      	adds	r3, #3
 8009c76:	687a      	ldr	r2, [r7, #4]
 8009c78:	5cd1      	ldrb	r1, [r2, r3]
 8009c7a:	7dfb      	ldrb	r3, [r7, #23]
 8009c7c:	3303      	adds	r3, #3
 8009c7e:	7cba      	ldrb	r2, [r7, #18]
 8009c80:	404a      	eors	r2, r1
 8009c82:	b2d1      	uxtb	r1, r2
 8009c84:	687a      	ldr	r2, [r7, #4]
 8009c86:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8009c88:	7dfb      	ldrb	r3, [r7, #23]
 8009c8a:	3304      	adds	r3, #4
 8009c8c:	75fb      	strb	r3, [r7, #23]
 8009c8e:	7dfa      	ldrb	r2, [r7, #23]
 8009c90:	7c7b      	ldrb	r3, [r7, #17]
 8009c92:	429a      	cmp	r2, r3
 8009c94:	f4ff af67 	bcc.w	8009b66 <lorawan_aes_set_key+0x7a>
    }
    return 0;
 8009c98:	2300      	movs	r3, #0
}
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	3718      	adds	r7, #24
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	bd80      	pop	{r7, pc}
 8009ca2:	bf00      	nop
 8009ca4:	0801992c 	.word	0x0801992c

08009ca8 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b08a      	sub	sp, #40	; 0x28
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	60f8      	str	r0, [r7, #12]
 8009cb0:	60b9      	str	r1, [r7, #8]
 8009cb2:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d038      	beq.n	8009d30 <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 8009cbe:	687a      	ldr	r2, [r7, #4]
 8009cc0:	f107 0314 	add.w	r3, r7, #20
 8009cc4:	68f9      	ldr	r1, [r7, #12]
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	f7ff fc06 	bl	80094d8 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 8009ccc:	2301      	movs	r3, #1
 8009cce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009cd2:	e014      	b.n	8009cfe <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 8009cd4:	f107 0314 	add.w	r3, r7, #20
 8009cd8:	4618      	mov	r0, r3
 8009cda:	f7ff fd5d 	bl	8009798 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009ce4:	0112      	lsls	r2, r2, #4
 8009ce6:	441a      	add	r2, r3
 8009ce8:	f107 0314 	add.w	r3, r7, #20
 8009cec:	4611      	mov	r1, r2
 8009cee:	4618      	mov	r0, r3
 8009cf0:	f7ff fcaa 	bl	8009648 <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 8009cf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009cf8:	3301      	adds	r3, #1
 8009cfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8009d04:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009d08:	429a      	cmp	r2, r3
 8009d0a:	d3e3      	bcc.n	8009cd4 <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 8009d0c:	f107 0314 	add.w	r3, r7, #20
 8009d10:	4618      	mov	r0, r3
 8009d12:	f7ff fca7 	bl	8009664 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009d1c:	0112      	lsls	r2, r2, #4
 8009d1e:	441a      	add	r2, r3
 8009d20:	f107 0314 	add.w	r3, r7, #20
 8009d24:	4619      	mov	r1, r3
 8009d26:	68b8      	ldr	r0, [r7, #8]
 8009d28:	f7ff fbd6 	bl	80094d8 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	e000      	b.n	8009d32 <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 8009d30:	23ff      	movs	r3, #255	; 0xff
}
 8009d32:	4618      	mov	r0, r3
 8009d34:	3728      	adds	r7, #40	; 0x28
 8009d36:	46bd      	mov	sp, r7
 8009d38:	bd80      	pop	{r7, pc}
	...

08009d3c <PrintKey>:


/* Private functions ---------------------------------------------------------*/
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
static void PrintKey( KeyIdentifier_t key )
{
 8009d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d3e:	b09d      	sub	sp, #116	; 0x74
 8009d40:	af10      	add	r7, sp, #64	; 0x40
 8009d42:	4603      	mov	r3, r0
 8009d44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8009d48:	2306      	movs	r3, #6
 8009d4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    Key_t *keyItem;
    retval = SecureElementGetKeyByID(key, &keyItem);
 8009d4e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8009d52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d56:	4611      	mov	r1, r2
 8009d58:	4618      	mov	r0, r3
 8009d5a:	f000 f9ff 	bl	800a15c <SecureElementGetKeyByID>
 8009d5e:	4603      	mov	r3, r0
 8009d60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (retval == SECURE_ELEMENT_SUCCESS)
 8009d64:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	f040 80b0 	bne.w	8009ece <PrintKey+0x192>
    {
        if (key == APP_KEY)
 8009d6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d106      	bne.n	8009d84 <PrintKey+0x48>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppKey:      ");
 8009d76:	4b58      	ldr	r3, [pc, #352]	; (8009ed8 <PrintKey+0x19c>)
 8009d78:	2200      	movs	r2, #0
 8009d7a:	2100      	movs	r1, #0
 8009d7c:	2002      	movs	r0, #2
 8009d7e:	f00e feff 	bl	8018b80 <UTIL_ADV_TRACE_COND_FSend>
 8009d82:	e056      	b.n	8009e32 <PrintKey+0xf6>
        }
        else if (key == NWK_KEY)
 8009d84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d88:	2b01      	cmp	r3, #1
 8009d8a:	d106      	bne.n	8009d9a <PrintKey+0x5e>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkKey:      ");
 8009d8c:	4b53      	ldr	r3, [pc, #332]	; (8009edc <PrintKey+0x1a0>)
 8009d8e:	2200      	movs	r2, #0
 8009d90:	2100      	movs	r1, #0
 8009d92:	2002      	movs	r0, #2
 8009d94:	f00e fef4 	bl	8018b80 <UTIL_ADV_TRACE_COND_FSend>
 8009d98:	e04b      	b.n	8009e32 <PrintKey+0xf6>
        }
        else if (key == APP_S_KEY)
 8009d9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d9e:	2b03      	cmp	r3, #3
 8009da0:	d106      	bne.n	8009db0 <PrintKey+0x74>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppSKey:     ");
 8009da2:	4b4f      	ldr	r3, [pc, #316]	; (8009ee0 <PrintKey+0x1a4>)
 8009da4:	2200      	movs	r2, #0
 8009da6:	2100      	movs	r1, #0
 8009da8:	2002      	movs	r0, #2
 8009daa:	f00e fee9 	bl	8018b80 <UTIL_ADV_TRACE_COND_FSend>
 8009dae:	e040      	b.n	8009e32 <PrintKey+0xf6>
        }
        else if (key == NWK_S_KEY)
 8009db0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009db4:	2b02      	cmp	r3, #2
 8009db6:	d106      	bne.n	8009dc6 <PrintKey+0x8a>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey:     ");
 8009db8:	4b4a      	ldr	r3, [pc, #296]	; (8009ee4 <PrintKey+0x1a8>)
 8009dba:	2200      	movs	r2, #0
 8009dbc:	2100      	movs	r1, #0
 8009dbe:	2002      	movs	r0, #2
 8009dc0:	f00e fede 	bl	8018b80 <UTIL_ADV_TRACE_COND_FSend>
 8009dc4:	e035      	b.n	8009e32 <PrintKey+0xf6>
        }
        else if (key == MC_ROOT_KEY)
 8009dc6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009dca:	2b04      	cmp	r3, #4
 8009dcc:	d106      	bne.n	8009ddc <PrintKey+0xa0>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCRootKey:   ");
 8009dce:	4b46      	ldr	r3, [pc, #280]	; (8009ee8 <PrintKey+0x1ac>)
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	2100      	movs	r1, #0
 8009dd4:	2002      	movs	r0, #2
 8009dd6:	f00e fed3 	bl	8018b80 <UTIL_ADV_TRACE_COND_FSend>
 8009dda:	e02a      	b.n	8009e32 <PrintKey+0xf6>
        }
        else if (key == MC_KE_KEY)
 8009ddc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009de0:	2b7f      	cmp	r3, #127	; 0x7f
 8009de2:	d106      	bne.n	8009df2 <PrintKey+0xb6>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKEKey:     ");
 8009de4:	4b41      	ldr	r3, [pc, #260]	; (8009eec <PrintKey+0x1b0>)
 8009de6:	2200      	movs	r2, #0
 8009de8:	2100      	movs	r1, #0
 8009dea:	2002      	movs	r0, #2
 8009dec:	f00e fec8 	bl	8018b80 <UTIL_ADV_TRACE_COND_FSend>
 8009df0:	e01f      	b.n	8009e32 <PrintKey+0xf6>
        }
        else if (key == MC_KEY_0)
 8009df2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009df6:	2b80      	cmp	r3, #128	; 0x80
 8009df8:	d106      	bne.n	8009e08 <PrintKey+0xcc>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKey_0:     ");
 8009dfa:	4b3d      	ldr	r3, [pc, #244]	; (8009ef0 <PrintKey+0x1b4>)
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	2100      	movs	r1, #0
 8009e00:	2002      	movs	r0, #2
 8009e02:	f00e febd 	bl	8018b80 <UTIL_ADV_TRACE_COND_FSend>
 8009e06:	e014      	b.n	8009e32 <PrintKey+0xf6>
        }
        else if (key == MC_APP_S_KEY_0)
 8009e08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e0c:	2b81      	cmp	r3, #129	; 0x81
 8009e0e:	d106      	bne.n	8009e1e <PrintKey+0xe2>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCAppSKey_0: ");
 8009e10:	4b38      	ldr	r3, [pc, #224]	; (8009ef4 <PrintKey+0x1b8>)
 8009e12:	2200      	movs	r2, #0
 8009e14:	2100      	movs	r1, #0
 8009e16:	2002      	movs	r0, #2
 8009e18:	f00e feb2 	bl	8018b80 <UTIL_ADV_TRACE_COND_FSend>
 8009e1c:	e009      	b.n	8009e32 <PrintKey+0xf6>
        }
        else if (key == MC_NWK_S_KEY_0)
 8009e1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e22:	2b82      	cmp	r3, #130	; 0x82
 8009e24:	d105      	bne.n	8009e32 <PrintKey+0xf6>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCNwkSKey_0: ");
 8009e26:	4b34      	ldr	r3, [pc, #208]	; (8009ef8 <PrintKey+0x1bc>)
 8009e28:	2200      	movs	r2, #0
 8009e2a:	2100      	movs	r1, #0
 8009e2c:	2002      	movs	r0, #2
 8009e2e:	f00e fea7 	bl	8018b80 <UTIL_ADV_TRACE_COND_FSend>
        }
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8009e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e34:	785b      	ldrb	r3, [r3, #1]
 8009e36:	4618      	mov	r0, r3
 8009e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e3a:	789b      	ldrb	r3, [r3, #2]
 8009e3c:	461c      	mov	r4, r3
 8009e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e40:	78db      	ldrb	r3, [r3, #3]
 8009e42:	461d      	mov	r5, r3
 8009e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e46:	791b      	ldrb	r3, [r3, #4]
 8009e48:	461e      	mov	r6, r3
 8009e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e4c:	795b      	ldrb	r3, [r3, #5]
 8009e4e:	623b      	str	r3, [r7, #32]
 8009e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e52:	799b      	ldrb	r3, [r3, #6]
 8009e54:	61fb      	str	r3, [r7, #28]
 8009e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e58:	79db      	ldrb	r3, [r3, #7]
 8009e5a:	61bb      	str	r3, [r7, #24]
 8009e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e5e:	7a1b      	ldrb	r3, [r3, #8]
 8009e60:	617b      	str	r3, [r7, #20]
 8009e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e64:	7a5b      	ldrb	r3, [r3, #9]
 8009e66:	613b      	str	r3, [r7, #16]
 8009e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e6a:	7a9b      	ldrb	r3, [r3, #10]
 8009e6c:	60fb      	str	r3, [r7, #12]
 8009e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e70:	7adb      	ldrb	r3, [r3, #11]
 8009e72:	60bb      	str	r3, [r7, #8]
 8009e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e76:	7b1b      	ldrb	r3, [r3, #12]
 8009e78:	607b      	str	r3, [r7, #4]
 8009e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e7c:	7b5b      	ldrb	r3, [r3, #13]
 8009e7e:	603b      	str	r3, [r7, #0]
 8009e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e82:	7b9b      	ldrb	r3, [r3, #14]
 8009e84:	4619      	mov	r1, r3
 8009e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e88:	7bdb      	ldrb	r3, [r3, #15]
 8009e8a:	461a      	mov	r2, r3
 8009e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e8e:	7c1b      	ldrb	r3, [r3, #16]
 8009e90:	930f      	str	r3, [sp, #60]	; 0x3c
 8009e92:	920e      	str	r2, [sp, #56]	; 0x38
 8009e94:	910d      	str	r1, [sp, #52]	; 0x34
 8009e96:	683a      	ldr	r2, [r7, #0]
 8009e98:	920c      	str	r2, [sp, #48]	; 0x30
 8009e9a:	687a      	ldr	r2, [r7, #4]
 8009e9c:	920b      	str	r2, [sp, #44]	; 0x2c
 8009e9e:	68ba      	ldr	r2, [r7, #8]
 8009ea0:	920a      	str	r2, [sp, #40]	; 0x28
 8009ea2:	68fa      	ldr	r2, [r7, #12]
 8009ea4:	9209      	str	r2, [sp, #36]	; 0x24
 8009ea6:	693a      	ldr	r2, [r7, #16]
 8009ea8:	9208      	str	r2, [sp, #32]
 8009eaa:	697a      	ldr	r2, [r7, #20]
 8009eac:	9207      	str	r2, [sp, #28]
 8009eae:	69ba      	ldr	r2, [r7, #24]
 8009eb0:	9206      	str	r2, [sp, #24]
 8009eb2:	69fa      	ldr	r2, [r7, #28]
 8009eb4:	9205      	str	r2, [sp, #20]
 8009eb6:	6a3b      	ldr	r3, [r7, #32]
 8009eb8:	9304      	str	r3, [sp, #16]
 8009eba:	9603      	str	r6, [sp, #12]
 8009ebc:	9502      	str	r5, [sp, #8]
 8009ebe:	9401      	str	r4, [sp, #4]
 8009ec0:	9000      	str	r0, [sp, #0]
 8009ec2:	4b0e      	ldr	r3, [pc, #56]	; (8009efc <PrintKey+0x1c0>)
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	2100      	movs	r1, #0
 8009ec8:	2002      	movs	r0, #2
 8009eca:	f00e fe59 	bl	8018b80 <UTIL_ADV_TRACE_COND_FSend>
               HEX16(keyItem->KeyValue));
    }
}
 8009ece:	bf00      	nop
 8009ed0:	3734      	adds	r7, #52	; 0x34
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ed6:	bf00      	nop
 8009ed8:	08019378 	.word	0x08019378
 8009edc:	08019390 	.word	0x08019390
 8009ee0:	080193a8 	.word	0x080193a8
 8009ee4:	080193c0 	.word	0x080193c0
 8009ee8:	080193d8 	.word	0x080193d8
 8009eec:	080193f0 	.word	0x080193f0
 8009ef0:	08019408 	.word	0x08019408
 8009ef4:	08019420 	.word	0x08019420
 8009ef8:	08019438 	.word	0x08019438
 8009efc:	08019450 	.word	0x08019450

08009f00 <GetKeyByID>:
 * \param[IN]  keyID          - Key identifier
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t** keyItem )
{
 8009f00:	b480      	push	{r7}
 8009f02:	b085      	sub	sp, #20
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	4603      	mov	r3, r0
 8009f08:	6039      	str	r1, [r7, #0]
 8009f0a:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	73fb      	strb	r3, [r7, #15]
 8009f10:	e01a      	b.n	8009f48 <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 8009f12:	4b12      	ldr	r3, [pc, #72]	; (8009f5c <GetKeyByID+0x5c>)
 8009f14:	6819      	ldr	r1, [r3, #0]
 8009f16:	7bfa      	ldrb	r2, [r7, #15]
 8009f18:	4613      	mov	r3, r2
 8009f1a:	011b      	lsls	r3, r3, #4
 8009f1c:	4413      	add	r3, r2
 8009f1e:	440b      	add	r3, r1
 8009f20:	3310      	adds	r3, #16
 8009f22:	781b      	ldrb	r3, [r3, #0]
 8009f24:	79fa      	ldrb	r2, [r7, #7]
 8009f26:	429a      	cmp	r2, r3
 8009f28:	d10b      	bne.n	8009f42 <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 8009f2a:	4b0c      	ldr	r3, [pc, #48]	; (8009f5c <GetKeyByID+0x5c>)
 8009f2c:	6819      	ldr	r1, [r3, #0]
 8009f2e:	7bfa      	ldrb	r2, [r7, #15]
 8009f30:	4613      	mov	r3, r2
 8009f32:	011b      	lsls	r3, r3, #4
 8009f34:	4413      	add	r3, r2
 8009f36:	3310      	adds	r3, #16
 8009f38:	18ca      	adds	r2, r1, r3
 8009f3a:	683b      	ldr	r3, [r7, #0]
 8009f3c:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 8009f3e:	2300      	movs	r3, #0
 8009f40:	e006      	b.n	8009f50 <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8009f42:	7bfb      	ldrb	r3, [r7, #15]
 8009f44:	3301      	adds	r3, #1
 8009f46:	73fb      	strb	r3, [r7, #15]
 8009f48:	7bfb      	ldrb	r3, [r7, #15]
 8009f4a:	2b09      	cmp	r3, #9
 8009f4c:	d9e1      	bls.n	8009f12 <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8009f4e:	2303      	movs	r3, #3
}
 8009f50:	4618      	mov	r0, r3
 8009f52:	3714      	adds	r7, #20
 8009f54:	46bd      	mov	sp, r7
 8009f56:	bc80      	pop	{r7}
 8009f58:	4770      	bx	lr
 8009f5a:	bf00      	nop
 8009f5c:	20000254 	.word	0x20000254

08009f60 <ComputeCmac>:
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                          uint32_t* cmac )
{
 8009f60:	b590      	push	{r4, r7, lr}
 8009f62:	b0d1      	sub	sp, #324	; 0x144
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	f107 040c 	add.w	r4, r7, #12
 8009f6a:	6020      	str	r0, [r4, #0]
 8009f6c:	f107 0008 	add.w	r0, r7, #8
 8009f70:	6001      	str	r1, [r0, #0]
 8009f72:	4619      	mov	r1, r3
 8009f74:	1dbb      	adds	r3, r7, #6
 8009f76:	801a      	strh	r2, [r3, #0]
 8009f78:	1d7b      	adds	r3, r7, #5
 8009f7a:	460a      	mov	r2, r1
 8009f7c:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 8009f7e:	f107 0308 	add.w	r3, r7, #8
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d003      	beq.n	8009f90 <ComputeCmac+0x30>
 8009f88:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d101      	bne.n	8009f94 <ComputeCmac+0x34>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8009f90:	2302      	movs	r3, #2
 8009f92:	e04e      	b.n	800a032 <ComputeCmac+0xd2>

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 8009f94:	f107 0314 	add.w	r3, r7, #20
 8009f98:	4618      	mov	r0, r3
 8009f9a:	f7fe ff22 	bl	8008de2 <AES_CMAC_Init>

    Key_t*                keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 8009f9e:	f107 0210 	add.w	r2, r7, #16
 8009fa2:	1d7b      	adds	r3, r7, #5
 8009fa4:	781b      	ldrb	r3, [r3, #0]
 8009fa6:	4611      	mov	r1, r2
 8009fa8:	4618      	mov	r0, r3
 8009faa:	f7ff ffa9 	bl	8009f00 <GetKeyByID>
 8009fae:	4603      	mov	r3, r0
 8009fb0:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 8009fb4:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d138      	bne.n	800a02e <ComputeCmac+0xce>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 8009fbc:	f107 0310 	add.w	r3, r7, #16
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	1c5a      	adds	r2, r3, #1
 8009fc4:	f107 0314 	add.w	r3, r7, #20
 8009fc8:	4611      	mov	r1, r2
 8009fca:	4618      	mov	r0, r3
 8009fcc:	f7fe ff22 	bl	8008e14 <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 8009fd0:	f107 030c 	add.w	r3, r7, #12
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d007      	beq.n	8009fea <ComputeCmac+0x8a>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, 16 );
 8009fda:	f107 030c 	add.w	r3, r7, #12
 8009fde:	f107 0014 	add.w	r0, r7, #20
 8009fe2:	2210      	movs	r2, #16
 8009fe4:	6819      	ldr	r1, [r3, #0]
 8009fe6:	f7fe ff24 	bl	8008e32 <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 8009fea:	1dbb      	adds	r3, r7, #6
 8009fec:	881a      	ldrh	r2, [r3, #0]
 8009fee:	f107 0308 	add.w	r3, r7, #8
 8009ff2:	f107 0014 	add.w	r0, r7, #20
 8009ff6:	6819      	ldr	r1, [r3, #0]
 8009ff8:	f7fe ff1b 	bl	8008e32 <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 8009ffc:	f107 0214 	add.w	r2, r7, #20
 800a000:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800a004:	4611      	mov	r1, r2
 800a006:	4618      	mov	r0, r3
 800a008:	f7fe ffd5 	bl	8008fb6 <AES_CMAC_Final>

        // Bring into the required format
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800a00c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800a010:	061a      	lsls	r2, r3, #24
 800a012:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 800a016:	041b      	lsls	r3, r3, #16
 800a018:	431a      	orrs	r2, r3
 800a01a:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 800a01e:	021b      	lsls	r3, r3, #8
 800a020:	4313      	orrs	r3, r2
                              ( uint32_t ) Cmac[0] );
 800a022:	f897 212c 	ldrb.w	r2, [r7, #300]	; 0x12c
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800a026:	431a      	orrs	r2, r3
 800a028:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800a02c:	601a      	str	r2, [r3, #0]
    if (rv != CKR_OK)
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 800a02e:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
}
 800a032:	4618      	mov	r0, r3
 800a034:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800a038:	46bd      	mov	sp, r7
 800a03a:	bd90      	pop	{r4, r7, pc}

0800a03c <SecureElementInit>:
/*
 * API functions
 */
/* ST_WORKAROUND: Add unique ID callback as input parameter */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm, SecureElementGetUniqueId seGetUniqueId )
{
 800a03c:	b5b0      	push	{r4, r5, r7, lr}
 800a03e:	b0b2      	sub	sp, #200	; 0xc8
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
 800a044:	6039      	str	r1, [r7, #0]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    SecureElementNvmData_t seNvmInit =
 800a046:	f107 0308 	add.w	r3, r7, #8
 800a04a:	22c0      	movs	r2, #192	; 0xc0
 800a04c:	2100      	movs	r1, #0
 800a04e:	4618      	mov	r0, r3
 800a050:	f00f f8b6 	bl	80191c0 <memset>
 800a054:	4a3b      	ldr	r2, [pc, #236]	; (800a144 <SecureElementInit+0x108>)
 800a056:	f107 0308 	add.w	r3, r7, #8
 800a05a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a05e:	e883 0003 	stmia.w	r3, {r0, r1}
 800a062:	4a39      	ldr	r2, [pc, #228]	; (800a148 <SecureElementInit+0x10c>)
 800a064:	f107 0310 	add.w	r3, r7, #16
 800a068:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a06c:	e883 0003 	stmia.w	r3, {r0, r1}
 800a070:	4b36      	ldr	r3, [pc, #216]	; (800a14c <SecureElementInit+0x110>)
 800a072:	f107 0419 	add.w	r4, r7, #25
 800a076:	461d      	mov	r5, r3
 800a078:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a07a:	6020      	str	r0, [r4, #0]
 800a07c:	6061      	str	r1, [r4, #4]
 800a07e:	60a2      	str	r2, [r4, #8]
 800a080:	60e3      	str	r3, [r4, #12]
 800a082:	2301      	movs	r3, #1
 800a084:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 800a088:	4b30      	ldr	r3, [pc, #192]	; (800a14c <SecureElementInit+0x110>)
 800a08a:	f107 042a 	add.w	r4, r7, #42	; 0x2a
 800a08e:	461d      	mov	r5, r3
 800a090:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a092:	6020      	str	r0, [r4, #0]
 800a094:	6061      	str	r1, [r4, #4]
 800a096:	60a2      	str	r2, [r4, #8]
 800a098:	60e3      	str	r3, [r4, #12]
 800a09a:	2302      	movs	r3, #2
 800a09c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 800a0a0:	4b2a      	ldr	r3, [pc, #168]	; (800a14c <SecureElementInit+0x110>)
 800a0a2:	f107 043b 	add.w	r4, r7, #59	; 0x3b
 800a0a6:	461d      	mov	r5, r3
 800a0a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a0aa:	6020      	str	r0, [r4, #0]
 800a0ac:	6061      	str	r1, [r4, #4]
 800a0ae:	60a2      	str	r2, [r4, #8]
 800a0b0:	60e3      	str	r3, [r4, #12]
 800a0b2:	2303      	movs	r3, #3
 800a0b4:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800a0b8:	4b24      	ldr	r3, [pc, #144]	; (800a14c <SecureElementInit+0x110>)
 800a0ba:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800a0be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a0c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800a0c4:	2304      	movs	r3, #4
 800a0c6:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 800a0ca:	237f      	movs	r3, #127	; 0x7f
 800a0cc:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
 800a0d0:	2380      	movs	r3, #128	; 0x80
 800a0d2:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 800a0d6:	2381      	movs	r3, #129	; 0x81
 800a0d8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 800a0dc:	2382      	movs	r3, #130	; 0x82
 800a0de:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
 800a0e2:	2383      	movs	r3, #131	; 0x83
 800a0e4:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
        */
        .KeyList = SOFT_SE_KEY_LIST
    };


    if( nvm == NULL )
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d101      	bne.n	800a0f2 <SecureElementInit+0xb6>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800a0ee:	2302      	movs	r3, #2
 800a0f0:	e023      	b.n	800a13a <SecureElementInit+0xfe>
    }

    // Initialize nvm pointer
    SeNvm = nvm;
 800a0f2:	4a17      	ldr	r2, [pc, #92]	; (800a150 <SecureElementInit+0x114>)
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	6013      	str	r3, [r2, #0]

    // Initialize data
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 800a0f8:	4b15      	ldr	r3, [pc, #84]	; (800a150 <SecureElementInit+0x114>)
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	f107 0108 	add.w	r1, r7, #8
 800a100:	22c0      	movs	r2, #192	; 0xc0
 800a102:	4618      	mov	r0, r3
 800a104:	f00a fb41 	bl	801478a <memcpy1>
    SecureElementSetObjHandler(SLOT_RAND_ZERO_KEY, KMS_ZERO_KEY_OBJECT_HANDLE);
#endif /* LORAMAC_CLASSB_ENABLED */
#endif /* LORAWAN_KMS */

#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    MW_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 800a108:	4b12      	ldr	r3, [pc, #72]	; (800a154 <SecureElementInit+0x118>)
 800a10a:	2200      	movs	r2, #0
 800a10c:	2100      	movs	r1, #0
 800a10e:	2002      	movs	r0, #2
 800a110:	f00e fd36 	bl	8018b80 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_KEY);
 800a114:	2000      	movs	r0, #0
 800a116:	f7ff fe11 	bl	8009d3c <PrintKey>
    PrintKey(NWK_KEY);
 800a11a:	2001      	movs	r0, #1
 800a11c:	f7ff fe0e 	bl	8009d3c <PrintKey>
    MW_LOG(TS_OFF, VLEVEL_M, "###### ABP  ######\r\n");
 800a120:	4b0d      	ldr	r3, [pc, #52]	; (800a158 <SecureElementInit+0x11c>)
 800a122:	2200      	movs	r2, #0
 800a124:	2100      	movs	r1, #0
 800a126:	2002      	movs	r0, #2
 800a128:	f00e fd2a 	bl	8018b80 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_S_KEY);
 800a12c:	2003      	movs	r0, #3
 800a12e:	f7ff fe05 	bl	8009d3c <PrintKey>
    PrintKey(NWK_S_KEY);
 800a132:	2002      	movs	r0, #2
 800a134:	f7ff fe02 	bl	8009d3c <PrintKey>
        // Get a DevEUI from MCU unique ID
        seGetUniqueId(SeNvm->DevEui);
    }
#endif /* STATIC_DEVICE_EUI */
#endif /* !SECURE_ELEMENT_PRE_PROVISIONED */
    return SECURE_ELEMENT_SUCCESS;
 800a138:	2300      	movs	r3, #0
}
 800a13a:	4618      	mov	r0, r3
 800a13c:	37c8      	adds	r7, #200	; 0xc8
 800a13e:	46bd      	mov	sp, r7
 800a140:	bdb0      	pop	{r4, r5, r7, pc}
 800a142:	bf00      	nop
 800a144:	080194d4 	.word	0x080194d4
 800a148:	080194dc 	.word	0x080194dc
 800a14c:	080194e4 	.word	0x080194e4
 800a150:	20000254 	.word	0x20000254
 800a154:	080194a4 	.word	0x080194a4
 800a158:	080194bc 	.word	0x080194bc

0800a15c <SecureElementGetKeyByID>:

/* ST_WORKAROUND_BEGIN: Add KMS specific functions */
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800a15c:	b480      	push	{r7}
 800a15e:	b085      	sub	sp, #20
 800a160:	af00      	add	r7, sp, #0
 800a162:	4603      	mov	r3, r0
 800a164:	6039      	str	r1, [r7, #0]
 800a166:	71fb      	strb	r3, [r7, #7]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800a168:	2300      	movs	r3, #0
 800a16a:	73fb      	strb	r3, [r7, #15]
 800a16c:	e01a      	b.n	800a1a4 <SecureElementGetKeyByID+0x48>
    {
        if (SeNvm->KeyList[i].KeyID == keyID)
 800a16e:	4b12      	ldr	r3, [pc, #72]	; (800a1b8 <SecureElementGetKeyByID+0x5c>)
 800a170:	6819      	ldr	r1, [r3, #0]
 800a172:	7bfa      	ldrb	r2, [r7, #15]
 800a174:	4613      	mov	r3, r2
 800a176:	011b      	lsls	r3, r3, #4
 800a178:	4413      	add	r3, r2
 800a17a:	440b      	add	r3, r1
 800a17c:	3310      	adds	r3, #16
 800a17e:	781b      	ldrb	r3, [r3, #0]
 800a180:	79fa      	ldrb	r2, [r7, #7]
 800a182:	429a      	cmp	r2, r3
 800a184:	d10b      	bne.n	800a19e <SecureElementGetKeyByID+0x42>
        {
            *keyItem = &(SeNvm->KeyList[i]);
 800a186:	4b0c      	ldr	r3, [pc, #48]	; (800a1b8 <SecureElementGetKeyByID+0x5c>)
 800a188:	6819      	ldr	r1, [r3, #0]
 800a18a:	7bfa      	ldrb	r2, [r7, #15]
 800a18c:	4613      	mov	r3, r2
 800a18e:	011b      	lsls	r3, r3, #4
 800a190:	4413      	add	r3, r2
 800a192:	3310      	adds	r3, #16
 800a194:	18ca      	adds	r2, r1, r3
 800a196:	683b      	ldr	r3, [r7, #0]
 800a198:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800a19a:	2300      	movs	r3, #0
 800a19c:	e006      	b.n	800a1ac <SecureElementGetKeyByID+0x50>
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800a19e:	7bfb      	ldrb	r3, [r7, #15]
 800a1a0:	3301      	adds	r3, #1
 800a1a2:	73fb      	strb	r3, [r7, #15]
 800a1a4:	7bfb      	ldrb	r3, [r7, #15]
 800a1a6:	2b09      	cmp	r3, #9
 800a1a8:	d9e1      	bls.n	800a16e <SecureElementGetKeyByID+0x12>
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800a1aa:	2303      	movs	r3, #3
        return SECURE_ELEMENT_ERROR;
    }
    return SECURE_ELEMENT_SUCCESS;

#endif /* LORAWAN_KMS == 1 */
}
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	3714      	adds	r7, #20
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	bc80      	pop	{r7}
 800a1b4:	4770      	bx	lr
 800a1b6:	bf00      	nop
 800a1b8:	20000254 	.word	0x20000254

0800a1bc <SecureElementSetKey>:
#endif /* LORAWAN_KMS */
}
/* ST_WORKAROUND_END */

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b088      	sub	sp, #32
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	4603      	mov	r3, r0
 800a1c4:	6039      	str	r1, [r7, #0]
 800a1c6:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 800a1c8:	683b      	ldr	r3, [r7, #0]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d101      	bne.n	800a1d2 <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800a1ce:	2302      	movs	r3, #2
 800a1d0:	e04c      	b.n	800a26c <SecureElementSetKey+0xb0>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	77fb      	strb	r3, [r7, #31]
 800a1d6:	e045      	b.n	800a264 <SecureElementSetKey+0xa8>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800a1d8:	4b26      	ldr	r3, [pc, #152]	; (800a274 <SecureElementSetKey+0xb8>)
 800a1da:	6819      	ldr	r1, [r3, #0]
 800a1dc:	7ffa      	ldrb	r2, [r7, #31]
 800a1de:	4613      	mov	r3, r2
 800a1e0:	011b      	lsls	r3, r3, #4
 800a1e2:	4413      	add	r3, r2
 800a1e4:	440b      	add	r3, r1
 800a1e6:	3310      	adds	r3, #16
 800a1e8:	781b      	ldrb	r3, [r3, #0]
 800a1ea:	79fa      	ldrb	r2, [r7, #7]
 800a1ec:	429a      	cmp	r2, r3
 800a1ee:	d136      	bne.n	800a25e <SecureElementSetKey+0xa2>
        {
            /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if ( keyID == MC_KEY_0 )
 800a1f0:	79fb      	ldrb	r3, [r7, #7]
 800a1f2:	2b80      	cmp	r3, #128	; 0x80
 800a1f4:	d123      	bne.n	800a23e <SecureElementSetKey+0x82>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            /* ST_WORKAROUND_END */
            {  // Decrypt the key if its a Mckey
                SecureElementStatus_t retval           = SECURE_ELEMENT_ERROR;
 800a1f6:	2306      	movs	r3, #6
 800a1f8:	77bb      	strb	r3, [r7, #30]
                uint8_t               decryptedKey[16] = { 0 };
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	60fb      	str	r3, [r7, #12]
 800a1fe:	f107 0310 	add.w	r3, r7, #16
 800a202:	2200      	movs	r2, #0
 800a204:	601a      	str	r2, [r3, #0]
 800a206:	605a      	str	r2, [r3, #4]
 800a208:	609a      	str	r2, [r3, #8]

                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 800a20a:	f107 030c 	add.w	r3, r7, #12
 800a20e:	227f      	movs	r2, #127	; 0x7f
 800a210:	2110      	movs	r1, #16
 800a212:	6838      	ldr	r0, [r7, #0]
 800a214:	f000 f87d 	bl	800a312 <SecureElementAesEncrypt>
 800a218:	4603      	mov	r3, r0
 800a21a:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800a21c:	4b15      	ldr	r3, [pc, #84]	; (800a274 <SecureElementSetKey+0xb8>)
 800a21e:	6819      	ldr	r1, [r3, #0]
 800a220:	7ffa      	ldrb	r2, [r7, #31]
 800a222:	4613      	mov	r3, r2
 800a224:	011b      	lsls	r3, r3, #4
 800a226:	4413      	add	r3, r2
 800a228:	3310      	adds	r3, #16
 800a22a:	440b      	add	r3, r1
 800a22c:	3301      	adds	r3, #1
 800a22e:	f107 010c 	add.w	r1, r7, #12
 800a232:	2210      	movs	r2, #16
 800a234:	4618      	mov	r0, r3
 800a236:	f00a faa8 	bl	801478a <memcpy1>
                return retval;
 800a23a:	7fbb      	ldrb	r3, [r7, #30]
 800a23c:	e016      	b.n	800a26c <SecureElementSetKey+0xb0>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800a23e:	4b0d      	ldr	r3, [pc, #52]	; (800a274 <SecureElementSetKey+0xb8>)
 800a240:	6819      	ldr	r1, [r3, #0]
 800a242:	7ffa      	ldrb	r2, [r7, #31]
 800a244:	4613      	mov	r3, r2
 800a246:	011b      	lsls	r3, r3, #4
 800a248:	4413      	add	r3, r2
 800a24a:	3310      	adds	r3, #16
 800a24c:	440b      	add	r3, r1
 800a24e:	3301      	adds	r3, #1
 800a250:	2210      	movs	r2, #16
 800a252:	6839      	ldr	r1, [r7, #0]
 800a254:	4618      	mov	r0, r3
 800a256:	f00a fa98 	bl	801478a <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800a25a:	2300      	movs	r3, #0
 800a25c:	e006      	b.n	800a26c <SecureElementSetKey+0xb0>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800a25e:	7ffb      	ldrb	r3, [r7, #31]
 800a260:	3301      	adds	r3, #1
 800a262:	77fb      	strb	r3, [r7, #31]
 800a264:	7ffb      	ldrb	r3, [r7, #31]
 800a266:	2b09      	cmp	r3, #9
 800a268:	d9b6      	bls.n	800a1d8 <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800a26a:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800a26c:	4618      	mov	r0, r3
 800a26e:	3720      	adds	r7, #32
 800a270:	46bd      	mov	sp, r7
 800a272:	bd80      	pop	{r7, pc}
 800a274:	20000254 	.word	0x20000254

0800a278 <SecureElementComputeAesCmac>:

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size,
                                                   KeyIdentifier_t keyID, uint32_t* cmac )
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b086      	sub	sp, #24
 800a27c:	af02      	add	r7, sp, #8
 800a27e:	60f8      	str	r0, [r7, #12]
 800a280:	60b9      	str	r1, [r7, #8]
 800a282:	4611      	mov	r1, r2
 800a284:	461a      	mov	r2, r3
 800a286:	460b      	mov	r3, r1
 800a288:	80fb      	strh	r3, [r7, #6]
 800a28a:	4613      	mov	r3, r2
 800a28c:	717b      	strb	r3, [r7, #5]
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 800a28e:	797b      	ldrb	r3, [r7, #5]
 800a290:	2b7e      	cmp	r3, #126	; 0x7e
 800a292:	d901      	bls.n	800a298 <SecureElementComputeAesCmac+0x20>
    {
        // Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800a294:	2303      	movs	r3, #3
 800a296:	e009      	b.n	800a2ac <SecureElementComputeAesCmac+0x34>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800a298:	7979      	ldrb	r1, [r7, #5]
 800a29a:	88fa      	ldrh	r2, [r7, #6]
 800a29c:	69bb      	ldr	r3, [r7, #24]
 800a29e:	9300      	str	r3, [sp, #0]
 800a2a0:	460b      	mov	r3, r1
 800a2a2:	68b9      	ldr	r1, [r7, #8]
 800a2a4:	68f8      	ldr	r0, [r7, #12]
 800a2a6:	f7ff fe5b 	bl	8009f60 <ComputeCmac>
 800a2aa:	4603      	mov	r3, r0
}
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	3710      	adds	r7, #16
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	bd80      	pop	{r7, pc}

0800a2b4 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b088      	sub	sp, #32
 800a2b8:	af02      	add	r7, sp, #8
 800a2ba:	60f8      	str	r0, [r7, #12]
 800a2bc:	607a      	str	r2, [r7, #4]
 800a2be:	461a      	mov	r2, r3
 800a2c0:	460b      	mov	r3, r1
 800a2c2:	817b      	strh	r3, [r7, #10]
 800a2c4:	4613      	mov	r3, r2
 800a2c6:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL )
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d101      	bne.n	800a2d2 <SecureElementVerifyAesCmac+0x1e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800a2ce:	2302      	movs	r3, #2
 800a2d0:	e01b      	b.n	800a30a <SecureElementVerifyAesCmac+0x56>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 800a2d2:	2306      	movs	r3, #6
 800a2d4:	75fb      	strb	r3, [r7, #23]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint32_t              compCmac = 0;
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800a2da:	7a79      	ldrb	r1, [r7, #9]
 800a2dc:	897a      	ldrh	r2, [r7, #10]
 800a2de:	f107 0310 	add.w	r3, r7, #16
 800a2e2:	9300      	str	r3, [sp, #0]
 800a2e4:	460b      	mov	r3, r1
 800a2e6:	68f9      	ldr	r1, [r7, #12]
 800a2e8:	2000      	movs	r0, #0
 800a2ea:	f7ff fe39 	bl	8009f60 <ComputeCmac>
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800a2f2:	7dfb      	ldrb	r3, [r7, #23]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d001      	beq.n	800a2fc <SecureElementVerifyAesCmac+0x48>
    {
        return retval;
 800a2f8:	7dfb      	ldrb	r3, [r7, #23]
 800a2fa:	e006      	b.n	800a30a <SecureElementVerifyAesCmac+0x56>
    }

    if( expectedCmac != compCmac )
 800a2fc:	693b      	ldr	r3, [r7, #16]
 800a2fe:	687a      	ldr	r2, [r7, #4]
 800a300:	429a      	cmp	r2, r3
 800a302:	d001      	beq.n	800a308 <SecureElementVerifyAesCmac+0x54>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800a304:	2301      	movs	r3, #1
 800a306:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 800a308:	7dfb      	ldrb	r3, [r7, #23]
}
 800a30a:	4618      	mov	r0, r3
 800a30c:	3718      	adds	r7, #24
 800a30e:	46bd      	mov	sp, r7
 800a310:	bd80      	pop	{r7, pc}

0800a312 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                               uint8_t* encBuffer )
{
 800a312:	b580      	push	{r7, lr}
 800a314:	b0c2      	sub	sp, #264	; 0x108
 800a316:	af00      	add	r7, sp, #0
 800a318:	60f8      	str	r0, [r7, #12]
 800a31a:	4608      	mov	r0, r1
 800a31c:	4611      	mov	r1, r2
 800a31e:	1d3a      	adds	r2, r7, #4
 800a320:	6013      	str	r3, [r2, #0]
 800a322:	4603      	mov	r3, r0
 800a324:	817b      	strh	r3, [r7, #10]
 800a326:	460b      	mov	r3, r1
 800a328:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL || encBuffer == NULL )
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d003      	beq.n	800a338 <SecureElementAesEncrypt+0x26>
 800a330:	1d3b      	adds	r3, r7, #4
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d101      	bne.n	800a33c <SecureElementAesEncrypt+0x2a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800a338:	2302      	movs	r3, #2
 800a33a:	e043      	b.n	800a3c4 <SecureElementAesEncrypt+0xb2>
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 800a33c:	897b      	ldrh	r3, [r7, #10]
 800a33e:	f003 030f 	and.w	r3, r3, #15
 800a342:	b29b      	uxth	r3, r3
 800a344:	2b00      	cmp	r3, #0
 800a346:	d001      	beq.n	800a34c <SecureElementAesEncrypt+0x3a>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800a348:	2305      	movs	r3, #5
 800a34a:	e03b      	b.n	800a3c4 <SecureElementAesEncrypt+0xb2>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800a34c:	f107 0314 	add.w	r3, r7, #20
 800a350:	22f0      	movs	r2, #240	; 0xf0
 800a352:	2100      	movs	r1, #0
 800a354:	4618      	mov	r0, r3
 800a356:	f00a fa53 	bl	8014800 <memset1>

    Key_t*                pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800a35a:	f107 0210 	add.w	r2, r7, #16
 800a35e:	7a7b      	ldrb	r3, [r7, #9]
 800a360:	4611      	mov	r1, r2
 800a362:	4618      	mov	r0, r3
 800a364:	f7ff fdcc 	bl	8009f00 <GetKeyByID>
 800a368:	4603      	mov	r3, r0
 800a36a:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 800a36e:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 800a372:	2b00      	cmp	r3, #0
 800a374:	d124      	bne.n	800a3c0 <SecureElementAesEncrypt+0xae>
    {
        lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 800a376:	693b      	ldr	r3, [r7, #16]
 800a378:	3301      	adds	r3, #1
 800a37a:	f107 0214 	add.w	r2, r7, #20
 800a37e:	2110      	movs	r1, #16
 800a380:	4618      	mov	r0, r3
 800a382:	f7ff fbb3 	bl	8009aec <lorawan_aes_set_key>

        uint8_t block = 0;
 800a386:	2300      	movs	r3, #0
 800a388:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

        while( size != 0 )
 800a38c:	e015      	b.n	800a3ba <SecureElementAesEncrypt+0xa8>
        {
            lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 800a38e:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800a392:	68fa      	ldr	r2, [r7, #12]
 800a394:	18d0      	adds	r0, r2, r3
 800a396:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800a39a:	1d3a      	adds	r2, r7, #4
 800a39c:	6812      	ldr	r2, [r2, #0]
 800a39e:	4413      	add	r3, r2
 800a3a0:	f107 0214 	add.w	r2, r7, #20
 800a3a4:	4619      	mov	r1, r3
 800a3a6:	f7ff fc7f 	bl	8009ca8 <lorawan_aes_encrypt>
            block = block + 16;
 800a3aa:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800a3ae:	3310      	adds	r3, #16
 800a3b0:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
            size  = size - 16;
 800a3b4:	897b      	ldrh	r3, [r7, #10]
 800a3b6:	3b10      	subs	r3, #16
 800a3b8:	817b      	strh	r3, [r7, #10]
        while( size != 0 )
 800a3ba:	897b      	ldrh	r3, [r7, #10]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d1e6      	bne.n	800a38e <SecureElementAesEncrypt+0x7c>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 800a3c0:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
}
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	bd80      	pop	{r7, pc}

0800a3ce <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t* input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 800a3ce:	b580      	push	{r7, lr}
 800a3d0:	b088      	sub	sp, #32
 800a3d2:	af00      	add	r7, sp, #0
 800a3d4:	6078      	str	r0, [r7, #4]
 800a3d6:	460b      	mov	r3, r1
 800a3d8:	70fb      	strb	r3, [r7, #3]
 800a3da:	4613      	mov	r3, r2
 800a3dc:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d101      	bne.n	800a3e8 <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800a3e4:	2302      	movs	r3, #2
 800a3e6:	e02e      	b.n	800a446 <SecureElementDeriveAndStoreKey+0x78>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 800a3e8:	2306      	movs	r3, #6
 800a3ea:	77fb      	strb	r3, [r7, #31]

    // In case of MC_KE_KEY, only McRootKey can be used as root key
    if( targetKeyID == MC_KE_KEY )
 800a3ec:	78bb      	ldrb	r3, [r7, #2]
 800a3ee:	2b7f      	cmp	r3, #127	; 0x7f
 800a3f0:	d104      	bne.n	800a3fc <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800a3f2:	78fb      	ldrb	r3, [r7, #3]
 800a3f4:	2b04      	cmp	r3, #4
 800a3f6:	d001      	beq.n	800a3fc <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800a3f8:	2303      	movs	r3, #3
 800a3fa:	e024      	b.n	800a446 <SecureElementDeriveAndStoreKey+0x78>
        }
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t key[16] = { 0 };
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	60fb      	str	r3, [r7, #12]
 800a400:	f107 0310 	add.w	r3, r7, #16
 800a404:	2200      	movs	r2, #0
 800a406:	601a      	str	r2, [r3, #0]
 800a408:	605a      	str	r2, [r3, #4]
 800a40a:	609a      	str	r2, [r3, #8]
    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 800a40c:	f107 030c 	add.w	r3, r7, #12
 800a410:	78fa      	ldrb	r2, [r7, #3]
 800a412:	2110      	movs	r1, #16
 800a414:	6878      	ldr	r0, [r7, #4]
 800a416:	f7ff ff7c 	bl	800a312 <SecureElementAesEncrypt>
 800a41a:	4603      	mov	r3, r0
 800a41c:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800a41e:	7ffb      	ldrb	r3, [r7, #31]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d001      	beq.n	800a428 <SecureElementDeriveAndStoreKey+0x5a>
    {
        return retval;
 800a424:	7ffb      	ldrb	r3, [r7, #31]
 800a426:	e00e      	b.n	800a446 <SecureElementDeriveAndStoreKey+0x78>
    }

    // Store key
    retval = SecureElementSetKey( targetKeyID, key );
 800a428:	f107 020c 	add.w	r2, r7, #12
 800a42c:	78bb      	ldrb	r3, [r7, #2]
 800a42e:	4611      	mov	r1, r2
 800a430:	4618      	mov	r0, r3
 800a432:	f7ff fec3 	bl	800a1bc <SecureElementSetKey>
 800a436:	4603      	mov	r3, r0
 800a438:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800a43a:	7ffb      	ldrb	r3, [r7, #31]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d001      	beq.n	800a444 <SecureElementDeriveAndStoreKey+0x76>
    {
        return retval;
 800a440:	7ffb      	ldrb	r3, [r7, #31]
 800a442:	e000      	b.n	800a446 <SecureElementDeriveAndStoreKey+0x78>
    }

    return SECURE_ELEMENT_SUCCESS;
 800a444:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800a446:	4618      	mov	r0, r3
 800a448:	3720      	adds	r7, #32
 800a44a:	46bd      	mov	sp, r7
 800a44c:	bd80      	pop	{r7, pc}

0800a44e <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEui,
                                                      uint16_t devNonce, uint8_t* encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t* decJoinAccept,
                                                      uint8_t* versionMinor )
{
 800a44e:	b580      	push	{r7, lr}
 800a450:	b086      	sub	sp, #24
 800a452:	af00      	add	r7, sp, #0
 800a454:	60b9      	str	r1, [r7, #8]
 800a456:	607b      	str	r3, [r7, #4]
 800a458:	4603      	mov	r3, r0
 800a45a:	73fb      	strb	r3, [r7, #15]
 800a45c:	4613      	mov	r3, r2
 800a45e:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d005      	beq.n	800a472 <SecureElementProcessJoinAccept+0x24>
 800a466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d002      	beq.n	800a472 <SecureElementProcessJoinAccept+0x24>
 800a46c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d101      	bne.n	800a476 <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800a472:	2302      	movs	r3, #2
 800a474:	e064      	b.n	800a540 <SecureElementProcessJoinAccept+0xf2>
    }

    // Check that frame size isn't bigger than a JoinAccept with CFList size
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800a476:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a47a:	2b21      	cmp	r3, #33	; 0x21
 800a47c:	d901      	bls.n	800a482 <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800a47e:	2305      	movs	r3, #5
 800a480:	e05e      	b.n	800a540 <SecureElementProcessJoinAccept+0xf2>
    }

    // Determine decryption key
    KeyIdentifier_t encKeyID = NWK_KEY;
 800a482:	2301      	movs	r3, #1
 800a484:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800a486:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a48a:	b29b      	uxth	r3, r3
 800a48c:	461a      	mov	r2, r3
 800a48e:	6879      	ldr	r1, [r7, #4]
 800a490:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a492:	f00a f97a 	bl	801478a <memcpy1>

    // Decrypt JoinAccept, skip MHDR
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	1c58      	adds	r0, r3, #1
 800a49a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a49e:	b29b      	uxth	r3, r3
 800a4a0:	3b01      	subs	r3, #1
 800a4a2:	b299      	uxth	r1, r3
 800a4a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4a6:	3301      	adds	r3, #1
 800a4a8:	7dfa      	ldrb	r2, [r7, #23]
 800a4aa:	f7ff ff32 	bl	800a312 <SecureElementAesEncrypt>
 800a4ae:	4603      	mov	r3, r0
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d001      	beq.n	800a4b8 <SecureElementProcessJoinAccept+0x6a>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800a4b4:	2307      	movs	r3, #7
 800a4b6:	e043      	b.n	800a540 <SecureElementProcessJoinAccept+0xf2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800a4b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ba:	330b      	adds	r3, #11
 800a4bc:	781b      	ldrb	r3, [r3, #0]
 800a4be:	09db      	lsrs	r3, r3, #7
 800a4c0:	b2da      	uxtb	r2, r3
 800a4c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4c4:	701a      	strb	r2, [r3, #0]

    uint32_t mic = 0;
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	613b      	str	r3, [r7, #16]

    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
 800a4ca:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a4ce:	3b04      	subs	r3, #4
 800a4d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4d2:	4413      	add	r3, r2
 800a4d4:	781b      	ldrb	r3, [r3, #0]
 800a4d6:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8 );
 800a4d8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a4dc:	3b03      	subs	r3, #3
 800a4de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4e0:	4413      	add	r3, r2
 800a4e2:	781b      	ldrb	r3, [r3, #0]
 800a4e4:	021b      	lsls	r3, r3, #8
 800a4e6:	693a      	ldr	r2, [r7, #16]
 800a4e8:	4313      	orrs	r3, r2
 800a4ea:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 800a4ec:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a4f0:	3b02      	subs	r3, #2
 800a4f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4f4:	4413      	add	r3, r2
 800a4f6:	781b      	ldrb	r3, [r3, #0]
 800a4f8:	041b      	lsls	r3, r3, #16
 800a4fa:	693a      	ldr	r2, [r7, #16]
 800a4fc:	4313      	orrs	r3, r2
 800a4fe:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 800a500:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a504:	3b01      	subs	r3, #1
 800a506:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a508:	4413      	add	r3, r2
 800a50a:	781b      	ldrb	r3, [r3, #0]
 800a50c:	061b      	lsls	r3, r3, #24
 800a50e:	693a      	ldr	r2, [r7, #16]
 800a510:	4313      	orrs	r3, r2
 800a512:	613b      	str	r3, [r7, #16]
    //  - Header buffer to be used for MIC computation
    //        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
    //        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]

    // Verify mic
    if( *versionMinor == 0 )
 800a514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a516:	781b      	ldrb	r3, [r3, #0]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d10e      	bne.n	800a53a <SecureElementProcessJoinAccept+0xec>
    {
        // For LoRaWAN 1.0.x
        //   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
        //   CFListType)
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800a51c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a520:	b29b      	uxth	r3, r3
 800a522:	3b04      	subs	r3, #4
 800a524:	b299      	uxth	r1, r3
 800a526:	2301      	movs	r3, #1
 800a528:	693a      	ldr	r2, [r7, #16]
 800a52a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a52c:	f7ff fec2 	bl	800a2b4 <SecureElementVerifyAesCmac>
 800a530:	4603      	mov	r3, r0
 800a532:	2b00      	cmp	r3, #0
 800a534:	d003      	beq.n	800a53e <SecureElementProcessJoinAccept+0xf0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800a536:	2301      	movs	r3, #1
 800a538:	e002      	b.n	800a540 <SecureElementProcessJoinAccept+0xf2>
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800a53a:	2304      	movs	r3, #4
 800a53c:	e000      	b.n	800a540 <SecureElementProcessJoinAccept+0xf2>
    }

    return SECURE_ELEMENT_SUCCESS;
 800a53e:	2300      	movs	r3, #0
}
 800a540:	4618      	mov	r0, r3
 800a542:	3718      	adds	r7, #24
 800a544:	46bd      	mov	sp, r7
 800a546:	bd80      	pop	{r7, pc}

0800a548 <SecureElementRandomNumber>:

SecureElementStatus_t SecureElementRandomNumber( uint32_t* randomNum )
{
 800a548:	b580      	push	{r7, lr}
 800a54a:	b082      	sub	sp, #8
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
    if( randomNum == NULL )
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d101      	bne.n	800a55a <SecureElementRandomNumber+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800a556:	2302      	movs	r3, #2
 800a558:	e006      	b.n	800a568 <SecureElementRandomNumber+0x20>
    }
    *randomNum = Radio.Random();
 800a55a:	4b05      	ldr	r3, [pc, #20]	; (800a570 <SecureElementRandomNumber+0x28>)
 800a55c:	695b      	ldr	r3, [r3, #20]
 800a55e:	4798      	blx	r3
 800a560:	4602      	mov	r2, r0
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	601a      	str	r2, [r3, #0]
    return SECURE_ELEMENT_SUCCESS;
 800a566:	2300      	movs	r3, #0
}
 800a568:	4618      	mov	r0, r3
 800a56a:	3708      	adds	r7, #8
 800a56c:	46bd      	mov	sp, r7
 800a56e:	bd80      	pop	{r7, pc}
 800a570:	08019c7c 	.word	0x08019c7c

0800a574 <SecureElementSetDevEui>:

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b082      	sub	sp, #8
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d101      	bne.n	800a586 <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800a582:	2302      	movs	r3, #2
 800a584:	e007      	b.n	800a596 <SecureElementSetDevEui+0x22>
    }
    memcpy1( SeNvm->DevEui, devEui, SE_EUI_SIZE );
 800a586:	4b06      	ldr	r3, [pc, #24]	; (800a5a0 <SecureElementSetDevEui+0x2c>)
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	2208      	movs	r2, #8
 800a58c:	6879      	ldr	r1, [r7, #4]
 800a58e:	4618      	mov	r0, r3
 800a590:	f00a f8fb 	bl	801478a <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800a594:	2300      	movs	r3, #0
}
 800a596:	4618      	mov	r0, r3
 800a598:	3708      	adds	r7, #8
 800a59a:	46bd      	mov	sp, r7
 800a59c:	bd80      	pop	{r7, pc}
 800a59e:	bf00      	nop
 800a5a0:	20000254 	.word	0x20000254

0800a5a4 <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
 800a5a4:	b480      	push	{r7}
 800a5a6:	af00      	add	r7, sp, #0
    return SeNvm->DevEui;
 800a5a8:	4b02      	ldr	r3, [pc, #8]	; (800a5b4 <SecureElementGetDevEui+0x10>)
 800a5aa:	681b      	ldr	r3, [r3, #0]
}
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	bc80      	pop	{r7}
 800a5b2:	4770      	bx	lr
 800a5b4:	20000254 	.word	0x20000254

0800a5b8 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b082      	sub	sp, #8
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d101      	bne.n	800a5ca <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800a5c6:	2302      	movs	r3, #2
 800a5c8:	e008      	b.n	800a5dc <SecureElementSetJoinEui+0x24>
    }
    memcpy1( SeNvm->JoinEui, joinEui, SE_EUI_SIZE );
 800a5ca:	4b06      	ldr	r3, [pc, #24]	; (800a5e4 <SecureElementSetJoinEui+0x2c>)
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	3308      	adds	r3, #8
 800a5d0:	2208      	movs	r2, #8
 800a5d2:	6879      	ldr	r1, [r7, #4]
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	f00a f8d8 	bl	801478a <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800a5da:	2300      	movs	r3, #0
}
 800a5dc:	4618      	mov	r0, r3
 800a5de:	3708      	adds	r7, #8
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	bd80      	pop	{r7, pc}
 800a5e4:	20000254 	.word	0x20000254

0800a5e8 <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
 800a5e8:	b480      	push	{r7}
 800a5ea:	af00      	add	r7, sp, #0
    return SeNvm->JoinEui;
 800a5ec:	4b03      	ldr	r3, [pc, #12]	; (800a5fc <SecureElementGetJoinEui+0x14>)
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	3308      	adds	r3, #8
}
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	bc80      	pop	{r7}
 800a5f8:	4770      	bx	lr
 800a5fa:	bf00      	nop
 800a5fc:	20000254 	.word	0x20000254

0800a600 <LmHandlerInit>:

static LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs );

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks )
{
 800a600:	b580      	push	{r7, lr}
 800a602:	b082      	sub	sp, #8
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
    LmHandlerCallbacks = handlerCallbacks;
 800a608:	4a1a      	ldr	r2, [pc, #104]	; (800a674 <LmHandlerInit+0x74>)
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800a60e:	4b1a      	ldr	r3, [pc, #104]	; (800a678 <LmHandlerInit+0x78>)
 800a610:	4a1a      	ldr	r2, [pc, #104]	; (800a67c <LmHandlerInit+0x7c>)
 800a612:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800a614:	4b18      	ldr	r3, [pc, #96]	; (800a678 <LmHandlerInit+0x78>)
 800a616:	4a1a      	ldr	r2, [pc, #104]	; (800a680 <LmHandlerInit+0x80>)
 800a618:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800a61a:	4b17      	ldr	r3, [pc, #92]	; (800a678 <LmHandlerInit+0x78>)
 800a61c:	4a19      	ldr	r2, [pc, #100]	; (800a684 <LmHandlerInit+0x84>)
 800a61e:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800a620:	4b15      	ldr	r3, [pc, #84]	; (800a678 <LmHandlerInit+0x78>)
 800a622:	4a19      	ldr	r2, [pc, #100]	; (800a688 <LmHandlerInit+0x88>)
 800a624:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800a626:	4b13      	ldr	r3, [pc, #76]	; (800a674 <LmHandlerInit+0x74>)
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	4a17      	ldr	r2, [pc, #92]	; (800a68c <LmHandlerInit+0x8c>)
 800a62e:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800a630:	4b10      	ldr	r3, [pc, #64]	; (800a674 <LmHandlerInit+0x74>)
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	685b      	ldr	r3, [r3, #4]
 800a636:	4a15      	ldr	r2, [pc, #84]	; (800a68c <LmHandlerInit+0x8c>)
 800a638:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800a63a:	4b0e      	ldr	r3, [pc, #56]	; (800a674 <LmHandlerInit+0x74>)
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	689b      	ldr	r3, [r3, #8]
 800a640:	4a12      	ldr	r2, [pc, #72]	; (800a68c <LmHandlerInit+0x8c>)
 800a642:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800a644:	4b11      	ldr	r3, [pc, #68]	; (800a68c <LmHandlerInit+0x8c>)
 800a646:	4a12      	ldr	r2, [pc, #72]	; (800a690 <LmHandlerInit+0x90>)
 800a648:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800a64a:	4b0a      	ldr	r3, [pc, #40]	; (800a674 <LmHandlerInit+0x74>)
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	691b      	ldr	r3, [r3, #16]
 800a650:	4a0e      	ldr	r2, [pc, #56]	; (800a68c <LmHandlerInit+0x8c>)
 800a652:	6113      	str	r3, [r2, #16]

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 800a654:	490f      	ldr	r1, [pc, #60]	; (800a694 <LmHandlerInit+0x94>)
 800a656:	2000      	movs	r0, #0
 800a658:	f000 fcf4 	bl	800b044 <LmHandlerPackageRegister>
 800a65c:	4603      	mov	r3, r0
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d002      	beq.n	800a668 <LmHandlerInit+0x68>
    {
        return LORAMAC_HANDLER_ERROR;
 800a662:	f04f 33ff 	mov.w	r3, #4294967295
 800a666:	e000      	b.n	800a66a <LmHandlerInit+0x6a>
    if (LmhpPackagesRegistrationInit() != LORAMAC_HANDLER_SUCCESS)
    {
        return LORAMAC_HANDLER_ERROR;
    }
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
    return LORAMAC_HANDLER_SUCCESS;
 800a668:	2300      	movs	r3, #0
}
 800a66a:	4618      	mov	r0, r3
 800a66c:	3708      	adds	r7, #8
 800a66e:	46bd      	mov	sp, r7
 800a670:	bd80      	pop	{r7, pc}
 800a672:	bf00      	nop
 800a674:	2000027c 	.word	0x2000027c
 800a678:	20000280 	.word	0x20000280
 800a67c:	0800ad99 	.word	0x0800ad99
 800a680:	0800ae01 	.word	0x0800ae01
 800a684:	0800aee1 	.word	0x0800aee1
 800a688:	0800afa5 	.word	0x0800afa5
 800a68c:	20000290 	.word	0x20000290
 800a690:	0800b2b5 	.word	0x0800b2b5
 800a694:	20000088 	.word	0x20000088

0800a698 <LmHandlerConfigure>:

LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 800a698:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a69a:	b099      	sub	sp, #100	; 0x64
 800a69c:	af08      	add	r7, sp, #32
 800a69e:	6078      	str	r0, [r7, #4]
    uint16_t nbNvmData = 0;
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	87fb      	strh	r3, [r7, #62]	; 0x3e
    MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 800a6a4:	2210      	movs	r2, #16
 800a6a6:	6879      	ldr	r1, [r7, #4]
 800a6a8:	487e      	ldr	r0, [pc, #504]	; (800a8a4 <LmHandlerConfigure+0x20c>)
 800a6aa:	f00d fa31 	bl	8017b10 <UTIL_MEM_cpy_8>

#if ( LORAMAC_CLASSB_ENABLED == 1 )
    IsClassBSwitchPending = false;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

    loraInfo = LoraInfo_GetPtr();
 800a6ae:	f7fe fb55 	bl	8008d5c <LoraInfo_GetPtr>
 800a6b2:	63b8      	str	r0, [r7, #56]	; 0x38

    if (0U != ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 800a6b4:	4b7b      	ldr	r3, [pc, #492]	; (800a8a4 <LmHandlerConfigure+0x20c>)
 800a6b6:	781b      	ldrb	r3, [r3, #0]
 800a6b8:	461a      	mov	r2, r3
 800a6ba:	2301      	movs	r3, #1
 800a6bc:	4093      	lsls	r3, r2
 800a6be:	461a      	mov	r2, r3
 800a6c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6c2:	685b      	ldr	r3, [r3, #4]
 800a6c4:	4013      	ands	r3, r2
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d00c      	beq.n	800a6e4 <LmHandlerConfigure+0x4c>
    {
        if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 800a6ca:	4b76      	ldr	r3, [pc, #472]	; (800a8a4 <LmHandlerConfigure+0x20c>)
 800a6cc:	781b      	ldrb	r3, [r3, #0]
 800a6ce:	461a      	mov	r2, r3
 800a6d0:	4975      	ldr	r1, [pc, #468]	; (800a8a8 <LmHandlerConfigure+0x210>)
 800a6d2:	4876      	ldr	r0, [pc, #472]	; (800a8ac <LmHandlerConfigure+0x214>)
 800a6d4:	f004 fb10 	bl	800ecf8 <LoRaMacInitialization>
 800a6d8:	4603      	mov	r3, r0
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d009      	beq.n	800a6f2 <LmHandlerConfigure+0x5a>
        {
            return LORAMAC_HANDLER_ERROR;
 800a6de:	f04f 33ff 	mov.w	r3, #4294967295
 800a6e2:	e0db      	b.n	800a89c <LmHandlerConfigure+0x204>
        }
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
 800a6e4:	4b72      	ldr	r3, [pc, #456]	; (800a8b0 <LmHandlerConfigure+0x218>)
 800a6e6:	2201      	movs	r2, #1
 800a6e8:	2100      	movs	r1, #0
 800a6ea:	2000      	movs	r0, #0
 800a6ec:	f00e fa48 	bl	8018b80 <UTIL_ADV_TRACE_COND_FSend>
        while (1) {}  /* error: Region is not defined in the MW */
 800a6f0:	e7fe      	b.n	800a6f0 <LmHandlerConfigure+0x58>
    }

    // Restore data if required
    nbNvmData = NvmDataMgmtRestore( );
 800a6f2:	f000 fdf0 	bl	800b2d6 <NvmDataMgmtRestore>
 800a6f6:	4603      	mov	r3, r0
 800a6f8:	87fb      	strh	r3, [r7, #62]	; 0x3e

    // Try to restore from NVM and query the mac if possible.
    if( nbNvmData > 0 )
 800a6fa:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d003      	beq.n	800a708 <LmHandlerConfigure+0x70>
    {
        CtxRestoreDone = true;
 800a700:	4b6c      	ldr	r3, [pc, #432]	; (800a8b4 <LmHandlerConfigure+0x21c>)
 800a702:	2201      	movs	r2, #1
 800a704:	701a      	strb	r2, [r3, #0]
 800a706:	e002      	b.n	800a70e <LmHandlerConfigure+0x76>
    }
    else
    {
        CtxRestoreDone = false;
 800a708:	4b6a      	ldr	r3, [pc, #424]	; (800a8b4 <LmHandlerConfigure+0x21c>)
 800a70a:	2200      	movs	r2, #0
 800a70c:	701a      	strb	r2, [r3, #0]
    }

    // Read secure-element DEV_EUI and JOIN_EUI values.
    mibReq.Type = MIB_DEV_EUI;
 800a70e:	2302      	movs	r3, #2
 800a710:	753b      	strb	r3, [r7, #20]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800a712:	f107 0314 	add.w	r3, r7, #20
 800a716:	4618      	mov	r0, r3
 800a718:	f004 fe38 	bl	800f38c <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.DevEui, mibReq.Param.DevEui, 8 );
 800a71c:	69bb      	ldr	r3, [r7, #24]
 800a71e:	2208      	movs	r2, #8
 800a720:	4619      	mov	r1, r3
 800a722:	4865      	ldr	r0, [pc, #404]	; (800a8b8 <LmHandlerConfigure+0x220>)
 800a724:	f00a f831 	bl	801478a <memcpy1>

    mibReq.Type = MIB_JOIN_EUI;
 800a728:	2303      	movs	r3, #3
 800a72a:	753b      	strb	r3, [r7, #20]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800a72c:	f107 0314 	add.w	r3, r7, #20
 800a730:	4618      	mov	r0, r3
 800a732:	f004 fe2b 	bl	800f38c <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8 );
 800a736:	69bb      	ldr	r3, [r7, #24]
 800a738:	2208      	movs	r2, #8
 800a73a:	4619      	mov	r1, r3
 800a73c:	485f      	ldr	r0, [pc, #380]	; (800a8bc <LmHandlerConfigure+0x224>)
 800a73e:	f00a f824 	bl	801478a <memcpy1>

#if ( STATIC_DEVICE_ADDRESS != 1 )
    CommissioningParams.DevAddr = LmHandlerCallbacks->GetDevAddr();
#endif /* STATIC_DEVICE_ADDRESS != 1 */

    mibReq.Type = MIB_DEV_ADDR;
 800a742:	2306      	movs	r3, #6
 800a744:	753b      	strb	r3, [r7, #20]
    mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 800a746:	4b5c      	ldr	r3, [pc, #368]	; (800a8b8 <LmHandlerConfigure+0x220>)
 800a748:	695b      	ldr	r3, [r3, #20]
 800a74a:	61bb      	str	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800a74c:	f107 0314 	add.w	r3, r7, #20
 800a750:	4618      	mov	r0, r3
 800a752:	f004 ff79 	bl	800f648 <LoRaMacMibSetRequestConfirm>

    MW_LOG(TS_OFF, VLEVEL_M, "###### DevEui:  %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800a756:	4b58      	ldr	r3, [pc, #352]	; (800a8b8 <LmHandlerConfigure+0x220>)
 800a758:	781b      	ldrb	r3, [r3, #0]
 800a75a:	461a      	mov	r2, r3
 800a75c:	4b56      	ldr	r3, [pc, #344]	; (800a8b8 <LmHandlerConfigure+0x220>)
 800a75e:	785b      	ldrb	r3, [r3, #1]
 800a760:	4619      	mov	r1, r3
 800a762:	4b55      	ldr	r3, [pc, #340]	; (800a8b8 <LmHandlerConfigure+0x220>)
 800a764:	789b      	ldrb	r3, [r3, #2]
 800a766:	4618      	mov	r0, r3
 800a768:	4b53      	ldr	r3, [pc, #332]	; (800a8b8 <LmHandlerConfigure+0x220>)
 800a76a:	78db      	ldrb	r3, [r3, #3]
 800a76c:	461c      	mov	r4, r3
 800a76e:	4b52      	ldr	r3, [pc, #328]	; (800a8b8 <LmHandlerConfigure+0x220>)
 800a770:	791b      	ldrb	r3, [r3, #4]
 800a772:	461d      	mov	r5, r3
 800a774:	4b50      	ldr	r3, [pc, #320]	; (800a8b8 <LmHandlerConfigure+0x220>)
 800a776:	795b      	ldrb	r3, [r3, #5]
 800a778:	461e      	mov	r6, r3
 800a77a:	4b4f      	ldr	r3, [pc, #316]	; (800a8b8 <LmHandlerConfigure+0x220>)
 800a77c:	799b      	ldrb	r3, [r3, #6]
 800a77e:	603b      	str	r3, [r7, #0]
 800a780:	4b4d      	ldr	r3, [pc, #308]	; (800a8b8 <LmHandlerConfigure+0x220>)
 800a782:	79db      	ldrb	r3, [r3, #7]
 800a784:	9307      	str	r3, [sp, #28]
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	9306      	str	r3, [sp, #24]
 800a78a:	9605      	str	r6, [sp, #20]
 800a78c:	9504      	str	r5, [sp, #16]
 800a78e:	9403      	str	r4, [sp, #12]
 800a790:	9002      	str	r0, [sp, #8]
 800a792:	9101      	str	r1, [sp, #4]
 800a794:	9200      	str	r2, [sp, #0]
 800a796:	4b4a      	ldr	r3, [pc, #296]	; (800a8c0 <LmHandlerConfigure+0x228>)
 800a798:	2200      	movs	r2, #0
 800a79a:	2100      	movs	r1, #0
 800a79c:	2002      	movs	r0, #2
 800a79e:	f00e f9ef 	bl	8018b80 <UTIL_ADV_TRACE_COND_FSend>
           HEX8(CommissioningParams.DevEui));
    MW_LOG(TS_OFF, VLEVEL_M, "###### AppEui:  %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800a7a2:	4b45      	ldr	r3, [pc, #276]	; (800a8b8 <LmHandlerConfigure+0x220>)
 800a7a4:	7a1b      	ldrb	r3, [r3, #8]
 800a7a6:	461a      	mov	r2, r3
 800a7a8:	4b43      	ldr	r3, [pc, #268]	; (800a8b8 <LmHandlerConfigure+0x220>)
 800a7aa:	7a5b      	ldrb	r3, [r3, #9]
 800a7ac:	4619      	mov	r1, r3
 800a7ae:	4b42      	ldr	r3, [pc, #264]	; (800a8b8 <LmHandlerConfigure+0x220>)
 800a7b0:	7a9b      	ldrb	r3, [r3, #10]
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	4b40      	ldr	r3, [pc, #256]	; (800a8b8 <LmHandlerConfigure+0x220>)
 800a7b6:	7adb      	ldrb	r3, [r3, #11]
 800a7b8:	461c      	mov	r4, r3
 800a7ba:	4b3f      	ldr	r3, [pc, #252]	; (800a8b8 <LmHandlerConfigure+0x220>)
 800a7bc:	7b1b      	ldrb	r3, [r3, #12]
 800a7be:	461d      	mov	r5, r3
 800a7c0:	4b3d      	ldr	r3, [pc, #244]	; (800a8b8 <LmHandlerConfigure+0x220>)
 800a7c2:	7b5b      	ldrb	r3, [r3, #13]
 800a7c4:	461e      	mov	r6, r3
 800a7c6:	4b3c      	ldr	r3, [pc, #240]	; (800a8b8 <LmHandlerConfigure+0x220>)
 800a7c8:	7b9b      	ldrb	r3, [r3, #14]
 800a7ca:	603b      	str	r3, [r7, #0]
 800a7cc:	4b3a      	ldr	r3, [pc, #232]	; (800a8b8 <LmHandlerConfigure+0x220>)
 800a7ce:	7bdb      	ldrb	r3, [r3, #15]
 800a7d0:	9307      	str	r3, [sp, #28]
 800a7d2:	683b      	ldr	r3, [r7, #0]
 800a7d4:	9306      	str	r3, [sp, #24]
 800a7d6:	9605      	str	r6, [sp, #20]
 800a7d8:	9504      	str	r5, [sp, #16]
 800a7da:	9403      	str	r4, [sp, #12]
 800a7dc:	9002      	str	r0, [sp, #8]
 800a7de:	9101      	str	r1, [sp, #4]
 800a7e0:	9200      	str	r2, [sp, #0]
 800a7e2:	4b38      	ldr	r3, [pc, #224]	; (800a8c4 <LmHandlerConfigure+0x22c>)
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	2100      	movs	r1, #0
 800a7e8:	2002      	movs	r0, #2
 800a7ea:	f00e f9c9 	bl	8018b80 <UTIL_ADV_TRACE_COND_FSend>
           HEX8(CommissioningParams.JoinEui));
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevAddr: %02X:%02X:%02X:%02X\r\n",
 800a7ee:	4b36      	ldr	r3, [pc, #216]	; (800a8c8 <LmHandlerConfigure+0x230>)
 800a7f0:	781b      	ldrb	r3, [r3, #0]
 800a7f2:	461a      	mov	r2, r3
 800a7f4:	4b35      	ldr	r3, [pc, #212]	; (800a8cc <LmHandlerConfigure+0x234>)
 800a7f6:	781b      	ldrb	r3, [r3, #0]
 800a7f8:	4619      	mov	r1, r3
 800a7fa:	4b35      	ldr	r3, [pc, #212]	; (800a8d0 <LmHandlerConfigure+0x238>)
 800a7fc:	781b      	ldrb	r3, [r3, #0]
 800a7fe:	4618      	mov	r0, r3
 800a800:	4b34      	ldr	r3, [pc, #208]	; (800a8d4 <LmHandlerConfigure+0x23c>)
 800a802:	781b      	ldrb	r3, [r3, #0]
 800a804:	9303      	str	r3, [sp, #12]
 800a806:	9002      	str	r0, [sp, #8]
 800a808:	9101      	str	r1, [sp, #4]
 800a80a:	9200      	str	r2, [sp, #0]
 800a80c:	4b32      	ldr	r3, [pc, #200]	; (800a8d8 <LmHandlerConfigure+0x240>)
 800a80e:	2200      	movs	r2, #0
 800a810:	2100      	movs	r1, #0
 800a812:	2002      	movs	r0, #2
 800a814:	f00e f9b4 	bl	8018b80 <UTIL_ADV_TRACE_COND_FSend>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG(TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n");
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 800a818:	230f      	movs	r3, #15
 800a81a:	753b      	strb	r3, [r7, #20]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800a81c:	2300      	movs	r3, #0
 800a81e:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800a820:	f107 0314 	add.w	r3, r7, #20
 800a824:	4618      	mov	r0, r3
 800a826:	f004 ff0f 	bl	800f648 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_NET_ID;
 800a82a:	2305      	movs	r3, #5
 800a82c:	753b      	strb	r3, [r7, #20]
    mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800a82e:	2300      	movs	r3, #0
 800a830:	61bb      	str	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800a832:	f107 0314 	add.w	r3, r7, #20
 800a836:	4618      	mov	r0, r3
 800a838:	f004 ff06 	bl	800f648 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 800a83c:	2310      	movs	r3, #16
 800a83e:	753b      	strb	r3, [r7, #20]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800a840:	2300      	movs	r3, #0
 800a842:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800a844:	f107 0314 	add.w	r3, r7, #20
 800a848:	4618      	mov	r0, r3
 800a84a:	f004 fefd 	bl	800f648 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 800a84e:	2304      	movs	r3, #4
 800a850:	753b      	strb	r3, [r7, #20]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800a852:	4b14      	ldr	r3, [pc, #80]	; (800a8a4 <LmHandlerConfigure+0x20c>)
 800a854:	789b      	ldrb	r3, [r3, #2]
 800a856:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800a858:	f107 0314 	add.w	r3, r7, #20
 800a85c:	4618      	mov	r0, r3
 800a85e:	f004 fef3 	bl	800f648 <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800a862:	230f      	movs	r3, #15
 800a864:	733b      	strb	r3, [r7, #12]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800a866:	4b0f      	ldr	r3, [pc, #60]	; (800a8a4 <LmHandlerConfigure+0x20c>)
 800a868:	781b      	ldrb	r3, [r3, #0]
 800a86a:	f107 020c 	add.w	r2, r7, #12
 800a86e:	4611      	mov	r1, r2
 800a870:	4618      	mov	r0, r3
 800a872:	f007 fcc3 	bl	80121fc <RegionGetPhyParam>
 800a876:	4603      	mov	r3, r0
 800a878:	60bb      	str	r3, [r7, #8]
    LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 800a87a:	68bb      	ldr	r3, [r7, #8]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	bf14      	ite	ne
 800a880:	2301      	movne	r3, #1
 800a882:	2300      	moveq	r3, #0
 800a884:	b2da      	uxtb	r2, r3
 800a886:	4b07      	ldr	r3, [pc, #28]	; (800a8a4 <LmHandlerConfigure+0x20c>)
 800a888:	715a      	strb	r2, [r3, #5]

    LmHandlerSetSystemMaxRxError( 20 );
 800a88a:	2014      	movs	r0, #20
 800a88c:	f000 fa6c 	bl	800ad68 <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800a890:	4b04      	ldr	r3, [pc, #16]	; (800a8a4 <LmHandlerConfigure+0x20c>)
 800a892:	795b      	ldrb	r3, [r3, #5]
 800a894:	4618      	mov	r0, r3
 800a896:	f005 fc4b 	bl	8010130 <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 800a89a:	2300      	movs	r3, #0
}
 800a89c:	4618      	mov	r0, r3
 800a89e:	3744      	adds	r7, #68	; 0x44
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a8a4:	2000026c 	.word	0x2000026c
 800a8a8:	20000290 	.word	0x20000290
 800a8ac:	20000280 	.word	0x20000280
 800a8b0:	080194f4 	.word	0x080194f4
 800a8b4:	200003ae 	.word	0x200003ae
 800a8b8:	20000070 	.word	0x20000070
 800a8bc:	20000078 	.word	0x20000078
 800a8c0:	08019540 	.word	0x08019540
 800a8c4:	0801957c 	.word	0x0801957c
 800a8c8:	20000087 	.word	0x20000087
 800a8cc:	20000086 	.word	0x20000086
 800a8d0:	20000085 	.word	0x20000085
 800a8d4:	20000084 	.word	0x20000084
 800a8d8:	080195b8 	.word	0x080195b8

0800a8dc <LmHandlerProcess>:
    }
    return false;
}

void LmHandlerProcess( void )
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	af00      	add	r7, sp, #0
    /* Call at first the LoRaMAC process before to run all package process features */
    // Processes the LoRaMac events
    LoRaMacProcess( );
 800a8e0:	f002 f9b8 	bl	800cc54 <LoRaMacProcess>

    // Call all packages process functions
    LmHandlerPackagesProcess( );
 800a8e4:	f000 fc9a 	bl	800b21c <LmHandlerPackagesProcess>

    // Store to NVM if required
    NvmDataMgmtStore( );
 800a8e8:	f000 fcee 	bl	800b2c8 <NvmDataMgmtStore>
}
 800a8ec:	bf00      	nop
 800a8ee:	bd80      	pop	{r7, pc}

0800a8f0 <LmHandlerJoin>:

void LmHandlerJoin( ActivationType_t mode )
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b090      	sub	sp, #64	; 0x40
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	4603      	mov	r3, r0
 800a8f8:	71fb      	strb	r3, [r7, #7]
        while (1);
    }
#endif /* ACTIVATION_BY_PERSONALIZATION */
#endif /* LORAWAN_KMS */

    if ( mode == ACTIVATION_TYPE_OTAA )
 800a8fa:	79fb      	ldrb	r3, [r7, #7]
 800a8fc:	2b02      	cmp	r3, #2
 800a8fe:	d111      	bne.n	800a924 <LmHandlerJoin+0x34>
    {
        MlmeReq_t mlmeReq;
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800a900:	4b23      	ldr	r3, [pc, #140]	; (800a990 <LmHandlerJoin+0xa0>)
 800a902:	2202      	movs	r2, #2
 800a904:	709a      	strb	r2, [r3, #2]

        LoRaMacStart();
 800a906:	f004 fcab 	bl	800f260 <LoRaMacStart>

        mlmeReq.Type = MLME_JOIN;
 800a90a:	2301      	movs	r3, #1
 800a90c:	723b      	strb	r3, [r7, #8]
        mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800a90e:	4b21      	ldr	r3, [pc, #132]	; (800a994 <LmHandlerJoin+0xa4>)
 800a910:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800a914:	b2db      	uxtb	r3, r3
 800a916:	733b      	strb	r3, [r7, #12]

        // Starts the OTAA join procedure
        LoRaMacMlmeRequest( &mlmeReq );
 800a918:	f107 0308 	add.w	r3, r7, #8
 800a91c:	4618      	mov	r0, r3
 800a91e:	f005 f9d1 	bl	800fcc4 <LoRaMacMlmeRequest>

        // Notify upper layer
        LmHandlerCallbacks->OnJoinRequest( &JoinParams );
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
    }
}
 800a922:	e030      	b.n	800a986 <LmHandlerJoin+0x96>
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800a924:	4b1a      	ldr	r3, [pc, #104]	; (800a990 <LmHandlerJoin+0xa0>)
 800a926:	2201      	movs	r2, #1
 800a928:	709a      	strb	r2, [r3, #2]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800a92a:	4b1a      	ldr	r3, [pc, #104]	; (800a994 <LmHandlerJoin+0xa4>)
 800a92c:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800a930:	4b17      	ldr	r3, [pc, #92]	; (800a990 <LmHandlerJoin+0xa0>)
 800a932:	701a      	strb	r2, [r3, #0]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800a934:	4b16      	ldr	r3, [pc, #88]	; (800a990 <LmHandlerJoin+0xa0>)
 800a936:	2200      	movs	r2, #0
 800a938:	705a      	strb	r2, [r3, #1]
        if (CtxRestoreDone == false)
 800a93a:	4b17      	ldr	r3, [pc, #92]	; (800a998 <LmHandlerJoin+0xa8>)
 800a93c:	781b      	ldrb	r3, [r3, #0]
 800a93e:	f083 0301 	eor.w	r3, r3, #1
 800a942:	b2db      	uxtb	r3, r3
 800a944:	2b00      	cmp	r3, #0
 800a946:	d008      	beq.n	800a95a <LmHandlerJoin+0x6a>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800a948:	2327      	movs	r3, #39	; 0x27
 800a94a:	773b      	strb	r3, [r7, #28]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800a94c:	4b13      	ldr	r3, [pc, #76]	; (800a99c <LmHandlerJoin+0xac>)
 800a94e:	623b      	str	r3, [r7, #32]
            LoRaMacMibSetRequestConfirm(&mibReq);
 800a950:	f107 031c 	add.w	r3, r7, #28
 800a954:	4618      	mov	r0, r3
 800a956:	f004 fe77 	bl	800f648 <LoRaMacMibSetRequestConfirm>
        LoRaMacStart();
 800a95a:	f004 fc81 	bl	800f260 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800a95e:	2301      	movs	r3, #1
 800a960:	773b      	strb	r3, [r7, #28]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800a962:	2301      	movs	r3, #1
 800a964:	f887 3020 	strb.w	r3, [r7, #32]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800a968:	f107 031c 	add.w	r3, r7, #28
 800a96c:	4618      	mov	r0, r3
 800a96e:	f004 fe6b 	bl	800f648 <LoRaMacMibSetRequestConfirm>
        LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800a972:	4b0b      	ldr	r3, [pc, #44]	; (800a9a0 <LmHandlerJoin+0xb0>)
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	69db      	ldr	r3, [r3, #28]
 800a978:	4805      	ldr	r0, [pc, #20]	; (800a990 <LmHandlerJoin+0xa0>)
 800a97a:	4798      	blx	r3
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800a97c:	4b05      	ldr	r3, [pc, #20]	; (800a994 <LmHandlerJoin+0xa4>)
 800a97e:	785b      	ldrb	r3, [r3, #1]
 800a980:	4618      	mov	r0, r3
 800a982:	f000 f917 	bl	800abb4 <LmHandlerRequestClass>
}
 800a986:	bf00      	nop
 800a988:	3740      	adds	r7, #64	; 0x40
 800a98a:	46bd      	mov	sp, r7
 800a98c:	bd80      	pop	{r7, pc}
 800a98e:	bf00      	nop
 800a990:	20000094 	.word	0x20000094
 800a994:	2000026c 	.word	0x2000026c
 800a998:	200003ae 	.word	0x200003ae
 800a99c:	01000300 	.word	0x01000300
 800a9a0:	2000027c 	.word	0x2000027c

0800a9a4 <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	b08a      	sub	sp, #40	; 0x28
 800a9a8:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800a9aa:	2301      	movs	r3, #1
 800a9ac:	703b      	strb	r3, [r7, #0]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800a9ae:	463b      	mov	r3, r7
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	f004 fceb 	bl	800f38c <LoRaMacMibGetRequestConfirm>
 800a9b6:	4603      	mov	r3, r0
 800a9b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if( status == LORAMAC_STATUS_OK )
 800a9bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d106      	bne.n	800a9d2 <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800a9c4:	793b      	ldrb	r3, [r7, #4]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d101      	bne.n	800a9ce <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	e002      	b.n	800a9d4 <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 800a9ce:	2301      	movs	r3, #1
 800a9d0:	e000      	b.n	800a9d4 <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 800a9d2:	2300      	movs	r3, #0
    }
}
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	3728      	adds	r7, #40	; 0x28
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	bd80      	pop	{r7, pc}

0800a9dc <LmHandlerSend>:
    }
}

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed,
                                      TimerTime_t *nextTxIn, bool allowDelayedTx )
{
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b08c      	sub	sp, #48	; 0x30
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	60f8      	str	r0, [r7, #12]
 800a9e4:	607a      	str	r2, [r7, #4]
 800a9e6:	461a      	mov	r2, r3
 800a9e8:	460b      	mov	r3, r1
 800a9ea:	72fb      	strb	r3, [r7, #11]
 800a9ec:	4613      	mov	r3, r2
 800a9ee:	72bb      	strb	r3, [r7, #10]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800a9f0:	23ff      	movs	r3, #255	; 0xff
 800a9f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if (LoRaMacIsBusy() == true)
 800a9f6:	f001 fe97 	bl	800c728 <LoRaMacIsBusy>
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d002      	beq.n	800aa06 <LmHandlerSend+0x2a>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800aa00:	f06f 0301 	mvn.w	r3, #1
 800aa04:	e0b4      	b.n	800ab70 <LmHandlerSend+0x194>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800aa06:	f7ff ffcd 	bl	800a9a4 <LmHandlerJoinStatus>
 800aa0a:	4603      	mov	r3, r0
 800aa0c:	2b01      	cmp	r3, #1
 800aa0e:	d007      	beq.n	800aa20 <LmHandlerSend+0x44>
    {
        // The network isn't joined, try again.
        LmHandlerJoin(JoinParams.Mode);
 800aa10:	4b59      	ldr	r3, [pc, #356]	; (800ab78 <LmHandlerSend+0x19c>)
 800aa12:	789b      	ldrb	r3, [r3, #2]
 800aa14:	4618      	mov	r0, r3
 800aa16:	f7ff ff6b 	bl	800a8f0 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800aa1a:	f06f 0302 	mvn.w	r3, #2
 800aa1e:	e0a7      	b.n	800ab70 <LmHandlerSend+0x194>
    }

    if( ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == true ) && ( appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port ) && ( appData->Port != 0 ) )
 800aa20:	4b56      	ldr	r3, [pc, #344]	; (800ab7c <LmHandlerSend+0x1a0>)
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	68db      	ldr	r3, [r3, #12]
 800aa26:	4798      	blx	r3
 800aa28:	4603      	mov	r3, r0
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d00d      	beq.n	800aa4a <LmHandlerSend+0x6e>
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	781a      	ldrb	r2, [r3, #0]
 800aa32:	4b52      	ldr	r3, [pc, #328]	; (800ab7c <LmHandlerSend+0x1a0>)
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	781b      	ldrb	r3, [r3, #0]
 800aa38:	429a      	cmp	r2, r3
 800aa3a:	d006      	beq.n	800aa4a <LmHandlerSend+0x6e>
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	781b      	ldrb	r3, [r3, #0]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d002      	beq.n	800aa4a <LmHandlerSend+0x6e>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 800aa44:	f06f 0303 	mvn.w	r3, #3
 800aa48:	e092      	b.n	800ab70 <LmHandlerSend+0x194>
    }

    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800aa4a:	4b4d      	ldr	r3, [pc, #308]	; (800ab80 <LmHandlerSend+0x1a4>)
 800aa4c:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800aa50:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	785b      	ldrb	r3, [r3, #1]
 800aa58:	f107 0214 	add.w	r2, r7, #20
 800aa5c:	4611      	mov	r1, r2
 800aa5e:	4618      	mov	r0, r3
 800aa60:	f004 fc0c 	bl	800f27c <LoRaMacQueryTxPossible>
 800aa64:	4603      	mov	r3, r0
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d009      	beq.n	800aa7e <LmHandlerSend+0xa2>
    {
        // Send empty frame in order to flush MAC commands
        TxParams.MsgType = LORAMAC_HANDLER_UNCONFIRMED_MSG;
 800aa6a:	4b46      	ldr	r3, [pc, #280]	; (800ab84 <LmHandlerSend+0x1a8>)
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	709a      	strb	r2, [r3, #2]
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800aa70:	2300      	movs	r3, #0
 800aa72:	763b      	strb	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800aa74:	2300      	movs	r3, #0
 800aa76:	623b      	str	r3, [r7, #32]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800aa78:	2300      	movs	r3, #0
 800aa7a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800aa7c:	e017      	b.n	800aaae <LmHandlerSend+0xd2>
    }
    else
    {
        TxParams.MsgType = isTxConfirmed;
 800aa7e:	4a41      	ldr	r2, [pc, #260]	; (800ab84 <LmHandlerSend+0x1a8>)
 800aa80:	7afb      	ldrb	r3, [r7, #11]
 800aa82:	7093      	strb	r3, [r2, #2]
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	781b      	ldrb	r3, [r3, #0]
 800aa88:	773b      	strb	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	785b      	ldrb	r3, [r3, #1]
 800aa8e:	b29b      	uxth	r3, r3
 800aa90:	84bb      	strh	r3, [r7, #36]	; 0x24
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	685b      	ldr	r3, [r3, #4]
 800aa96:	623b      	str	r3, [r7, #32]
        if( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG )
 800aa98:	7afb      	ldrb	r3, [r7, #11]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d102      	bne.n	800aaa4 <LmHandlerSend+0xc8>
        {
            mcpsReq.Type = MCPS_UNCONFIRMED;
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	763b      	strb	r3, [r7, #24]
 800aaa2:	e004      	b.n	800aaae <LmHandlerSend+0xd2>
        }
        else
        {
            mcpsReq.Type = MCPS_CONFIRMED;
 800aaa4:	2301      	movs	r3, #1
 800aaa6:	763b      	strb	r3, [r7, #24]
            mcpsReq.Req.Confirmed.NbTrials = 8;
 800aaa8:	2308      	movs	r3, #8
 800aaaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
    }

    TxParams.AppData = *appData;
 800aaae:	4b35      	ldr	r3, [pc, #212]	; (800ab84 <LmHandlerSend+0x1a8>)
 800aab0:	68fa      	ldr	r2, [r7, #12]
 800aab2:	330c      	adds	r3, #12
 800aab4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800aab8:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800aabc:	4b30      	ldr	r3, [pc, #192]	; (800ab80 <LmHandlerSend+0x1a4>)
 800aabe:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800aac2:	4b30      	ldr	r3, [pc, #192]	; (800ab84 <LmHandlerSend+0x1a8>)
 800aac4:	711a      	strb	r2, [r3, #4]

    status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 800aac6:	7aba      	ldrb	r2, [r7, #10]
 800aac8:	f107 0318 	add.w	r3, r7, #24
 800aacc:	4611      	mov	r1, r2
 800aace:	4618      	mov	r0, r3
 800aad0:	f005 fa38 	bl	800ff44 <LoRaMacMcpsRequest>
 800aad4:	4603      	mov	r3, r0
 800aad6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    if (nextTxIn != NULL)
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d002      	beq.n	800aae6 <LmHandlerSend+0x10a>
    {
        *nextTxIn = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800aae0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	601a      	str	r2, [r3, #0]
    }

    switch (status)
 800aae6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800aaea:	2b11      	cmp	r3, #17
 800aaec:	d83a      	bhi.n	800ab64 <LmHandlerSend+0x188>
 800aaee:	a201      	add	r2, pc, #4	; (adr r2, 800aaf4 <LmHandlerSend+0x118>)
 800aaf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaf4:	0800ab3d 	.word	0x0800ab3d
 800aaf8:	0800ab45 	.word	0x0800ab45
 800aafc:	0800ab65 	.word	0x0800ab65
 800ab00:	0800ab65 	.word	0x0800ab65
 800ab04:	0800ab65 	.word	0x0800ab65
 800ab08:	0800ab65 	.word	0x0800ab65
 800ab0c:	0800ab65 	.word	0x0800ab65
 800ab10:	0800ab4d 	.word	0x0800ab4d
 800ab14:	0800ab65 	.word	0x0800ab65
 800ab18:	0800ab65 	.word	0x0800ab65
 800ab1c:	0800ab65 	.word	0x0800ab65
 800ab20:	0800ab5d 	.word	0x0800ab5d
 800ab24:	0800ab65 	.word	0x0800ab65
 800ab28:	0800ab65 	.word	0x0800ab65
 800ab2c:	0800ab45 	.word	0x0800ab45
 800ab30:	0800ab45 	.word	0x0800ab45
 800ab34:	0800ab45 	.word	0x0800ab45
 800ab38:	0800ab55 	.word	0x0800ab55
    {
        case LORAMAC_STATUS_OK:
            lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800ab42:	e013      	b.n	800ab6c <LmHandlerSend+0x190>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800ab44:	23fe      	movs	r3, #254	; 0xfe
 800ab46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800ab4a:	e00f      	b.n	800ab6c <LmHandlerSend+0x190>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800ab4c:	23fd      	movs	r3, #253	; 0xfd
 800ab4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800ab52:	e00b      	b.n	800ab6c <LmHandlerSend+0x190>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800ab54:	23fb      	movs	r3, #251	; 0xfb
 800ab56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800ab5a:	e007      	b.n	800ab6c <LmHandlerSend+0x190>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800ab5c:	23fa      	movs	r3, #250	; 0xfa
 800ab5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800ab62:	e003      	b.n	800ab6c <LmHandlerSend+0x190>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800ab64:	23ff      	movs	r3, #255	; 0xff
 800ab66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800ab6a:	bf00      	nop
    }

    return lmhStatus;
 800ab6c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800ab70:	4618      	mov	r0, r3
 800ab72:	3730      	adds	r7, #48	; 0x30
 800ab74:	46bd      	mov	sp, r7
 800ab76:	bd80      	pop	{r7, pc}
 800ab78:	20000094 	.word	0x20000094
 800ab7c:	20000258 	.word	0x20000258
 800ab80:	2000026c 	.word	0x2000026c
 800ab84:	200002a4 	.word	0x200002a4

0800ab88 <LmHandlerDeviceTimeReq>:
        return LORAMAC_HANDLER_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b086      	sub	sp, #24
 800ab8c:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 800ab8e:	230a      	movs	r3, #10
 800ab90:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800ab92:	463b      	mov	r3, r7
 800ab94:	4618      	mov	r0, r3
 800ab96:	f005 f895 	bl	800fcc4 <LoRaMacMlmeRequest>
 800ab9a:	4603      	mov	r3, r0
 800ab9c:	75fb      	strb	r3, [r7, #23]

    if( status == LORAMAC_STATUS_OK )
 800ab9e:	7dfb      	ldrb	r3, [r7, #23]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d101      	bne.n	800aba8 <LmHandlerDeviceTimeReq+0x20>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800aba4:	2300      	movs	r3, #0
 800aba6:	e001      	b.n	800abac <LmHandlerDeviceTimeReq+0x24>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800aba8:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800abac:	4618      	mov	r0, r3
 800abae:	3718      	adds	r7, #24
 800abb0:	46bd      	mov	sp, r7
 800abb2:	bd80      	pop	{r7, pc}

0800abb4 <LmHandlerRequestClass>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b08c      	sub	sp, #48	; 0x30
 800abb8:	af00      	add	r7, sp, #0
 800abba:	4603      	mov	r3, r0
 800abbc:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800abbe:	2300      	movs	r3, #0
 800abc0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    if (LoRaMacIsBusy() == true)
 800abc4:	f001 fdb0 	bl	800c728 <LoRaMacIsBusy>
 800abc8:	4603      	mov	r3, r0
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d002      	beq.n	800abd4 <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800abce:	f06f 0301 	mvn.w	r3, #1
 800abd2:	e07b      	b.n	800accc <LmHandlerRequestClass+0x118>
    }

    if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 800abd4:	f7ff fee6 	bl	800a9a4 <LmHandlerJoinStatus>
 800abd8:	4603      	mov	r3, r0
 800abda:	2b01      	cmp	r3, #1
 800abdc:	d002      	beq.n	800abe4 <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800abde:	f06f 0302 	mvn.w	r3, #2
 800abe2:	e073      	b.n	800accc <LmHandlerRequestClass+0x118>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800abe4:	2300      	movs	r3, #0
 800abe6:	723b      	strb	r3, [r7, #8]
    if ( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800abe8:	f107 0308 	add.w	r3, r7, #8
 800abec:	4618      	mov	r0, r3
 800abee:	f004 fbcd 	bl	800f38c <LoRaMacMibGetRequestConfirm>
 800abf2:	4603      	mov	r3, r0
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d002      	beq.n	800abfe <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 800abf8:	f04f 33ff 	mov.w	r3, #4294967295
 800abfc:	e066      	b.n	800accc <LmHandlerRequestClass+0x118>
    }
    currentClass = mibReq.Param.Class;
 800abfe:	7b3b      	ldrb	r3, [r7, #12]
 800ac00:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    // Attempt to switch only if class update
    if( currentClass != newClass )
 800ac04:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800ac08:	79fb      	ldrb	r3, [r7, #7]
 800ac0a:	429a      	cmp	r2, r3
 800ac0c:	d055      	beq.n	800acba <LmHandlerRequestClass+0x106>
    {
        switch( newClass )
 800ac0e:	79fb      	ldrb	r3, [r7, #7]
 800ac10:	2b02      	cmp	r3, #2
 800ac12:	d02c      	beq.n	800ac6e <LmHandlerRequestClass+0xba>
 800ac14:	2b02      	cmp	r3, #2
 800ac16:	dc52      	bgt.n	800acbe <LmHandlerRequestClass+0x10a>
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d002      	beq.n	800ac22 <LmHandlerRequestClass+0x6e>
 800ac1c:	2b01      	cmp	r3, #1
 800ac1e:	d022      	beq.n	800ac66 <LmHandlerRequestClass+0xb2>
                    }
                }
            }
            break;
        default:
            break;
 800ac20:	e04d      	b.n	800acbe <LmHandlerRequestClass+0x10a>
                if( currentClass != CLASS_A )
 800ac22:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d04b      	beq.n	800acc2 <LmHandlerRequestClass+0x10e>
                    mibReq.Param.Class = newClass;
 800ac2a:	79fb      	ldrb	r3, [r7, #7]
 800ac2c:	733b      	strb	r3, [r7, #12]
                    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800ac2e:	f107 0308 	add.w	r3, r7, #8
 800ac32:	4618      	mov	r0, r3
 800ac34:	f004 fd08 	bl	800f648 <LoRaMacMibSetRequestConfirm>
 800ac38:	4603      	mov	r3, r0
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d10f      	bne.n	800ac5e <LmHandlerRequestClass+0xaa>
                        DisplayClassUpdate(newClass);
 800ac3e:	79fb      	ldrb	r3, [r7, #7]
 800ac40:	4618      	mov	r0, r3
 800ac42:	f000 fb1f 	bl	800b284 <DisplayClassUpdate>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800ac46:	4b23      	ldr	r3, [pc, #140]	; (800acd4 <LmHandlerRequestClass+0x120>)
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d038      	beq.n	800acc2 <LmHandlerRequestClass+0x10e>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800ac50:	4b20      	ldr	r3, [pc, #128]	; (800acd4 <LmHandlerRequestClass+0x120>)
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac56:	79fa      	ldrb	r2, [r7, #7]
 800ac58:	4610      	mov	r0, r2
 800ac5a:	4798      	blx	r3
            break;
 800ac5c:	e031      	b.n	800acc2 <LmHandlerRequestClass+0x10e>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800ac5e:	23ff      	movs	r3, #255	; 0xff
 800ac60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800ac64:	e02d      	b.n	800acc2 <LmHandlerRequestClass+0x10e>
                errorStatus = LORAMAC_HANDLER_ERROR;
 800ac66:	23ff      	movs	r3, #255	; 0xff
 800ac68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800ac6c:	e02c      	b.n	800acc8 <LmHandlerRequestClass+0x114>
                if( currentClass != CLASS_A )
 800ac6e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d003      	beq.n	800ac7e <LmHandlerRequestClass+0xca>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800ac76:	23ff      	movs	r3, #255	; 0xff
 800ac78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800ac7c:	e023      	b.n	800acc6 <LmHandlerRequestClass+0x112>
                    mibReq.Param.Class = newClass;
 800ac7e:	79fb      	ldrb	r3, [r7, #7]
 800ac80:	733b      	strb	r3, [r7, #12]
                    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800ac82:	f107 0308 	add.w	r3, r7, #8
 800ac86:	4618      	mov	r0, r3
 800ac88:	f004 fcde 	bl	800f648 <LoRaMacMibSetRequestConfirm>
 800ac8c:	4603      	mov	r3, r0
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d10f      	bne.n	800acb2 <LmHandlerRequestClass+0xfe>
                        DisplayClassUpdate(newClass);
 800ac92:	79fb      	ldrb	r3, [r7, #7]
 800ac94:	4618      	mov	r0, r3
 800ac96:	f000 faf5 	bl	800b284 <DisplayClassUpdate>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800ac9a:	4b0e      	ldr	r3, [pc, #56]	; (800acd4 <LmHandlerRequestClass+0x120>)
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d010      	beq.n	800acc6 <LmHandlerRequestClass+0x112>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800aca4:	4b0b      	ldr	r3, [pc, #44]	; (800acd4 <LmHandlerRequestClass+0x120>)
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acaa:	79fa      	ldrb	r2, [r7, #7]
 800acac:	4610      	mov	r0, r2
 800acae:	4798      	blx	r3
            break;
 800acb0:	e009      	b.n	800acc6 <LmHandlerRequestClass+0x112>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800acb2:	23ff      	movs	r3, #255	; 0xff
 800acb4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800acb8:	e005      	b.n	800acc6 <LmHandlerRequestClass+0x112>
        }
    }
 800acba:	bf00      	nop
 800acbc:	e004      	b.n	800acc8 <LmHandlerRequestClass+0x114>
            break;
 800acbe:	bf00      	nop
 800acc0:	e002      	b.n	800acc8 <LmHandlerRequestClass+0x114>
            break;
 800acc2:	bf00      	nop
 800acc4:	e000      	b.n	800acc8 <LmHandlerRequestClass+0x114>
            break;
 800acc6:	bf00      	nop
    return errorStatus;
 800acc8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800accc:	4618      	mov	r0, r3
 800acce:	3730      	adds	r7, #48	; 0x30
 800acd0:	46bd      	mov	sp, r7
 800acd2:	bd80      	pop	{r7, pc}
 800acd4:	2000027c 	.word	0x2000027c

0800acd8 <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b08c      	sub	sp, #48	; 0x30
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if (deviceClass == NULL)
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d102      	bne.n	800acec <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800ace6:	f04f 33ff 	mov.w	r3, #4294967295
 800acea:	e010      	b.n	800ad0e <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800acec:	2300      	movs	r3, #0
 800acee:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK)
 800acf0:	f107 030c 	add.w	r3, r7, #12
 800acf4:	4618      	mov	r0, r3
 800acf6:	f004 fb49 	bl	800f38c <LoRaMacMibGetRequestConfirm>
 800acfa:	4603      	mov	r3, r0
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d002      	beq.n	800ad06 <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800ad00:	f04f 33ff 	mov.w	r3, #4294967295
 800ad04:	e003      	b.n	800ad0e <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 800ad06:	7c3a      	ldrb	r2, [r7, #16]
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800ad0c:	2300      	movs	r3, #0
}
 800ad0e:	4618      	mov	r0, r3
 800ad10:	3730      	adds	r7, #48	; 0x30
 800ad12:	46bd      	mov	sp, r7
 800ad14:	bd80      	pop	{r7, pc}
	...

0800ad18 <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b08c      	sub	sp, #48	; 0x30
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if (txDatarate == NULL)
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d102      	bne.n	800ad2c <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800ad26:	f04f 33ff 	mov.w	r3, #4294967295
 800ad2a:	e016      	b.n	800ad5a <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 800ad2c:	231f      	movs	r3, #31
 800ad2e:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK)
 800ad30:	f107 030c 	add.w	r3, r7, #12
 800ad34:	4618      	mov	r0, r3
 800ad36:	f004 fb29 	bl	800f38c <LoRaMacMibGetRequestConfirm>
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d002      	beq.n	800ad46 <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800ad40:	f04f 33ff 	mov.w	r3, #4294967295
 800ad44:	e009      	b.n	800ad5a <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 800ad46:	f997 2010 	ldrsb.w	r2, [r7, #16]
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	f993 2000 	ldrsb.w	r2, [r3]
 800ad54:	4b03      	ldr	r3, [pc, #12]	; (800ad64 <LmHandlerGetTxDatarate+0x4c>)
 800ad56:	70da      	strb	r2, [r3, #3]
    return LORAMAC_HANDLER_SUCCESS;
 800ad58:	2300      	movs	r3, #0
}
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	3730      	adds	r7, #48	; 0x30
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	bd80      	pop	{r7, pc}
 800ad62:	bf00      	nop
 800ad64:	2000026c 	.word	0x2000026c

0800ad68 <LmHandlerSetSystemMaxRxError>:
    *region = LmHandlerParams.ActiveRegion;
    return LORAMAC_HANDLER_SUCCESS;
}

static LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b08c      	sub	sp, #48	; 0x30
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800ad70:	2322      	movs	r3, #34	; 0x22
 800ad72:	733b      	strb	r3, [r7, #12]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	613b      	str	r3, [r7, #16]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800ad78:	f107 030c 	add.w	r3, r7, #12
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	f004 fc63 	bl	800f648 <LoRaMacMibSetRequestConfirm>
 800ad82:	4603      	mov	r3, r0
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d002      	beq.n	800ad8e <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 800ad88:	f04f 33ff 	mov.w	r3, #4294967295
 800ad8c:	e000      	b.n	800ad90 <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 800ad8e:	2300      	movs	r3, #0
}
 800ad90:	4618      	mov	r0, r3
 800ad92:	3730      	adds	r7, #48	; 0x30
 800ad94:	46bd      	mov	sp, r7
 800ad96:	bd80      	pop	{r7, pc}

0800ad98 <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b082      	sub	sp, #8
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 800ada0:	4b15      	ldr	r3, [pc, #84]	; (800adf8 <McpsConfirm+0x60>)
 800ada2:	2201      	movs	r2, #1
 800ada4:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	785a      	ldrb	r2, [r3, #1]
 800adaa:	4b13      	ldr	r3, [pc, #76]	; (800adf8 <McpsConfirm+0x60>)
 800adac:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	789b      	ldrb	r3, [r3, #2]
 800adb2:	b25a      	sxtb	r2, r3
 800adb4:	4b10      	ldr	r3, [pc, #64]	; (800adf8 <McpsConfirm+0x60>)
 800adb6:	711a      	strb	r2, [r3, #4]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	68db      	ldr	r3, [r3, #12]
 800adbc:	4a0e      	ldr	r2, [pc, #56]	; (800adf8 <McpsConfirm+0x60>)
 800adbe:	6093      	str	r3, [r2, #8]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800adc6:	4b0c      	ldr	r3, [pc, #48]	; (800adf8 <McpsConfirm+0x60>)
 800adc8:	751a      	strb	r2, [r3, #20]
    TxParams.Channel = mcpsConfirm->Channel;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	691b      	ldr	r3, [r3, #16]
 800adce:	b2da      	uxtb	r2, r3
 800add0:	4b09      	ldr	r3, [pc, #36]	; (800adf8 <McpsConfirm+0x60>)
 800add2:	755a      	strb	r2, [r3, #21]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	791b      	ldrb	r3, [r3, #4]
 800add8:	461a      	mov	r2, r3
 800adda:	4b07      	ldr	r3, [pc, #28]	; (800adf8 <McpsConfirm+0x60>)
 800addc:	70da      	strb	r2, [r3, #3]

    LmHandlerCallbacks->OnTxData( &TxParams );
 800adde:	4b07      	ldr	r3, [pc, #28]	; (800adfc <McpsConfirm+0x64>)
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	6a1b      	ldr	r3, [r3, #32]
 800ade4:	4804      	ldr	r0, [pc, #16]	; (800adf8 <McpsConfirm+0x60>)
 800ade6:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800ade8:	6879      	ldr	r1, [r7, #4]
 800adea:	2000      	movs	r0, #0
 800adec:	f000 f99a 	bl	800b124 <LmHandlerPackagesNotify>
}
 800adf0:	bf00      	nop
 800adf2:	3708      	adds	r7, #8
 800adf4:	46bd      	mov	sp, r7
 800adf6:	bd80      	pop	{r7, pc}
 800adf8:	200002a4 	.word	0x200002a4
 800adfc:	2000027c 	.word	0x2000027c

0800ae00 <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *RxStatus )
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b088      	sub	sp, #32
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
 800ae08:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	75fb      	strb	r3, [r7, #23]
    RxParams.IsMcpsIndication = 1;
 800ae0e:	4b32      	ldr	r3, [pc, #200]	; (800aed8 <McpsIndication+0xd8>)
 800ae10:	2201      	movs	r2, #1
 800ae12:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	785a      	ldrb	r2, [r3, #1]
 800ae18:	4b2f      	ldr	r3, [pc, #188]	; (800aed8 <McpsIndication+0xd8>)
 800ae1a:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800ae1c:	4b2e      	ldr	r3, [pc, #184]	; (800aed8 <McpsIndication+0xd8>)
 800ae1e:	785b      	ldrb	r3, [r3, #1]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d154      	bne.n	800aece <McpsIndication+0xce>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	791b      	ldrb	r3, [r3, #4]
 800ae28:	b25a      	sxtb	r2, r3
 800ae2a:	4b2b      	ldr	r3, [pc, #172]	; (800aed8 <McpsIndication+0xd8>)
 800ae2c:	709a      	strb	r2, [r3, #2]
    RxParams.Rssi = RxStatus->Rssi;
 800ae2e:	683b      	ldr	r3, [r7, #0]
 800ae30:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ae34:	b25a      	sxtb	r2, r3
 800ae36:	4b28      	ldr	r3, [pc, #160]	; (800aed8 <McpsIndication+0xd8>)
 800ae38:	70da      	strb	r2, [r3, #3]
    RxParams.Snr = RxStatus->Snr;
 800ae3a:	683b      	ldr	r3, [r7, #0]
 800ae3c:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800ae40:	4b25      	ldr	r3, [pc, #148]	; (800aed8 <McpsIndication+0xd8>)
 800ae42:	711a      	strb	r2, [r3, #4]
    RxParams.RxSlot = RxStatus->RxSlot;
 800ae44:	683b      	ldr	r3, [r7, #0]
 800ae46:	78db      	ldrb	r3, [r3, #3]
 800ae48:	b25a      	sxtb	r2, r3
 800ae4a:	4b23      	ldr	r3, [pc, #140]	; (800aed8 <McpsIndication+0xd8>)
 800ae4c:	731a      	strb	r2, [r3, #12]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	691b      	ldr	r3, [r3, #16]
 800ae52:	4a21      	ldr	r2, [pc, #132]	; (800aed8 <McpsIndication+0xd8>)
 800ae54:	6093      	str	r3, [r2, #8]

    appData.Port = mcpsIndication->Port;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	78db      	ldrb	r3, [r3, #3]
 800ae5a:	763b      	strb	r3, [r7, #24]
    appData.BufferSize = mcpsIndication->BufferSize;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	7b1b      	ldrb	r3, [r3, #12]
 800ae60:	767b      	strb	r3, [r7, #25]
    appData.Buffer = mcpsIndication->Buffer;
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	689b      	ldr	r3, [r3, #8]
 800ae66:	61fb      	str	r3, [r7, #28]

    LmHandlerCallbacks->OnRxData(&appData, &RxParams);
 800ae68:	4b1c      	ldr	r3, [pc, #112]	; (800aedc <McpsIndication+0xdc>)
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae6e:	f107 0218 	add.w	r2, r7, #24
 800ae72:	4919      	ldr	r1, [pc, #100]	; (800aed8 <McpsIndication+0xd8>)
 800ae74:	4610      	mov	r0, r2
 800ae76:	4798      	blx	r3

    if ((LmHandlerCallbacks->OnSysTimeUpdate != NULL) && (mcpsIndication->DeviceTimeAnsReceived == true))
 800ae78:	4b18      	ldr	r3, [pc, #96]	; (800aedc <McpsIndication+0xdc>)
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d007      	beq.n	800ae92 <McpsIndication+0x92>
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	7e1b      	ldrb	r3, [r3, #24]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d003      	beq.n	800ae92 <McpsIndication+0x92>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800ae8a:	4b14      	ldr	r3, [pc, #80]	; (800aedc <McpsIndication+0xdc>)
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae90:	4798      	blx	r3
    }

    // Call packages RxProcess function
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800ae92:	6879      	ldr	r1, [r7, #4]
 800ae94:	2001      	movs	r0, #1
 800ae96:	f000 f945 	bl	800b124 <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass(&deviceClass);
 800ae9a:	f107 0317 	add.w	r3, r7, #23
 800ae9e:	4618      	mov	r0, r3
 800aea0:	f7ff ff1a 	bl	800acd8 <LmHandlerGetCurrentClass>
    if ((mcpsIndication->FramePending == true) && (deviceClass == CLASS_A))
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	795b      	ldrb	r3, [r3, #5]
 800aea8:	2b01      	cmp	r3, #1
 800aeaa:	d111      	bne.n	800aed0 <McpsIndication+0xd0>
 800aeac:	7dfb      	ldrb	r3, [r7, #23]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d10e      	bne.n	800aed0 <McpsIndication+0xd0>
    {
        // The server signals that it has pending data to be sent.
        // We schedule an uplink as soon as possible to flush the server.

        // Send an empty message
        LmHandlerAppData_t appData =
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	733b      	strb	r3, [r7, #12]
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	737b      	strb	r3, [r7, #13]
 800aeba:	2300      	movs	r3, #0
 800aebc:	613b      	str	r3, [r7, #16]
        {
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0
        };
        LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true);
 800aebe:	f107 000c 	add.w	r0, r7, #12
 800aec2:	2301      	movs	r3, #1
 800aec4:	2200      	movs	r2, #0
 800aec6:	2100      	movs	r1, #0
 800aec8:	f7ff fd88 	bl	800a9dc <LmHandlerSend>
 800aecc:	e000      	b.n	800aed0 <McpsIndication+0xd0>
        return;
 800aece:	bf00      	nop
    }
}
 800aed0:	3720      	adds	r7, #32
 800aed2:	46bd      	mov	sp, r7
 800aed4:	bd80      	pop	{r7, pc}
 800aed6:	bf00      	nop
 800aed8:	20000098 	.word	0x20000098
 800aedc:	2000027c 	.word	0x2000027c

0800aee0 <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b08c      	sub	sp, #48	; 0x30
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 800aee8:	4b28      	ldr	r3, [pc, #160]	; (800af8c <MlmeConfirm+0xac>)
 800aeea:	2200      	movs	r2, #0
 800aeec:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	785a      	ldrb	r2, [r3, #1]
 800aef2:	4b26      	ldr	r3, [pc, #152]	; (800af8c <MlmeConfirm+0xac>)
 800aef4:	705a      	strb	r2, [r3, #1]
    LmHandlerCallbacks->OnTxData( &TxParams );
 800aef6:	4b26      	ldr	r3, [pc, #152]	; (800af90 <MlmeConfirm+0xb0>)
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	6a1b      	ldr	r3, [r3, #32]
 800aefc:	4823      	ldr	r0, [pc, #140]	; (800af8c <MlmeConfirm+0xac>)
 800aefe:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800af00:	6879      	ldr	r1, [r7, #4]
 800af02:	2002      	movs	r0, #2
 800af04:	f000 f90e 	bl	800b124 <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	781b      	ldrb	r3, [r3, #0]
 800af0c:	2b0a      	cmp	r3, #10
 800af0e:	d035      	beq.n	800af7c <MlmeConfirm+0x9c>
 800af10:	2b0a      	cmp	r3, #10
 800af12:	dc35      	bgt.n	800af80 <MlmeConfirm+0xa0>
 800af14:	2b01      	cmp	r3, #1
 800af16:	d002      	beq.n	800af1e <MlmeConfirm+0x3e>
 800af18:	2b04      	cmp	r3, #4
 800af1a:	d023      	beq.n	800af64 <MlmeConfirm+0x84>
            }
        }
        break;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    default:
        break;
 800af1c:	e030      	b.n	800af80 <MlmeConfirm+0xa0>
            mibReq.Type = MIB_DEV_ADDR;
 800af1e:	2306      	movs	r3, #6
 800af20:	733b      	strb	r3, [r7, #12]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800af22:	f107 030c 	add.w	r3, r7, #12
 800af26:	4618      	mov	r0, r3
 800af28:	f004 fa30 	bl	800f38c <LoRaMacMibGetRequestConfirm>
            CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800af2c:	693b      	ldr	r3, [r7, #16]
 800af2e:	4a19      	ldr	r2, [pc, #100]	; (800af94 <MlmeConfirm+0xb4>)
 800af30:	6153      	str	r3, [r2, #20]
            LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800af32:	4819      	ldr	r0, [pc, #100]	; (800af98 <MlmeConfirm+0xb8>)
 800af34:	f7ff fef0 	bl	800ad18 <LmHandlerGetTxDatarate>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	785b      	ldrb	r3, [r3, #1]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d108      	bne.n	800af52 <MlmeConfirm+0x72>
                JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800af40:	4b15      	ldr	r3, [pc, #84]	; (800af98 <MlmeConfirm+0xb8>)
 800af42:	2200      	movs	r2, #0
 800af44:	705a      	strb	r2, [r3, #1]
                LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800af46:	4b15      	ldr	r3, [pc, #84]	; (800af9c <MlmeConfirm+0xbc>)
 800af48:	785b      	ldrb	r3, [r3, #1]
 800af4a:	4618      	mov	r0, r3
 800af4c:	f7ff fe32 	bl	800abb4 <LmHandlerRequestClass>
 800af50:	e002      	b.n	800af58 <MlmeConfirm+0x78>
                JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800af52:	4b11      	ldr	r3, [pc, #68]	; (800af98 <MlmeConfirm+0xb8>)
 800af54:	22ff      	movs	r2, #255	; 0xff
 800af56:	705a      	strb	r2, [r3, #1]
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800af58:	4b0d      	ldr	r3, [pc, #52]	; (800af90 <MlmeConfirm+0xb0>)
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	69db      	ldr	r3, [r3, #28]
 800af5e:	480e      	ldr	r0, [pc, #56]	; (800af98 <MlmeConfirm+0xb8>)
 800af60:	4798      	blx	r3
        break;
 800af62:	e00e      	b.n	800af82 <MlmeConfirm+0xa2>
            RxParams.LinkCheck = true;
 800af64:	4b0e      	ldr	r3, [pc, #56]	; (800afa0 <MlmeConfirm+0xc0>)
 800af66:	2201      	movs	r2, #1
 800af68:	735a      	strb	r2, [r3, #13]
            RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	7a1a      	ldrb	r2, [r3, #8]
 800af6e:	4b0c      	ldr	r3, [pc, #48]	; (800afa0 <MlmeConfirm+0xc0>)
 800af70:	739a      	strb	r2, [r3, #14]
            RxParams.NbGateways = mlmeConfirm->NbGateways;
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	7a5a      	ldrb	r2, [r3, #9]
 800af76:	4b0a      	ldr	r3, [pc, #40]	; (800afa0 <MlmeConfirm+0xc0>)
 800af78:	73da      	strb	r2, [r3, #15]
        break;
 800af7a:	e002      	b.n	800af82 <MlmeConfirm+0xa2>
        break;
 800af7c:	bf00      	nop
 800af7e:	e000      	b.n	800af82 <MlmeConfirm+0xa2>
        break;
 800af80:	bf00      	nop
    }
}
 800af82:	bf00      	nop
 800af84:	3730      	adds	r7, #48	; 0x30
 800af86:	46bd      	mov	sp, r7
 800af88:	bd80      	pop	{r7, pc}
 800af8a:	bf00      	nop
 800af8c:	200002a4 	.word	0x200002a4
 800af90:	2000027c 	.word	0x2000027c
 800af94:	20000070 	.word	0x20000070
 800af98:	20000094 	.word	0x20000094
 800af9c:	2000026c 	.word	0x2000026c
 800afa0:	20000098 	.word	0x20000098

0800afa4 <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *RxStatus )
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b084      	sub	sp, #16
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
 800afac:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 800afae:	4b22      	ldr	r3, [pc, #136]	; (800b038 <MlmeIndication+0x94>)
 800afb0:	2200      	movs	r2, #0
 800afb2:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	785a      	ldrb	r2, [r3, #1]
 800afb8:	4b1f      	ldr	r3, [pc, #124]	; (800b038 <MlmeIndication+0x94>)
 800afba:	705a      	strb	r2, [r3, #1]
    RxParams.Rssi = RxStatus->Rssi;
 800afbc:	683b      	ldr	r3, [r7, #0]
 800afbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 800afc2:	b25a      	sxtb	r2, r3
 800afc4:	4b1c      	ldr	r3, [pc, #112]	; (800b038 <MlmeIndication+0x94>)
 800afc6:	70da      	strb	r2, [r3, #3]
    RxParams.Snr = RxStatus->Snr;
 800afc8:	683b      	ldr	r3, [r7, #0]
 800afca:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800afce:	4b1a      	ldr	r3, [pc, #104]	; (800b038 <MlmeIndication+0x94>)
 800afd0:	711a      	strb	r2, [r3, #4]
    RxParams.RxSlot = RxStatus->RxSlot;
 800afd2:	683b      	ldr	r3, [r7, #0]
 800afd4:	78db      	ldrb	r3, [r3, #3]
 800afd6:	b25a      	sxtb	r2, r3
 800afd8:	4b17      	ldr	r3, [pc, #92]	; (800b038 <MlmeIndication+0x94>)
 800afda:	731a      	strb	r2, [r3, #12]
    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_BEACON_LOCKED )
 800afdc:	4b16      	ldr	r3, [pc, #88]	; (800b038 <MlmeIndication+0x94>)
 800afde:	785b      	ldrb	r3, [r3, #1]
 800afe0:	2b0e      	cmp	r3, #14
 800afe2:	d005      	beq.n	800aff0 <MlmeIndication+0x4c>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800afe4:	4b15      	ldr	r3, [pc, #84]	; (800b03c <MlmeIndication+0x98>)
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afea:	4913      	ldr	r1, [pc, #76]	; (800b038 <MlmeIndication+0x94>)
 800afec:	2000      	movs	r0, #0
 800afee:	4798      	blx	r3
    }

    switch( mlmeIndication->MlmeIndication )
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	781b      	ldrb	r3, [r3, #0]
 800aff4:	2b07      	cmp	r3, #7
 800aff6:	d117      	bne.n	800b028 <MlmeIndication+0x84>
    {
    case MLME_SCHEDULE_UPLINK:
        {// The MAC signals that we shall provide an uplink as soon as possible
            // Send an empty message
            LmHandlerAppData_t appData =
 800aff8:	2300      	movs	r3, #0
 800affa:	723b      	strb	r3, [r7, #8]
 800affc:	2300      	movs	r3, #0
 800affe:	727b      	strb	r3, [r7, #9]
 800b000:	2300      	movs	r3, #0
 800b002:	60fb      	str	r3, [r7, #12]
                .Buffer = NULL,
                .BufferSize = 0,
                .Port = 0
            };

            if( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == false )
 800b004:	4b0e      	ldr	r3, [pc, #56]	; (800b040 <MlmeIndication+0x9c>)
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	68db      	ldr	r3, [r3, #12]
 800b00a:	4798      	blx	r3
 800b00c:	4603      	mov	r3, r0
 800b00e:	f083 0301 	eor.w	r3, r3, #1
 800b012:	b2db      	uxtb	r3, r3
 800b014:	2b00      	cmp	r3, #0
 800b016:	d009      	beq.n	800b02c <MlmeIndication+0x88>
            {
                LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true );
 800b018:	f107 0008 	add.w	r0, r7, #8
 800b01c:	2301      	movs	r3, #1
 800b01e:	2200      	movs	r2, #0
 800b020:	2100      	movs	r1, #0
 800b022:	f7ff fcdb 	bl	800a9dc <LmHandlerSend>
            }
        }
        break;
 800b026:	e001      	b.n	800b02c <MlmeIndication+0x88>
            }
        }
        break;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    default:
        break;
 800b028:	bf00      	nop
 800b02a:	e000      	b.n	800b02e <MlmeIndication+0x8a>
        break;
 800b02c:	bf00      	nop
    }
}
 800b02e:	bf00      	nop
 800b030:	3710      	adds	r7, #16
 800b032:	46bd      	mov	sp, r7
 800b034:	bd80      	pop	{r7, pc}
 800b036:	bf00      	nop
 800b038:	20000098 	.word	0x20000098
 800b03c:	2000027c 	.word	0x2000027c
 800b040:	20000258 	.word	0x20000258

0800b044 <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 800b044:	b580      	push	{r7, lr}
 800b046:	b084      	sub	sp, #16
 800b048:	af00      	add	r7, sp, #0
 800b04a:	4603      	mov	r3, r0
 800b04c:	6039      	str	r1, [r7, #0]
 800b04e:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 800b050:	2300      	movs	r3, #0
 800b052:	60fb      	str	r3, [r7, #12]
    switch( id )
 800b054:	79fb      	ldrb	r3, [r7, #7]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d103      	bne.n	800b062 <LmHandlerPackageRegister+0x1e>
    {
        case PACKAGE_ID_COMPLIANCE:
        {
            package = LmhpCompliancePackageFactory( );
 800b05a:	f000 f943 	bl	800b2e4 <LmhpCompliancePackageFactory>
 800b05e:	60f8      	str	r0, [r7, #12]
            break;
 800b060:	e000      	b.n	800b064 <LmHandlerPackageRegister+0x20>
        {
#if (!defined (LORAWAN_DATA_DISTRIB_MGT) || (LORAWAN_DATA_DISTRIB_MGT == 0))
#else /*LORAWAN_DATA_DISTRIB_MGT == 1*/
            LmhpPackagesRegister(id, &package);
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
            break;
 800b062:	bf00      	nop
        }
    }
    if( package != NULL )
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	2b00      	cmp	r3, #0
 800b068:	d02b      	beq.n	800b0c2 <LmHandlerPackageRegister+0x7e>
    {
        LmHandlerPackages[id] = package;
 800b06a:	79fb      	ldrb	r3, [r7, #7]
 800b06c:	4918      	ldr	r1, [pc, #96]	; (800b0d0 <LmHandlerPackageRegister+0x8c>)
 800b06e:	68fa      	ldr	r2, [r7, #12]
 800b070:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800b074:	79fb      	ldrb	r3, [r7, #7]
 800b076:	4a16      	ldr	r2, [pc, #88]	; (800b0d0 <LmHandlerPackageRegister+0x8c>)
 800b078:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b07c:	4a15      	ldr	r2, [pc, #84]	; (800b0d4 <LmHandlerPackageRegister+0x90>)
 800b07e:	625a      	str	r2, [r3, #36]	; 0x24
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 800b080:	79fb      	ldrb	r3, [r7, #7]
 800b082:	4a13      	ldr	r2, [pc, #76]	; (800b0d0 <LmHandlerPackageRegister+0x8c>)
 800b084:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b088:	4a13      	ldr	r2, [pc, #76]	; (800b0d8 <LmHandlerPackageRegister+0x94>)
 800b08a:	629a      	str	r2, [r3, #40]	; 0x28
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800b08c:	79fb      	ldrb	r3, [r7, #7]
 800b08e:	4a10      	ldr	r2, [pc, #64]	; (800b0d0 <LmHandlerPackageRegister+0x8c>)
 800b090:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b094:	4a11      	ldr	r2, [pc, #68]	; (800b0dc <LmHandlerPackageRegister+0x98>)
 800b096:	62da      	str	r2, [r3, #44]	; 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800b098:	4b11      	ldr	r3, [pc, #68]	; (800b0e0 <LmHandlerPackageRegister+0x9c>)
 800b09a:	681a      	ldr	r2, [r3, #0]
 800b09c:	79fb      	ldrb	r3, [r7, #7]
 800b09e:	490c      	ldr	r1, [pc, #48]	; (800b0d0 <LmHandlerPackageRegister+0x8c>)
 800b0a0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b0a4:	6912      	ldr	r2, [r2, #16]
 800b0a6:	615a      	str	r2, [r3, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800b0a8:	79fb      	ldrb	r3, [r7, #7]
 800b0aa:	4a09      	ldr	r2, [pc, #36]	; (800b0d0 <LmHandlerPackageRegister+0x8c>)
 800b0ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b0b0:	685b      	ldr	r3, [r3, #4]
 800b0b2:	4a0c      	ldr	r2, [pc, #48]	; (800b0e4 <LmHandlerPackageRegister+0xa0>)
 800b0b4:	6851      	ldr	r1, [r2, #4]
 800b0b6:	4a0b      	ldr	r2, [pc, #44]	; (800b0e4 <LmHandlerPackageRegister+0xa0>)
 800b0b8:	7852      	ldrb	r2, [r2, #1]
 800b0ba:	6838      	ldr	r0, [r7, #0]
 800b0bc:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 800b0be:	2300      	movs	r3, #0
 800b0c0:	e001      	b.n	800b0c6 <LmHandlerPackageRegister+0x82>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800b0c2:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	3710      	adds	r7, #16
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	bd80      	pop	{r7, pc}
 800b0ce:	bf00      	nop
 800b0d0:	20000258 	.word	0x20000258
 800b0d4:	0800a8f1 	.word	0x0800a8f1
 800b0d8:	0800a9dd 	.word	0x0800a9dd
 800b0dc:	0800ab89 	.word	0x0800ab89
 800b0e0:	2000027c 	.word	0x2000027c
 800b0e4:	200000a8 	.word	0x200000a8

0800b0e8 <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b082      	sub	sp, #8
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	4603      	mov	r3, r0
 800b0f0:	71fb      	strb	r3, [r7, #7]
    if (( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ))
 800b0f2:	79fb      	ldrb	r3, [r7, #7]
 800b0f4:	2b04      	cmp	r3, #4
 800b0f6:	d80e      	bhi.n	800b116 <LmHandlerPackageIsInitialized+0x2e>
 800b0f8:	79fb      	ldrb	r3, [r7, #7]
 800b0fa:	4a09      	ldr	r2, [pc, #36]	; (800b120 <LmHandlerPackageIsInitialized+0x38>)
 800b0fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b100:	689b      	ldr	r3, [r3, #8]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d007      	beq.n	800b116 <LmHandlerPackageIsInitialized+0x2e>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 800b106:	79fb      	ldrb	r3, [r7, #7]
 800b108:	4a05      	ldr	r2, [pc, #20]	; (800b120 <LmHandlerPackageIsInitialized+0x38>)
 800b10a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b10e:	689b      	ldr	r3, [r3, #8]
 800b110:	4798      	blx	r3
 800b112:	4603      	mov	r3, r0
 800b114:	e000      	b.n	800b118 <LmHandlerPackageIsInitialized+0x30>
    }
    else
    {
        return false;
 800b116:	2300      	movs	r3, #0
    }
}
 800b118:	4618      	mov	r0, r3
 800b11a:	3708      	adds	r7, #8
 800b11c:	46bd      	mov	sp, r7
 800b11e:	bd80      	pop	{r7, pc}
 800b120:	20000258 	.word	0x20000258

0800b124 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 800b124:	b580      	push	{r7, lr}
 800b126:	b084      	sub	sp, #16
 800b128:	af00      	add	r7, sp, #0
 800b12a:	4603      	mov	r3, r0
 800b12c:	6039      	str	r1, [r7, #0]
 800b12e:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800b130:	2300      	movs	r3, #0
 800b132:	73fb      	strb	r3, [r7, #15]
 800b134:	e067      	b.n	800b206 <LmHandlerPackagesNotify+0xe2>
    {
        if( LmHandlerPackages[i] != NULL )
 800b136:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b13a:	4a37      	ldr	r2, [pc, #220]	; (800b218 <LmHandlerPackagesNotify+0xf4>)
 800b13c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d051      	beq.n	800b1e8 <LmHandlerPackagesNotify+0xc4>
        {
            switch( notifyType )
 800b144:	79fb      	ldrb	r3, [r7, #7]
 800b146:	2b02      	cmp	r3, #2
 800b148:	d03d      	beq.n	800b1c6 <LmHandlerPackagesNotify+0xa2>
 800b14a:	2b02      	cmp	r3, #2
 800b14c:	dc4e      	bgt.n	800b1ec <LmHandlerPackagesNotify+0xc8>
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d002      	beq.n	800b158 <LmHandlerPackagesNotify+0x34>
 800b152:	2b01      	cmp	r3, #1
 800b154:	d011      	beq.n	800b17a <LmHandlerPackagesNotify+0x56>
                    }
                    break;
                }
                default:
                {
                    break;
 800b156:	e049      	b.n	800b1ec <LmHandlerPackagesNotify+0xc8>
                    if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800b158:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b15c:	4a2e      	ldr	r2, [pc, #184]	; (800b218 <LmHandlerPackagesNotify+0xf4>)
 800b15e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b162:	699b      	ldr	r3, [r3, #24]
 800b164:	2b00      	cmp	r3, #0
 800b166:	d043      	beq.n	800b1f0 <LmHandlerPackagesNotify+0xcc>
                        LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t* ) params );
 800b168:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b16c:	4a2a      	ldr	r2, [pc, #168]	; (800b218 <LmHandlerPackagesNotify+0xf4>)
 800b16e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b172:	699b      	ldr	r3, [r3, #24]
 800b174:	6838      	ldr	r0, [r7, #0]
 800b176:	4798      	blx	r3
                    break;
 800b178:	e03a      	b.n	800b1f0 <LmHandlerPackagesNotify+0xcc>
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800b17a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b17e:	4a26      	ldr	r2, [pc, #152]	; (800b218 <LmHandlerPackagesNotify+0xf4>)
 800b180:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b184:	69db      	ldr	r3, [r3, #28]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d034      	beq.n	800b1f4 <LmHandlerPackagesNotify+0xd0>
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 800b18a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b18e:	4a22      	ldr	r2, [pc, #136]	; (800b218 <LmHandlerPackagesNotify+0xf4>)
 800b190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b194:	781a      	ldrb	r2, [r3, #0]
 800b196:	683b      	ldr	r3, [r7, #0]
 800b198:	78db      	ldrb	r3, [r3, #3]
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800b19a:	429a      	cmp	r2, r3
 800b19c:	d00a      	beq.n	800b1b4 <LmHandlerPackagesNotify+0x90>
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 800b19e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d126      	bne.n	800b1f4 <LmHandlerPackagesNotify+0xd0>
                          ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ))))
 800b1a6:	4b1c      	ldr	r3, [pc, #112]	; (800b218 <LmHandlerPackagesNotify+0xf4>)
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	68db      	ldr	r3, [r3, #12]
 800b1ac:	4798      	blx	r3
 800b1ae:	4603      	mov	r3, r0
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d01f      	beq.n	800b1f4 <LmHandlerPackagesNotify+0xd0>
                        LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t* )params );
 800b1b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b1b8:	4a17      	ldr	r2, [pc, #92]	; (800b218 <LmHandlerPackagesNotify+0xf4>)
 800b1ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b1be:	69db      	ldr	r3, [r3, #28]
 800b1c0:	6838      	ldr	r0, [r7, #0]
 800b1c2:	4798      	blx	r3
                    break;
 800b1c4:	e016      	b.n	800b1f4 <LmHandlerPackagesNotify+0xd0>
                    if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800b1c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b1ca:	4a13      	ldr	r2, [pc, #76]	; (800b218 <LmHandlerPackagesNotify+0xf4>)
 800b1cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b1d0:	6a1b      	ldr	r3, [r3, #32]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d010      	beq.n	800b1f8 <LmHandlerPackagesNotify+0xd4>
                        LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t* )params );
 800b1d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b1da:	4a0f      	ldr	r2, [pc, #60]	; (800b218 <LmHandlerPackagesNotify+0xf4>)
 800b1dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b1e0:	6a1b      	ldr	r3, [r3, #32]
 800b1e2:	6838      	ldr	r0, [r7, #0]
 800b1e4:	4798      	blx	r3
                    break;
 800b1e6:	e007      	b.n	800b1f8 <LmHandlerPackagesNotify+0xd4>
                }
            }
        }
 800b1e8:	bf00      	nop
 800b1ea:	e006      	b.n	800b1fa <LmHandlerPackagesNotify+0xd6>
                    break;
 800b1ec:	bf00      	nop
 800b1ee:	e004      	b.n	800b1fa <LmHandlerPackagesNotify+0xd6>
                    break;
 800b1f0:	bf00      	nop
 800b1f2:	e002      	b.n	800b1fa <LmHandlerPackagesNotify+0xd6>
                    break;
 800b1f4:	bf00      	nop
 800b1f6:	e000      	b.n	800b1fa <LmHandlerPackagesNotify+0xd6>
                    break;
 800b1f8:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800b1fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b1fe:	b2db      	uxtb	r3, r3
 800b200:	3301      	adds	r3, #1
 800b202:	b2db      	uxtb	r3, r3
 800b204:	73fb      	strb	r3, [r7, #15]
 800b206:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b20a:	2b04      	cmp	r3, #4
 800b20c:	dd93      	ble.n	800b136 <LmHandlerPackagesNotify+0x12>
    }
}
 800b20e:	bf00      	nop
 800b210:	bf00      	nop
 800b212:	3710      	adds	r7, #16
 800b214:	46bd      	mov	sp, r7
 800b216:	bd80      	pop	{r7, pc}
 800b218:	20000258 	.word	0x20000258

0800b21c <LmHandlerPackagesProcess>:

static void LmHandlerPackagesProcess( void )
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	b082      	sub	sp, #8
 800b220:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800b222:	2300      	movs	r3, #0
 800b224:	71fb      	strb	r3, [r7, #7]
 800b226:	e022      	b.n	800b26e <LmHandlerPackagesProcess+0x52>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 800b228:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b22c:	4a14      	ldr	r2, [pc, #80]	; (800b280 <LmHandlerPackagesProcess+0x64>)
 800b22e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d015      	beq.n	800b262 <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800b236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b23a:	4a11      	ldr	r2, [pc, #68]	; (800b280 <LmHandlerPackagesProcess+0x64>)
 800b23c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b240:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 800b242:	2b00      	cmp	r3, #0
 800b244:	d00d      	beq.n	800b262 <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 800b246:	79fb      	ldrb	r3, [r7, #7]
 800b248:	4618      	mov	r0, r3
 800b24a:	f7ff ff4d 	bl	800b0e8 <LmHandlerPackageIsInitialized>
 800b24e:	4603      	mov	r3, r0
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800b250:	2b00      	cmp	r3, #0
 800b252:	d006      	beq.n	800b262 <LmHandlerPackagesProcess+0x46>
        {
            LmHandlerPackages[i]->Process( );
 800b254:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b258:	4a09      	ldr	r2, [pc, #36]	; (800b280 <LmHandlerPackagesProcess+0x64>)
 800b25a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b25e:	691b      	ldr	r3, [r3, #16]
 800b260:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800b262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b266:	b2db      	uxtb	r3, r3
 800b268:	3301      	adds	r3, #1
 800b26a:	b2db      	uxtb	r3, r3
 800b26c:	71fb      	strb	r3, [r7, #7]
 800b26e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b272:	2b04      	cmp	r3, #4
 800b274:	ddd8      	ble.n	800b228 <LmHandlerPackagesProcess+0xc>
        }
    }
}
 800b276:	bf00      	nop
 800b278:	bf00      	nop
 800b27a:	3708      	adds	r7, #8
 800b27c:	46bd      	mov	sp, r7
 800b27e:	bd80      	pop	{r7, pc}
 800b280:	20000258 	.word	0x20000258

0800b284 <DisplayClassUpdate>:
        return LORAMAC_HANDLER_ERROR;
    }
}

static void DisplayClassUpdate(DeviceClass_t deviceClass)
{
 800b284:	b580      	push	{r7, lr}
 800b286:	b084      	sub	sp, #16
 800b288:	af02      	add	r7, sp, #8
 800b28a:	4603      	mov	r3, r0
 800b28c:	71fb      	strb	r3, [r7, #7]
    MW_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 800b28e:	79fb      	ldrb	r3, [r7, #7]
 800b290:	4a06      	ldr	r2, [pc, #24]	; (800b2ac <DisplayClassUpdate+0x28>)
 800b292:	5cd3      	ldrb	r3, [r2, r3]
 800b294:	9300      	str	r3, [sp, #0]
 800b296:	4b06      	ldr	r3, [pc, #24]	; (800b2b0 <DisplayClassUpdate+0x2c>)
 800b298:	2200      	movs	r2, #0
 800b29a:	2100      	movs	r1, #0
 800b29c:	2002      	movs	r0, #2
 800b29e:	f00d fc6f 	bl	8018b80 <UTIL_ADV_TRACE_COND_FSend>
}
 800b2a2:	bf00      	nop
 800b2a4:	3708      	adds	r7, #8
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	bd80      	pop	{r7, pc}
 800b2aa:	bf00      	nop
 800b2ac:	080195fc 	.word	0x080195fc
 800b2b0:	080195e0 	.word	0x080195e0

0800b2b4 <NvmDataMgmtEvent>:

static uint16_t NvmNotifyFlags = 0;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 800b2b4:	b480      	push	{r7}
 800b2b6:	b083      	sub	sp, #12
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	4603      	mov	r3, r0
 800b2bc:	80fb      	strh	r3, [r7, #6]
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags = notifyFlags;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800b2be:	bf00      	nop
 800b2c0:	370c      	adds	r7, #12
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	bc80      	pop	{r7}
 800b2c6:	4770      	bx	lr

0800b2c8 <NvmDataMgmtStore>:

uint16_t NvmDataMgmtStore( void )
{
 800b2c8:	b480      	push	{r7}
 800b2ca:	af00      	add	r7, sp, #0

    // Resume LoRaMac
    LoRaMacStart( );
    return dataSize;
#else
    return 0;
 800b2cc:	2300      	movs	r3, #0
#endif
}
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	bc80      	pop	{r7}
 800b2d4:	4770      	bx	lr

0800b2d6 <NvmDataMgmtRestore>:

uint16_t NvmDataMgmtRestore( void )
{
 800b2d6:	b480      	push	{r7}
 800b2d8:	af00      	add	r7, sp, #0
                  sizeof( LoRaMacNvmData_t ) )
    {
        return sizeof( LoRaMacNvmData_t );
    }
#endif
    return 0;
 800b2da:	2300      	movs	r3, #0
}
 800b2dc:	4618      	mov	r0, r3
 800b2de:	46bd      	mov	sp, r7
 800b2e0:	bc80      	pop	{r7}
 800b2e2:	4770      	bx	lr

0800b2e4 <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate = NULL,                                   // To be initialized by LmHandler
    .OnPackageProcessEvent = NULL,                             // To be initialized by LmHandler
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 800b2e4:	b480      	push	{r7}
 800b2e6:	af00      	add	r7, sp, #0
    return &LmhpCompliancePackage;
 800b2e8:	4b02      	ldr	r3, [pc, #8]	; (800b2f4 <LmhpCompliancePackageFactory+0x10>)
}
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	bc80      	pop	{r7}
 800b2f0:	4770      	bx	lr
 800b2f2:	bf00      	nop
 800b2f4:	200000b0 	.word	0x200000b0

0800b2f8 <LmhpComplianceInit>:

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
 800b2f8:	b480      	push	{r7}
 800b2fa:	b085      	sub	sp, #20
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	60f8      	str	r0, [r7, #12]
 800b300:	60b9      	str	r1, [r7, #8]
 800b302:	4613      	mov	r3, r2
 800b304:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d00f      	beq.n	800b32c <LmhpComplianceInit+0x34>
 800b30c:	68bb      	ldr	r3, [r7, #8]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d00c      	beq.n	800b32c <LmhpComplianceInit+0x34>
    {
        LmhpComplianceParams = ( LmhpComplianceParams_t* )params;
 800b312:	4a0c      	ldr	r2, [pc, #48]	; (800b344 <LmhpComplianceInit+0x4c>)
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer = dataBuffer;
 800b318:	4a0b      	ldr	r2, [pc, #44]	; (800b348 <LmhpComplianceInit+0x50>)
 800b31a:	68bb      	ldr	r3, [r7, #8]
 800b31c:	6093      	str	r3, [r2, #8]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800b31e:	4a0a      	ldr	r2, [pc, #40]	; (800b348 <LmhpComplianceInit+0x50>)
 800b320:	79fb      	ldrb	r3, [r7, #7]
 800b322:	7153      	strb	r3, [r2, #5]
        ComplianceTestState.Initialized = true;
 800b324:	4b08      	ldr	r3, [pc, #32]	; (800b348 <LmhpComplianceInit+0x50>)
 800b326:	2201      	movs	r2, #1
 800b328:	701a      	strb	r2, [r3, #0]
 800b32a:	e006      	b.n	800b33a <LmhpComplianceInit+0x42>
    }
    else
    {
        LmhpComplianceParams = NULL;
 800b32c:	4b05      	ldr	r3, [pc, #20]	; (800b344 <LmhpComplianceInit+0x4c>)
 800b32e:	2200      	movs	r2, #0
 800b330:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 800b332:	4b05      	ldr	r3, [pc, #20]	; (800b348 <LmhpComplianceInit+0x50>)
 800b334:	2200      	movs	r2, #0
 800b336:	701a      	strb	r2, [r3, #0]
    }
}
 800b338:	bf00      	nop
 800b33a:	bf00      	nop
 800b33c:	3714      	adds	r7, #20
 800b33e:	46bd      	mov	sp, r7
 800b340:	bc80      	pop	{r7}
 800b342:	4770      	bx	lr
 800b344:	200003dc 	.word	0x200003dc
 800b348:	200003c8 	.word	0x200003c8

0800b34c <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 800b34c:	b480      	push	{r7}
 800b34e:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 800b350:	4b02      	ldr	r3, [pc, #8]	; (800b35c <LmhpComplianceIsInitialized+0x10>)
 800b352:	781b      	ldrb	r3, [r3, #0]
}
 800b354:	4618      	mov	r0, r3
 800b356:	46bd      	mov	sp, r7
 800b358:	bc80      	pop	{r7}
 800b35a:	4770      	bx	lr
 800b35c:	200003c8 	.word	0x200003c8

0800b360 <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning( void )
{
 800b360:	b480      	push	{r7}
 800b362:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 800b364:	4b07      	ldr	r3, [pc, #28]	; (800b384 <LmhpComplianceIsRunning+0x24>)
 800b366:	781b      	ldrb	r3, [r3, #0]
 800b368:	f083 0301 	eor.w	r3, r3, #1
 800b36c:	b2db      	uxtb	r3, r3
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d001      	beq.n	800b376 <LmhpComplianceIsRunning+0x16>
    {
        return false;
 800b372:	2300      	movs	r3, #0
 800b374:	e001      	b.n	800b37a <LmhpComplianceIsRunning+0x1a>
    }

    return ComplianceTestState.IsRunning;
 800b376:	4b03      	ldr	r3, [pc, #12]	; (800b384 <LmhpComplianceIsRunning+0x24>)
 800b378:	785b      	ldrb	r3, [r3, #1]
}
 800b37a:	4618      	mov	r0, r3
 800b37c:	46bd      	mov	sp, r7
 800b37e:	bc80      	pop	{r7}
 800b380:	4770      	bx	lr
 800b382:	bf00      	nop
 800b384:	200003c8 	.word	0x200003c8

0800b388 <LmhpComplianceOnMcpsConfirm>:

static void LmhpComplianceOnMcpsConfirm(McpsConfirm_t *mcpsConfirm)
{
 800b388:	b480      	push	{r7}
 800b38a:	b083      	sub	sp, #12
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
    if (ComplianceTestState.Initialized == false)
 800b390:	4b0f      	ldr	r3, [pc, #60]	; (800b3d0 <LmhpComplianceOnMcpsConfirm+0x48>)
 800b392:	781b      	ldrb	r3, [r3, #0]
 800b394:	f083 0301 	eor.w	r3, r3, #1
 800b398:	b2db      	uxtb	r3, r3
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d112      	bne.n	800b3c4 <LmhpComplianceOnMcpsConfirm+0x3c>
    {
        return;
    }

    if ((ComplianceTestState.IsRunning == true) &&
 800b39e:	4b0c      	ldr	r3, [pc, #48]	; (800b3d0 <LmhpComplianceOnMcpsConfirm+0x48>)
 800b3a0:	785b      	ldrb	r3, [r3, #1]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d00f      	beq.n	800b3c6 <LmhpComplianceOnMcpsConfirm+0x3e>
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	781b      	ldrb	r3, [r3, #0]
    if ((ComplianceTestState.IsRunning == true) &&
 800b3aa:	2b01      	cmp	r3, #1
 800b3ac:	d10b      	bne.n	800b3c6 <LmhpComplianceOnMcpsConfirm+0x3e>
        (mcpsConfirm->AckReceived != 0))
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	791b      	ldrb	r3, [r3, #4]
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d007      	beq.n	800b3c6 <LmhpComplianceOnMcpsConfirm+0x3e>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 800b3b6:	4b06      	ldr	r3, [pc, #24]	; (800b3d0 <LmhpComplianceOnMcpsConfirm+0x48>)
 800b3b8:	899b      	ldrh	r3, [r3, #12]
 800b3ba:	3301      	adds	r3, #1
 800b3bc:	b29a      	uxth	r2, r3
 800b3be:	4b04      	ldr	r3, [pc, #16]	; (800b3d0 <LmhpComplianceOnMcpsConfirm+0x48>)
 800b3c0:	819a      	strh	r2, [r3, #12]
 800b3c2:	e000      	b.n	800b3c6 <LmhpComplianceOnMcpsConfirm+0x3e>
        return;
 800b3c4:	bf00      	nop
    }
}
 800b3c6:	370c      	adds	r7, #12
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	bc80      	pop	{r7}
 800b3cc:	4770      	bx	lr
 800b3ce:	bf00      	nop
 800b3d0:	200003c8 	.word	0x200003c8

0800b3d4 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800b3d4:	b480      	push	{r7}
 800b3d6:	b083      	sub	sp, #12
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800b3dc:	4b12      	ldr	r3, [pc, #72]	; (800b428 <LmhpComplianceOnMlmeConfirm+0x54>)
 800b3de:	781b      	ldrb	r3, [r3, #0]
 800b3e0:	f083 0301 	eor.w	r3, r3, #1
 800b3e4:	b2db      	uxtb	r3, r3
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d116      	bne.n	800b418 <LmhpComplianceOnMlmeConfirm+0x44>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 800b3ea:	4b0f      	ldr	r3, [pc, #60]	; (800b428 <LmhpComplianceOnMlmeConfirm+0x54>)
 800b3ec:	785b      	ldrb	r3, [r3, #1]
 800b3ee:	f083 0301 	eor.w	r3, r3, #1
 800b3f2:	b2db      	uxtb	r3, r3
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d111      	bne.n	800b41c <LmhpComplianceOnMlmeConfirm+0x48>
    {
        return;
    }

    if( mlmeConfirm->MlmeRequest == MLME_LINK_CHECK )
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	781b      	ldrb	r3, [r3, #0]
 800b3fc:	2b04      	cmp	r3, #4
 800b3fe:	d10e      	bne.n	800b41e <LmhpComplianceOnMlmeConfirm+0x4a>
    {
        ComplianceTestState.LinkCheck = true;
 800b400:	4b09      	ldr	r3, [pc, #36]	; (800b428 <LmhpComplianceOnMlmeConfirm+0x54>)
 800b402:	2201      	movs	r2, #1
 800b404:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	7a1a      	ldrb	r2, [r3, #8]
 800b40a:	4b07      	ldr	r3, [pc, #28]	; (800b428 <LmhpComplianceOnMlmeConfirm+0x54>)
 800b40c:	73da      	strb	r2, [r3, #15]
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	7a5a      	ldrb	r2, [r3, #9]
 800b412:	4b05      	ldr	r3, [pc, #20]	; (800b428 <LmhpComplianceOnMlmeConfirm+0x54>)
 800b414:	741a      	strb	r2, [r3, #16]
 800b416:	e002      	b.n	800b41e <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 800b418:	bf00      	nop
 800b41a:	e000      	b.n	800b41e <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 800b41c:	bf00      	nop
    }
}
 800b41e:	370c      	adds	r7, #12
 800b420:	46bd      	mov	sp, r7
 800b422:	bc80      	pop	{r7}
 800b424:	4770      	bx	lr
 800b426:	bf00      	nop
 800b428:	200003c8 	.word	0x200003c8

0800b42c <LmhpComplianceTxProcess>:

static LmHandlerErrorStatus_t LmhpComplianceTxProcess( void )
{
 800b42c:	b590      	push	{r4, r7, lr}
 800b42e:	b083      	sub	sp, #12
 800b430:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 800b432:	4b33      	ldr	r3, [pc, #204]	; (800b500 <LmhpComplianceTxProcess+0xd4>)
 800b434:	781b      	ldrb	r3, [r3, #0]
 800b436:	f083 0301 	eor.w	r3, r3, #1
 800b43a:	b2db      	uxtb	r3, r3
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d002      	beq.n	800b446 <LmhpComplianceTxProcess+0x1a>
    {
        return LORAMAC_HANDLER_ERROR;
 800b440:	f04f 33ff 	mov.w	r3, #4294967295
 800b444:	e058      	b.n	800b4f8 <LmhpComplianceTxProcess+0xcc>
    }

    if( ComplianceTestState.IsRunning == false )
 800b446:	4b2e      	ldr	r3, [pc, #184]	; (800b500 <LmhpComplianceTxProcess+0xd4>)
 800b448:	785b      	ldrb	r3, [r3, #1]
 800b44a:	f083 0301 	eor.w	r3, r3, #1
 800b44e:	b2db      	uxtb	r3, r3
 800b450:	2b00      	cmp	r3, #0
 800b452:	d001      	beq.n	800b458 <LmhpComplianceTxProcess+0x2c>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800b454:	2300      	movs	r3, #0
 800b456:	e04f      	b.n	800b4f8 <LmhpComplianceTxProcess+0xcc>
    }

    if( ComplianceTestState.LinkCheck == true )
 800b458:	4b29      	ldr	r3, [pc, #164]	; (800b500 <LmhpComplianceTxProcess+0xd4>)
 800b45a:	7b9b      	ldrb	r3, [r3, #14]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d019      	beq.n	800b494 <LmhpComplianceTxProcess+0x68>
    {
        ComplianceTestState.LinkCheck = false;
 800b460:	4b27      	ldr	r3, [pc, #156]	; (800b500 <LmhpComplianceTxProcess+0xd4>)
 800b462:	2200      	movs	r2, #0
 800b464:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DataBufferSize = 3;
 800b466:	4b26      	ldr	r3, [pc, #152]	; (800b500 <LmhpComplianceTxProcess+0xd4>)
 800b468:	2203      	movs	r2, #3
 800b46a:	719a      	strb	r2, [r3, #6]
        ComplianceTestState.DataBuffer[0] = 5;
 800b46c:	4b24      	ldr	r3, [pc, #144]	; (800b500 <LmhpComplianceTxProcess+0xd4>)
 800b46e:	689b      	ldr	r3, [r3, #8]
 800b470:	2205      	movs	r2, #5
 800b472:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 800b474:	4b22      	ldr	r3, [pc, #136]	; (800b500 <LmhpComplianceTxProcess+0xd4>)
 800b476:	689b      	ldr	r3, [r3, #8]
 800b478:	3301      	adds	r3, #1
 800b47a:	4a21      	ldr	r2, [pc, #132]	; (800b500 <LmhpComplianceTxProcess+0xd4>)
 800b47c:	7bd2      	ldrb	r2, [r2, #15]
 800b47e:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 800b480:	4b1f      	ldr	r3, [pc, #124]	; (800b500 <LmhpComplianceTxProcess+0xd4>)
 800b482:	689b      	ldr	r3, [r3, #8]
 800b484:	3302      	adds	r3, #2
 800b486:	4a1e      	ldr	r2, [pc, #120]	; (800b500 <LmhpComplianceTxProcess+0xd4>)
 800b488:	7c12      	ldrb	r2, [r2, #16]
 800b48a:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.State = 1;
 800b48c:	4b1c      	ldr	r3, [pc, #112]	; (800b500 <LmhpComplianceTxProcess+0xd4>)
 800b48e:	2201      	movs	r2, #1
 800b490:	709a      	strb	r2, [r3, #2]
 800b492:	e01c      	b.n	800b4ce <LmhpComplianceTxProcess+0xa2>
    }
    else
    {
        switch( ComplianceTestState.State )
 800b494:	4b1a      	ldr	r3, [pc, #104]	; (800b500 <LmhpComplianceTxProcess+0xd4>)
 800b496:	789b      	ldrb	r3, [r3, #2]
 800b498:	2b01      	cmp	r3, #1
 800b49a:	d005      	beq.n	800b4a8 <LmhpComplianceTxProcess+0x7c>
 800b49c:	2b04      	cmp	r3, #4
 800b49e:	d116      	bne.n	800b4ce <LmhpComplianceTxProcess+0xa2>
        {
        case 4:
            ComplianceTestState.State = 1;
 800b4a0:	4b17      	ldr	r3, [pc, #92]	; (800b500 <LmhpComplianceTxProcess+0xd4>)
 800b4a2:	2201      	movs	r2, #1
 800b4a4:	709a      	strb	r2, [r3, #2]
            break;
 800b4a6:	e012      	b.n	800b4ce <LmhpComplianceTxProcess+0xa2>
        case 1:
            ComplianceTestState.DataBufferSize = 2;
 800b4a8:	4b15      	ldr	r3, [pc, #84]	; (800b500 <LmhpComplianceTxProcess+0xd4>)
 800b4aa:	2202      	movs	r2, #2
 800b4ac:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 800b4ae:	4b14      	ldr	r3, [pc, #80]	; (800b500 <LmhpComplianceTxProcess+0xd4>)
 800b4b0:	899b      	ldrh	r3, [r3, #12]
 800b4b2:	0a1b      	lsrs	r3, r3, #8
 800b4b4:	b29a      	uxth	r2, r3
 800b4b6:	4b12      	ldr	r3, [pc, #72]	; (800b500 <LmhpComplianceTxProcess+0xd4>)
 800b4b8:	689b      	ldr	r3, [r3, #8]
 800b4ba:	b2d2      	uxtb	r2, r2
 800b4bc:	701a      	strb	r2, [r3, #0]
            ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 800b4be:	4b10      	ldr	r3, [pc, #64]	; (800b500 <LmhpComplianceTxProcess+0xd4>)
 800b4c0:	899a      	ldrh	r2, [r3, #12]
 800b4c2:	4b0f      	ldr	r3, [pc, #60]	; (800b500 <LmhpComplianceTxProcess+0xd4>)
 800b4c4:	689b      	ldr	r3, [r3, #8]
 800b4c6:	3301      	adds	r3, #1
 800b4c8:	b2d2      	uxtb	r2, r2
 800b4ca:	701a      	strb	r2, [r3, #0]
            break;
 800b4cc:	bf00      	nop
        }
    }

    LmHandlerAppData_t appData =
 800b4ce:	23e0      	movs	r3, #224	; 0xe0
 800b4d0:	703b      	strb	r3, [r7, #0]
    {
        .Buffer = ComplianceTestState.DataBuffer,
        .BufferSize = ComplianceTestState.DataBufferSize,
 800b4d2:	4b0b      	ldr	r3, [pc, #44]	; (800b500 <LmhpComplianceTxProcess+0xd4>)
 800b4d4:	799b      	ldrb	r3, [r3, #6]
    LmHandlerAppData_t appData =
 800b4d6:	707b      	strb	r3, [r7, #1]
        .Buffer = ComplianceTestState.DataBuffer,
 800b4d8:	4b09      	ldr	r3, [pc, #36]	; (800b500 <LmhpComplianceTxProcess+0xd4>)
 800b4da:	689b      	ldr	r3, [r3, #8]
    LmHandlerAppData_t appData =
 800b4dc:	607b      	str	r3, [r7, #4]
        .Port = COMPLIANCE_PORT
    };

    // Schedule next transmission
    TimerStart( &ComplianceTxNextPacketTimer );
 800b4de:	4809      	ldr	r0, [pc, #36]	; (800b504 <LmhpComplianceTxProcess+0xd8>)
 800b4e0:	f00d f8d6 	bl	8018690 <UTIL_TIMER_Start>

    return LmhpCompliancePackage.OnSendRequest( &appData, ( LmHandlerMsgTypes_t )ComplianceTestState.IsTxConfirmed, NULL, true );
 800b4e4:	4b08      	ldr	r3, [pc, #32]	; (800b508 <LmhpComplianceTxProcess+0xdc>)
 800b4e6:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800b4e8:	4b05      	ldr	r3, [pc, #20]	; (800b500 <LmhpComplianceTxProcess+0xd4>)
 800b4ea:	78db      	ldrb	r3, [r3, #3]
 800b4ec:	4619      	mov	r1, r3
 800b4ee:	4638      	mov	r0, r7
 800b4f0:	2301      	movs	r3, #1
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	47a0      	blx	r4
 800b4f6:	4603      	mov	r3, r0
}
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	370c      	adds	r7, #12
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	bd90      	pop	{r4, r7, pc}
 800b500:	200003c8 	.word	0x200003c8
 800b504:	200003b0 	.word	0x200003b0
 800b508:	200000b0 	.word	0x200000b0

0800b50c <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t* mcpsIndication )
{
 800b50c:	b580      	push	{r7, lr}
 800b50e:	b0a2      	sub	sp, #136	; 0x88
 800b510:	af02      	add	r7, sp, #8
 800b512:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800b514:	4bae      	ldr	r3, [pc, #696]	; (800b7d0 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800b516:	781b      	ldrb	r3, [r3, #0]
 800b518:	f083 0301 	eor.w	r3, r3, #1
 800b51c:	b2db      	uxtb	r3, r3
 800b51e:	2b00      	cmp	r3, #0
 800b520:	f040 81c0 	bne.w	800b8a4 <LmhpComplianceOnMcpsIndication+0x398>
    {
        return;
    }

    if( mcpsIndication->RxData == false )
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	7b5b      	ldrb	r3, [r3, #13]
 800b528:	f083 0301 	eor.w	r3, r3, #1
 800b52c:	b2db      	uxtb	r3, r3
 800b52e:	2b00      	cmp	r3, #0
 800b530:	f040 81ba 	bne.w	800b8a8 <LmhpComplianceOnMcpsIndication+0x39c>
    {
        return;
    }

    if ((ComplianceTestState.IsRunning == true) &&
 800b534:	4ba6      	ldr	r3, [pc, #664]	; (800b7d0 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800b536:	785b      	ldrb	r3, [r3, #1]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d00c      	beq.n	800b556 <LmhpComplianceOnMcpsIndication+0x4a>
        (mcpsIndication->AckReceived == 0))
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	7b9b      	ldrb	r3, [r3, #14]
 800b540:	f083 0301 	eor.w	r3, r3, #1
 800b544:	b2db      	uxtb	r3, r3
    if ((ComplianceTestState.IsRunning == true) &&
 800b546:	2b00      	cmp	r3, #0
 800b548:	d005      	beq.n	800b556 <LmhpComplianceOnMcpsIndication+0x4a>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 800b54a:	4ba1      	ldr	r3, [pc, #644]	; (800b7d0 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800b54c:	899b      	ldrh	r3, [r3, #12]
 800b54e:	3301      	adds	r3, #1
 800b550:	b29a      	uxth	r2, r3
 800b552:	4b9f      	ldr	r3, [pc, #636]	; (800b7d0 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800b554:	819a      	strh	r2, [r3, #12]
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	78db      	ldrb	r3, [r3, #3]
 800b55a:	2be0      	cmp	r3, #224	; 0xe0
 800b55c:	f040 81a6 	bne.w	800b8ac <LmhpComplianceOnMcpsIndication+0x3a0>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 800b560:	4b9b      	ldr	r3, [pc, #620]	; (800b7d0 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800b562:	785b      	ldrb	r3, [r3, #1]
 800b564:	f083 0301 	eor.w	r3, r3, #1
 800b568:	b2db      	uxtb	r3, r3
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d060      	beq.n	800b630 <LmhpComplianceOnMcpsIndication+0x124>
    {
        // Check compliance test enable command (i)
        if( ( mcpsIndication->BufferSize == 4 ) &&
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	7b1b      	ldrb	r3, [r3, #12]
 800b572:	2b04      	cmp	r3, #4
 800b574:	f040 819f 	bne.w	800b8b6 <LmhpComplianceOnMcpsIndication+0x3aa>
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	689b      	ldr	r3, [r3, #8]
 800b57c:	781b      	ldrb	r3, [r3, #0]
        if( ( mcpsIndication->BufferSize == 4 ) &&
 800b57e:	2b01      	cmp	r3, #1
 800b580:	f040 8199 	bne.w	800b8b6 <LmhpComplianceOnMcpsIndication+0x3aa>
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	689b      	ldr	r3, [r3, #8]
 800b588:	3301      	adds	r3, #1
 800b58a:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800b58c:	2b01      	cmp	r3, #1
 800b58e:	f040 8192 	bne.w	800b8b6 <LmhpComplianceOnMcpsIndication+0x3aa>
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	689b      	ldr	r3, [r3, #8]
 800b596:	3302      	adds	r3, #2
 800b598:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 800b59a:	2b01      	cmp	r3, #1
 800b59c:	f040 818b 	bne.w	800b8b6 <LmhpComplianceOnMcpsIndication+0x3aa>
            ( mcpsIndication->Buffer[3] == 0x01 ) )
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	689b      	ldr	r3, [r3, #8]
 800b5a4:	3303      	adds	r3, #3
 800b5a6:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 800b5a8:	2b01      	cmp	r3, #1
 800b5aa:	f040 8184 	bne.w	800b8b6 <LmhpComplianceOnMcpsIndication+0x3aa>
        {
            MibRequestConfirm_t mibReq;

            // Initialize compliance test mode context
            ComplianceTestState.IsTxConfirmed = false;
 800b5ae:	4b88      	ldr	r3, [pc, #544]	; (800b7d0 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800b5b0:	2200      	movs	r2, #0
 800b5b2:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.Port = 224;
 800b5b4:	4b86      	ldr	r3, [pc, #536]	; (800b7d0 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800b5b6:	22e0      	movs	r2, #224	; 0xe0
 800b5b8:	711a      	strb	r2, [r3, #4]
            ComplianceTestState.DataBufferSize = 2;
 800b5ba:	4b85      	ldr	r3, [pc, #532]	; (800b7d0 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800b5bc:	2202      	movs	r2, #2
 800b5be:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DownLinkCounter = 0;
 800b5c0:	4b83      	ldr	r3, [pc, #524]	; (800b7d0 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	819a      	strh	r2, [r3, #12]
            ComplianceTestState.LinkCheck = false;
 800b5c6:	4b82      	ldr	r3, [pc, #520]	; (800b7d0 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	739a      	strb	r2, [r3, #14]
            ComplianceTestState.DemodMargin = 0;
 800b5cc:	4b80      	ldr	r3, [pc, #512]	; (800b7d0 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	73da      	strb	r2, [r3, #15]
            ComplianceTestState.NbGateways = 0;
 800b5d2:	4b7f      	ldr	r3, [pc, #508]	; (800b7d0 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	741a      	strb	r2, [r3, #16]
            ComplianceTestState.IsRunning = true;
 800b5d8:	4b7d      	ldr	r3, [pc, #500]	; (800b7d0 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800b5da:	2201      	movs	r2, #1
 800b5dc:	705a      	strb	r2, [r3, #1]
            ComplianceTestState.State = 1;
 800b5de:	4b7c      	ldr	r3, [pc, #496]	; (800b7d0 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800b5e0:	2201      	movs	r2, #1
 800b5e2:	709a      	strb	r2, [r3, #2]

            // Enable ADR while in compliance test mode
            mibReq.Type = MIB_ADR;
 800b5e4:	2304      	movs	r3, #4
 800b5e6:	723b      	strb	r3, [r7, #8]
            mibReq.Param.AdrEnable = true;
 800b5e8:	2301      	movs	r3, #1
 800b5ea:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800b5ec:	f107 0308 	add.w	r3, r7, #8
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	f004 f829 	bl	800f648 <LoRaMacMibSetRequestConfirm>

            // Disable duty cycle enforcement while in compliance test mode
            LoRaMacTestSetDutyCycleOn( false );
 800b5f6:	2000      	movs	r0, #0
 800b5f8:	f004 fd9a 	bl	8010130 <LoRaMacTestSetDutyCycleOn>

            // Stop peripherals
            if( LmhpComplianceParams->StopPeripherals != NULL )
 800b5fc:	4b75      	ldr	r3, [pc, #468]	; (800b7d4 <LmhpComplianceOnMcpsIndication+0x2c8>)
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	685b      	ldr	r3, [r3, #4]
 800b602:	2b00      	cmp	r3, #0
 800b604:	d003      	beq.n	800b60e <LmhpComplianceOnMcpsIndication+0x102>
            {
                LmhpComplianceParams->StopPeripherals( );
 800b606:	4b73      	ldr	r3, [pc, #460]	; (800b7d4 <LmhpComplianceOnMcpsIndication+0x2c8>)
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	685b      	ldr	r3, [r3, #4]
 800b60c:	4798      	blx	r3
            }
            // Initialize compliance protocol transmission timer
            TimerInit( &ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent );
 800b60e:	2300      	movs	r3, #0
 800b610:	9300      	str	r3, [sp, #0]
 800b612:	4b71      	ldr	r3, [pc, #452]	; (800b7d8 <LmhpComplianceOnMcpsIndication+0x2cc>)
 800b614:	2200      	movs	r2, #0
 800b616:	f04f 31ff 	mov.w	r1, #4294967295
 800b61a:	4870      	ldr	r0, [pc, #448]	; (800b7dc <LmhpComplianceOnMcpsIndication+0x2d0>)
 800b61c:	f00d f802 	bl	8018624 <UTIL_TIMER_Create>
            TimerSetValue( &ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE );
 800b620:	f241 3188 	movw	r1, #5000	; 0x1388
 800b624:	486d      	ldr	r0, [pc, #436]	; (800b7dc <LmhpComplianceOnMcpsIndication+0x2d0>)
 800b626:	f00d f911 	bl	801884c <UTIL_TIMER_SetPeriod>

            // Confirm compliance test protocol activation
            LmhpComplianceTxProcess( );
 800b62a:	f7ff feff 	bl	800b42c <LmhpComplianceTxProcess>
 800b62e:	e142      	b.n	800b8b6 <LmhpComplianceOnMcpsIndication+0x3aa>
    }
    else
    {

        // Parse compliance test protocol
        ComplianceTestState.State = mcpsIndication->Buffer[0];
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	689b      	ldr	r3, [r3, #8]
 800b634:	781a      	ldrb	r2, [r3, #0]
 800b636:	4b66      	ldr	r3, [pc, #408]	; (800b7d0 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800b638:	709a      	strb	r2, [r3, #2]
        switch( ComplianceTestState.State )
 800b63a:	4b65      	ldr	r3, [pc, #404]	; (800b7d0 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800b63c:	789b      	ldrb	r3, [r3, #2]
 800b63e:	2b0a      	cmp	r3, #10
 800b640:	f200 8136 	bhi.w	800b8b0 <LmhpComplianceOnMcpsIndication+0x3a4>
 800b644:	a201      	add	r2, pc, #4	; (adr r2, 800b64c <LmhpComplianceOnMcpsIndication+0x140>)
 800b646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b64a:	bf00      	nop
 800b64c:	0800b679 	.word	0x0800b679
 800b650:	0800b6c3 	.word	0x0800b6c3
 800b654:	0800b6cb 	.word	0x0800b6cb
 800b658:	0800b6d9 	.word	0x0800b6d9
 800b65c:	0800b6e7 	.word	0x0800b6e7
 800b660:	0800b73f 	.word	0x0800b73f
 800b664:	0800b751 	.word	0x0800b751
 800b668:	0800b7a1 	.word	0x0800b7a1
 800b66c:	0800b85d 	.word	0x0800b85d
 800b670:	0800b86f 	.word	0x0800b86f
 800b674:	0800b889 	.word	0x0800b889
        {
        case 0: // Check compliance test disable command (ii)
            {
                MibRequestConfirm_t mibReq;

                TimerStop( &ComplianceTxNextPacketTimer );
 800b678:	4858      	ldr	r0, [pc, #352]	; (800b7dc <LmhpComplianceOnMcpsIndication+0x2d0>)
 800b67a:	f00d f877 	bl	801876c <UTIL_TIMER_Stop>

                // Disable compliance test mode and reset the downlink counter.
                ComplianceTestState.DownLinkCounter = 0;
 800b67e:	4b54      	ldr	r3, [pc, #336]	; (800b7d0 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800b680:	2200      	movs	r2, #0
 800b682:	819a      	strh	r2, [r3, #12]
                ComplianceTestState.IsRunning = false;
 800b684:	4b52      	ldr	r3, [pc, #328]	; (800b7d0 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800b686:	2200      	movs	r2, #0
 800b688:	705a      	strb	r2, [r3, #1]

                // Restore previous ADR seeting
                mibReq.Type = MIB_ADR;
 800b68a:	2304      	movs	r3, #4
 800b68c:	723b      	strb	r3, [r7, #8]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800b68e:	4b51      	ldr	r3, [pc, #324]	; (800b7d4 <LmhpComplianceOnMcpsIndication+0x2c8>)
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	781b      	ldrb	r3, [r3, #0]
 800b694:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800b696:	f107 0308 	add.w	r3, r7, #8
 800b69a:	4618      	mov	r0, r3
 800b69c:	f003 ffd4 	bl	800f648 <LoRaMacMibSetRequestConfirm>

                // Enable duty cycle enforcement
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 800b6a0:	4b4c      	ldr	r3, [pc, #304]	; (800b7d4 <LmhpComplianceOnMcpsIndication+0x2c8>)
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	785b      	ldrb	r3, [r3, #1]
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	f004 fd42 	bl	8010130 <LoRaMacTestSetDutyCycleOn>

                // Restart peripherals
                if( LmhpComplianceParams->StartPeripherals != NULL )
 800b6ac:	4b49      	ldr	r3, [pc, #292]	; (800b7d4 <LmhpComplianceOnMcpsIndication+0x2c8>)
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	689b      	ldr	r3, [r3, #8]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	f000 80fe 	beq.w	800b8b4 <LmhpComplianceOnMcpsIndication+0x3a8>
                {
                    LmhpComplianceParams->StartPeripherals( );
 800b6b8:	4b46      	ldr	r3, [pc, #280]	; (800b7d4 <LmhpComplianceOnMcpsIndication+0x2c8>)
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	689b      	ldr	r3, [r3, #8]
 800b6be:	4798      	blx	r3
                }
            }
            break;
 800b6c0:	e0f8      	b.n	800b8b4 <LmhpComplianceOnMcpsIndication+0x3a8>
        case 1: // (iii, iv)
            ComplianceTestState.DataBufferSize = 2;
 800b6c2:	4b43      	ldr	r3, [pc, #268]	; (800b7d0 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800b6c4:	2202      	movs	r2, #2
 800b6c6:	719a      	strb	r2, [r3, #6]
            break;
 800b6c8:	e0f5      	b.n	800b8b6 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 2: // Enable confirmed messages (v)
            ComplianceTestState.IsTxConfirmed = true;
 800b6ca:	4b41      	ldr	r3, [pc, #260]	; (800b7d0 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800b6cc:	2201      	movs	r2, #1
 800b6ce:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.State = 1;
 800b6d0:	4b3f      	ldr	r3, [pc, #252]	; (800b7d0 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800b6d2:	2201      	movs	r2, #1
 800b6d4:	709a      	strb	r2, [r3, #2]
            break;
 800b6d6:	e0ee      	b.n	800b8b6 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 3:  // Disable confirmed messages (vi)
            ComplianceTestState.IsTxConfirmed = false;
 800b6d8:	4b3d      	ldr	r3, [pc, #244]	; (800b7d0 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800b6da:	2200      	movs	r2, #0
 800b6dc:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.State = 1;
 800b6de:	4b3c      	ldr	r3, [pc, #240]	; (800b7d0 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800b6e0:	2201      	movs	r2, #1
 800b6e2:	709a      	strb	r2, [r3, #2]
            break;
 800b6e4:	e0e7      	b.n	800b8b6 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 4: // (vii)
            ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	7b1a      	ldrb	r2, [r3, #12]
 800b6ea:	4b39      	ldr	r3, [pc, #228]	; (800b7d0 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800b6ec:	719a      	strb	r2, [r3, #6]

            ComplianceTestState.DataBuffer[0] = 4;
 800b6ee:	4b38      	ldr	r3, [pc, #224]	; (800b7d0 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800b6f0:	689b      	ldr	r3, [r3, #8]
 800b6f2:	2204      	movs	r2, #4
 800b6f4:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 800b6f6:	2301      	movs	r3, #1
 800b6f8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800b6fc:	e012      	b.n	800b724 <LmhpComplianceOnMcpsIndication+0x218>
            {
                ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	689a      	ldr	r2, [r3, #8]
 800b702:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b706:	4413      	add	r3, r2
 800b708:	781a      	ldrb	r2, [r3, #0]
 800b70a:	4b31      	ldr	r3, [pc, #196]	; (800b7d0 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800b70c:	6899      	ldr	r1, [r3, #8]
 800b70e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b712:	440b      	add	r3, r1
 800b714:	3201      	adds	r2, #1
 800b716:	b2d2      	uxtb	r2, r2
 800b718:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 800b71a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b71e:	3301      	adds	r3, #1
 800b720:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800b724:	4b2a      	ldr	r3, [pc, #168]	; (800b7d0 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800b726:	795a      	ldrb	r2, [r3, #5]
 800b728:	4b29      	ldr	r3, [pc, #164]	; (800b7d0 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800b72a:	799b      	ldrb	r3, [r3, #6]
 800b72c:	4293      	cmp	r3, r2
 800b72e:	bf28      	it	cs
 800b730:	4613      	movcs	r3, r2
 800b732:	b2db      	uxtb	r3, r3
 800b734:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800b738:	429a      	cmp	r2, r3
 800b73a:	d3e0      	bcc.n	800b6fe <LmhpComplianceOnMcpsIndication+0x1f2>
            }
            break;
 800b73c:	e0bb      	b.n	800b8b6 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 5: // (viii)
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_LINK_CHECK;
 800b73e:	2304      	movs	r3, #4
 800b740:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68

                LoRaMacMlmeRequest( &mlmeReq );
 800b744:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800b748:	4618      	mov	r0, r3
 800b74a:	f004 fabb 	bl	800fcc4 <LoRaMacMlmeRequest>
            }
            break;
 800b74e:	e0b2      	b.n	800b8b6 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 6: // (ix)
            {
                MibRequestConfirm_t mibReq;

                TimerStop(&ComplianceTxNextPacketTimer);
 800b750:	4822      	ldr	r0, [pc, #136]	; (800b7dc <LmhpComplianceOnMcpsIndication+0x2d0>)
 800b752:	f00d f80b 	bl	801876c <UTIL_TIMER_Stop>

                // Disable TestMode and revert back to normal operation
                // Disable compliance test mode and reset the downlink counter.
                ComplianceTestState.DownLinkCounter = 0;
 800b756:	4b1e      	ldr	r3, [pc, #120]	; (800b7d0 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800b758:	2200      	movs	r2, #0
 800b75a:	819a      	strh	r2, [r3, #12]
                ComplianceTestState.IsRunning = false;
 800b75c:	4b1c      	ldr	r3, [pc, #112]	; (800b7d0 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800b75e:	2200      	movs	r2, #0
 800b760:	705a      	strb	r2, [r3, #1]

                // Restore previous ADR seeting
                mibReq.Type = MIB_ADR;
 800b762:	2304      	movs	r3, #4
 800b764:	723b      	strb	r3, [r7, #8]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800b766:	4b1b      	ldr	r3, [pc, #108]	; (800b7d4 <LmhpComplianceOnMcpsIndication+0x2c8>)
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	781b      	ldrb	r3, [r3, #0]
 800b76c:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800b76e:	f107 0308 	add.w	r3, r7, #8
 800b772:	4618      	mov	r0, r3
 800b774:	f003 ff68 	bl	800f648 <LoRaMacMibSetRequestConfirm>

                // Enable duty cycle enforcement
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 800b778:	4b16      	ldr	r3, [pc, #88]	; (800b7d4 <LmhpComplianceOnMcpsIndication+0x2c8>)
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	785b      	ldrb	r3, [r3, #1]
 800b77e:	4618      	mov	r0, r3
 800b780:	f004 fcd6 	bl	8010130 <LoRaMacTestSetDutyCycleOn>

                // Restart peripherals
                if( LmhpComplianceParams->StartPeripherals != NULL )
 800b784:	4b13      	ldr	r3, [pc, #76]	; (800b7d4 <LmhpComplianceOnMcpsIndication+0x2c8>)
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	689b      	ldr	r3, [r3, #8]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d003      	beq.n	800b796 <LmhpComplianceOnMcpsIndication+0x28a>
                {
                    LmhpComplianceParams->StartPeripherals( );
 800b78e:	4b11      	ldr	r3, [pc, #68]	; (800b7d4 <LmhpComplianceOnMcpsIndication+0x2c8>)
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	689b      	ldr	r3, [r3, #8]
 800b794:	4798      	blx	r3
                }

                LmhpCompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA );
 800b796:	4b12      	ldr	r3, [pc, #72]	; (800b7e0 <LmhpComplianceOnMcpsIndication+0x2d4>)
 800b798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b79a:	2002      	movs	r0, #2
 800b79c:	4798      	blx	r3
            }
            break;
 800b79e:	e08a      	b.n	800b8b6 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 7: // (x)
            {
                MlmeReq_t mlmeReq;
                if( mcpsIndication->BufferSize == 3 )
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	7b1b      	ldrb	r3, [r3, #12]
 800b7a4:	2b03      	cmp	r3, #3
 800b7a6:	d11d      	bne.n	800b7e4 <LmhpComplianceOnMcpsIndication+0x2d8>
                {
                    mlmeReq.Type = MLME_TXCW;
 800b7a8:	2305      	movs	r3, #5
 800b7aa:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	689b      	ldr	r3, [r3, #8]
 800b7b2:	3301      	adds	r3, #1
 800b7b4:	781b      	ldrb	r3, [r3, #0]
 800b7b6:	021b      	lsls	r3, r3, #8
 800b7b8:	b21a      	sxth	r2, r3
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	689b      	ldr	r3, [r3, #8]
 800b7be:	3302      	adds	r3, #2
 800b7c0:	781b      	ldrb	r3, [r3, #0]
 800b7c2:	b21b      	sxth	r3, r3
 800b7c4:	4313      	orrs	r3, r2
 800b7c6:	b21b      	sxth	r3, r3
 800b7c8:	b29b      	uxth	r3, r3
 800b7ca:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 800b7ce:	e03c      	b.n	800b84a <LmhpComplianceOnMcpsIndication+0x33e>
 800b7d0:	200003c8 	.word	0x200003c8
 800b7d4:	200003dc 	.word	0x200003dc
 800b7d8:	0800b8cd 	.word	0x0800b8cd
 800b7dc:	200003b0 	.word	0x200003b0
 800b7e0:	200000b0 	.word	0x200000b0
                }
                else if( mcpsIndication->BufferSize == 7 )
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	7b1b      	ldrb	r3, [r3, #12]
 800b7e8:	2b07      	cmp	r3, #7
 800b7ea:	d12e      	bne.n	800b84a <LmhpComplianceOnMcpsIndication+0x33e>
                {
                    mlmeReq.Type = MLME_TXCW_1;
 800b7ec:	2306      	movs	r3, #6
 800b7ee:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	689b      	ldr	r3, [r3, #8]
 800b7f6:	3301      	adds	r3, #1
 800b7f8:	781b      	ldrb	r3, [r3, #0]
 800b7fa:	021b      	lsls	r3, r3, #8
 800b7fc:	b21a      	sxth	r2, r3
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	689b      	ldr	r3, [r3, #8]
 800b802:	3302      	adds	r3, #2
 800b804:	781b      	ldrb	r3, [r3, #0]
 800b806:	b21b      	sxth	r3, r3
 800b808:	4313      	orrs	r3, r2
 800b80a:	b21b      	sxth	r3, r3
 800b80c:	b29b      	uxth	r3, r3
 800b80e:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
                    mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	689b      	ldr	r3, [r3, #8]
 800b816:	3303      	adds	r3, #3
 800b818:	781b      	ldrb	r3, [r3, #0]
 800b81a:	041a      	lsls	r2, r3, #16
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	689b      	ldr	r3, [r3, #8]
 800b820:	3304      	adds	r3, #4
 800b822:	781b      	ldrb	r3, [r3, #0]
 800b824:	021b      	lsls	r3, r3, #8
 800b826:	4313      	orrs	r3, r2
 800b828:	687a      	ldr	r2, [r7, #4]
 800b82a:	6892      	ldr	r2, [r2, #8]
 800b82c:	3205      	adds	r2, #5
 800b82e:	7812      	ldrb	r2, [r2, #0]
 800b830:	4313      	orrs	r3, r2
 800b832:	461a      	mov	r2, r3
 800b834:	2364      	movs	r3, #100	; 0x64
 800b836:	fb03 f302 	mul.w	r3, r3, r2
 800b83a:	65fb      	str	r3, [r7, #92]	; 0x5c
                    mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	689b      	ldr	r3, [r3, #8]
 800b840:	3306      	adds	r3, #6
 800b842:	781b      	ldrb	r3, [r3, #0]
 800b844:	b25b      	sxtb	r3, r3
 800b846:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                }
                LoRaMacMlmeRequest( &mlmeReq );
 800b84a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800b84e:	4618      	mov	r0, r3
 800b850:	f004 fa38 	bl	800fcc4 <LoRaMacMlmeRequest>
                ComplianceTestState.State = 1;
 800b854:	4b19      	ldr	r3, [pc, #100]	; (800b8bc <LmhpComplianceOnMcpsIndication+0x3b0>)
 800b856:	2201      	movs	r2, #1
 800b858:	709a      	strb	r2, [r3, #2]
            }
            break;
 800b85a:	e02c      	b.n	800b8b6 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 8: // Send DeviceTimeReq
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_DEVICE_TIME;
 800b85c:	230a      	movs	r3, #10
 800b85e:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                LoRaMacMlmeRequest( &mlmeReq );
 800b862:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b866:	4618      	mov	r0, r3
 800b868:	f004 fa2c 	bl	800fcc4 <LoRaMacMlmeRequest>
            }
            break;
 800b86c:	e023      	b.n	800b8b6 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 9: // Switch end device Class
            {
                MibRequestConfirm_t mibReq;

                mibReq.Type = MIB_DEVICE_CLASS;
 800b86e:	2300      	movs	r3, #0
 800b870:	723b      	strb	r3, [r7, #8]
                // CLASS_A = 0, CLASS_B = 1, CLASS_C = 2
                mibReq.Param.Class = ( DeviceClass_t )mcpsIndication->Buffer[1];;
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	689b      	ldr	r3, [r3, #8]
 800b876:	3301      	adds	r3, #1
 800b878:	781b      	ldrb	r3, [r3, #0]
 800b87a:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800b87c:	f107 0308 	add.w	r3, r7, #8
 800b880:	4618      	mov	r0, r3
 800b882:	f003 fee1 	bl	800f648 <LoRaMacMibSetRequestConfirm>
            }
            break;
 800b886:	e016      	b.n	800b8b6 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 10: // Send PingSlotInfoReq
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_PING_SLOT_INFO;
 800b888:	230d      	movs	r3, #13
 800b88a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	689b      	ldr	r3, [r3, #8]
 800b892:	785b      	ldrb	r3, [r3, #1]
 800b894:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

                LoRaMacMlmeRequest( &mlmeReq );
 800b898:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b89c:	4618      	mov	r0, r3
 800b89e:	f004 fa11 	bl	800fcc4 <LoRaMacMlmeRequest>
            }
            break;
 800b8a2:	e008      	b.n	800b8b6 <LmhpComplianceOnMcpsIndication+0x3aa>
        return;
 800b8a4:	bf00      	nop
 800b8a6:	e006      	b.n	800b8b6 <LmhpComplianceOnMcpsIndication+0x3aa>
        return;
 800b8a8:	bf00      	nop
 800b8aa:	e004      	b.n	800b8b6 <LmhpComplianceOnMcpsIndication+0x3aa>
        return;
 800b8ac:	bf00      	nop
 800b8ae:	e002      	b.n	800b8b6 <LmhpComplianceOnMcpsIndication+0x3aa>
        default:
            break;
 800b8b0:	bf00      	nop
 800b8b2:	e000      	b.n	800b8b6 <LmhpComplianceOnMcpsIndication+0x3aa>
            break;
 800b8b4:	bf00      	nop
        }
    }
}
 800b8b6:	3780      	adds	r7, #128	; 0x80
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	bd80      	pop	{r7, pc}
 800b8bc:	200003c8 	.word	0x200003c8

0800b8c0 <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 800b8c0:	b480      	push	{r7}
 800b8c2:	af00      	add	r7, sp, #0
    /* Nothing to process */
}
 800b8c4:	bf00      	nop
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	bc80      	pop	{r7}
 800b8ca:	4770      	bx	lr

0800b8cc <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent( void* context )
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b082      	sub	sp, #8
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
    LmhpComplianceTxProcess( );
 800b8d4:	f7ff fdaa 	bl	800b42c <LmhpComplianceTxProcess>
}
 800b8d8:	bf00      	nop
 800b8da:	3708      	adds	r7, #8
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	bd80      	pop	{r7, pc}

0800b8e0 <OnRadioTxDone>:
    int16_t Rssi;
    int8_t Snr;
}RxDoneParams;

static void OnRadioTxDone( void )
{
 800b8e0:	b590      	push	{r4, r7, lr}
 800b8e2:	b083      	sub	sp, #12
 800b8e4:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800b8e6:	f00d f85b 	bl	80189a0 <UTIL_TIMER_GetCurrentTime>
 800b8ea:	4603      	mov	r3, r0
 800b8ec:	4a16      	ldr	r2, [pc, #88]	; (800b948 <OnRadioTxDone+0x68>)
 800b8ee:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800b8f0:	4c16      	ldr	r4, [pc, #88]	; (800b94c <OnRadioTxDone+0x6c>)
 800b8f2:	463b      	mov	r3, r7
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	f00c f9e5 	bl	8017cc4 <SysTimeGet>
 800b8fa:	f504 734e 	add.w	r3, r4, #824	; 0x338
 800b8fe:	463a      	mov	r2, r7
 800b900:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b904:	e883 0003 	stmia.w	r3, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 800b908:	4a11      	ldr	r2, [pc, #68]	; (800b950 <OnRadioTxDone+0x70>)
 800b90a:	7813      	ldrb	r3, [r2, #0]
 800b90c:	f043 0310 	orr.w	r3, r3, #16
 800b910:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800b912:	4b0e      	ldr	r3, [pc, #56]	; (800b94c <OnRadioTxDone+0x6c>)
 800b914:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d00a      	beq.n	800b932 <OnRadioTxDone+0x52>
 800b91c:	4b0b      	ldr	r3, [pc, #44]	; (800b94c <OnRadioTxDone+0x6c>)
 800b91e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800b922:	691b      	ldr	r3, [r3, #16]
 800b924:	2b00      	cmp	r3, #0
 800b926:	d004      	beq.n	800b932 <OnRadioTxDone+0x52>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800b928:	4b08      	ldr	r3, [pc, #32]	; (800b94c <OnRadioTxDone+0x6c>)
 800b92a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800b92e:	691b      	ldr	r3, [r3, #16]
 800b930:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800b932:	4b08      	ldr	r3, [pc, #32]	; (800b954 <OnRadioTxDone+0x74>)
 800b934:	2201      	movs	r2, #1
 800b936:	2100      	movs	r1, #0
 800b938:	2002      	movs	r0, #2
 800b93a:	f00d f921 	bl	8018b80 <UTIL_ADV_TRACE_COND_FSend>
}
 800b93e:	bf00      	nop
 800b940:	370c      	adds	r7, #12
 800b942:	46bd      	mov	sp, r7
 800b944:	bd90      	pop	{r4, r7, pc}
 800b946:	bf00      	nop
 800b948:	20001664 	.word	0x20001664
 800b94c:	200003e0 	.word	0x200003e0
 800b950:	20000bbc 	.word	0x20000bbc
 800b954:	08019600 	.word	0x08019600

0800b958 <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b084      	sub	sp, #16
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	60f8      	str	r0, [r7, #12]
 800b960:	4608      	mov	r0, r1
 800b962:	4611      	mov	r1, r2
 800b964:	461a      	mov	r2, r3
 800b966:	4603      	mov	r3, r0
 800b968:	817b      	strh	r3, [r7, #10]
 800b96a:	460b      	mov	r3, r1
 800b96c:	813b      	strh	r3, [r7, #8]
 800b96e:	4613      	mov	r3, r2
 800b970:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800b972:	f00d f815 	bl	80189a0 <UTIL_TIMER_GetCurrentTime>
 800b976:	4603      	mov	r3, r0
 800b978:	4a16      	ldr	r2, [pc, #88]	; (800b9d4 <OnRadioRxDone+0x7c>)
 800b97a:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 800b97c:	4a15      	ldr	r2, [pc, #84]	; (800b9d4 <OnRadioRxDone+0x7c>)
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 800b982:	4a14      	ldr	r2, [pc, #80]	; (800b9d4 <OnRadioRxDone+0x7c>)
 800b984:	897b      	ldrh	r3, [r7, #10]
 800b986:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 800b988:	4a12      	ldr	r2, [pc, #72]	; (800b9d4 <OnRadioRxDone+0x7c>)
 800b98a:	893b      	ldrh	r3, [r7, #8]
 800b98c:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 800b98e:	4a11      	ldr	r2, [pc, #68]	; (800b9d4 <OnRadioRxDone+0x7c>)
 800b990:	79fb      	ldrb	r3, [r7, #7]
 800b992:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 800b994:	4a10      	ldr	r2, [pc, #64]	; (800b9d8 <OnRadioRxDone+0x80>)
 800b996:	7813      	ldrb	r3, [r2, #0]
 800b998:	f043 0308 	orr.w	r3, r3, #8
 800b99c:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800b99e:	4b0f      	ldr	r3, [pc, #60]	; (800b9dc <OnRadioRxDone+0x84>)
 800b9a0:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d00a      	beq.n	800b9be <OnRadioRxDone+0x66>
 800b9a8:	4b0c      	ldr	r3, [pc, #48]	; (800b9dc <OnRadioRxDone+0x84>)
 800b9aa:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800b9ae:	691b      	ldr	r3, [r3, #16]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d004      	beq.n	800b9be <OnRadioRxDone+0x66>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800b9b4:	4b09      	ldr	r3, [pc, #36]	; (800b9dc <OnRadioRxDone+0x84>)
 800b9b6:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800b9ba:	691b      	ldr	r3, [r3, #16]
 800b9bc:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800b9be:	4b08      	ldr	r3, [pc, #32]	; (800b9e0 <OnRadioRxDone+0x88>)
 800b9c0:	2201      	movs	r2, #1
 800b9c2:	2100      	movs	r1, #0
 800b9c4:	2002      	movs	r0, #2
 800b9c6:	f00d f8db 	bl	8018b80 <UTIL_ADV_TRACE_COND_FSend>
}
 800b9ca:	bf00      	nop
 800b9cc:	3710      	adds	r7, #16
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	bd80      	pop	{r7, pc}
 800b9d2:	bf00      	nop
 800b9d4:	20001668 	.word	0x20001668
 800b9d8:	20000bbc 	.word	0x20000bbc
 800b9dc:	200003e0 	.word	0x200003e0
 800b9e0:	08019610 	.word	0x08019610

0800b9e4 <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800b9e8:	4a0e      	ldr	r2, [pc, #56]	; (800ba24 <OnRadioTxTimeout+0x40>)
 800b9ea:	7813      	ldrb	r3, [r2, #0]
 800b9ec:	f043 0304 	orr.w	r3, r3, #4
 800b9f0:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800b9f2:	4b0d      	ldr	r3, [pc, #52]	; (800ba28 <OnRadioTxTimeout+0x44>)
 800b9f4:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d00a      	beq.n	800ba12 <OnRadioTxTimeout+0x2e>
 800b9fc:	4b0a      	ldr	r3, [pc, #40]	; (800ba28 <OnRadioTxTimeout+0x44>)
 800b9fe:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800ba02:	691b      	ldr	r3, [r3, #16]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d004      	beq.n	800ba12 <OnRadioTxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800ba08:	4b07      	ldr	r3, [pc, #28]	; (800ba28 <OnRadioTxTimeout+0x44>)
 800ba0a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800ba0e:	691b      	ldr	r3, [r3, #16]
 800ba10:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800ba12:	4b06      	ldr	r3, [pc, #24]	; (800ba2c <OnRadioTxTimeout+0x48>)
 800ba14:	2201      	movs	r2, #1
 800ba16:	2100      	movs	r1, #0
 800ba18:	2002      	movs	r0, #2
 800ba1a:	f00d f8b1 	bl	8018b80 <UTIL_ADV_TRACE_COND_FSend>
}
 800ba1e:	bf00      	nop
 800ba20:	bd80      	pop	{r7, pc}
 800ba22:	bf00      	nop
 800ba24:	20000bbc 	.word	0x20000bbc
 800ba28:	200003e0 	.word	0x200003e0
 800ba2c:	08019620 	.word	0x08019620

0800ba30 <OnRadioRxError>:

static void OnRadioRxError( void )
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 800ba34:	4a0b      	ldr	r2, [pc, #44]	; (800ba64 <OnRadioRxError+0x34>)
 800ba36:	7813      	ldrb	r3, [r2, #0]
 800ba38:	f043 0302 	orr.w	r3, r3, #2
 800ba3c:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800ba3e:	4b0a      	ldr	r3, [pc, #40]	; (800ba68 <OnRadioRxError+0x38>)
 800ba40:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d00a      	beq.n	800ba5e <OnRadioRxError+0x2e>
 800ba48:	4b07      	ldr	r3, [pc, #28]	; (800ba68 <OnRadioRxError+0x38>)
 800ba4a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800ba4e:	691b      	ldr	r3, [r3, #16]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d004      	beq.n	800ba5e <OnRadioRxError+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800ba54:	4b04      	ldr	r3, [pc, #16]	; (800ba68 <OnRadioRxError+0x38>)
 800ba56:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800ba5a:	691b      	ldr	r3, [r3, #16]
 800ba5c:	4798      	blx	r3
    }
}
 800ba5e:	bf00      	nop
 800ba60:	bd80      	pop	{r7, pc}
 800ba62:	bf00      	nop
 800ba64:	20000bbc 	.word	0x20000bbc
 800ba68:	200003e0 	.word	0x200003e0

0800ba6c <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800ba70:	4a0e      	ldr	r2, [pc, #56]	; (800baac <OnRadioRxTimeout+0x40>)
 800ba72:	7813      	ldrb	r3, [r2, #0]
 800ba74:	f043 0301 	orr.w	r3, r3, #1
 800ba78:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800ba7a:	4b0d      	ldr	r3, [pc, #52]	; (800bab0 <OnRadioRxTimeout+0x44>)
 800ba7c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d00a      	beq.n	800ba9a <OnRadioRxTimeout+0x2e>
 800ba84:	4b0a      	ldr	r3, [pc, #40]	; (800bab0 <OnRadioRxTimeout+0x44>)
 800ba86:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800ba8a:	691b      	ldr	r3, [r3, #16]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d004      	beq.n	800ba9a <OnRadioRxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800ba90:	4b07      	ldr	r3, [pc, #28]	; (800bab0 <OnRadioRxTimeout+0x44>)
 800ba92:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800ba96:	691b      	ldr	r3, [r3, #16]
 800ba98:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800ba9a:	4b06      	ldr	r3, [pc, #24]	; (800bab4 <OnRadioRxTimeout+0x48>)
 800ba9c:	2201      	movs	r2, #1
 800ba9e:	2100      	movs	r1, #0
 800baa0:	2002      	movs	r0, #2
 800baa2:	f00d f86d 	bl	8018b80 <UTIL_ADV_TRACE_COND_FSend>
}
 800baa6:	bf00      	nop
 800baa8:	bd80      	pop	{r7, pc}
 800baaa:	bf00      	nop
 800baac:	20000bbc 	.word	0x20000bbc
 800bab0:	200003e0 	.word	0x200003e0
 800bab4:	08019630 	.word	0x08019630

0800bab8 <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 800bab8:	b480      	push	{r7}
 800baba:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800babc:	4b08      	ldr	r3, [pc, #32]	; (800bae0 <UpdateRxSlotIdleState+0x28>)
 800babe:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800bac2:	2b02      	cmp	r3, #2
 800bac4:	d004      	beq.n	800bad0 <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800bac6:	4b07      	ldr	r3, [pc, #28]	; (800bae4 <UpdateRxSlotIdleState+0x2c>)
 800bac8:	2206      	movs	r2, #6
 800baca:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 800bace:	e003      	b.n	800bad8 <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800bad0:	4b04      	ldr	r3, [pc, #16]	; (800bae4 <UpdateRxSlotIdleState+0x2c>)
 800bad2:	2202      	movs	r2, #2
 800bad4:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
}
 800bad8:	bf00      	nop
 800bada:	46bd      	mov	sp, r7
 800badc:	bc80      	pop	{r7}
 800bade:	4770      	bx	lr
 800bae0:	200008e8 	.word	0x200008e8
 800bae4:	200003e0 	.word	0x200003e0

0800bae8 <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b08e      	sub	sp, #56	; 0x38
 800baec:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800baee:	4b44      	ldr	r3, [pc, #272]	; (800bc00 <ProcessRadioTxDone+0x118>)
 800baf0:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800baf4:	2b02      	cmp	r3, #2
 800baf6:	d002      	beq.n	800bafe <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 800baf8:	4b42      	ldr	r3, [pc, #264]	; (800bc04 <ProcessRadioTxDone+0x11c>)
 800bafa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bafc:	4798      	blx	r3
    }
    // Setup timers
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 800bafe:	4b42      	ldr	r3, [pc, #264]	; (800bc08 <ProcessRadioTxDone+0x120>)
 800bb00:	f8d3 33b0 	ldr.w	r3, [r3, #944]	; 0x3b0
 800bb04:	4619      	mov	r1, r3
 800bb06:	4841      	ldr	r0, [pc, #260]	; (800bc0c <ProcessRadioTxDone+0x124>)
 800bb08:	f00c fea0 	bl	801884c <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800bb0c:	483f      	ldr	r0, [pc, #252]	; (800bc0c <ProcessRadioTxDone+0x124>)
 800bb0e:	f00c fdbf 	bl	8018690 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 800bb12:	4b3d      	ldr	r3, [pc, #244]	; (800bc08 <ProcessRadioTxDone+0x120>)
 800bb14:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800bb18:	4619      	mov	r1, r3
 800bb1a:	483d      	ldr	r0, [pc, #244]	; (800bc10 <ProcessRadioTxDone+0x128>)
 800bb1c:	f00c fe96 	bl	801884c <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800bb20:	483b      	ldr	r0, [pc, #236]	; (800bc10 <ProcessRadioTxDone+0x128>)
 800bb22:	f00c fdb5 	bl	8018690 <UTIL_TIMER_Start>

    if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 800bb26:	4b36      	ldr	r3, [pc, #216]	; (800bc00 <ProcessRadioTxDone+0x118>)
 800bb28:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800bb2c:	2b02      	cmp	r3, #2
 800bb2e:	d004      	beq.n	800bb3a <ProcessRadioTxDone+0x52>
 800bb30:	4b35      	ldr	r3, [pc, #212]	; (800bc08 <ProcessRadioTxDone+0x120>)
 800bb32:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d019      	beq.n	800bb6e <ProcessRadioTxDone+0x86>
    {
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 800bb3a:	2316      	movs	r3, #22
 800bb3c:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800bb40:	4b2f      	ldr	r3, [pc, #188]	; (800bc00 <ProcessRadioTxDone+0x118>)
 800bb42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bb46:	f107 0220 	add.w	r2, r7, #32
 800bb4a:	4611      	mov	r1, r2
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	f006 fb55 	bl	80121fc <RegionGetPhyParam>
 800bb52:	4603      	mov	r3, r0
 800bb54:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800bb56:	4b2c      	ldr	r3, [pc, #176]	; (800bc08 <ProcessRadioTxDone+0x120>)
 800bb58:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 800bb5c:	69fb      	ldr	r3, [r7, #28]
 800bb5e:	4413      	add	r3, r2
 800bb60:	4619      	mov	r1, r3
 800bb62:	482c      	ldr	r0, [pc, #176]	; (800bc14 <ProcessRadioTxDone+0x12c>)
 800bb64:	f00c fe72 	bl	801884c <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.AckTimeoutTimer );
 800bb68:	482a      	ldr	r0, [pc, #168]	; (800bc14 <ProcessRadioTxDone+0x12c>)
 800bb6a:	f00c fd91 	bl	8018690 <UTIL_TIMER_Start>
    }

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800bb6e:	4b2a      	ldr	r3, [pc, #168]	; (800bc18 <ProcessRadioTxDone+0x130>)
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	4a23      	ldr	r2, [pc, #140]	; (800bc00 <ProcessRadioTxDone+0x118>)
 800bb74:	62d3      	str	r3, [r2, #44]	; 0x2c

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 800bb76:	4b24      	ldr	r3, [pc, #144]	; (800bc08 <ProcessRadioTxDone+0x120>)
 800bb78:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 800bb7c:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800bb7e:	4b26      	ldr	r3, [pc, #152]	; (800bc18 <ProcessRadioTxDone+0x130>)
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800bb84:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bb88:	4618      	mov	r0, r3
 800bb8a:	f00c f8d3 	bl	8017d34 <SysTimeGetMcuTime>
 800bb8e:	4638      	mov	r0, r7
 800bb90:	4b1b      	ldr	r3, [pc, #108]	; (800bc00 <ProcessRadioTxDone+0x118>)
 800bb92:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800bb96:	9200      	str	r2, [sp, #0]
 800bb98:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800bb9c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800bba0:	ca06      	ldmia	r2, {r1, r2}
 800bba2:	f00c f828 	bl	8017bf6 <SysTimeSub>
 800bba6:	f107 0314 	add.w	r3, r7, #20
 800bbaa:	463a      	mov	r2, r7
 800bbac:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bbb0:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800bbb4:	4b14      	ldr	r3, [pc, #80]	; (800bc08 <ProcessRadioTxDone+0x120>)
 800bbb6:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800bbba:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 800bbbc:	2301      	movs	r3, #1
 800bbbe:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800bbc0:	4b0f      	ldr	r3, [pc, #60]	; (800bc00 <ProcessRadioTxDone+0x118>)
 800bbc2:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d101      	bne.n	800bbce <ProcessRadioTxDone+0xe6>
    {
        txDone.Joined  = false;
 800bbca:	2300      	movs	r3, #0
 800bbcc:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 800bbce:	4b0c      	ldr	r3, [pc, #48]	; (800bc00 <ProcessRadioTxDone+0x118>)
 800bbd0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bbd4:	f107 0208 	add.w	r2, r7, #8
 800bbd8:	4611      	mov	r1, r2
 800bbda:	4618      	mov	r0, r3
 800bbdc:	f006 fb27 	bl	801222e <RegionSetBandTxDone>

    if( MacCtx.NodeAckRequested == false )
 800bbe0:	4b09      	ldr	r3, [pc, #36]	; (800bc08 <ProcessRadioTxDone+0x120>)
 800bbe2:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800bbe6:	f083 0301 	eor.w	r3, r3, #1
 800bbea:	b2db      	uxtb	r3, r3
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d003      	beq.n	800bbf8 <ProcessRadioTxDone+0x110>
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800bbf0:	4b05      	ldr	r3, [pc, #20]	; (800bc08 <ProcessRadioTxDone+0x120>)
 800bbf2:	2200      	movs	r2, #0
 800bbf4:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    }
}
 800bbf8:	bf00      	nop
 800bbfa:	3730      	adds	r7, #48	; 0x30
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	bd80      	pop	{r7, pc}
 800bc00:	200008e8 	.word	0x200008e8
 800bc04:	08019c7c 	.word	0x08019c7c
 800bc08:	200003e0 	.word	0x200003e0
 800bc0c:	20000760 	.word	0x20000760
 800bc10:	20000778 	.word	0x20000778
 800bc14:	200007d8 	.word	0x200007d8
 800bc18:	20001664 	.word	0x20001664

0800bc1c <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800bc20:	4b10      	ldr	r3, [pc, #64]	; (800bc64 <PrepareRxDoneAbort+0x48>)
 800bc22:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800bc26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc2a:	4a0e      	ldr	r2, [pc, #56]	; (800bc64 <PrepareRxDoneAbort+0x48>)
 800bc2c:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    if( MacCtx.NodeAckRequested == true )
 800bc30:	4b0c      	ldr	r3, [pc, #48]	; (800bc64 <PrepareRxDoneAbort+0x48>)
 800bc32:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d002      	beq.n	800bc40 <PrepareRxDoneAbort+0x24>
    {
        OnAckTimeoutTimerEvent( NULL );
 800bc3a:	2000      	movs	r0, #0
 800bc3c:	f001 f8f8 	bl	800ce30 <OnAckTimeoutTimerEvent>
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 800bc40:	4a08      	ldr	r2, [pc, #32]	; (800bc64 <PrepareRxDoneAbort+0x48>)
 800bc42:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800bc46:	f043 0302 	orr.w	r3, r3, #2
 800bc4a:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    MacCtx.MacFlags.Bits.MacDone = 1;
 800bc4e:	4a05      	ldr	r2, [pc, #20]	; (800bc64 <PrepareRxDoneAbort+0x48>)
 800bc50:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800bc54:	f043 0320 	orr.w	r3, r3, #32
 800bc58:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481

    UpdateRxSlotIdleState( );
 800bc5c:	f7ff ff2c 	bl	800bab8 <UpdateRxSlotIdleState>
}
 800bc60:	bf00      	nop
 800bc62:	bd80      	pop	{r7, pc}
 800bc64:	200003e0 	.word	0x200003e0

0800bc68 <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 800bc68:	b5b0      	push	{r4, r5, r7, lr}
 800bc6a:	b0a6      	sub	sp, #152	; 0x98
 800bc6c:	af04      	add	r7, sp, #16
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800bc6e:	2313      	movs	r3, #19
 800bc70:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 800bc74:	4bb9      	ldr	r3, [pc, #740]	; (800bf5c <ProcessRadioRxDone+0x2f4>)
 800bc76:	685b      	ldr	r3, [r3, #4]
 800bc78:	67fb      	str	r3, [r7, #124]	; 0x7c
    uint16_t size = RxDoneParams.Size;
 800bc7a:	4bb8      	ldr	r3, [pc, #736]	; (800bf5c <ProcessRadioRxDone+0x2f4>)
 800bc7c:	891b      	ldrh	r3, [r3, #8]
 800bc7e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    int16_t rssi = RxDoneParams.Rssi;
 800bc82:	4bb6      	ldr	r3, [pc, #728]	; (800bf5c <ProcessRadioRxDone+0x2f4>)
 800bc84:	895b      	ldrh	r3, [r3, #10]
 800bc86:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
    int8_t snr = RxDoneParams.Snr;
 800bc8a:	4bb4      	ldr	r3, [pc, #720]	; (800bf5c <ProcessRadioRxDone+0x2f4>)
 800bc8c:	7b1b      	ldrb	r3, [r3, #12]
 800bc8e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

    uint8_t pktHeaderLen = 0;
 800bc92:	2300      	movs	r3, #0
 800bc94:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

    uint32_t downLinkCounter = 0;
 800bc98:	2300      	movs	r3, #0
 800bc9a:	607b      	str	r3, [r7, #4]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 800bc9c:	4bb0      	ldr	r3, [pc, #704]	; (800bf60 <ProcessRadioRxDone+0x2f8>)
 800bc9e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800bca2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    uint8_t multicast = 0;
 800bca6:	2300      	movs	r3, #0
 800bca8:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800bcac:	2301      	movs	r3, #1
 800bcae:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
    FCntIdentifier_t fCntID;

    MacCtx.McpsConfirm.AckReceived = false;
 800bcb2:	4bac      	ldr	r3, [pc, #688]	; (800bf64 <ProcessRadioRxDone+0x2fc>)
 800bcb4:	2200      	movs	r2, #0
 800bcb6:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
    MacCtx.RxStatus.Rssi = rssi;
 800bcba:	4aaa      	ldr	r2, [pc, #680]	; (800bf64 <ProcessRadioRxDone+0x2fc>)
 800bcbc:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800bcc0:	f8a2 347c 	strh.w	r3, [r2, #1148]	; 0x47c
    MacCtx.RxStatus.Snr = snr;
 800bcc4:	4aa7      	ldr	r2, [pc, #668]	; (800bf64 <ProcessRadioRxDone+0x2fc>)
 800bcc6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800bcca:	f882 347e 	strb.w	r3, [r2, #1150]	; 0x47e
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 800bcce:	4ba5      	ldr	r3, [pc, #660]	; (800bf64 <ProcessRadioRxDone+0x2fc>)
 800bcd0:	f893 2480 	ldrb.w	r2, [r3, #1152]	; 0x480
 800bcd4:	4ba3      	ldr	r3, [pc, #652]	; (800bf64 <ProcessRadioRxDone+0x2fc>)
 800bcd6:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
    MacCtx.McpsIndication.Port = 0;
 800bcda:	4ba2      	ldr	r3, [pc, #648]	; (800bf64 <ProcessRadioRxDone+0x2fc>)
 800bcdc:	2200      	movs	r2, #0
 800bcde:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
    MacCtx.McpsIndication.Multicast = 0;
 800bce2:	4ba0      	ldr	r3, [pc, #640]	; (800bf64 <ProcessRadioRxDone+0x2fc>)
 800bce4:	2200      	movs	r2, #0
 800bce6:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
    MacCtx.McpsIndication.FramePending = 0;
 800bcea:	4b9e      	ldr	r3, [pc, #632]	; (800bf64 <ProcessRadioRxDone+0x2fc>)
 800bcec:	2200      	movs	r2, #0
 800bcee:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
    MacCtx.McpsIndication.Buffer = NULL;
 800bcf2:	4b9c      	ldr	r3, [pc, #624]	; (800bf64 <ProcessRadioRxDone+0x2fc>)
 800bcf4:	2200      	movs	r2, #0
 800bcf6:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
    MacCtx.McpsIndication.BufferSize = 0;
 800bcfa:	4b9a      	ldr	r3, [pc, #616]	; (800bf64 <ProcessRadioRxDone+0x2fc>)
 800bcfc:	2200      	movs	r2, #0
 800bcfe:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
    MacCtx.McpsIndication.RxData = false;
 800bd02:	4b98      	ldr	r3, [pc, #608]	; (800bf64 <ProcessRadioRxDone+0x2fc>)
 800bd04:	2200      	movs	r2, #0
 800bd06:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
    MacCtx.McpsIndication.AckReceived = false;
 800bd0a:	4b96      	ldr	r3, [pc, #600]	; (800bf64 <ProcessRadioRxDone+0x2fc>)
 800bd0c:	2200      	movs	r2, #0
 800bd0e:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800bd12:	4b94      	ldr	r3, [pc, #592]	; (800bf64 <ProcessRadioRxDone+0x2fc>)
 800bd14:	2200      	movs	r2, #0
 800bd16:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800bd1a:	4b92      	ldr	r3, [pc, #584]	; (800bf64 <ProcessRadioRxDone+0x2fc>)
 800bd1c:	2200      	movs	r2, #0
 800bd1e:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
    MacCtx.McpsIndication.DevAddress = 0;
 800bd22:	4b90      	ldr	r3, [pc, #576]	; (800bf64 <ProcessRadioRxDone+0x2fc>)
 800bd24:	2200      	movs	r2, #0
 800bd26:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800bd2a:	4b8e      	ldr	r3, [pc, #568]	; (800bf64 <ProcessRadioRxDone+0x2fc>)
 800bd2c:	2200      	movs	r2, #0
 800bd2e:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434

    Radio.Sleep( );
 800bd32:	4b8d      	ldr	r3, [pc, #564]	; (800bf68 <ProcessRadioRxDone+0x300>)
 800bd34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd36:	4798      	blx	r3
    TimerStop( &MacCtx.RxWindowTimer2 );
 800bd38:	488c      	ldr	r0, [pc, #560]	; (800bf6c <ProcessRadioRxDone+0x304>)
 800bd3a:	f00c fd17 	bl	801876c <UTIL_TIMER_Stop>

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800bd3e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800bd42:	4619      	mov	r1, r3
 800bd44:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800bd46:	f004 fb28 	bl	801039a <LoRaMacClassBRxBeacon>
 800bd4a:	4603      	mov	r3, r0
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d00a      	beq.n	800bd66 <ProcessRadioRxDone+0xfe>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800bd50:	4a84      	ldr	r2, [pc, #528]	; (800bf64 <ProcessRadioRxDone+0x2fc>)
 800bd52:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800bd56:	f8a2 3472 	strh.w	r3, [r2, #1138]	; 0x472
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800bd5a:	4a82      	ldr	r2, [pc, #520]	; (800bf64 <ProcessRadioRxDone+0x2fc>)
 800bd5c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800bd60:	f882 3474 	strb.w	r3, [r2, #1140]	; 0x474
        return;
 800bd64:	e3bf      	b.n	800c4e6 <ProcessRadioRxDone+0x87e>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800bd66:	4b7e      	ldr	r3, [pc, #504]	; (800bf60 <ProcessRadioRxDone+0x2f8>)
 800bd68:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800bd6c:	2b01      	cmp	r3, #1
 800bd6e:	d11e      	bne.n	800bdae <ProcessRadioRxDone+0x146>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800bd70:	f004 fb26 	bl	80103c0 <LoRaMacClassBIsPingExpected>
 800bd74:	4603      	mov	r3, r0
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d00a      	beq.n	800bd90 <ProcessRadioRxDone+0x128>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800bd7a:	2000      	movs	r0, #0
 800bd7c:	f004 fad7 	bl	801032e <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800bd80:	2000      	movs	r0, #0
 800bd82:	f004 faf8 	bl	8010376 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800bd86:	4b77      	ldr	r3, [pc, #476]	; (800bf64 <ProcessRadioRxDone+0x2fc>)
 800bd88:	2204      	movs	r2, #4
 800bd8a:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
 800bd8e:	e00e      	b.n	800bdae <ProcessRadioRxDone+0x146>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800bd90:	f004 fb1d 	bl	80103ce <LoRaMacClassBIsMulticastExpected>
 800bd94:	4603      	mov	r3, r0
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d009      	beq.n	800bdae <ProcessRadioRxDone+0x146>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800bd9a:	2000      	movs	r0, #0
 800bd9c:	f004 fad1 	bl	8010342 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800bda0:	2000      	movs	r0, #0
 800bda2:	f004 faf1 	bl	8010388 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800bda6:	4b6f      	ldr	r3, [pc, #444]	; (800bf64 <ProcessRadioRxDone+0x2fc>)
 800bda8:	2205      	movs	r2, #5
 800bdaa:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
        }
    }

    macHdr.Value = payload[pktHeaderLen++];
 800bdae:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800bdb2:	1c5a      	adds	r2, r3, #1
 800bdb4:	f887 2076 	strb.w	r2, [r7, #118]	; 0x76
 800bdb8:	461a      	mov	r2, r3
 800bdba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bdbc:	4413      	add	r3, r2
 800bdbe:	781b      	ldrb	r3, [r3, #0]
 800bdc0:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74

    switch( macHdr.Bits.MType )
 800bdc4:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800bdc8:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800bdcc:	b2db      	uxtb	r3, r3
 800bdce:	3b01      	subs	r3, #1
 800bdd0:	2b06      	cmp	r3, #6
 800bdd2:	f200 8362 	bhi.w	800c49a <ProcessRadioRxDone+0x832>
 800bdd6:	a201      	add	r2, pc, #4	; (adr r2, 800bddc <ProcessRadioRxDone+0x174>)
 800bdd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bddc:	0800bdf9 	.word	0x0800bdf9
 800bde0:	0800c49b 	.word	0x0800c49b
 800bde4:	0800bf79 	.word	0x0800bf79
 800bde8:	0800c49b 	.word	0x0800c49b
 800bdec:	0800bf71 	.word	0x0800bf71
 800bdf0:	0800c49b 	.word	0x0800c49b
 800bdf4:	0800c441 	.word	0x0800c441
    {
        case FRAME_TYPE_JOIN_ACCEPT:
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800bdf8:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800bdfc:	2b10      	cmp	r3, #16
 800bdfe:	d806      	bhi.n	800be0e <ProcessRadioRxDone+0x1a6>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800be00:	4b58      	ldr	r3, [pc, #352]	; (800bf64 <ProcessRadioRxDone+0x2fc>)
 800be02:	2201      	movs	r2, #1
 800be04:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800be08:	f7ff ff08 	bl	800bc1c <PrepareRxDoneAbort>
                return;
 800be0c:	e36b      	b.n	800c4e6 <ProcessRadioRxDone+0x87e>
            }
            macMsgJoinAccept.Buffer = payload;
 800be0e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800be10:	60bb      	str	r3, [r7, #8]
            macMsgJoinAccept.BufSize = size;
 800be12:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800be16:	b2db      	uxtb	r3, r3
 800be18:	733b      	strb	r3, [r7, #12]

            // Abort in case if the device isn't joined yet and no rejoin request is ongoing.
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800be1a:	4b51      	ldr	r3, [pc, #324]	; (800bf60 <ProcessRadioRxDone+0x2f8>)
 800be1c:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800be20:	2b00      	cmp	r3, #0
 800be22:	d006      	beq.n	800be32 <ProcessRadioRxDone+0x1ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800be24:	4b4f      	ldr	r3, [pc, #316]	; (800bf64 <ProcessRadioRxDone+0x2fc>)
 800be26:	2201      	movs	r2, #1
 800be28:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800be2c:	f7ff fef6 	bl	800bc1c <PrepareRxDoneAbort>
                return;
 800be30:	e359      	b.n	800c4e6 <ProcessRadioRxDone+0x87e>
            }
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 800be32:	f7fe fbd9 	bl	800a5e8 <SecureElementGetJoinEui>
 800be36:	4601      	mov	r1, r0
 800be38:	f107 0308 	add.w	r3, r7, #8
 800be3c:	461a      	mov	r2, r3
 800be3e:	20ff      	movs	r0, #255	; 0xff
 800be40:	f005 fc60 	bl	8011704 <LoRaMacCryptoHandleJoinAccept>
 800be44:	4603      	mov	r3, r0
 800be46:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80

            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 800be4a:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d172      	bne.n	800bf38 <ProcessRadioRxDone+0x2d0>
            {
                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800be52:	7c7b      	ldrb	r3, [r7, #17]
 800be54:	461a      	mov	r2, r3
 800be56:	4b42      	ldr	r3, [pc, #264]	; (800bf60 <ProcessRadioRxDone+0x2f8>)
 800be58:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800be5c:	4b40      	ldr	r3, [pc, #256]	; (800bf60 <ProcessRadioRxDone+0x2f8>)
 800be5e:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800be62:	7cbb      	ldrb	r3, [r7, #18]
 800be64:	021b      	lsls	r3, r3, #8
 800be66:	4313      	orrs	r3, r2
 800be68:	4a3d      	ldr	r2, [pc, #244]	; (800bf60 <ProcessRadioRxDone+0x2f8>)
 800be6a:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800be6e:	4b3c      	ldr	r3, [pc, #240]	; (800bf60 <ProcessRadioRxDone+0x2f8>)
 800be70:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800be74:	7cfb      	ldrb	r3, [r7, #19]
 800be76:	041b      	lsls	r3, r3, #16
 800be78:	4313      	orrs	r3, r2
 800be7a:	4a39      	ldr	r2, [pc, #228]	; (800bf60 <ProcessRadioRxDone+0x2f8>)
 800be7c:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800be80:	697b      	ldr	r3, [r7, #20]
 800be82:	4a37      	ldr	r2, [pc, #220]	; (800bf60 <ProcessRadioRxDone+0x2f8>)
 800be84:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800be88:	7e3b      	ldrb	r3, [r7, #24]
 800be8a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800be8e:	b2db      	uxtb	r3, r3
 800be90:	461a      	mov	r2, r3
 800be92:	4b33      	ldr	r3, [pc, #204]	; (800bf60 <ProcessRadioRxDone+0x2f8>)
 800be94:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800be98:	7e3b      	ldrb	r3, [r7, #24]
 800be9a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800be9e:	b2db      	uxtb	r3, r3
 800bea0:	461a      	mov	r2, r3
 800bea2:	4b2f      	ldr	r3, [pc, #188]	; (800bf60 <ProcessRadioRxDone+0x2f8>)
 800bea4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800bea8:	7e3b      	ldrb	r3, [r7, #24]
 800beaa:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800beae:	b2db      	uxtb	r3, r3
 800beb0:	461a      	mov	r2, r3
 800beb2:	4b2b      	ldr	r3, [pc, #172]	; (800bf60 <ProcessRadioRxDone+0x2f8>)
 800beb4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800beb8:	7e7b      	ldrb	r3, [r7, #25]
 800beba:	461a      	mov	r2, r3
 800bebc:	4b28      	ldr	r3, [pc, #160]	; (800bf60 <ProcessRadioRxDone+0x2f8>)
 800bebe:	651a      	str	r2, [r3, #80]	; 0x50
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 800bec0:	4b27      	ldr	r3, [pc, #156]	; (800bf60 <ProcessRadioRxDone+0x2f8>)
 800bec2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d102      	bne.n	800bece <ProcessRadioRxDone+0x266>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 800bec8:	4b25      	ldr	r3, [pc, #148]	; (800bf60 <ProcessRadioRxDone+0x2f8>)
 800beca:	2201      	movs	r2, #1
 800becc:	651a      	str	r2, [r3, #80]	; 0x50
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 800bece:	4b24      	ldr	r3, [pc, #144]	; (800bf60 <ProcessRadioRxDone+0x2f8>)
 800bed0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bed2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bed6:	fb02 f303 	mul.w	r3, r2, r3
 800beda:	4a21      	ldr	r2, [pc, #132]	; (800bf60 <ProcessRadioRxDone+0x2f8>)
 800bedc:	6513      	str	r3, [r2, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800bede:	4b20      	ldr	r3, [pc, #128]	; (800bf60 <ProcessRadioRxDone+0x2f8>)
 800bee0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bee2:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800bee6:	4a1e      	ldr	r2, [pc, #120]	; (800bf60 <ProcessRadioRxDone+0x2f8>)
 800bee8:	6553      	str	r3, [r2, #84]	; 0x54

                Nvm.MacGroup2.Version.Fields.Minor = 0;
 800beea:	4b1d      	ldr	r3, [pc, #116]	; (800bf60 <ProcessRadioRxDone+0x2f8>)
 800beec:	2200      	movs	r2, #0
 800beee:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800bef2:	f107 0308 	add.w	r3, r7, #8
 800bef6:	3312      	adds	r3, #18
 800bef8:	66fb      	str	r3, [r7, #108]	; 0x6c
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 800befa:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800befe:	b2db      	uxtb	r3, r3
 800bf00:	3b11      	subs	r3, #17
 800bf02:	b2db      	uxtb	r3, r3
 800bf04:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800bf08:	4b15      	ldr	r3, [pc, #84]	; (800bf60 <ProcessRadioRxDone+0x2f8>)
 800bf0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bf0e:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800bf12:	4611      	mov	r1, r2
 800bf14:	4618      	mov	r0, r3
 800bf16:	f006 f9c4 	bl	80122a2 <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800bf1a:	4b11      	ldr	r3, [pc, #68]	; (800bf60 <ProcessRadioRxDone+0x2f8>)
 800bf1c:	2202      	movs	r2, #2
 800bf1e:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800bf22:	2001      	movs	r0, #1
 800bf24:	f004 ff18 	bl	8010d58 <LoRaMacConfirmQueueIsCmdActive>
 800bf28:	4603      	mov	r3, r0
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d00e      	beq.n	800bf4c <ProcessRadioRxDone+0x2e4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 800bf2e:	2101      	movs	r1, #1
 800bf30:	2000      	movs	r0, #0
 800bf32:	f004 fe85 	bl	8010c40 <LoRaMacConfirmQueueSetStatus>
 800bf36:	e009      	b.n	800bf4c <ProcessRadioRxDone+0x2e4>
                }
            }
            else
            {
                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800bf38:	2001      	movs	r0, #1
 800bf3a:	f004 ff0d 	bl	8010d58 <LoRaMacConfirmQueueIsCmdActive>
 800bf3e:	4603      	mov	r3, r0
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d003      	beq.n	800bf4c <ProcessRadioRxDone+0x2e4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800bf44:	2101      	movs	r1, #1
 800bf46:	2007      	movs	r0, #7
 800bf48:	f004 fe7a 	bl	8010c40 <LoRaMacConfirmQueueSetStatus>
                }
            }
            MacCtx.MacFlags.Bits.MlmeInd = 1;
 800bf4c:	4a05      	ldr	r2, [pc, #20]	; (800bf64 <ProcessRadioRxDone+0x2fc>)
 800bf4e:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800bf52:	f043 0308 	orr.w	r3, r3, #8
 800bf56:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            break;
 800bf5a:	e2a5      	b.n	800c4a8 <ProcessRadioRxDone+0x840>
 800bf5c:	20001668 	.word	0x20001668
 800bf60:	200008e8 	.word	0x200008e8
 800bf64:	200003e0 	.word	0x200003e0
 800bf68:	08019c7c 	.word	0x08019c7c
 800bf6c:	20000778 	.word	0x20000778
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800bf70:	4bae      	ldr	r3, [pc, #696]	; (800c22c <ProcessRadioRxDone+0x5c4>)
 800bf72:	2201      	movs	r2, #1
 800bf74:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800bf78:	4bad      	ldr	r3, [pc, #692]	; (800c230 <ProcessRadioRxDone+0x5c8>)
 800bf7a:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 800bf7e:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800bf82:	4baa      	ldr	r3, [pc, #680]	; (800c22c <ProcessRadioRxDone+0x5c4>)
 800bf84:	f893 3420 	ldrb.w	r3, [r3, #1056]	; 0x420
 800bf88:	b25b      	sxtb	r3, r3
 800bf8a:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800bf8e:	230d      	movs	r3, #13
 800bf90:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

            /* ST_WORKAROUND_BEGIN: Keep repeater feature */
            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800bf94:	4ba6      	ldr	r3, [pc, #664]	; (800c230 <ProcessRadioRxDone+0x5c8>)
 800bf96:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d002      	beq.n	800bfa4 <ProcessRadioRxDone+0x33c>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800bf9e:	230e      	movs	r3, #14
 800bfa0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
            }
            /* ST_WORKAROUND_END */

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800bfa4:	4ba2      	ldr	r3, [pc, #648]	; (800c230 <ProcessRadioRxDone+0x5c8>)
 800bfa6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bfaa:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800bfae:	4611      	mov	r1, r2
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	f006 f923 	bl	80121fc <RegionGetPhyParam>
 800bfb6:	4603      	mov	r3, r0
 800bfb8:	663b      	str	r3, [r7, #96]	; 0x60
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800bfba:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800bfbe:	3b0d      	subs	r3, #13
 800bfc0:	b29b      	uxth	r3, r3
 800bfc2:	b21b      	sxth	r3, r3
 800bfc4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800bfc8:	b21a      	sxth	r2, r3
 800bfca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bfcc:	b21b      	sxth	r3, r3
 800bfce:	429a      	cmp	r2, r3
 800bfd0:	dc03      	bgt.n	800bfda <ProcessRadioRxDone+0x372>
 800bfd2:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800bfd6:	2b0b      	cmp	r3, #11
 800bfd8:	d806      	bhi.n	800bfe8 <ProcessRadioRxDone+0x380>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800bfda:	4b94      	ldr	r3, [pc, #592]	; (800c22c <ProcessRadioRxDone+0x5c4>)
 800bfdc:	2201      	movs	r2, #1
 800bfde:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800bfe2:	f7ff fe1b 	bl	800bc1c <PrepareRxDoneAbort>
                return;
 800bfe6:	e27e      	b.n	800c4e6 <ProcessRadioRxDone+0x87e>
            }
            macMsgData.Buffer = payload;
 800bfe8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bfea:	633b      	str	r3, [r7, #48]	; 0x30
            macMsgData.BufSize = size;
 800bfec:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800bff0:	b2db      	uxtb	r3, r3
 800bff2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800bff6:	4b8f      	ldr	r3, [pc, #572]	; (800c234 <ProcessRadioRxDone+0x5cc>)
 800bff8:	657b      	str	r3, [r7, #84]	; 0x54
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800bffa:	23ff      	movs	r3, #255	; 0xff
 800bffc:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800c000:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c004:	4618      	mov	r0, r3
 800c006:	f005 fe7c 	bl	8011d02 <LoRaMacParserData>
 800c00a:	4603      	mov	r3, r0
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d006      	beq.n	800c01e <ProcessRadioRxDone+0x3b6>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800c010:	4b86      	ldr	r3, [pc, #536]	; (800c22c <ProcessRadioRxDone+0x5c4>)
 800c012:	2201      	movs	r2, #1
 800c014:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800c018:	f7ff fe00 	bl	800bc1c <PrepareRxDoneAbort>
                return;
 800c01c:	e263      	b.n	800c4e6 <ProcessRadioRxDone+0x87e>
            }

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800c01e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c020:	4a82      	ldr	r2, [pc, #520]	; (800c22c <ProcessRadioRxDone+0x5c4>)
 800c022:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800c026:	1cba      	adds	r2, r7, #2
 800c028:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c02c:	4611      	mov	r1, r2
 800c02e:	4618      	mov	r0, r3
 800c030:	f002 fcde 	bl	800e9f0 <DetermineFrameType>
 800c034:	4603      	mov	r3, r0
 800c036:	2b00      	cmp	r3, #0
 800c038:	d006      	beq.n	800c048 <ProcessRadioRxDone+0x3e0>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800c03a:	4b7c      	ldr	r3, [pc, #496]	; (800c22c <ProcessRadioRxDone+0x5c4>)
 800c03c:	2201      	movs	r2, #1
 800c03e:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800c042:	f7ff fdeb 	bl	800bc1c <PrepareRxDoneAbort>
                return;
 800c046:	e24e      	b.n	800c4e6 <ProcessRadioRxDone+0x87e>
            }

            //Check if it is a multicast message
            multicast = 0;
 800c048:	2300      	movs	r3, #0
 800c04a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
            downLinkCounter = 0;
 800c04e:	2300      	movs	r3, #0
 800c050:	607b      	str	r3, [r7, #4]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800c052:	2300      	movs	r3, #0
 800c054:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 800c058:	e049      	b.n	800c0ee <ProcessRadioRxDone+0x486>
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800c05a:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800c05e:	4a74      	ldr	r2, [pc, #464]	; (800c230 <ProcessRadioRxDone+0x5c8>)
 800c060:	212c      	movs	r1, #44	; 0x2c
 800c062:	fb01 f303 	mul.w	r3, r1, r3
 800c066:	4413      	add	r3, r2
 800c068:	33d4      	adds	r3, #212	; 0xd4
 800c06a:	681a      	ldr	r2, [r3, #0]
 800c06c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c06e:	429a      	cmp	r2, r3
 800c070:	d138      	bne.n	800c0e4 <ProcessRadioRxDone+0x47c>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800c072:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800c076:	4a6e      	ldr	r2, [pc, #440]	; (800c230 <ProcessRadioRxDone+0x5c8>)
 800c078:	212c      	movs	r1, #44	; 0x2c
 800c07a:	fb01 f303 	mul.w	r3, r1, r3
 800c07e:	4413      	add	r3, r2
 800c080:	33d2      	adds	r3, #210	; 0xd2
 800c082:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800c084:	2b00      	cmp	r3, #0
 800c086:	d02d      	beq.n	800c0e4 <ProcessRadioRxDone+0x47c>
                {
                    multicast = 1;
 800c088:	2301      	movs	r3, #1
 800c08a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 800c08e:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800c092:	4a67      	ldr	r2, [pc, #412]	; (800c230 <ProcessRadioRxDone+0x5c8>)
 800c094:	212c      	movs	r1, #44	; 0x2c
 800c096:	fb01 f303 	mul.w	r3, r1, r3
 800c09a:	4413      	add	r3, r2
 800c09c:	33d3      	adds	r3, #211	; 0xd3
 800c09e:	781b      	ldrb	r3, [r3, #0]
 800c0a0:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 800c0a4:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800c0a8:	4a61      	ldr	r2, [pc, #388]	; (800c230 <ProcessRadioRxDone+0x5c8>)
 800c0aa:	212c      	movs	r1, #44	; 0x2c
 800c0ac:	fb01 f303 	mul.w	r3, r1, r3
 800c0b0:	4413      	add	r3, r2
 800c0b2:	33f0      	adds	r3, #240	; 0xf0
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	607b      	str	r3, [r7, #4]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800c0ba:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800c0be:	4a5c      	ldr	r2, [pc, #368]	; (800c230 <ProcessRadioRxDone+0x5c8>)
 800c0c0:	212c      	movs	r1, #44	; 0x2c
 800c0c2:	fb01 f303 	mul.w	r3, r1, r3
 800c0c6:	4413      	add	r3, r2
 800c0c8:	33d4      	adds	r3, #212	; 0xd4
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800c0d0:	4b57      	ldr	r3, [pc, #348]	; (800c230 <ProcessRadioRxDone+0x5c8>)
 800c0d2:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800c0d6:	2b02      	cmp	r3, #2
 800c0d8:	d10e      	bne.n	800c0f8 <ProcessRadioRxDone+0x490>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800c0da:	4b54      	ldr	r3, [pc, #336]	; (800c22c <ProcessRadioRxDone+0x5c4>)
 800c0dc:	2203      	movs	r2, #3
 800c0de:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
                    }
                    break;
 800c0e2:	e009      	b.n	800c0f8 <ProcessRadioRxDone+0x490>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800c0e4:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800c0e8:	3301      	adds	r3, #1
 800c0ea:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 800c0ee:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d0b1      	beq.n	800c05a <ProcessRadioRxDone+0x3f2>
 800c0f6:	e000      	b.n	800c0fa <ProcessRadioRxDone+0x492>
                    break;
 800c0f8:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800c0fa:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800c0fe:	2b01      	cmp	r3, #1
 800c100:	d117      	bne.n	800c132 <ProcessRadioRxDone+0x4ca>
 800c102:	78bb      	ldrb	r3, [r7, #2]
 800c104:	2b03      	cmp	r3, #3
 800c106:	d10d      	bne.n	800c124 <ProcessRadioRxDone+0x4bc>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800c108:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c10c:	f003 0320 	and.w	r3, r3, #32
 800c110:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800c112:	2b00      	cmp	r3, #0
 800c114:	d106      	bne.n	800c124 <ProcessRadioRxDone+0x4bc>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 800c116:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c11a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c11e:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800c120:	2b00      	cmp	r3, #0
 800c122:	d006      	beq.n	800c132 <ProcessRadioRxDone+0x4ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800c124:	4b41      	ldr	r3, [pc, #260]	; (800c22c <ProcessRadioRxDone+0x5c4>)
 800c126:	2201      	movs	r2, #1
 800c128:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800c12c:	f7ff fd76 	bl	800bc1c <PrepareRxDoneAbort>
                return;
 800c130:	e1d9      	b.n	800c4e6 <ProcessRadioRxDone+0x87e>
            }

            // Get maximum allowed counter difference
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 800c132:	2315      	movs	r3, #21
 800c134:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800c138:	4b3d      	ldr	r3, [pc, #244]	; (800c230 <ProcessRadioRxDone+0x5c8>)
 800c13a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c13e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800c142:	4611      	mov	r1, r2
 800c144:	4618      	mov	r0, r3
 800c146:	f006 f859 	bl	80121fc <RegionGetPhyParam>
 800c14a:	4603      	mov	r3, r0
 800c14c:	663b      	str	r3, [r7, #96]	; 0x60

            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, phyParam.Value, &fCntID, &downLinkCounter );
 800c14e:	78b9      	ldrb	r1, [r7, #2]
 800c150:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c152:	b29b      	uxth	r3, r3
 800c154:	4d36      	ldr	r5, [pc, #216]	; (800c230 <ProcessRadioRxDone+0x5c8>)
 800c156:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800c15a:	f897 0082 	ldrb.w	r0, [r7, #130]	; 0x82
 800c15e:	1d3a      	adds	r2, r7, #4
 800c160:	9202      	str	r2, [sp, #8]
 800c162:	1cfa      	adds	r2, r7, #3
 800c164:	9201      	str	r2, [sp, #4]
 800c166:	9300      	str	r3, [sp, #0]
 800c168:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
 800c16c:	4622      	mov	r2, r4
 800c16e:	f000 fe95 	bl	800ce9c <GetFCntDown>
 800c172:	4603      	mov	r3, r0
 800c174:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800c178:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d031      	beq.n	800c1e4 <ProcessRadioRxDone+0x57c>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800c180:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800c184:	2b07      	cmp	r3, #7
 800c186:	d119      	bne.n	800c1bc <ProcessRadioRxDone+0x554>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800c188:	4b28      	ldr	r3, [pc, #160]	; (800c22c <ProcessRadioRxDone+0x5c4>)
 800c18a:	2208      	movs	r2, #8
 800c18c:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                    if( ( Nvm.MacGroup2.Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( Nvm.MacGroup1.LastRxMic == macMsgData.MIC ) )
 800c190:	4b27      	ldr	r3, [pc, #156]	; (800c230 <ProcessRadioRxDone+0x5c8>)
 800c192:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 800c196:	2b00      	cmp	r3, #0
 800c198:	d11d      	bne.n	800c1d6 <ProcessRadioRxDone+0x56e>
 800c19a:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800c19e:	f023 031f 	bic.w	r3, r3, #31
 800c1a2:	b2db      	uxtb	r3, r3
 800c1a4:	2ba0      	cmp	r3, #160	; 0xa0
 800c1a6:	d116      	bne.n	800c1d6 <ProcessRadioRxDone+0x56e>
 800c1a8:	4b21      	ldr	r3, [pc, #132]	; (800c230 <ProcessRadioRxDone+0x5c8>)
 800c1aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c1ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c1ae:	429a      	cmp	r2, r3
 800c1b0:	d111      	bne.n	800c1d6 <ProcessRadioRxDone+0x56e>
                    {
                        Nvm.MacGroup1.SrvAckRequested = true;
 800c1b2:	4b1f      	ldr	r3, [pc, #124]	; (800c230 <ProcessRadioRxDone+0x5c8>)
 800c1b4:	2201      	movs	r2, #1
 800c1b6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800c1ba:	e00c      	b.n	800c1d6 <ProcessRadioRxDone+0x56e>
                    }
                }
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 800c1bc:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800c1c0:	2b08      	cmp	r3, #8
 800c1c2:	d104      	bne.n	800c1ce <ProcessRadioRxDone+0x566>
                {
                    // Lost too many frames
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 800c1c4:	4b19      	ldr	r3, [pc, #100]	; (800c22c <ProcessRadioRxDone+0x5c4>)
 800c1c6:	220a      	movs	r2, #10
 800c1c8:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 800c1cc:	e003      	b.n	800c1d6 <ProcessRadioRxDone+0x56e>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800c1ce:	4b17      	ldr	r3, [pc, #92]	; (800c22c <ProcessRadioRxDone+0x5c4>)
 800c1d0:	2201      	movs	r2, #1
 800c1d2:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	4a14      	ldr	r2, [pc, #80]	; (800c22c <ProcessRadioRxDone+0x5c4>)
 800c1da:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
                PrepareRxDoneAbort( );
 800c1de:	f7ff fd1d 	bl	800bc1c <PrepareRxDoneAbort>
                return;
 800c1e2:	e180      	b.n	800c4e6 <ProcessRadioRxDone+0x87e>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800c1e4:	78fa      	ldrb	r2, [r7, #3]
 800c1e6:	6879      	ldr	r1, [r7, #4]
 800c1e8:	f897 0082 	ldrb.w	r0, [r7, #130]	; 0x82
 800c1ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c1f0:	9300      	str	r3, [sp, #0]
 800c1f2:	460b      	mov	r3, r1
 800c1f4:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800c1f8:	f005 fbd0 	bl	801199c <LoRaMacCryptoUnsecureMessage>
 800c1fc:	4603      	mov	r3, r0
 800c1fe:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800c202:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800c206:	2b00      	cmp	r3, #0
 800c208:	d016      	beq.n	800c238 <ProcessRadioRxDone+0x5d0>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800c20a:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800c20e:	2b02      	cmp	r3, #2
 800c210:	d104      	bne.n	800c21c <ProcessRadioRxDone+0x5b4>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800c212:	4b06      	ldr	r3, [pc, #24]	; (800c22c <ProcessRadioRxDone+0x5c4>)
 800c214:	220b      	movs	r2, #11
 800c216:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 800c21a:	e003      	b.n	800c224 <ProcessRadioRxDone+0x5bc>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800c21c:	4b03      	ldr	r3, [pc, #12]	; (800c22c <ProcessRadioRxDone+0x5c4>)
 800c21e:	220c      	movs	r2, #12
 800c220:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                }
                PrepareRxDoneAbort( );
 800c224:	f7ff fcfa 	bl	800bc1c <PrepareRxDoneAbort>
                return;
 800c228:	e15d      	b.n	800c4e6 <ProcessRadioRxDone+0x87e>
 800c22a:	bf00      	nop
 800c22c:	200003e0 	.word	0x200003e0
 800c230:	200008e8 	.word	0x200008e8
 800c234:	20000618 	.word	0x20000618
            }

            // Frame is valid
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800c238:	4bac      	ldr	r3, [pc, #688]	; (800c4ec <ProcessRadioRxDone+0x884>)
 800c23a:	2200      	movs	r2, #0
 800c23c:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            MacCtx.McpsIndication.Multicast = multicast;
 800c240:	4aaa      	ldr	r2, [pc, #680]	; (800c4ec <ProcessRadioRxDone+0x884>)
 800c242:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800c246:	f882 341e 	strb.w	r3, [r2, #1054]	; 0x41e
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 800c24a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c24e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800c252:	b2db      	uxtb	r3, r3
 800c254:	461a      	mov	r2, r3
 800c256:	4ba5      	ldr	r3, [pc, #660]	; (800c4ec <ProcessRadioRxDone+0x884>)
 800c258:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
            MacCtx.McpsIndication.Buffer = NULL;
 800c25c:	4ba3      	ldr	r3, [pc, #652]	; (800c4ec <ProcessRadioRxDone+0x884>)
 800c25e:	2200      	movs	r2, #0
 800c260:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.BufferSize = 0;
 800c264:	4ba1      	ldr	r3, [pc, #644]	; (800c4ec <ProcessRadioRxDone+0x884>)
 800c266:	2200      	movs	r2, #0
 800c268:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	4a9f      	ldr	r2, [pc, #636]	; (800c4ec <ProcessRadioRxDone+0x884>)
 800c270:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800c274:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c278:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800c27c:	b2db      	uxtb	r3, r3
 800c27e:	2b00      	cmp	r3, #0
 800c280:	bf14      	ite	ne
 800c282:	2301      	movne	r3, #1
 800c284:	2300      	moveq	r3, #0
 800c286:	b2da      	uxtb	r2, r3
 800c288:	4b98      	ldr	r3, [pc, #608]	; (800c4ec <ProcessRadioRxDone+0x884>)
 800c28a:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800c28e:	4b97      	ldr	r3, [pc, #604]	; (800c4ec <ProcessRadioRxDone+0x884>)
 800c290:	2200      	movs	r2, #0
 800c292:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800c296:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c29a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800c29e:	b2db      	uxtb	r3, r3
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	bf14      	ite	ne
 800c2a4:	2301      	movne	r3, #1
 800c2a6:	2300      	moveq	r3, #0
 800c2a8:	b2da      	uxtb	r2, r3
 800c2aa:	4b90      	ldr	r3, [pc, #576]	; (800c4ec <ProcessRadioRxDone+0x884>)
 800c2ac:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800c2b0:	4b8e      	ldr	r3, [pc, #568]	; (800c4ec <ProcessRadioRxDone+0x884>)
 800c2b2:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d004      	beq.n	800c2c4 <ProcessRadioRxDone+0x65c>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800c2ba:	4b8c      	ldr	r3, [pc, #560]	; (800c4ec <ProcessRadioRxDone+0x884>)
 800c2bc:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800c2c0:	2b01      	cmp	r3, #1
 800c2c2:	d102      	bne.n	800c2ca <ProcessRadioRxDone+0x662>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 800c2c4:	4b8a      	ldr	r3, [pc, #552]	; (800c4f0 <ProcessRadioRxDone+0x888>)
 800c2c6:	2200      	movs	r2, #0
 800c2c8:	629a      	str	r2, [r3, #40]	; 0x28
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 800c2ca:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800c2ce:	2b01      	cmp	r3, #1
 800c2d0:	d104      	bne.n	800c2dc <ProcessRadioRxDone+0x674>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800c2d2:	4b86      	ldr	r3, [pc, #536]	; (800c4ec <ProcessRadioRxDone+0x884>)
 800c2d4:	2202      	movs	r2, #2
 800c2d6:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 800c2da:	e01f      	b.n	800c31c <ProcessRadioRxDone+0x6b4>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800c2dc:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800c2e0:	f023 031f 	bic.w	r3, r3, #31
 800c2e4:	b2db      	uxtb	r3, r3
 800c2e6:	2ba0      	cmp	r3, #160	; 0xa0
 800c2e8:	d110      	bne.n	800c30c <ProcessRadioRxDone+0x6a4>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 800c2ea:	4b81      	ldr	r3, [pc, #516]	; (800c4f0 <ProcessRadioRxDone+0x888>)
 800c2ec:	2201      	movs	r2, #1
 800c2ee:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800c2f2:	4b7f      	ldr	r3, [pc, #508]	; (800c4f0 <ProcessRadioRxDone+0x888>)
 800c2f4:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d102      	bne.n	800c302 <ProcessRadioRxDone+0x69a>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 800c2fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c2fe:	4a7c      	ldr	r2, [pc, #496]	; (800c4f0 <ProcessRadioRxDone+0x888>)
 800c300:	6353      	str	r3, [r2, #52]	; 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800c302:	4b7a      	ldr	r3, [pc, #488]	; (800c4ec <ProcessRadioRxDone+0x884>)
 800c304:	2201      	movs	r2, #1
 800c306:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 800c30a:	e007      	b.n	800c31c <ProcessRadioRxDone+0x6b4>
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 800c30c:	4b78      	ldr	r3, [pc, #480]	; (800c4f0 <ProcessRadioRxDone+0x888>)
 800c30e:	2200      	movs	r2, #0
 800c310:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800c314:	4b75      	ldr	r3, [pc, #468]	; (800c4ec <ProcessRadioRxDone+0x884>)
 800c316:	2200      	movs	r2, #0
 800c318:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
                }
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800c31c:	4b73      	ldr	r3, [pc, #460]	; (800c4ec <ProcessRadioRxDone+0x884>)
 800c31e:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800c322:	4a72      	ldr	r2, [pc, #456]	; (800c4ec <ProcessRadioRxDone+0x884>)
 800c324:	f892 2438 	ldrb.w	r2, [r2, #1080]	; 0x438
 800c328:	f897 103c 	ldrb.w	r1, [r7, #60]	; 0x3c
 800c32c:	4618      	mov	r0, r3
 800c32e:	f001 ff0d 	bl	800e14c <RemoveMacCommands>

            switch( fType )
 800c332:	78bb      	ldrb	r3, [r7, #2]
 800c334:	2b03      	cmp	r3, #3
 800c336:	d874      	bhi.n	800c422 <ProcessRadioRxDone+0x7ba>
 800c338:	a201      	add	r2, pc, #4	; (adr r2, 800c340 <ProcessRadioRxDone+0x6d8>)
 800c33a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c33e:	bf00      	nop
 800c340:	0800c351 	.word	0x0800c351
 800c344:	0800c3a1 	.word	0x0800c3a1
 800c348:	0800c3d7 	.word	0x0800c3d7
 800c34c:	0800c3fd 	.word	0x0800c3fd
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800c350:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c354:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800c358:	b2db      	uxtb	r3, r3
 800c35a:	461c      	mov	r4, r3
 800c35c:	4b63      	ldr	r3, [pc, #396]	; (800c4ec <ProcessRadioRxDone+0x884>)
 800c35e:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800c362:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 800c366:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800c36a:	f102 0010 	add.w	r0, r2, #16
 800c36e:	9300      	str	r3, [sp, #0]
 800c370:	460b      	mov	r3, r1
 800c372:	4622      	mov	r2, r4
 800c374:	2100      	movs	r1, #0
 800c376:	f000 ff03 	bl	800d180 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800c37a:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800c37e:	4b5b      	ldr	r3, [pc, #364]	; (800c4ec <ProcessRadioRxDone+0x884>)
 800c380:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800c384:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c386:	4a59      	ldr	r2, [pc, #356]	; (800c4ec <ProcessRadioRxDone+0x884>)
 800c388:	f8c2 3424 	str.w	r3, [r2, #1060]	; 0x424
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800c38c:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800c390:	4b56      	ldr	r3, [pc, #344]	; (800c4ec <ProcessRadioRxDone+0x884>)
 800c392:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
                    MacCtx.McpsIndication.RxData = true;
 800c396:	4b55      	ldr	r3, [pc, #340]	; (800c4ec <ProcessRadioRxDone+0x884>)
 800c398:	2201      	movs	r2, #1
 800c39a:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
                    break;
 800c39e:	e047      	b.n	800c430 <ProcessRadioRxDone+0x7c8>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800c3a0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c3a4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800c3a8:	b2db      	uxtb	r3, r3
 800c3aa:	461c      	mov	r4, r3
 800c3ac:	4b4f      	ldr	r3, [pc, #316]	; (800c4ec <ProcessRadioRxDone+0x884>)
 800c3ae:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800c3b2:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 800c3b6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800c3ba:	f102 0010 	add.w	r0, r2, #16
 800c3be:	9300      	str	r3, [sp, #0]
 800c3c0:	460b      	mov	r3, r1
 800c3c2:	4622      	mov	r2, r4
 800c3c4:	2100      	movs	r1, #0
 800c3c6:	f000 fedb 	bl	800d180 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800c3ca:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800c3ce:	4b47      	ldr	r3, [pc, #284]	; (800c4ec <ProcessRadioRxDone+0x884>)
 800c3d0:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    break;
 800c3d4:	e02c      	b.n	800c430 <ProcessRadioRxDone+0x7c8>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 800c3d6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800c3d8:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800c3dc:	4b43      	ldr	r3, [pc, #268]	; (800c4ec <ProcessRadioRxDone+0x884>)
 800c3de:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800c3e2:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 800c3e6:	9300      	str	r3, [sp, #0]
 800c3e8:	460b      	mov	r3, r1
 800c3ea:	2100      	movs	r1, #0
 800c3ec:	f000 fec8 	bl	800d180 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800c3f0:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800c3f4:	4b3d      	ldr	r3, [pc, #244]	; (800c4ec <ProcessRadioRxDone+0x884>)
 800c3f6:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    break;
 800c3fa:	e019      	b.n	800c430 <ProcessRadioRxDone+0x7c8>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800c3fc:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800c400:	4b3a      	ldr	r3, [pc, #232]	; (800c4ec <ProcessRadioRxDone+0x884>)
 800c402:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800c406:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c408:	4a38      	ldr	r2, [pc, #224]	; (800c4ec <ProcessRadioRxDone+0x884>)
 800c40a:	f8c2 3424 	str.w	r3, [r2, #1060]	; 0x424
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800c40e:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800c412:	4b36      	ldr	r3, [pc, #216]	; (800c4ec <ProcessRadioRxDone+0x884>)
 800c414:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
                    MacCtx.McpsIndication.RxData = true;
 800c418:	4b34      	ldr	r3, [pc, #208]	; (800c4ec <ProcessRadioRxDone+0x884>)
 800c41a:	2201      	movs	r2, #1
 800c41c:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
                    break;
 800c420:	e006      	b.n	800c430 <ProcessRadioRxDone+0x7c8>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800c422:	4b32      	ldr	r3, [pc, #200]	; (800c4ec <ProcessRadioRxDone+0x884>)
 800c424:	2201      	movs	r2, #1
 800c426:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                    PrepareRxDoneAbort( );
 800c42a:	f7ff fbf7 	bl	800bc1c <PrepareRxDoneAbort>
                    break;
 800c42e:	bf00      	nop
            }

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800c430:	4a2e      	ldr	r2, [pc, #184]	; (800c4ec <ProcessRadioRxDone+0x884>)
 800c432:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800c436:	f043 0302 	orr.w	r3, r3, #2
 800c43a:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481

            break;
 800c43e:	e033      	b.n	800c4a8 <ProcessRadioRxDone+0x840>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800c440:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800c444:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800c446:	18d1      	adds	r1, r2, r3
 800c448:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800c44c:	b29b      	uxth	r3, r3
 800c44e:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800c452:	1ad3      	subs	r3, r2, r3
 800c454:	b29b      	uxth	r3, r3
 800c456:	461a      	mov	r2, r3
 800c458:	4826      	ldr	r0, [pc, #152]	; (800c4f4 <ProcessRadioRxDone+0x88c>)
 800c45a:	f008 f996 	bl	801478a <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800c45e:	4b23      	ldr	r3, [pc, #140]	; (800c4ec <ProcessRadioRxDone+0x884>)
 800c460:	2203      	movs	r2, #3
 800c462:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800c466:	4b21      	ldr	r3, [pc, #132]	; (800c4ec <ProcessRadioRxDone+0x884>)
 800c468:	2200      	movs	r2, #0
 800c46a:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800c46e:	4b1f      	ldr	r3, [pc, #124]	; (800c4ec <ProcessRadioRxDone+0x884>)
 800c470:	4a20      	ldr	r2, [pc, #128]	; (800c4f4 <ProcessRadioRxDone+0x88c>)
 800c472:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800c476:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800c47a:	b2da      	uxtb	r2, r3
 800c47c:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800c480:	1ad3      	subs	r3, r2, r3
 800c482:	b2da      	uxtb	r2, r3
 800c484:	4b19      	ldr	r3, [pc, #100]	; (800c4ec <ProcessRadioRxDone+0x884>)
 800c486:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428

            MacCtx.MacFlags.Bits.McpsInd = 1;
 800c48a:	4a18      	ldr	r2, [pc, #96]	; (800c4ec <ProcessRadioRxDone+0x884>)
 800c48c:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800c490:	f043 0302 	orr.w	r3, r3, #2
 800c494:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            break;
 800c498:	e006      	b.n	800c4a8 <ProcessRadioRxDone+0x840>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800c49a:	4b14      	ldr	r3, [pc, #80]	; (800c4ec <ProcessRadioRxDone+0x884>)
 800c49c:	2201      	movs	r2, #1
 800c49e:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            PrepareRxDoneAbort( );
 800c4a2:	f7ff fbbb 	bl	800bc1c <PrepareRxDoneAbort>
            break;
 800c4a6:	bf00      	nop
    }

    // Verify if we need to disable the AckTimeoutTimer
    if( MacCtx.NodeAckRequested == true )
 800c4a8:	4b10      	ldr	r3, [pc, #64]	; (800c4ec <ProcessRadioRxDone+0x884>)
 800c4aa:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d008      	beq.n	800c4c4 <ProcessRadioRxDone+0x85c>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 800c4b2:	4b0e      	ldr	r3, [pc, #56]	; (800c4ec <ProcessRadioRxDone+0x884>)
 800c4b4:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d00b      	beq.n	800c4d4 <ProcessRadioRxDone+0x86c>
        {
            OnAckTimeoutTimerEvent( NULL );
 800c4bc:	2000      	movs	r0, #0
 800c4be:	f000 fcb7 	bl	800ce30 <OnAckTimeoutTimerEvent>
 800c4c2:	e007      	b.n	800c4d4 <ProcessRadioRxDone+0x86c>
        }
    }
    else
    {
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800c4c4:	4b0a      	ldr	r3, [pc, #40]	; (800c4f0 <ProcessRadioRxDone+0x888>)
 800c4c6:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800c4ca:	2b02      	cmp	r3, #2
 800c4cc:	d102      	bne.n	800c4d4 <ProcessRadioRxDone+0x86c>
        {
            OnAckTimeoutTimerEvent( NULL );
 800c4ce:	2000      	movs	r0, #0
 800c4d0:	f000 fcae 	bl	800ce30 <OnAckTimeoutTimerEvent>
        }
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800c4d4:	4a05      	ldr	r2, [pc, #20]	; (800c4ec <ProcessRadioRxDone+0x884>)
 800c4d6:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800c4da:	f043 0320 	orr.w	r3, r3, #32
 800c4de:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481

    UpdateRxSlotIdleState( );
 800c4e2:	f7ff fae9 	bl	800bab8 <UpdateRxSlotIdleState>
}
 800c4e6:	3788      	adds	r7, #136	; 0x88
 800c4e8:	46bd      	mov	sp, r7
 800c4ea:	bdb0      	pop	{r4, r5, r7, pc}
 800c4ec:	200003e0 	.word	0x200003e0
 800c4f0:	200008e8 	.word	0x200008e8
 800c4f4:	20000618 	.word	0x20000618

0800c4f8 <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 800c4f8:	b580      	push	{r7, lr}
 800c4fa:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800c4fc:	4b11      	ldr	r3, [pc, #68]	; (800c544 <ProcessRadioTxTimeout+0x4c>)
 800c4fe:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800c502:	2b02      	cmp	r3, #2
 800c504:	d002      	beq.n	800c50c <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 800c506:	4b10      	ldr	r3, [pc, #64]	; (800c548 <ProcessRadioTxTimeout+0x50>)
 800c508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c50a:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 800c50c:	f7ff fad4 	bl	800bab8 <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800c510:	4b0e      	ldr	r3, [pc, #56]	; (800c54c <ProcessRadioTxTimeout+0x54>)
 800c512:	2202      	movs	r2, #2
 800c514:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800c518:	2002      	movs	r0, #2
 800c51a:	f004 fbe9 	bl	8010cf0 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800c51e:	4b0b      	ldr	r3, [pc, #44]	; (800c54c <ProcessRadioTxTimeout+0x54>)
 800c520:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800c524:	2b00      	cmp	r3, #0
 800c526:	d003      	beq.n	800c530 <ProcessRadioTxTimeout+0x38>
    {
        MacCtx.AckTimeoutRetry = true;
 800c528:	4b08      	ldr	r3, [pc, #32]	; (800c54c <ProcessRadioTxTimeout+0x54>)
 800c52a:	2201      	movs	r2, #1
 800c52c:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800c530:	4a06      	ldr	r2, [pc, #24]	; (800c54c <ProcessRadioTxTimeout+0x54>)
 800c532:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800c536:	f043 0320 	orr.w	r3, r3, #32
 800c53a:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
}
 800c53e:	bf00      	nop
 800c540:	bd80      	pop	{r7, pc}
 800c542:	bf00      	nop
 800c544:	200008e8 	.word	0x200008e8
 800c548:	08019c7c 	.word	0x08019c7c
 800c54c:	200003e0 	.word	0x200003e0

0800c550 <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 800c550:	b580      	push	{r7, lr}
 800c552:	b084      	sub	sp, #16
 800c554:	af00      	add	r7, sp, #0
 800c556:	4603      	mov	r3, r0
 800c558:	460a      	mov	r2, r1
 800c55a:	71fb      	strb	r3, [r7, #7]
 800c55c:	4613      	mov	r3, r2
 800c55e:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 800c560:	2300      	movs	r3, #0
 800c562:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800c564:	4b40      	ldr	r3, [pc, #256]	; (800c668 <HandleRadioRxErrorTimeout+0x118>)
 800c566:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800c56a:	2b02      	cmp	r3, #2
 800c56c:	d002      	beq.n	800c574 <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 800c56e:	4b3f      	ldr	r3, [pc, #252]	; (800c66c <HandleRadioRxErrorTimeout+0x11c>)
 800c570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c572:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800c574:	f003 ff1d 	bl	80103b2 <LoRaMacClassBIsBeaconExpected>
 800c578:	4603      	mov	r3, r0
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d007      	beq.n	800c58e <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800c57e:	2002      	movs	r0, #2
 800c580:	f003 fecb 	bl	801031a <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800c584:	2000      	movs	r0, #0
 800c586:	f003 feed 	bl	8010364 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800c58a:	2301      	movs	r3, #1
 800c58c:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800c58e:	4b36      	ldr	r3, [pc, #216]	; (800c668 <HandleRadioRxErrorTimeout+0x118>)
 800c590:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800c594:	2b01      	cmp	r3, #1
 800c596:	d119      	bne.n	800c5cc <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800c598:	f003 ff12 	bl	80103c0 <LoRaMacClassBIsPingExpected>
 800c59c:	4603      	mov	r3, r0
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d007      	beq.n	800c5b2 <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800c5a2:	2000      	movs	r0, #0
 800c5a4:	f003 fec3 	bl	801032e <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800c5a8:	2000      	movs	r0, #0
 800c5aa:	f003 fee4 	bl	8010376 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800c5ae:	2301      	movs	r3, #1
 800c5b0:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800c5b2:	f003 ff0c 	bl	80103ce <LoRaMacClassBIsMulticastExpected>
 800c5b6:	4603      	mov	r3, r0
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d007      	beq.n	800c5cc <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800c5bc:	2000      	movs	r0, #0
 800c5be:	f003 fec0 	bl	8010342 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800c5c2:	2000      	movs	r0, #0
 800c5c4:	f003 fee0 	bl	8010388 <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 800c5c8:	2301      	movs	r3, #1
 800c5ca:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 800c5cc:	7bfb      	ldrb	r3, [r7, #15]
 800c5ce:	f083 0301 	eor.w	r3, r3, #1
 800c5d2:	b2db      	uxtb	r3, r3
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d040      	beq.n	800c65a <HandleRadioRxErrorTimeout+0x10a>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800c5d8:	4b25      	ldr	r3, [pc, #148]	; (800c670 <HandleRadioRxErrorTimeout+0x120>)
 800c5da:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d122      	bne.n	800c628 <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 800c5e2:	4b23      	ldr	r3, [pc, #140]	; (800c670 <HandleRadioRxErrorTimeout+0x120>)
 800c5e4:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d003      	beq.n	800c5f4 <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800c5ec:	4a20      	ldr	r2, [pc, #128]	; (800c670 <HandleRadioRxErrorTimeout+0x120>)
 800c5ee:	79fb      	ldrb	r3, [r7, #7]
 800c5f0:	f882 3439 	strb.w	r3, [r2, #1081]	; 0x439
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800c5f4:	79fb      	ldrb	r3, [r7, #7]
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	f004 fb7a 	bl	8010cf0 <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800c5fc:	4b1a      	ldr	r3, [pc, #104]	; (800c668 <HandleRadioRxErrorTimeout+0x118>)
 800c5fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c600:	4618      	mov	r0, r3
 800c602:	f00c f9df 	bl	80189c4 <UTIL_TIMER_GetElapsedTime>
 800c606:	4602      	mov	r2, r0
 800c608:	4b19      	ldr	r3, [pc, #100]	; (800c670 <HandleRadioRxErrorTimeout+0x120>)
 800c60a:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800c60e:	429a      	cmp	r2, r3
 800c610:	d323      	bcc.n	800c65a <HandleRadioRxErrorTimeout+0x10a>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 800c612:	4818      	ldr	r0, [pc, #96]	; (800c674 <HandleRadioRxErrorTimeout+0x124>)
 800c614:	f00c f8aa 	bl	801876c <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800c618:	4a15      	ldr	r2, [pc, #84]	; (800c670 <HandleRadioRxErrorTimeout+0x120>)
 800c61a:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800c61e:	f043 0320 	orr.w	r3, r3, #32
 800c622:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 800c626:	e018      	b.n	800c65a <HandleRadioRxErrorTimeout+0x10a>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 800c628:	4b11      	ldr	r3, [pc, #68]	; (800c670 <HandleRadioRxErrorTimeout+0x120>)
 800c62a:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d003      	beq.n	800c63a <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800c632:	4a0f      	ldr	r2, [pc, #60]	; (800c670 <HandleRadioRxErrorTimeout+0x120>)
 800c634:	79bb      	ldrb	r3, [r7, #6]
 800c636:	f882 3439 	strb.w	r3, [r2, #1081]	; 0x439
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800c63a:	79bb      	ldrb	r3, [r7, #6]
 800c63c:	4618      	mov	r0, r3
 800c63e:	f004 fb57 	bl	8010cf0 <LoRaMacConfirmQueueSetStatusCmn>

            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800c642:	4b09      	ldr	r3, [pc, #36]	; (800c668 <HandleRadioRxErrorTimeout+0x118>)
 800c644:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800c648:	2b02      	cmp	r3, #2
 800c64a:	d006      	beq.n	800c65a <HandleRadioRxErrorTimeout+0x10a>
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
 800c64c:	4a08      	ldr	r2, [pc, #32]	; (800c670 <HandleRadioRxErrorTimeout+0x120>)
 800c64e:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800c652:	f043 0320 	orr.w	r3, r3, #32
 800c656:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            }
        }
    }

    UpdateRxSlotIdleState( );
 800c65a:	f7ff fa2d 	bl	800bab8 <UpdateRxSlotIdleState>
}
 800c65e:	bf00      	nop
 800c660:	3710      	adds	r7, #16
 800c662:	46bd      	mov	sp, r7
 800c664:	bd80      	pop	{r7, pc}
 800c666:	bf00      	nop
 800c668:	200008e8 	.word	0x200008e8
 800c66c:	08019c7c 	.word	0x08019c7c
 800c670:	200003e0 	.word	0x200003e0
 800c674:	20000778 	.word	0x20000778

0800c678 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 800c678:	b580      	push	{r7, lr}
 800c67a:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800c67c:	2106      	movs	r1, #6
 800c67e:	2005      	movs	r0, #5
 800c680:	f7ff ff66 	bl	800c550 <HandleRadioRxErrorTimeout>
}
 800c684:	bf00      	nop
 800c686:	bd80      	pop	{r7, pc}

0800c688 <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 800c688:	b580      	push	{r7, lr}
 800c68a:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800c68c:	2104      	movs	r1, #4
 800c68e:	2003      	movs	r0, #3
 800c690:	f7ff ff5e 	bl	800c550 <HandleRadioRxErrorTimeout>
}
 800c694:	bf00      	nop
 800c696:	bd80      	pop	{r7, pc}

0800c698 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 800c698:	b580      	push	{r7, lr}
 800c69a:	b084      	sub	sp, #16
 800c69c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c69e:	f3ef 8310 	mrs	r3, PRIMASK
 800c6a2:	607b      	str	r3, [r7, #4]
  return(result);
 800c6a4:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 800c6a6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800c6a8:	b672      	cpsid	i
}
 800c6aa:	bf00      	nop
    events = LoRaMacRadioEvents;
 800c6ac:	4b1d      	ldr	r3, [pc, #116]	; (800c724 <LoRaMacHandleIrqEvents+0x8c>)
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 800c6b2:	4b1c      	ldr	r3, [pc, #112]	; (800c724 <LoRaMacHandleIrqEvents+0x8c>)
 800c6b4:	2200      	movs	r2, #0
 800c6b6:	601a      	str	r2, [r3, #0]
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c6bc:	68bb      	ldr	r3, [r7, #8]
 800c6be:	f383 8810 	msr	PRIMASK, r3
}
 800c6c2:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 800c6c4:	683b      	ldr	r3, [r7, #0]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d027      	beq.n	800c71a <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 800c6ca:	783b      	ldrb	r3, [r7, #0]
 800c6cc:	f003 0310 	and.w	r3, r3, #16
 800c6d0:	b2db      	uxtb	r3, r3
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d001      	beq.n	800c6da <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 800c6d6:	f7ff fa07 	bl	800bae8 <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 800c6da:	783b      	ldrb	r3, [r7, #0]
 800c6dc:	f003 0308 	and.w	r3, r3, #8
 800c6e0:	b2db      	uxtb	r3, r3
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d001      	beq.n	800c6ea <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 800c6e6:	f7ff fabf 	bl	800bc68 <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 800c6ea:	783b      	ldrb	r3, [r7, #0]
 800c6ec:	f003 0304 	and.w	r3, r3, #4
 800c6f0:	b2db      	uxtb	r3, r3
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d001      	beq.n	800c6fa <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 800c6f6:	f7ff feff 	bl	800c4f8 <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 800c6fa:	783b      	ldrb	r3, [r7, #0]
 800c6fc:	f003 0302 	and.w	r3, r3, #2
 800c700:	b2db      	uxtb	r3, r3
 800c702:	2b00      	cmp	r3, #0
 800c704:	d001      	beq.n	800c70a <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 800c706:	f7ff ffb7 	bl	800c678 <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 800c70a:	783b      	ldrb	r3, [r7, #0]
 800c70c:	f003 0301 	and.w	r3, r3, #1
 800c710:	b2db      	uxtb	r3, r3
 800c712:	2b00      	cmp	r3, #0
 800c714:	d001      	beq.n	800c71a <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 800c716:	f7ff ffb7 	bl	800c688 <ProcessRadioRxTimeout>
        }
    }
}
 800c71a:	bf00      	nop
 800c71c:	3710      	adds	r7, #16
 800c71e:	46bd      	mov	sp, r7
 800c720:	bd80      	pop	{r7, pc}
 800c722:	bf00      	nop
 800c724:	20000bbc 	.word	0x20000bbc

0800c728 <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 800c728:	b480      	push	{r7}
 800c72a:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800c72c:	4b08      	ldr	r3, [pc, #32]	; (800c750 <LoRaMacIsBusy+0x28>)
 800c72e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800c732:	2b00      	cmp	r3, #0
 800c734:	d106      	bne.n	800c744 <LoRaMacIsBusy+0x1c>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800c736:	4b06      	ldr	r3, [pc, #24]	; (800c750 <LoRaMacIsBusy+0x28>)
 800c738:	f893 3482 	ldrb.w	r3, [r3, #1154]	; 0x482
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800c73c:	2b01      	cmp	r3, #1
 800c73e:	d101      	bne.n	800c744 <LoRaMacIsBusy+0x1c>
    {
        return false;
 800c740:	2300      	movs	r3, #0
 800c742:	e000      	b.n	800c746 <LoRaMacIsBusy+0x1e>
    }
    return true;
 800c744:	2301      	movs	r3, #1
}
 800c746:	4618      	mov	r0, r3
 800c748:	46bd      	mov	sp, r7
 800c74a:	bc80      	pop	{r7}
 800c74c:	4770      	bx	lr
 800c74e:	bf00      	nop
 800c750:	200003e0 	.word	0x200003e0

0800c754 <LoRaMacEnableRequests>:


static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 800c754:	b480      	push	{r7}
 800c756:	b083      	sub	sp, #12
 800c758:	af00      	add	r7, sp, #0
 800c75a:	4603      	mov	r3, r0
 800c75c:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 800c75e:	4a04      	ldr	r2, [pc, #16]	; (800c770 <LoRaMacEnableRequests+0x1c>)
 800c760:	79fb      	ldrb	r3, [r7, #7]
 800c762:	f882 3482 	strb.w	r3, [r2, #1154]	; 0x482
}
 800c766:	bf00      	nop
 800c768:	370c      	adds	r7, #12
 800c76a:	46bd      	mov	sp, r7
 800c76c:	bc80      	pop	{r7}
 800c76e:	4770      	bx	lr
 800c770:	200003e0 	.word	0x200003e0

0800c774 <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 800c774:	b580      	push	{r7, lr}
 800c776:	b082      	sub	sp, #8
 800c778:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 800c77a:	4b2c      	ldr	r3, [pc, #176]	; (800c82c <LoRaMacHandleRequestEvents+0xb8>)
 800c77c:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800c780:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 800c782:	4b2a      	ldr	r3, [pc, #168]	; (800c82c <LoRaMacHandleRequestEvents+0xb8>)
 800c784:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d14a      	bne.n	800c822 <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800c78c:	4b27      	ldr	r3, [pc, #156]	; (800c82c <LoRaMacHandleRequestEvents+0xb8>)
 800c78e:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800c792:	f003 0301 	and.w	r3, r3, #1
 800c796:	b2db      	uxtb	r3, r3
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d006      	beq.n	800c7aa <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800c79c:	4a23      	ldr	r2, [pc, #140]	; (800c82c <LoRaMacHandleRequestEvents+0xb8>)
 800c79e:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800c7a2:	f36f 0300 	bfc	r3, #0, #1
 800c7a6:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800c7aa:	4b20      	ldr	r3, [pc, #128]	; (800c82c <LoRaMacHandleRequestEvents+0xb8>)
 800c7ac:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800c7b0:	f003 0304 	and.w	r3, r3, #4
 800c7b4:	b2db      	uxtb	r3, r3
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d006      	beq.n	800c7c8 <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800c7ba:	4a1c      	ldr	r2, [pc, #112]	; (800c82c <LoRaMacHandleRequestEvents+0xb8>)
 800c7bc:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800c7c0:	f36f 0382 	bfc	r3, #2, #1
 800c7c4:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800c7c8:	2001      	movs	r0, #1
 800c7ca:	f7ff ffc3 	bl	800c754 <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 800c7ce:	793b      	ldrb	r3, [r7, #4]
 800c7d0:	f003 0301 	and.w	r3, r3, #1
 800c7d4:	b2db      	uxtb	r3, r3
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d005      	beq.n	800c7e6 <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800c7da:	4b14      	ldr	r3, [pc, #80]	; (800c82c <LoRaMacHandleRequestEvents+0xb8>)
 800c7dc:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	4813      	ldr	r0, [pc, #76]	; (800c830 <LoRaMacHandleRequestEvents+0xbc>)
 800c7e4:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 800c7e6:	793b      	ldrb	r3, [r7, #4]
 800c7e8:	f003 0304 	and.w	r3, r3, #4
 800c7ec:	b2db      	uxtb	r3, r3
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d00e      	beq.n	800c810 <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800c7f2:	4810      	ldr	r0, [pc, #64]	; (800c834 <LoRaMacHandleRequestEvents+0xc0>)
 800c7f4:	f004 faca 	bl	8010d8c <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800c7f8:	f004 fb14 	bl	8010e24 <LoRaMacConfirmQueueGetCnt>
 800c7fc:	4603      	mov	r3, r0
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d006      	beq.n	800c810 <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800c802:	4a0a      	ldr	r2, [pc, #40]	; (800c82c <LoRaMacHandleRequestEvents+0xb8>)
 800c804:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800c808:	f043 0304 	orr.w	r3, r3, #4
 800c80c:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 800c810:	f003 fdfb 	bl	801040a <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 800c814:	4a05      	ldr	r2, [pc, #20]	; (800c82c <LoRaMacHandleRequestEvents+0xb8>)
 800c816:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800c81a:	f36f 1345 	bfc	r3, #5, #1
 800c81e:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }
}
 800c822:	bf00      	nop
 800c824:	3708      	adds	r7, #8
 800c826:	46bd      	mov	sp, r7
 800c828:	bd80      	pop	{r7, pc}
 800c82a:	bf00      	nop
 800c82c:	200003e0 	.word	0x200003e0
 800c830:	20000818 	.word	0x20000818
 800c834:	2000082c 	.word	0x2000082c

0800c838 <LoRaMacHandleScheduleUplinkEvent>:

static void LoRaMacHandleScheduleUplinkEvent( void )
{
 800c838:	b580      	push	{r7, lr}
 800c83a:	b082      	sub	sp, #8
 800c83c:	af00      	add	r7, sp, #0
    // Handle events
    if( MacCtx.MacState == LORAMAC_IDLE )
 800c83e:	4b0a      	ldr	r3, [pc, #40]	; (800c868 <LoRaMacHandleScheduleUplinkEvent+0x30>)
 800c840:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800c844:	2b00      	cmp	r3, #0
 800c846:	d10a      	bne.n	800c85e <LoRaMacHandleScheduleUplinkEvent+0x26>
    {
        // Verify if sticky MAC commands are pending or not
        bool isStickyMacCommandPending = false;
 800c848:	2300      	movs	r3, #0
 800c84a:	71fb      	strb	r3, [r7, #7]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 800c84c:	1dfb      	adds	r3, r7, #7
 800c84e:	4618      	mov	r0, r3
 800c850:	f004 f882 	bl	8010958 <LoRaMacCommandsStickyCmdsPending>
        if( isStickyMacCommandPending == true )
 800c854:	79fb      	ldrb	r3, [r7, #7]
 800c856:	2b00      	cmp	r3, #0
 800c858:	d001      	beq.n	800c85e <LoRaMacHandleScheduleUplinkEvent+0x26>
        {// Setup MLME indication
            SetMlmeScheduleUplinkIndication( );
 800c85a:	f000 fc81 	bl	800d160 <SetMlmeScheduleUplinkIndication>
        }
    }
}
 800c85e:	bf00      	nop
 800c860:	3708      	adds	r7, #8
 800c862:	46bd      	mov	sp, r7
 800c864:	bd80      	pop	{r7, pc}
 800c866:	bf00      	nop
 800c868:	200003e0 	.word	0x200003e0

0800c86c <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 800c86c:	b580      	push	{r7, lr}
 800c86e:	b088      	sub	sp, #32
 800c870:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 800c872:	4b25      	ldr	r3, [pc, #148]	; (800c908 <LoRaMacHandleIndicationEvents+0x9c>)
 800c874:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800c878:	f003 0308 	and.w	r3, r3, #8
 800c87c:	b2db      	uxtb	r3, r3
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d00d      	beq.n	800c89e <LoRaMacHandleIndicationEvents+0x32>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 800c882:	4a21      	ldr	r2, [pc, #132]	; (800c908 <LoRaMacHandleIndicationEvents+0x9c>)
 800c884:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800c888:	f36f 03c3 	bfc	r3, #3, #1
 800c88c:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 800c890:	4b1d      	ldr	r3, [pc, #116]	; (800c908 <LoRaMacHandleIndicationEvents+0x9c>)
 800c892:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800c896:	68db      	ldr	r3, [r3, #12]
 800c898:	491c      	ldr	r1, [pc, #112]	; (800c90c <LoRaMacHandleIndicationEvents+0xa0>)
 800c89a:	481d      	ldr	r0, [pc, #116]	; (800c910 <LoRaMacHandleIndicationEvents+0xa4>)
 800c89c:	4798      	blx	r3
    }

    if( MacCtx.MacFlags.Bits.MlmeSchedUplinkInd == 1 )
 800c89e:	4b1a      	ldr	r3, [pc, #104]	; (800c908 <LoRaMacHandleIndicationEvents+0x9c>)
 800c8a0:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800c8a4:	f003 0310 	and.w	r3, r3, #16
 800c8a8:	b2db      	uxtb	r3, r3
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d012      	beq.n	800c8d4 <LoRaMacHandleIndicationEvents+0x68>
    {
        MlmeIndication_t schduleUplinkIndication;
        schduleUplinkIndication.MlmeIndication = MLME_SCHEDULE_UPLINK;
 800c8ae:	2307      	movs	r3, #7
 800c8b0:	713b      	strb	r3, [r7, #4]
        schduleUplinkIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800c8b2:	2300      	movs	r3, #0
 800c8b4:	717b      	strb	r3, [r7, #5]

        MacCtx.MacPrimitives->MacMlmeIndication( &schduleUplinkIndication, &MacCtx.RxStatus );
 800c8b6:	4b14      	ldr	r3, [pc, #80]	; (800c908 <LoRaMacHandleIndicationEvents+0x9c>)
 800c8b8:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800c8bc:	68db      	ldr	r3, [r3, #12]
 800c8be:	1d3a      	adds	r2, r7, #4
 800c8c0:	4912      	ldr	r1, [pc, #72]	; (800c90c <LoRaMacHandleIndicationEvents+0xa0>)
 800c8c2:	4610      	mov	r0, r2
 800c8c4:	4798      	blx	r3
        MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 0;
 800c8c6:	4a10      	ldr	r2, [pc, #64]	; (800c908 <LoRaMacHandleIndicationEvents+0x9c>)
 800c8c8:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800c8cc:	f36f 1304 	bfc	r3, #4, #1
 800c8d0:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800c8d4:	4b0c      	ldr	r3, [pc, #48]	; (800c908 <LoRaMacHandleIndicationEvents+0x9c>)
 800c8d6:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800c8da:	f003 0302 	and.w	r3, r3, #2
 800c8de:	b2db      	uxtb	r3, r3
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d00d      	beq.n	800c900 <LoRaMacHandleIndicationEvents+0x94>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800c8e4:	4a08      	ldr	r2, [pc, #32]	; (800c908 <LoRaMacHandleIndicationEvents+0x9c>)
 800c8e6:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800c8ea:	f36f 0341 	bfc	r3, #1, #1
 800c8ee:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 800c8f2:	4b05      	ldr	r3, [pc, #20]	; (800c908 <LoRaMacHandleIndicationEvents+0x9c>)
 800c8f4:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800c8f8:	685b      	ldr	r3, [r3, #4]
 800c8fa:	4904      	ldr	r1, [pc, #16]	; (800c90c <LoRaMacHandleIndicationEvents+0xa0>)
 800c8fc:	4805      	ldr	r0, [pc, #20]	; (800c914 <LoRaMacHandleIndicationEvents+0xa8>)
 800c8fe:	4798      	blx	r3
    }
}
 800c900:	bf00      	nop
 800c902:	3720      	adds	r7, #32
 800c904:	46bd      	mov	sp, r7
 800c906:	bd80      	pop	{r7, pc}
 800c908:	200003e0 	.word	0x200003e0
 800c90c:	2000085c 	.word	0x2000085c
 800c910:	20000840 	.word	0x20000840
 800c914:	200007fc 	.word	0x200007fc

0800c918 <LoRaMacHandleMcpsRequest>:

static void LoRaMacHandleMcpsRequest( void )
{
 800c918:	b580      	push	{r7, lr}
 800c91a:	b082      	sub	sp, #8
 800c91c:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800c91e:	4b32      	ldr	r3, [pc, #200]	; (800c9e8 <LoRaMacHandleMcpsRequest+0xd0>)
 800c920:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800c924:	f003 0301 	and.w	r3, r3, #1
 800c928:	b2db      	uxtb	r3, r3
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d058      	beq.n	800c9e0 <LoRaMacHandleMcpsRequest+0xc8>
    {
        bool stopRetransmission = false;
 800c92e:	2300      	movs	r3, #0
 800c930:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 800c932:	2300      	movs	r3, #0
 800c934:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800c936:	4b2c      	ldr	r3, [pc, #176]	; (800c9e8 <LoRaMacHandleMcpsRequest+0xd0>)
 800c938:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d004      	beq.n	800c94a <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 800c940:	4b29      	ldr	r3, [pc, #164]	; (800c9e8 <LoRaMacHandleMcpsRequest+0xd0>)
 800c942:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800c946:	2b03      	cmp	r3, #3
 800c948:	d104      	bne.n	800c954 <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800c94a:	f002 f89f 	bl	800ea8c <CheckRetransUnconfirmedUplink>
 800c94e:	4603      	mov	r3, r0
 800c950:	71fb      	strb	r3, [r7, #7]
 800c952:	e020      	b.n	800c996 <LoRaMacHandleMcpsRequest+0x7e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800c954:	4b24      	ldr	r3, [pc, #144]	; (800c9e8 <LoRaMacHandleMcpsRequest+0xd0>)
 800c956:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 800c95a:	2b01      	cmp	r3, #1
 800c95c:	d11b      	bne.n	800c996 <LoRaMacHandleMcpsRequest+0x7e>
        {
            if( MacCtx.AckTimeoutRetry == true )
 800c95e:	4b22      	ldr	r3, [pc, #136]	; (800c9e8 <LoRaMacHandleMcpsRequest+0xd0>)
 800c960:	f893 3413 	ldrb.w	r3, [r3, #1043]	; 0x413
 800c964:	2b00      	cmp	r3, #0
 800c966:	d014      	beq.n	800c992 <LoRaMacHandleMcpsRequest+0x7a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 800c968:	f002 f8bc 	bl	800eae4 <CheckRetransConfirmedUplink>
 800c96c:	4603      	mov	r3, r0
 800c96e:	71fb      	strb	r3, [r7, #7]

                if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800c970:	4b1e      	ldr	r3, [pc, #120]	; (800c9ec <LoRaMacHandleMcpsRequest+0xd4>)
 800c972:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 800c976:	2b00      	cmp	r3, #0
 800c978:	d10d      	bne.n	800c996 <LoRaMacHandleMcpsRequest+0x7e>
                {
                    if( stopRetransmission == false )
 800c97a:	79fb      	ldrb	r3, [r7, #7]
 800c97c:	f083 0301 	eor.w	r3, r3, #1
 800c980:	b2db      	uxtb	r3, r3
 800c982:	2b00      	cmp	r3, #0
 800c984:	d002      	beq.n	800c98c <LoRaMacHandleMcpsRequest+0x74>
                    {
                        AckTimeoutRetriesProcess( );
 800c986:	f002 f929 	bl	800ebdc <AckTimeoutRetriesProcess>
 800c98a:	e004      	b.n	800c996 <LoRaMacHandleMcpsRequest+0x7e>
                    }
                    else
                    {
                        AckTimeoutRetriesFinalize( );
 800c98c:	f002 f964 	bl	800ec58 <AckTimeoutRetriesFinalize>
 800c990:	e001      	b.n	800c996 <LoRaMacHandleMcpsRequest+0x7e>
                    }
                }
            }
            else
            {
                waitForRetransmission = true;
 800c992:	2301      	movs	r3, #1
 800c994:	71bb      	strb	r3, [r7, #6]
            }
        }

        if( stopRetransmission == true )
 800c996:	79fb      	ldrb	r3, [r7, #7]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d00d      	beq.n	800c9b8 <LoRaMacHandleMcpsRequest+0xa0>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 800c99c:	4814      	ldr	r0, [pc, #80]	; (800c9f0 <LoRaMacHandleMcpsRequest+0xd8>)
 800c99e:	f00b fee5 	bl	801876c <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800c9a2:	4b11      	ldr	r3, [pc, #68]	; (800c9e8 <LoRaMacHandleMcpsRequest+0xd0>)
 800c9a4:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800c9a8:	f023 0320 	bic.w	r3, r3, #32
 800c9ac:	4a0e      	ldr	r2, [pc, #56]	; (800c9e8 <LoRaMacHandleMcpsRequest+0xd0>)
 800c9ae:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            StopRetransmission( );
 800c9b2:	f002 f8b9 	bl	800eb28 <StopRetransmission>
            MacCtx.AckTimeoutRetry = false;
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 800c9b6:	e013      	b.n	800c9e0 <LoRaMacHandleMcpsRequest+0xc8>
        else if( waitForRetransmission == false )
 800c9b8:	79bb      	ldrb	r3, [r7, #6]
 800c9ba:	f083 0301 	eor.w	r3, r3, #1
 800c9be:	b2db      	uxtb	r3, r3
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d00d      	beq.n	800c9e0 <LoRaMacHandleMcpsRequest+0xc8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800c9c4:	4a08      	ldr	r2, [pc, #32]	; (800c9e8 <LoRaMacHandleMcpsRequest+0xd0>)
 800c9c6:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800c9ca:	f36f 1345 	bfc	r3, #5, #1
 800c9ce:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            MacCtx.AckTimeoutRetry = false;
 800c9d2:	4b05      	ldr	r3, [pc, #20]	; (800c9e8 <LoRaMacHandleMcpsRequest+0xd0>)
 800c9d4:	2200      	movs	r2, #0
 800c9d6:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
            OnTxDelayedTimerEvent( NULL );
 800c9da:	2000      	movs	r0, #0
 800c9dc:	f000 f97e 	bl	800ccdc <OnTxDelayedTimerEvent>
}
 800c9e0:	bf00      	nop
 800c9e2:	3708      	adds	r7, #8
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	bd80      	pop	{r7, pc}
 800c9e8:	200003e0 	.word	0x200003e0
 800c9ec:	200008e8 	.word	0x200008e8
 800c9f0:	20000748 	.word	0x20000748

0800c9f4 <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 800c9f4:	b580      	push	{r7, lr}
 800c9f6:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800c9f8:	4b1b      	ldr	r3, [pc, #108]	; (800ca68 <LoRaMacHandleMlmeRequest+0x74>)
 800c9fa:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800c9fe:	f003 0304 	and.w	r3, r3, #4
 800ca02:	b2db      	uxtb	r3, r3
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d02c      	beq.n	800ca62 <LoRaMacHandleMlmeRequest+0x6e>
    {
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800ca08:	2001      	movs	r0, #1
 800ca0a:	f004 f9a5 	bl	8010d58 <LoRaMacConfirmQueueIsCmdActive>
 800ca0e:	4603      	mov	r3, r0
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d012      	beq.n	800ca3a <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800ca14:	2001      	movs	r0, #1
 800ca16:	f004 f941 	bl	8010c9c <LoRaMacConfirmQueueGetStatus>
 800ca1a:	4603      	mov	r3, r0
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d103      	bne.n	800ca28 <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 800ca20:	4b11      	ldr	r3, [pc, #68]	; (800ca68 <LoRaMacHandleMlmeRequest+0x74>)
 800ca22:	2200      	movs	r2, #0
 800ca24:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
            }
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800ca28:	4b0f      	ldr	r3, [pc, #60]	; (800ca68 <LoRaMacHandleMlmeRequest+0x74>)
 800ca2a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800ca2e:	f023 0302 	bic.w	r3, r3, #2
 800ca32:	4a0d      	ldr	r2, [pc, #52]	; (800ca68 <LoRaMacHandleMlmeRequest+0x74>)
 800ca34:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
    }
}
 800ca38:	e013      	b.n	800ca62 <LoRaMacHandleMlmeRequest+0x6e>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800ca3a:	2005      	movs	r0, #5
 800ca3c:	f004 f98c 	bl	8010d58 <LoRaMacConfirmQueueIsCmdActive>
 800ca40:	4603      	mov	r3, r0
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d105      	bne.n	800ca52 <LoRaMacHandleMlmeRequest+0x5e>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 800ca46:	2006      	movs	r0, #6
 800ca48:	f004 f986 	bl	8010d58 <LoRaMacConfirmQueueIsCmdActive>
 800ca4c:	4603      	mov	r3, r0
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d007      	beq.n	800ca62 <LoRaMacHandleMlmeRequest+0x6e>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800ca52:	4b05      	ldr	r3, [pc, #20]	; (800ca68 <LoRaMacHandleMlmeRequest+0x74>)
 800ca54:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800ca58:	f023 0302 	bic.w	r3, r3, #2
 800ca5c:	4a02      	ldr	r2, [pc, #8]	; (800ca68 <LoRaMacHandleMlmeRequest+0x74>)
 800ca5e:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 800ca62:	bf00      	nop
 800ca64:	bd80      	pop	{r7, pc}
 800ca66:	bf00      	nop
 800ca68:	200003e0 	.word	0x200003e0

0800ca6c <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 800ca6c:	b580      	push	{r7, lr}
 800ca6e:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800ca70:	200c      	movs	r0, #12
 800ca72:	f004 f971 	bl	8010d58 <LoRaMacConfirmQueueIsCmdActive>
 800ca76:	4603      	mov	r3, r0
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d019      	beq.n	800cab0 <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 800ca7c:	4b0e      	ldr	r3, [pc, #56]	; (800cab8 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800ca7e:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800ca82:	f003 0301 	and.w	r3, r3, #1
 800ca86:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d111      	bne.n	800cab0 <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800ca8c:	4b0a      	ldr	r3, [pc, #40]	; (800cab8 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800ca8e:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800ca92:	f003 0304 	and.w	r3, r3, #4
 800ca96:	b2db      	uxtb	r3, r3
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d009      	beq.n	800cab0 <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800ca9c:	4b06      	ldr	r3, [pc, #24]	; (800cab8 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800ca9e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800caa2:	f023 0302 	bic.w	r3, r3, #2
 800caa6:	4a04      	ldr	r2, [pc, #16]	; (800cab8 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800caa8:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 800caac:	2301      	movs	r3, #1
 800caae:	e000      	b.n	800cab2 <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 800cab0:	2300      	movs	r3, #0
}
 800cab2:	4618      	mov	r0, r3
 800cab4:	bd80      	pop	{r7, pc}
 800cab6:	bf00      	nop
 800cab8:	200003e0 	.word	0x200003e0

0800cabc <LoRaMacCheckForRxAbort>:

static void LoRaMacCheckForRxAbort( void )
{
 800cabc:	b480      	push	{r7}
 800cabe:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800cac0:	4b0d      	ldr	r3, [pc, #52]	; (800caf8 <LoRaMacCheckForRxAbort+0x3c>)
 800cac2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800cac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d00f      	beq.n	800caee <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 800cace:	4b0a      	ldr	r3, [pc, #40]	; (800caf8 <LoRaMacCheckForRxAbort+0x3c>)
 800cad0:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800cad4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cad8:	4a07      	ldr	r2, [pc, #28]	; (800caf8 <LoRaMacCheckForRxAbort+0x3c>)
 800cada:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800cade:	4b06      	ldr	r3, [pc, #24]	; (800caf8 <LoRaMacCheckForRxAbort+0x3c>)
 800cae0:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800cae4:	f023 0302 	bic.w	r3, r3, #2
 800cae8:	4a03      	ldr	r2, [pc, #12]	; (800caf8 <LoRaMacCheckForRxAbort+0x3c>)
 800caea:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 800caee:	bf00      	nop
 800caf0:	46bd      	mov	sp, r7
 800caf2:	bc80      	pop	{r7}
 800caf4:	4770      	bx	lr
 800caf6:	bf00      	nop
 800caf8:	200003e0 	.word	0x200003e0

0800cafc <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 800cafc:	b580      	push	{r7, lr}
 800cafe:	b084      	sub	sp, #16
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 800cb04:	2300      	movs	r3, #0
 800cb06:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800cb08:	2300      	movs	r3, #0
 800cb0a:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 800cb0c:	4b50      	ldr	r3, [pc, #320]	; (800cc50 <LoRaMacHandleNvm+0x154>)
 800cb0e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	f040 8097 	bne.w	800cc46 <LoRaMacHandleNvm+0x14a>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	2124      	movs	r1, #36	; 0x24
 800cb1c:	4618      	mov	r0, r3
 800cb1e:	f007 fe89 	bl	8014834 <Crc32>
 800cb22:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb28:	68ba      	ldr	r2, [r7, #8]
 800cb2a:	429a      	cmp	r2, r3
 800cb2c:	d006      	beq.n	800cb3c <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	68ba      	ldr	r2, [r7, #8]
 800cb32:	625a      	str	r2, [r3, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 800cb34:	89fb      	ldrh	r3, [r7, #14]
 800cb36:	f043 0301 	orr.w	r3, r3, #1
 800cb3a:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	3328      	adds	r3, #40	; 0x28
 800cb40:	2114      	movs	r1, #20
 800cb42:	4618      	mov	r0, r3
 800cb44:	f007 fe76 	bl	8014834 <Crc32>
 800cb48:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb4e:	68ba      	ldr	r2, [r7, #8]
 800cb50:	429a      	cmp	r2, r3
 800cb52:	d006      	beq.n	800cb62 <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	68ba      	ldr	r2, [r7, #8]
 800cb58:	63da      	str	r2, [r3, #60]	; 0x3c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 800cb5a:	89fb      	ldrh	r3, [r7, #14]
 800cb5c:	f043 0302 	orr.w	r3, r3, #2
 800cb60:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	3340      	adds	r3, #64	; 0x40
 800cb66:	21d4      	movs	r1, #212	; 0xd4
 800cb68:	4618      	mov	r0, r3
 800cb6a:	f007 fe63 	bl	8014834 <Crc32>
 800cb6e:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800cb76:	68ba      	ldr	r2, [r7, #8]
 800cb78:	429a      	cmp	r2, r3
 800cb7a:	d007      	beq.n	800cb8c <LoRaMacHandleNvm+0x90>
    {
        nvmData->MacGroup2.Crc32 = crc;
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	68ba      	ldr	r2, [r7, #8]
 800cb80:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 800cb84:	89fb      	ldrh	r3, [r7, #14]
 800cb86:	f043 0304 	orr.w	r3, r3, #4
 800cb8a:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	f503 738c 	add.w	r3, r3, #280	; 0x118
 800cb92:	21bc      	movs	r1, #188	; 0xbc
 800cb94:	4618      	mov	r0, r3
 800cb96:	f007 fe4d 	bl	8014834 <Crc32>
 800cb9a:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 800cba2:	68ba      	ldr	r2, [r7, #8]
 800cba4:	429a      	cmp	r2, r3
 800cba6:	d007      	beq.n	800cbb8 <LoRaMacHandleNvm+0xbc>
    {
        nvmData->SecureElement.Crc32 = crc;
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	68ba      	ldr	r2, [r7, #8]
 800cbac:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 800cbb0:	89fb      	ldrh	r3, [r7, #14]
 800cbb2:	f043 0308 	orr.w	r3, r3, #8
 800cbb6:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 800cbbe:	2118      	movs	r1, #24
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	f007 fe37 	bl	8014834 <Crc32>
 800cbc6:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	f8d3 31f0 	ldr.w	r3, [r3, #496]	; 0x1f0
 800cbce:	68ba      	ldr	r2, [r7, #8]
 800cbd0:	429a      	cmp	r2, r3
 800cbd2:	d007      	beq.n	800cbe4 <LoRaMacHandleNvm+0xe8>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	68ba      	ldr	r2, [r7, #8]
 800cbd8:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 800cbdc:	89fb      	ldrh	r3, [r7, #14]
 800cbde:	f043 0310 	orr.w	r3, r3, #16
 800cbe2:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800cbea:	21c4      	movs	r1, #196	; 0xc4
 800cbec:	4618      	mov	r0, r3
 800cbee:	f007 fe21 	bl	8014834 <Crc32>
 800cbf2:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cbfa:	68ba      	ldr	r2, [r7, #8]
 800cbfc:	429a      	cmp	r2, r3
 800cbfe:	d007      	beq.n	800cc10 <LoRaMacHandleNvm+0x114>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	68ba      	ldr	r2, [r7, #8]
 800cc04:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 800cc08:	89fb      	ldrh	r3, [r7, #14]
 800cc0a:	f043 0320 	orr.w	r3, r3, #32
 800cc0e:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 800cc16:	2114      	movs	r1, #20
 800cc18:	4618      	mov	r0, r3
 800cc1a:	f007 fe0b 	bl	8014834 <Crc32>
 800cc1e:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 800cc26:	68ba      	ldr	r2, [r7, #8]
 800cc28:	429a      	cmp	r2, r3
 800cc2a:	d007      	beq.n	800cc3c <LoRaMacHandleNvm+0x140>
    {
        nvmData->ClassB.Crc32 = crc;
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	68ba      	ldr	r2, [r7, #8]
 800cc30:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 800cc34:	89fb      	ldrh	r3, [r7, #14]
 800cc36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc3a:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 800cc3c:	89fb      	ldrh	r3, [r7, #14]
 800cc3e:	4618      	mov	r0, r3
 800cc40:	f001 ffae 	bl	800eba0 <CallNvmDataChangeCallback>
 800cc44:	e000      	b.n	800cc48 <LoRaMacHandleNvm+0x14c>
        return;
 800cc46:	bf00      	nop
}
 800cc48:	3710      	adds	r7, #16
 800cc4a:	46bd      	mov	sp, r7
 800cc4c:	bd80      	pop	{r7, pc}
 800cc4e:	bf00      	nop
 800cc50:	200003e0 	.word	0x200003e0

0800cc54 <LoRaMacProcess>:


void LoRaMacProcess( void )
{
 800cc54:	b580      	push	{r7, lr}
 800cc56:	b082      	sub	sp, #8
 800cc58:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 800cc5a:	2300      	movs	r3, #0
 800cc5c:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 800cc5e:	f7ff fd1b 	bl	800c698 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800cc62:	f003 fc36 	bl	80104d2 <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800cc66:	4b1b      	ldr	r3, [pc, #108]	; (800ccd4 <LoRaMacProcess+0x80>)
 800cc68:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800cc6c:	f003 0320 	and.w	r3, r3, #32
 800cc70:	b2db      	uxtb	r3, r3
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d021      	beq.n	800ccba <LoRaMacProcess+0x66>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800cc76:	2000      	movs	r0, #0
 800cc78:	f7ff fd6c 	bl	800c754 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800cc7c:	f7ff ff1e 	bl	800cabc <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 800cc80:	f002 f81e 	bl	800ecc0 <IsRequestPending>
 800cc84:	4603      	mov	r3, r0
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d006      	beq.n	800cc98 <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800cc8a:	f7ff feef 	bl	800ca6c <LoRaMacCheckForBeaconAcquisition>
 800cc8e:	4603      	mov	r3, r0
 800cc90:	461a      	mov	r2, r3
 800cc92:	79fb      	ldrb	r3, [r7, #7]
 800cc94:	4313      	orrs	r3, r2
 800cc96:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 800cc98:	79fb      	ldrb	r3, [r7, #7]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d103      	bne.n	800cca6 <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 800cc9e:	f7ff fea9 	bl	800c9f4 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 800cca2:	f7ff fe39 	bl	800c918 <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 800cca6:	f7ff fd65 	bl	800c774 <LoRaMacHandleRequestEvents>
        LoRaMacHandleScheduleUplinkEvent( );
 800ccaa:	f7ff fdc5 	bl	800c838 <LoRaMacHandleScheduleUplinkEvent>
        LoRaMacHandleNvm( &Nvm );
 800ccae:	480a      	ldr	r0, [pc, #40]	; (800ccd8 <LoRaMacProcess+0x84>)
 800ccb0:	f7ff ff24 	bl	800cafc <LoRaMacHandleNvm>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800ccb4:	2001      	movs	r0, #1
 800ccb6:	f7ff fd4d 	bl	800c754 <LoRaMacEnableRequests>
    }
    LoRaMacHandleIndicationEvents( );
 800ccba:	f7ff fdd7 	bl	800c86c <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800ccbe:	4b05      	ldr	r3, [pc, #20]	; (800ccd4 <LoRaMacProcess+0x80>)
 800ccc0:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800ccc4:	2b02      	cmp	r3, #2
 800ccc6:	d101      	bne.n	800cccc <LoRaMacProcess+0x78>
    {
        OpenContinuousRxCWindow( );
 800ccc8:	f001 fb7c 	bl	800e3c4 <OpenContinuousRxCWindow>
    }
}
 800cccc:	bf00      	nop
 800ccce:	3708      	adds	r7, #8
 800ccd0:	46bd      	mov	sp, r7
 800ccd2:	bd80      	pop	{r7, pc}
 800ccd4:	200003e0 	.word	0x200003e0
 800ccd8:	200008e8 	.word	0x200008e8

0800ccdc <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 800ccdc:	b580      	push	{r7, lr}
 800ccde:	b082      	sub	sp, #8
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 800cce4:	4817      	ldr	r0, [pc, #92]	; (800cd44 <OnTxDelayedTimerEvent+0x68>)
 800cce6:	f00b fd41 	bl	801876c <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800ccea:	4b17      	ldr	r3, [pc, #92]	; (800cd48 <OnTxDelayedTimerEvent+0x6c>)
 800ccec:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800ccf0:	f023 0320 	bic.w	r3, r3, #32
 800ccf4:	4a14      	ldr	r2, [pc, #80]	; (800cd48 <OnTxDelayedTimerEvent+0x6c>)
 800ccf6:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 800ccfa:	2001      	movs	r0, #1
 800ccfc:	f001 f8fc 	bl	800def8 <ScheduleTx>
 800cd00:	4603      	mov	r3, r0
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d018      	beq.n	800cd38 <OnTxDelayedTimerEvent+0x5c>
 800cd06:	2b0b      	cmp	r3, #11
 800cd08:	d016      	beq.n	800cd38 <OnTxDelayedTimerEvent+0x5c>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800cd0a:	4b10      	ldr	r3, [pc, #64]	; (800cd4c <OnTxDelayedTimerEvent+0x70>)
 800cd0c:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800cd10:	b2da      	uxtb	r2, r3
 800cd12:	4b0d      	ldr	r3, [pc, #52]	; (800cd48 <OnTxDelayedTimerEvent+0x6c>)
 800cd14:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 800cd18:	4b0b      	ldr	r3, [pc, #44]	; (800cd48 <OnTxDelayedTimerEvent+0x6c>)
 800cd1a:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 800cd1e:	4b0a      	ldr	r3, [pc, #40]	; (800cd48 <OnTxDelayedTimerEvent+0x6c>)
 800cd20:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800cd24:	4b08      	ldr	r3, [pc, #32]	; (800cd48 <OnTxDelayedTimerEvent+0x6c>)
 800cd26:	2209      	movs	r2, #9
 800cd28:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800cd2c:	2009      	movs	r0, #9
 800cd2e:	f003 ffdf 	bl	8010cf0 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800cd32:	f001 fef9 	bl	800eb28 <StopRetransmission>
            break;
 800cd36:	e000      	b.n	800cd3a <OnTxDelayedTimerEvent+0x5e>
            break;
 800cd38:	bf00      	nop
        }
    }
}
 800cd3a:	bf00      	nop
 800cd3c:	3708      	adds	r7, #8
 800cd3e:	46bd      	mov	sp, r7
 800cd40:	bd80      	pop	{r7, pc}
 800cd42:	bf00      	nop
 800cd44:	20000748 	.word	0x20000748
 800cd48:	200003e0 	.word	0x200003e0
 800cd4c:	200008e8 	.word	0x200008e8

0800cd50 <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 800cd50:	b580      	push	{r7, lr}
 800cd52:	b082      	sub	sp, #8
 800cd54:	af00      	add	r7, sp, #0
 800cd56:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 800cd58:	4b14      	ldr	r3, [pc, #80]	; (800cdac <OnRxWindow1TimerEvent+0x5c>)
 800cd5a:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 800cd5e:	4b13      	ldr	r3, [pc, #76]	; (800cdac <OnRxWindow1TimerEvent+0x5c>)
 800cd60:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 800cd64:	4b12      	ldr	r3, [pc, #72]	; (800cdb0 <OnRxWindow1TimerEvent+0x60>)
 800cd66:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800cd6a:	b25a      	sxtb	r2, r3
 800cd6c:	4b0f      	ldr	r3, [pc, #60]	; (800cdac <OnRxWindow1TimerEvent+0x5c>)
 800cd6e:	f883 23bb 	strb.w	r2, [r3, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800cd72:	4b0f      	ldr	r3, [pc, #60]	; (800cdb0 <OnRxWindow1TimerEvent+0x60>)
 800cd74:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800cd78:	4b0c      	ldr	r3, [pc, #48]	; (800cdac <OnRxWindow1TimerEvent+0x5c>)
 800cd7a:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800cd7e:	4b0c      	ldr	r3, [pc, #48]	; (800cdb0 <OnRxWindow1TimerEvent+0x60>)
 800cd80:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800cd84:	4b09      	ldr	r3, [pc, #36]	; (800cdac <OnRxWindow1TimerEvent+0x5c>)
 800cd86:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 800cd8a:	4b08      	ldr	r3, [pc, #32]	; (800cdac <OnRxWindow1TimerEvent+0x5c>)
 800cd8c:	2200      	movs	r2, #0
 800cd8e:	f883 23ca 	strb.w	r2, [r3, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 800cd92:	4b06      	ldr	r3, [pc, #24]	; (800cdac <OnRxWindow1TimerEvent+0x5c>)
 800cd94:	2200      	movs	r2, #0
 800cd96:	f883 23cb 	strb.w	r2, [r3, #971]	; 0x3cb

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800cd9a:	4906      	ldr	r1, [pc, #24]	; (800cdb4 <OnRxWindow1TimerEvent+0x64>)
 800cd9c:	4806      	ldr	r0, [pc, #24]	; (800cdb8 <OnRxWindow1TimerEvent+0x68>)
 800cd9e:	f001 fae3 	bl	800e368 <RxWindowSetup>
}
 800cda2:	bf00      	nop
 800cda4:	3708      	adds	r7, #8
 800cda6:	46bd      	mov	sp, r7
 800cda8:	bd80      	pop	{r7, pc}
 800cdaa:	bf00      	nop
 800cdac:	200003e0 	.word	0x200003e0
 800cdb0:	200008e8 	.word	0x200008e8
 800cdb4:	20000798 	.word	0x20000798
 800cdb8:	20000760 	.word	0x20000760

0800cdbc <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 800cdbc:	b580      	push	{r7, lr}
 800cdbe:	b082      	sub	sp, #8
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800cdc4:	4b16      	ldr	r3, [pc, #88]	; (800ce20 <OnRxWindow2TimerEvent+0x64>)
 800cdc6:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d023      	beq.n	800ce16 <OnRxWindow2TimerEvent+0x5a>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800cdce:	4b14      	ldr	r3, [pc, #80]	; (800ce20 <OnRxWindow2TimerEvent+0x64>)
 800cdd0:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 800cdd4:	4b12      	ldr	r3, [pc, #72]	; (800ce20 <OnRxWindow2TimerEvent+0x64>)
 800cdd6:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800cdda:	4b12      	ldr	r3, [pc, #72]	; (800ce24 <OnRxWindow2TimerEvent+0x68>)
 800cddc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cdde:	4a10      	ldr	r2, [pc, #64]	; (800ce20 <OnRxWindow2TimerEvent+0x64>)
 800cde0:	f8c2 33d0 	str.w	r3, [r2, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800cde4:	4b0f      	ldr	r3, [pc, #60]	; (800ce24 <OnRxWindow2TimerEvent+0x68>)
 800cde6:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800cdea:	4b0d      	ldr	r3, [pc, #52]	; (800ce20 <OnRxWindow2TimerEvent+0x64>)
 800cdec:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800cdf0:	4b0c      	ldr	r3, [pc, #48]	; (800ce24 <OnRxWindow2TimerEvent+0x68>)
 800cdf2:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800cdf6:	4b0a      	ldr	r3, [pc, #40]	; (800ce20 <OnRxWindow2TimerEvent+0x64>)
 800cdf8:	f883 23dd 	strb.w	r2, [r3, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 800cdfc:	4b08      	ldr	r3, [pc, #32]	; (800ce20 <OnRxWindow2TimerEvent+0x64>)
 800cdfe:	2200      	movs	r2, #0
 800ce00:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800ce04:	4b06      	ldr	r3, [pc, #24]	; (800ce20 <OnRxWindow2TimerEvent+0x64>)
 800ce06:	2201      	movs	r2, #1
 800ce08:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800ce0c:	4906      	ldr	r1, [pc, #24]	; (800ce28 <OnRxWindow2TimerEvent+0x6c>)
 800ce0e:	4807      	ldr	r0, [pc, #28]	; (800ce2c <OnRxWindow2TimerEvent+0x70>)
 800ce10:	f001 faaa 	bl	800e368 <RxWindowSetup>
 800ce14:	e000      	b.n	800ce18 <OnRxWindow2TimerEvent+0x5c>
        return;
 800ce16:	bf00      	nop
}
 800ce18:	3708      	adds	r7, #8
 800ce1a:	46bd      	mov	sp, r7
 800ce1c:	bd80      	pop	{r7, pc}
 800ce1e:	bf00      	nop
 800ce20:	200003e0 	.word	0x200003e0
 800ce24:	200008e8 	.word	0x200008e8
 800ce28:	200007ac 	.word	0x200007ac
 800ce2c:	20000778 	.word	0x20000778

0800ce30 <OnAckTimeoutTimerEvent>:

static void OnAckTimeoutTimerEvent( void* context )
{
 800ce30:	b580      	push	{r7, lr}
 800ce32:	b082      	sub	sp, #8
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.AckTimeoutTimer );
 800ce38:	4815      	ldr	r0, [pc, #84]	; (800ce90 <OnAckTimeoutTimerEvent+0x60>)
 800ce3a:	f00b fc97 	bl	801876c <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 800ce3e:	4b15      	ldr	r3, [pc, #84]	; (800ce94 <OnAckTimeoutTimerEvent+0x64>)
 800ce40:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d003      	beq.n	800ce50 <OnAckTimeoutTimerEvent+0x20>
    {
        MacCtx.AckTimeoutRetry = true;
 800ce48:	4b12      	ldr	r3, [pc, #72]	; (800ce94 <OnAckTimeoutTimerEvent+0x64>)
 800ce4a:	2201      	movs	r2, #1
 800ce4c:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800ce50:	4b11      	ldr	r3, [pc, #68]	; (800ce98 <OnAckTimeoutTimerEvent+0x68>)
 800ce52:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800ce56:	2b02      	cmp	r3, #2
 800ce58:	d106      	bne.n	800ce68 <OnAckTimeoutTimerEvent+0x38>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 800ce5a:	4a0e      	ldr	r2, [pc, #56]	; (800ce94 <OnAckTimeoutTimerEvent+0x64>)
 800ce5c:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800ce60:	f043 0320 	orr.w	r3, r3, #32
 800ce64:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800ce68:	4b0a      	ldr	r3, [pc, #40]	; (800ce94 <OnAckTimeoutTimerEvent+0x64>)
 800ce6a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d00a      	beq.n	800ce88 <OnAckTimeoutTimerEvent+0x58>
 800ce72:	4b08      	ldr	r3, [pc, #32]	; (800ce94 <OnAckTimeoutTimerEvent+0x64>)
 800ce74:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800ce78:	691b      	ldr	r3, [r3, #16]
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d004      	beq.n	800ce88 <OnAckTimeoutTimerEvent+0x58>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800ce7e:	4b05      	ldr	r3, [pc, #20]	; (800ce94 <OnAckTimeoutTimerEvent+0x64>)
 800ce80:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800ce84:	691b      	ldr	r3, [r3, #16]
 800ce86:	4798      	blx	r3
    }
}
 800ce88:	bf00      	nop
 800ce8a:	3708      	adds	r7, #8
 800ce8c:	46bd      	mov	sp, r7
 800ce8e:	bd80      	pop	{r7, pc}
 800ce90:	200007d8 	.word	0x200007d8
 800ce94:	200003e0 	.word	0x200003e0
 800ce98:	200008e8 	.word	0x200008e8

0800ce9c <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          uint16_t maxFCntGap, FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 800ce9c:	b580      	push	{r7, lr}
 800ce9e:	b084      	sub	sp, #16
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	60ba      	str	r2, [r7, #8]
 800cea4:	607b      	str	r3, [r7, #4]
 800cea6:	4603      	mov	r3, r0
 800cea8:	73fb      	strb	r3, [r7, #15]
 800ceaa:	460b      	mov	r3, r1
 800ceac:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 800ceae:	68bb      	ldr	r3, [r7, #8]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d005      	beq.n	800cec0 <GetFCntDown+0x24>
 800ceb4:	69fb      	ldr	r3, [r7, #28]
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d002      	beq.n	800cec0 <GetFCntDown+0x24>
 800ceba:	6a3b      	ldr	r3, [r7, #32]
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d101      	bne.n	800cec4 <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800cec0:	230a      	movs	r3, #10
 800cec2:	e029      	b.n	800cf18 <GetFCntDown+0x7c>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 800cec4:	7bfb      	ldrb	r3, [r7, #15]
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d016      	beq.n	800cef8 <GetFCntDown+0x5c>
 800ceca:	2b01      	cmp	r3, #1
 800cecc:	d118      	bne.n	800cf00 <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 800cece:	79bb      	ldrb	r3, [r7, #6]
 800ced0:	2b01      	cmp	r3, #1
 800ced2:	d10d      	bne.n	800cef0 <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 800ced4:	7bbb      	ldrb	r3, [r7, #14]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d002      	beq.n	800cee0 <GetFCntDown+0x44>
 800ceda:	7bbb      	ldrb	r3, [r7, #14]
 800cedc:	2b03      	cmp	r3, #3
 800cede:	d103      	bne.n	800cee8 <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 800cee0:	69fb      	ldr	r3, [r7, #28]
 800cee2:	2202      	movs	r2, #2
 800cee4:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 800cee6:	e00d      	b.n	800cf04 <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 800cee8:	69fb      	ldr	r3, [r7, #28]
 800ceea:	2201      	movs	r2, #1
 800ceec:	701a      	strb	r2, [r3, #0]
            break;
 800ceee:	e009      	b.n	800cf04 <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 800cef0:	69fb      	ldr	r3, [r7, #28]
 800cef2:	2203      	movs	r2, #3
 800cef4:	701a      	strb	r2, [r3, #0]
            break;
 800cef6:	e005      	b.n	800cf04 <GetFCntDown+0x68>
        /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 800cef8:	69fb      	ldr	r3, [r7, #28]
 800cefa:	2204      	movs	r2, #4
 800cefc:	701a      	strb	r2, [r3, #0]
            break;
 800cefe:	e001      	b.n	800cf04 <GetFCntDown+0x68>
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        /* ST_WORKAROUND_END */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 800cf00:	2305      	movs	r3, #5
 800cf02:	e009      	b.n	800cf18 <GetFCntDown+0x7c>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 800cf04:	69fb      	ldr	r3, [r7, #28]
 800cf06:	7818      	ldrb	r0, [r3, #0]
 800cf08:	68bb      	ldr	r3, [r7, #8]
 800cf0a:	89db      	ldrh	r3, [r3, #14]
 800cf0c:	461a      	mov	r2, r3
 800cf0e:	8b39      	ldrh	r1, [r7, #24]
 800cf10:	6a3b      	ldr	r3, [r7, #32]
 800cf12:	f004 faf1 	bl	80114f8 <LoRaMacCryptoGetFCntDown>
 800cf16:	4603      	mov	r3, r0
}
 800cf18:	4618      	mov	r0, r3
 800cf1a:	3710      	adds	r7, #16
 800cf1c:	46bd      	mov	sp, r7
 800cf1e:	bd80      	pop	{r7, pc}

0800cf20 <SwitchClass>:

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 800cf20:	b5b0      	push	{r4, r5, r7, lr}
 800cf22:	b084      	sub	sp, #16
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	4603      	mov	r3, r0
 800cf28:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800cf2a:	2303      	movs	r3, #3
 800cf2c:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 800cf2e:	4b61      	ldr	r3, [pc, #388]	; (800d0b4 <SwitchClass+0x194>)
 800cf30:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800cf34:	2b02      	cmp	r3, #2
 800cf36:	f000 80a5 	beq.w	800d084 <SwitchClass+0x164>
 800cf3a:	2b02      	cmp	r3, #2
 800cf3c:	f300 80b4 	bgt.w	800d0a8 <SwitchClass+0x188>
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d003      	beq.n	800cf4c <SwitchClass+0x2c>
 800cf44:	2b01      	cmp	r3, #1
 800cf46:	f000 808f 	beq.w	800d068 <SwitchClass+0x148>
 800cf4a:	e0ad      	b.n	800d0a8 <SwitchClass+0x188>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 800cf4c:	79fb      	ldrb	r3, [r7, #7]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d107      	bne.n	800cf62 <SwitchClass+0x42>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800cf52:	4b58      	ldr	r3, [pc, #352]	; (800d0b4 <SwitchClass+0x194>)
 800cf54:	4a57      	ldr	r2, [pc, #348]	; (800d0b4 <SwitchClass+0x194>)
 800cf56:	336c      	adds	r3, #108	; 0x6c
 800cf58:	3264      	adds	r2, #100	; 0x64
 800cf5a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cf5e:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            if( deviceClass == CLASS_B )
 800cf62:	79fb      	ldrb	r3, [r7, #7]
 800cf64:	2b01      	cmp	r3, #1
 800cf66:	d10c      	bne.n	800cf82 <SwitchClass+0x62>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 800cf68:	79fb      	ldrb	r3, [r7, #7]
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	f003 fa53 	bl	8010416 <LoRaMacClassBSwitchClass>
 800cf70:	4603      	mov	r3, r0
 800cf72:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 800cf74:	7bfb      	ldrb	r3, [r7, #15]
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d103      	bne.n	800cf82 <SwitchClass+0x62>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 800cf7a:	4a4e      	ldr	r2, [pc, #312]	; (800d0b4 <SwitchClass+0x194>)
 800cf7c:	79fb      	ldrb	r3, [r7, #7]
 800cf7e:	f882 30fc 	strb.w	r3, [r2, #252]	; 0xfc
                }
            }

            if( deviceClass == CLASS_C )
 800cf82:	79fb      	ldrb	r3, [r7, #7]
 800cf84:	2b02      	cmp	r3, #2
 800cf86:	f040 808a 	bne.w	800d09e <SwitchClass+0x17e>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800cf8a:	4a4a      	ldr	r2, [pc, #296]	; (800d0b4 <SwitchClass+0x194>)
 800cf8c:	79fb      	ldrb	r3, [r7, #7]
 800cf8e:	f882 30fc 	strb.w	r3, [r2, #252]	; 0xfc

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800cf92:	4a49      	ldr	r2, [pc, #292]	; (800d0b8 <SwitchClass+0x198>)
 800cf94:	4b48      	ldr	r3, [pc, #288]	; (800d0b8 <SwitchClass+0x198>)
 800cf96:	f502 7478 	add.w	r4, r2, #992	; 0x3e0
 800cf9a:	f503 7573 	add.w	r5, r3, #972	; 0x3cc
 800cf9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cfa0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cfa2:	682b      	ldr	r3, [r5, #0]
 800cfa4:	6023      	str	r3, [r4, #0]
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800cfa6:	4b44      	ldr	r3, [pc, #272]	; (800d0b8 <SwitchClass+0x198>)
 800cfa8:	2202      	movs	r2, #2
 800cfaa:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800cfae:	2300      	movs	r3, #0
 800cfb0:	73bb      	strb	r3, [r7, #14]
 800cfb2:	e049      	b.n	800d048 <SwitchClass+0x128>
                {
                    if( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true )
 800cfb4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cfb8:	4a3e      	ldr	r2, [pc, #248]	; (800d0b4 <SwitchClass+0x194>)
 800cfba:	212c      	movs	r1, #44	; 0x2c
 800cfbc:	fb01 f303 	mul.w	r3, r1, r3
 800cfc0:	4413      	add	r3, r2
 800cfc2:	33d2      	adds	r3, #210	; 0xd2
 800cfc4:	781b      	ldrb	r3, [r3, #0]
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d038      	beq.n	800d03c <SwitchClass+0x11c>
                    // TODO: Check multicast channel device class.
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 800cfca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cfce:	4a39      	ldr	r2, [pc, #228]	; (800d0b4 <SwitchClass+0x194>)
 800cfd0:	212c      	movs	r1, #44	; 0x2c
 800cfd2:	fb01 f303 	mul.w	r3, r1, r3
 800cfd6:	4413      	add	r3, r2
 800cfd8:	33e8      	adds	r3, #232	; 0xe8
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	4a35      	ldr	r2, [pc, #212]	; (800d0b4 <SwitchClass+0x194>)
 800cfde:	66d3      	str	r3, [r2, #108]	; 0x6c
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 800cfe0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cfe4:	4a33      	ldr	r2, [pc, #204]	; (800d0b4 <SwitchClass+0x194>)
 800cfe6:	212c      	movs	r1, #44	; 0x2c
 800cfe8:	fb01 f303 	mul.w	r3, r1, r3
 800cfec:	4413      	add	r3, r2
 800cfee:	33ec      	adds	r3, #236	; 0xec
 800cff0:	f993 3000 	ldrsb.w	r3, [r3]
 800cff4:	b2da      	uxtb	r2, r3
 800cff6:	4b2f      	ldr	r3, [pc, #188]	; (800d0b4 <SwitchClass+0x194>)
 800cff8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800cffc:	4b2e      	ldr	r3, [pc, #184]	; (800d0b8 <SwitchClass+0x198>)
 800cffe:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 800d002:	4b2d      	ldr	r3, [pc, #180]	; (800d0b8 <SwitchClass+0x198>)
 800d004:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800d008:	4b2a      	ldr	r3, [pc, #168]	; (800d0b4 <SwitchClass+0x194>)
 800d00a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d00c:	4a2a      	ldr	r2, [pc, #168]	; (800d0b8 <SwitchClass+0x198>)
 800d00e:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800d012:	4b28      	ldr	r3, [pc, #160]	; (800d0b4 <SwitchClass+0x194>)
 800d014:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800d018:	4b27      	ldr	r3, [pc, #156]	; (800d0b8 <SwitchClass+0x198>)
 800d01a:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800d01e:	4b25      	ldr	r3, [pc, #148]	; (800d0b4 <SwitchClass+0x194>)
 800d020:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800d024:	4b24      	ldr	r3, [pc, #144]	; (800d0b8 <SwitchClass+0x198>)
 800d026:	f883 23f1 	strb.w	r2, [r3, #1009]	; 0x3f1
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800d02a:	4b23      	ldr	r3, [pc, #140]	; (800d0b8 <SwitchClass+0x198>)
 800d02c:	2203      	movs	r2, #3
 800d02e:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 800d032:	4b21      	ldr	r3, [pc, #132]	; (800d0b8 <SwitchClass+0x198>)
 800d034:	2201      	movs	r2, #1
 800d036:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
                        break;
 800d03a:	e009      	b.n	800d050 <SwitchClass+0x130>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800d03c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d040:	b2db      	uxtb	r3, r3
 800d042:	3301      	adds	r3, #1
 800d044:	b2db      	uxtb	r3, r3
 800d046:	73bb      	strb	r3, [r7, #14]
 800d048:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	ddb1      	ble.n	800cfb4 <SwitchClass+0x94>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 800d050:	4b19      	ldr	r3, [pc, #100]	; (800d0b8 <SwitchClass+0x198>)
 800d052:	2200      	movs	r2, #0
 800d054:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 800d058:	4b18      	ldr	r3, [pc, #96]	; (800d0bc <SwitchClass+0x19c>)
 800d05a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d05c:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 800d05e:	f001 f9b1 	bl	800e3c4 <OpenContinuousRxCWindow>

                status = LORAMAC_STATUS_OK;
 800d062:	2300      	movs	r3, #0
 800d064:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800d066:	e01a      	b.n	800d09e <SwitchClass+0x17e>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 800d068:	79fb      	ldrb	r3, [r7, #7]
 800d06a:	4618      	mov	r0, r3
 800d06c:	f003 f9d3 	bl	8010416 <LoRaMacClassBSwitchClass>
 800d070:	4603      	mov	r3, r0
 800d072:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 800d074:	7bfb      	ldrb	r3, [r7, #15]
 800d076:	2b00      	cmp	r3, #0
 800d078:	d113      	bne.n	800d0a2 <SwitchClass+0x182>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800d07a:	4a0e      	ldr	r2, [pc, #56]	; (800d0b4 <SwitchClass+0x194>)
 800d07c:	79fb      	ldrb	r3, [r7, #7]
 800d07e:	f882 30fc 	strb.w	r3, [r2, #252]	; 0xfc
            }
            break;
 800d082:	e00e      	b.n	800d0a2 <SwitchClass+0x182>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 800d084:	79fb      	ldrb	r3, [r7, #7]
 800d086:	2b00      	cmp	r3, #0
 800d088:	d10d      	bne.n	800d0a6 <SwitchClass+0x186>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800d08a:	4a0a      	ldr	r2, [pc, #40]	; (800d0b4 <SwitchClass+0x194>)
 800d08c:	79fb      	ldrb	r3, [r7, #7]
 800d08e:	f882 30fc 	strb.w	r3, [r2, #252]	; 0xfc

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 800d092:	4b0a      	ldr	r3, [pc, #40]	; (800d0bc <SwitchClass+0x19c>)
 800d094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d096:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 800d098:	2300      	movs	r3, #0
 800d09a:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800d09c:	e003      	b.n	800d0a6 <SwitchClass+0x186>
            break;
 800d09e:	bf00      	nop
 800d0a0:	e002      	b.n	800d0a8 <SwitchClass+0x188>
            break;
 800d0a2:	bf00      	nop
 800d0a4:	e000      	b.n	800d0a8 <SwitchClass+0x188>
            break;
 800d0a6:	bf00      	nop
        }
    }

    return status;
 800d0a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0aa:	4618      	mov	r0, r3
 800d0ac:	3710      	adds	r7, #16
 800d0ae:	46bd      	mov	sp, r7
 800d0b0:	bdb0      	pop	{r4, r5, r7, pc}
 800d0b2:	bf00      	nop
 800d0b4:	200008e8 	.word	0x200008e8
 800d0b8:	200003e0 	.word	0x200003e0
 800d0bc:	08019c7c 	.word	0x08019c7c

0800d0c0 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 800d0c0:	b580      	push	{r7, lr}
 800d0c2:	b086      	sub	sp, #24
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	4603      	mov	r3, r0
 800d0c8:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800d0ca:	4b10      	ldr	r3, [pc, #64]	; (800d10c <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800d0cc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800d0d0:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 800d0d2:	79fb      	ldrb	r3, [r7, #7]
 800d0d4:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 800d0d6:	230d      	movs	r3, #13
 800d0d8:	743b      	strb	r3, [r7, #16]
    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800d0da:	4b0c      	ldr	r3, [pc, #48]	; (800d10c <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800d0dc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d001      	beq.n	800d0e8 <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800d0e4:	230e      	movs	r3, #14
 800d0e6:	743b      	strb	r3, [r7, #16]
    }
    /* ST_WORKAROUND_END */
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d0e8:	4b08      	ldr	r3, [pc, #32]	; (800d10c <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800d0ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d0ee:	f107 0210 	add.w	r2, r7, #16
 800d0f2:	4611      	mov	r1, r2
 800d0f4:	4618      	mov	r0, r3
 800d0f6:	f005 f881 	bl	80121fc <RegionGetPhyParam>
 800d0fa:	4603      	mov	r3, r0
 800d0fc:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	b2db      	uxtb	r3, r3
}
 800d102:	4618      	mov	r0, r3
 800d104:	3718      	adds	r7, #24
 800d106:	46bd      	mov	sp, r7
 800d108:	bd80      	pop	{r7, pc}
 800d10a:	bf00      	nop
 800d10c:	200008e8 	.word	0x200008e8

0800d110 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 800d110:	b580      	push	{r7, lr}
 800d112:	b084      	sub	sp, #16
 800d114:	af00      	add	r7, sp, #0
 800d116:	4603      	mov	r3, r0
 800d118:	71fb      	strb	r3, [r7, #7]
 800d11a:	460b      	mov	r3, r1
 800d11c:	71bb      	strb	r3, [r7, #6]
 800d11e:	4613      	mov	r3, r2
 800d120:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 800d122:	2300      	movs	r3, #0
 800d124:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 800d126:	2300      	movs	r3, #0
 800d128:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800d12a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800d12e:	4618      	mov	r0, r3
 800d130:	f7ff ffc6 	bl	800d0c0 <GetMaxAppPayloadWithoutFOptsLength>
 800d134:	4603      	mov	r3, r0
 800d136:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 800d138:	79fb      	ldrb	r3, [r7, #7]
 800d13a:	b29a      	uxth	r2, r3
 800d13c:	797b      	ldrb	r3, [r7, #5]
 800d13e:	b29b      	uxth	r3, r3
 800d140:	4413      	add	r3, r2
 800d142:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 800d144:	89ba      	ldrh	r2, [r7, #12]
 800d146:	89fb      	ldrh	r3, [r7, #14]
 800d148:	429a      	cmp	r2, r3
 800d14a:	d804      	bhi.n	800d156 <ValidatePayloadLength+0x46>
 800d14c:	89bb      	ldrh	r3, [r7, #12]
 800d14e:	2bff      	cmp	r3, #255	; 0xff
 800d150:	d801      	bhi.n	800d156 <ValidatePayloadLength+0x46>
    {
        return true;
 800d152:	2301      	movs	r3, #1
 800d154:	e000      	b.n	800d158 <ValidatePayloadLength+0x48>
    }
    return false;
 800d156:	2300      	movs	r3, #0
}
 800d158:	4618      	mov	r0, r3
 800d15a:	3710      	adds	r7, #16
 800d15c:	46bd      	mov	sp, r7
 800d15e:	bd80      	pop	{r7, pc}

0800d160 <SetMlmeScheduleUplinkIndication>:

static void SetMlmeScheduleUplinkIndication( void )
{
 800d160:	b480      	push	{r7}
 800d162:	af00      	add	r7, sp, #0
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 800d164:	4a05      	ldr	r2, [pc, #20]	; (800d17c <SetMlmeScheduleUplinkIndication+0x1c>)
 800d166:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800d16a:	f043 0310 	orr.w	r3, r3, #16
 800d16e:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
}
 800d172:	bf00      	nop
 800d174:	46bd      	mov	sp, r7
 800d176:	bc80      	pop	{r7}
 800d178:	4770      	bx	lr
 800d17a:	bf00      	nop
 800d17c:	200003e0 	.word	0x200003e0

0800d180 <ProcessMacCommands>:

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 800d180:	b590      	push	{r4, r7, lr}
 800d182:	b0a5      	sub	sp, #148	; 0x94
 800d184:	af02      	add	r7, sp, #8
 800d186:	6078      	str	r0, [r7, #4]
 800d188:	4608      	mov	r0, r1
 800d18a:	4611      	mov	r1, r2
 800d18c:	461a      	mov	r2, r3
 800d18e:	4603      	mov	r3, r0
 800d190:	70fb      	strb	r3, [r7, #3]
 800d192:	460b      	mov	r3, r1
 800d194:	70bb      	strb	r3, [r7, #2]
 800d196:	4613      	mov	r3, r2
 800d198:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 800d19a:	2300      	movs	r3, #0
 800d19c:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    bool adrBlockFound = false;
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68

    while( macIndex < commandsSize )
 800d1ac:	f000 bc73 	b.w	800da96 <ProcessMacCommands+0x916>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 800d1b0:	78fb      	ldrb	r3, [r7, #3]
 800d1b2:	687a      	ldr	r2, [r7, #4]
 800d1b4:	4413      	add	r3, r2
 800d1b6:	781b      	ldrb	r3, [r3, #0]
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	f003 fbf5 	bl	80109a8 <LoRaMacCommandsGetCmdSize>
 800d1be:	4603      	mov	r3, r0
 800d1c0:	461a      	mov	r2, r3
 800d1c2:	78fb      	ldrb	r3, [r7, #3]
 800d1c4:	441a      	add	r2, r3
 800d1c6:	78bb      	ldrb	r3, [r7, #2]
 800d1c8:	429a      	cmp	r2, r3
 800d1ca:	f300 846a 	bgt.w	800daa2 <ProcessMacCommands+0x922>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 800d1ce:	78fb      	ldrb	r3, [r7, #3]
 800d1d0:	1c5a      	adds	r2, r3, #1
 800d1d2:	70fa      	strb	r2, [r7, #3]
 800d1d4:	461a      	mov	r2, r3
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	4413      	add	r3, r2
 800d1da:	781b      	ldrb	r3, [r3, #0]
 800d1dc:	3b02      	subs	r3, #2
 800d1de:	2b11      	cmp	r3, #17
 800d1e0:	f200 8461 	bhi.w	800daa6 <ProcessMacCommands+0x926>
 800d1e4:	a201      	add	r2, pc, #4	; (adr r2, 800d1ec <ProcessMacCommands+0x6c>)
 800d1e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1ea:	bf00      	nop
 800d1ec:	0800d235 	.word	0x0800d235
 800d1f0:	0800d277 	.word	0x0800d277
 800d1f4:	0800d393 	.word	0x0800d393
 800d1f8:	0800d3d1 	.word	0x0800d3d1
 800d1fc:	0800d4c1 	.word	0x0800d4c1
 800d200:	0800d51d 	.word	0x0800d51d
 800d204:	0800d5d9 	.word	0x0800d5d9
 800d208:	0800d633 	.word	0x0800d633
 800d20c:	0800d717 	.word	0x0800d717
 800d210:	0800daa7 	.word	0x0800daa7
 800d214:	0800daa7 	.word	0x0800daa7
 800d218:	0800d7c1 	.word	0x0800d7c1
 800d21c:	0800daa7 	.word	0x0800daa7
 800d220:	0800daa7 	.word	0x0800daa7
 800d224:	0800d8d7 	.word	0x0800d8d7
 800d228:	0800d90b 	.word	0x0800d90b
 800d22c:	0800d99b 	.word	0x0800d99b
 800d230:	0800da11 	.word	0x0800da11
        {
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 800d234:	2004      	movs	r0, #4
 800d236:	f003 fd8f 	bl	8010d58 <LoRaMacConfirmQueueIsCmdActive>
 800d23a:	4603      	mov	r3, r0
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	f000 842a 	beq.w	800da96 <ProcessMacCommands+0x916>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 800d242:	2104      	movs	r1, #4
 800d244:	2000      	movs	r0, #0
 800d246:	f003 fcfb 	bl	8010c40 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 800d24a:	78fb      	ldrb	r3, [r7, #3]
 800d24c:	1c5a      	adds	r2, r3, #1
 800d24e:	70fa      	strb	r2, [r7, #3]
 800d250:	461a      	mov	r2, r3
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	4413      	add	r3, r2
 800d256:	781a      	ldrb	r2, [r3, #0]
 800d258:	4bad      	ldr	r3, [pc, #692]	; (800d510 <ProcessMacCommands+0x390>)
 800d25a:	f883 2454 	strb.w	r2, [r3, #1108]	; 0x454
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 800d25e:	78fb      	ldrb	r3, [r7, #3]
 800d260:	1c5a      	adds	r2, r3, #1
 800d262:	70fa      	strb	r2, [r7, #3]
 800d264:	461a      	mov	r2, r3
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	4413      	add	r3, r2
 800d26a:	781a      	ldrb	r2, [r3, #0]
 800d26c:	4ba8      	ldr	r3, [pc, #672]	; (800d510 <ProcessMacCommands+0x390>)
 800d26e:	f883 2455 	strb.w	r2, [r3, #1109]	; 0x455
                }
                break;
 800d272:	f000 bc10 	b.w	800da96 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 800d276:	2300      	movs	r3, #0
 800d278:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 800d27c:	2300      	movs	r3, #0
 800d27e:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
                uint8_t linkAdrNbRep = 0;
 800d282:	2300      	movs	r3, #0
 800d284:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 800d288:	2300      	movs	r3, #0
 800d28a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54

                if( adrBlockFound == false )
 800d28e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800d292:	f083 0301 	eor.w	r3, r3, #1
 800d296:	b2db      	uxtb	r3, r3
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d078      	beq.n	800d38e <ProcessMacCommands+0x20e>
                {
                    adrBlockFound = true;
 800d29c:	2301      	movs	r3, #1
 800d29e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

                    // Fill parameter structure
                    linkAdrReq.Payload = &payload[macIndex - 1];
 800d2a2:	78fb      	ldrb	r3, [r7, #3]
 800d2a4:	3b01      	subs	r3, #1
 800d2a6:	687a      	ldr	r2, [r7, #4]
 800d2a8:	4413      	add	r3, r2
 800d2aa:	65fb      	str	r3, [r7, #92]	; 0x5c
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 800d2ac:	78ba      	ldrb	r2, [r7, #2]
 800d2ae:	78fb      	ldrb	r3, [r7, #3]
 800d2b0:	1ad3      	subs	r3, r2, r3
 800d2b2:	b2db      	uxtb	r3, r3
 800d2b4:	3301      	adds	r3, #1
 800d2b6:	b2db      	uxtb	r3, r3
 800d2b8:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                    linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800d2bc:	4b95      	ldr	r3, [pc, #596]	; (800d514 <ProcessMacCommands+0x394>)
 800d2be:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 800d2c2:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
                    linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800d2c6:	4b93      	ldr	r3, [pc, #588]	; (800d514 <ProcessMacCommands+0x394>)
 800d2c8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800d2cc:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
                    linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800d2d0:	4b90      	ldr	r3, [pc, #576]	; (800d514 <ProcessMacCommands+0x394>)
 800d2d2:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800d2d6:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
                    linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800d2da:	4b8e      	ldr	r3, [pc, #568]	; (800d514 <ProcessMacCommands+0x394>)
 800d2dc:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800d2e0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                    linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800d2e4:	4b8b      	ldr	r3, [pc, #556]	; (800d514 <ProcessMacCommands+0x394>)
 800d2e6:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800d2ea:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
                    linkAdrReq.Version = Nvm.MacGroup2.Version;
 800d2ee:	4b89      	ldr	r3, [pc, #548]	; (800d514 <ProcessMacCommands+0x394>)
 800d2f0:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800d2f4:	65bb      	str	r3, [r7, #88]	; 0x58

                    // Process the ADR requests
                    status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 800d2f6:	4b87      	ldr	r3, [pc, #540]	; (800d514 <ProcessMacCommands+0x394>)
 800d2f8:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800d2fc:	f107 0456 	add.w	r4, r7, #86	; 0x56
 800d300:	f107 0257 	add.w	r2, r7, #87	; 0x57
 800d304:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800d308:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800d30c:	9301      	str	r3, [sp, #4]
 800d30e:	f107 0355 	add.w	r3, r7, #85	; 0x55
 800d312:	9300      	str	r3, [sp, #0]
 800d314:	4623      	mov	r3, r4
 800d316:	f005 f82f 	bl	8012378 <RegionLinkAdrReq>
 800d31a:	4603      	mov	r3, r0
 800d31c:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
                                               &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                    if( ( status & 0x07 ) == 0x07 )
 800d320:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800d324:	f003 0307 	and.w	r3, r3, #7
 800d328:	2b07      	cmp	r3, #7
 800d32a:	d10e      	bne.n	800d34a <ProcessMacCommands+0x1ca>
                    {
                        Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 800d32c:	f997 2057 	ldrsb.w	r2, [r7, #87]	; 0x57
 800d330:	4b78      	ldr	r3, [pc, #480]	; (800d514 <ProcessMacCommands+0x394>)
 800d332:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                        Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 800d336:	f997 2056 	ldrsb.w	r2, [r7, #86]	; 0x56
 800d33a:	4b76      	ldr	r3, [pc, #472]	; (800d514 <ProcessMacCommands+0x394>)
 800d33c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                        Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 800d340:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 800d344:	4b73      	ldr	r3, [pc, #460]	; (800d514 <ProcessMacCommands+0x394>)
 800d346:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
                    }

                    // Add the answers to the buffer
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800d34a:	2300      	movs	r3, #0
 800d34c:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 800d350:	e00b      	b.n	800d36a <ProcessMacCommands+0x1ea>
                    {
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 800d352:	f107 036b 	add.w	r3, r7, #107	; 0x6b
 800d356:	2201      	movs	r2, #1
 800d358:	4619      	mov	r1, r3
 800d35a:	2003      	movs	r0, #3
 800d35c:	f003 f9d4 	bl	8010708 <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800d360:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800d364:	3301      	adds	r3, #1
 800d366:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 800d36a:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800d36e:	4a6a      	ldr	r2, [pc, #424]	; (800d518 <ProcessMacCommands+0x398>)
 800d370:	fba2 2303 	umull	r2, r3, r2, r3
 800d374:	089b      	lsrs	r3, r3, #2
 800d376:	b2db      	uxtb	r3, r3
 800d378:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 800d37c:	429a      	cmp	r2, r3
 800d37e:	d3e8      	bcc.n	800d352 <ProcessMacCommands+0x1d2>
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
 800d380:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 800d384:	78fb      	ldrb	r3, [r7, #3]
 800d386:	4413      	add	r3, r2
 800d388:	b2db      	uxtb	r3, r3
 800d38a:	3b01      	subs	r3, #1
 800d38c:	70fb      	strb	r3, [r7, #3]
                }
                break;
 800d38e:	bf00      	nop
 800d390:	e381      	b.n	800da96 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 800d392:	78fb      	ldrb	r3, [r7, #3]
 800d394:	1c5a      	adds	r2, r3, #1
 800d396:	70fa      	strb	r2, [r7, #3]
 800d398:	461a      	mov	r2, r3
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	4413      	add	r3, r2
 800d39e:	781b      	ldrb	r3, [r3, #0]
 800d3a0:	f003 030f 	and.w	r3, r3, #15
 800d3a4:	b2da      	uxtb	r2, r3
 800d3a6:	4b5b      	ldr	r3, [pc, #364]	; (800d514 <ProcessMacCommands+0x394>)
 800d3a8:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 800d3ac:	4b59      	ldr	r3, [pc, #356]	; (800d514 <ProcessMacCommands+0x394>)
 800d3ae:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
 800d3b2:	461a      	mov	r2, r3
 800d3b4:	2301      	movs	r3, #1
 800d3b6:	4093      	lsls	r3, r2
 800d3b8:	b29a      	uxth	r2, r3
 800d3ba:	4b56      	ldr	r3, [pc, #344]	; (800d514 <ProcessMacCommands+0x394>)
 800d3bc:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 800d3c0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800d3c4:	2200      	movs	r2, #0
 800d3c6:	4619      	mov	r1, r3
 800d3c8:	2004      	movs	r0, #4
 800d3ca:	f003 f99d 	bl	8010708 <LoRaMacCommandsAddCmd>
                break;
 800d3ce:	e362      	b.n	800da96 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 800d3d0:	2307      	movs	r3, #7
 800d3d2:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 800d3d6:	78fb      	ldrb	r3, [r7, #3]
 800d3d8:	687a      	ldr	r2, [r7, #4]
 800d3da:	4413      	add	r3, r2
 800d3dc:	781b      	ldrb	r3, [r3, #0]
 800d3de:	091b      	lsrs	r3, r3, #4
 800d3e0:	b2db      	uxtb	r3, r3
 800d3e2:	b25b      	sxtb	r3, r3
 800d3e4:	f003 0307 	and.w	r3, r3, #7
 800d3e8:	b25b      	sxtb	r3, r3
 800d3ea:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 800d3ee:	78fb      	ldrb	r3, [r7, #3]
 800d3f0:	687a      	ldr	r2, [r7, #4]
 800d3f2:	4413      	add	r3, r2
 800d3f4:	781b      	ldrb	r3, [r3, #0]
 800d3f6:	b25b      	sxtb	r3, r3
 800d3f8:	f003 030f 	and.w	r3, r3, #15
 800d3fc:	b25b      	sxtb	r3, r3
 800d3fe:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
                macIndex++;
 800d402:	78fb      	ldrb	r3, [r7, #3]
 800d404:	3301      	adds	r3, #1
 800d406:	70fb      	strb	r3, [r7, #3]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 800d408:	78fb      	ldrb	r3, [r7, #3]
 800d40a:	1c5a      	adds	r2, r3, #1
 800d40c:	70fa      	strb	r2, [r7, #3]
 800d40e:	461a      	mov	r2, r3
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	4413      	add	r3, r2
 800d414:	781b      	ldrb	r3, [r3, #0]
 800d416:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800d418:	78fb      	ldrb	r3, [r7, #3]
 800d41a:	1c5a      	adds	r2, r3, #1
 800d41c:	70fa      	strb	r2, [r7, #3]
 800d41e:	461a      	mov	r2, r3
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	4413      	add	r3, r2
 800d424:	781b      	ldrb	r3, [r3, #0]
 800d426:	021a      	lsls	r2, r3, #8
 800d428:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d42a:	4313      	orrs	r3, r2
 800d42c:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800d42e:	78fb      	ldrb	r3, [r7, #3]
 800d430:	1c5a      	adds	r2, r3, #1
 800d432:	70fa      	strb	r2, [r7, #3]
 800d434:	461a      	mov	r2, r3
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	4413      	add	r3, r2
 800d43a:	781b      	ldrb	r3, [r3, #0]
 800d43c:	041a      	lsls	r2, r3, #16
 800d43e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d440:	4313      	orrs	r3, r2
 800d442:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency *= 100;
 800d444:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d446:	2264      	movs	r2, #100	; 0x64
 800d448:	fb02 f303 	mul.w	r3, r2, r3
 800d44c:	653b      	str	r3, [r7, #80]	; 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 800d44e:	4b31      	ldr	r3, [pc, #196]	; (800d514 <ProcessMacCommands+0x394>)
 800d450:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d454:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800d458:	4611      	mov	r1, r2
 800d45a:	4618      	mov	r0, r3
 800d45c:	f004 ffa6 	bl	80123ac <RegionRxParamSetupReq>
 800d460:	4603      	mov	r3, r0
 800d462:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( status & 0x07 ) == 0x07 )
 800d466:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800d46a:	f003 0307 	and.w	r3, r3, #7
 800d46e:	2b07      	cmp	r3, #7
 800d470:	d117      	bne.n	800d4a2 <ProcessMacCommands+0x322>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 800d472:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 800d476:	b2da      	uxtb	r2, r3
 800d478:	4b26      	ldr	r3, [pc, #152]	; (800d514 <ProcessMacCommands+0x394>)
 800d47a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 800d47e:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 800d482:	b2da      	uxtb	r2, r3
 800d484:	4b23      	ldr	r3, [pc, #140]	; (800d514 <ProcessMacCommands+0x394>)
 800d486:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 800d48a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d48c:	4a21      	ldr	r2, [pc, #132]	; (800d514 <ProcessMacCommands+0x394>)
 800d48e:	6653      	str	r3, [r2, #100]	; 0x64
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 800d490:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d492:	4a20      	ldr	r2, [pc, #128]	; (800d514 <ProcessMacCommands+0x394>)
 800d494:	66d3      	str	r3, [r2, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 800d496:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 800d49a:	b2da      	uxtb	r2, r3
 800d49c:	4b1d      	ldr	r3, [pc, #116]	; (800d514 <ProcessMacCommands+0x394>)
 800d49e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                }
                macCmdPayload[0] = status;
 800d4a2:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800d4a6:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 800d4aa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800d4ae:	2201      	movs	r2, #1
 800d4b0:	4619      	mov	r1, r3
 800d4b2:	2005      	movs	r0, #5
 800d4b4:	f003 f928 	bl	8010708 <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 800d4b8:	f7ff fe52 	bl	800d160 <SetMlmeScheduleUplinkIndication>
                break;
 800d4bc:	bf00      	nop
 800d4be:	e2ea      	b.n	800da96 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 800d4c0:	23ff      	movs	r3, #255	; 0xff
 800d4c2:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 800d4c6:	4b12      	ldr	r3, [pc, #72]	; (800d510 <ProcessMacCommands+0x390>)
 800d4c8:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d00d      	beq.n	800d4ec <ProcessMacCommands+0x36c>
 800d4d0:	4b0f      	ldr	r3, [pc, #60]	; (800d510 <ProcessMacCommands+0x390>)
 800d4d2:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d007      	beq.n	800d4ec <ProcessMacCommands+0x36c>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 800d4dc:	4b0c      	ldr	r3, [pc, #48]	; (800d510 <ProcessMacCommands+0x390>)
 800d4de:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	4798      	blx	r3
 800d4e6:	4603      	mov	r3, r0
 800d4e8:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                }
                macCmdPayload[0] = batteryLevel;
 800d4ec:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 800d4f0:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 800d4f4:	787b      	ldrb	r3, [r7, #1]
 800d4f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d4fa:	b2db      	uxtb	r3, r3
 800d4fc:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 800d500:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800d504:	2202      	movs	r2, #2
 800d506:	4619      	mov	r1, r3
 800d508:	2006      	movs	r0, #6
 800d50a:	f003 f8fd 	bl	8010708 <LoRaMacCommandsAddCmd>
                break;
 800d50e:	e2c2      	b.n	800da96 <ProcessMacCommands+0x916>
 800d510:	200003e0 	.word	0x200003e0
 800d514:	200008e8 	.word	0x200008e8
 800d518:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 800d51c:	2303      	movs	r3, #3
 800d51e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 800d522:	78fb      	ldrb	r3, [r7, #3]
 800d524:	1c5a      	adds	r2, r3, #1
 800d526:	70fa      	strb	r2, [r7, #3]
 800d528:	461a      	mov	r2, r3
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	4413      	add	r3, r2
 800d52e:	781b      	ldrb	r3, [r3, #0]
 800d530:	b25b      	sxtb	r3, r3
 800d532:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                newChannelReq.NewChannel = &chParam;
 800d536:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d53a:	647b      	str	r3, [r7, #68]	; 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 800d53c:	78fb      	ldrb	r3, [r7, #3]
 800d53e:	1c5a      	adds	r2, r3, #1
 800d540:	70fa      	strb	r2, [r7, #3]
 800d542:	461a      	mov	r2, r3
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	4413      	add	r3, r2
 800d548:	781b      	ldrb	r3, [r3, #0]
 800d54a:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800d54c:	78fb      	ldrb	r3, [r7, #3]
 800d54e:	1c5a      	adds	r2, r3, #1
 800d550:	70fa      	strb	r2, [r7, #3]
 800d552:	461a      	mov	r2, r3
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	4413      	add	r3, r2
 800d558:	781b      	ldrb	r3, [r3, #0]
 800d55a:	021a      	lsls	r2, r3, #8
 800d55c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d55e:	4313      	orrs	r3, r2
 800d560:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800d562:	78fb      	ldrb	r3, [r7, #3]
 800d564:	1c5a      	adds	r2, r3, #1
 800d566:	70fa      	strb	r2, [r7, #3]
 800d568:	461a      	mov	r2, r3
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	4413      	add	r3, r2
 800d56e:	781b      	ldrb	r3, [r3, #0]
 800d570:	041a      	lsls	r2, r3, #16
 800d572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d574:	4313      	orrs	r3, r2
 800d576:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency *= 100;
 800d578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d57a:	2264      	movs	r2, #100	; 0x64
 800d57c:	fb02 f303 	mul.w	r3, r2, r3
 800d580:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Rx1Frequency = 0;
 800d582:	2300      	movs	r3, #0
 800d584:	63fb      	str	r3, [r7, #60]	; 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 800d586:	78fb      	ldrb	r3, [r7, #3]
 800d588:	1c5a      	adds	r2, r3, #1
 800d58a:	70fa      	strb	r2, [r7, #3]
 800d58c:	461a      	mov	r2, r3
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	4413      	add	r3, r2
 800d592:	781b      	ldrb	r3, [r3, #0]
 800d594:	b25b      	sxtb	r3, r3
 800d596:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 800d59a:	4b87      	ldr	r3, [pc, #540]	; (800d7b8 <ProcessMacCommands+0x638>)
 800d59c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d5a0:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800d5a4:	4611      	mov	r1, r2
 800d5a6:	4618      	mov	r0, r3
 800d5a8:	f004 ff13 	bl	80123d2 <RegionNewChannelReq>
 800d5ac:	4603      	mov	r3, r0
 800d5ae:	b2db      	uxtb	r3, r3
 800d5b0:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 800d5b4:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800d5b8:	b25b      	sxtb	r3, r3
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	db0a      	blt.n	800d5d4 <ProcessMacCommands+0x454>
                {
                    macCmdPayload[0] = status;
 800d5be:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800d5c2:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 800d5c6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800d5ca:	2201      	movs	r2, #1
 800d5cc:	4619      	mov	r1, r3
 800d5ce:	2007      	movs	r0, #7
 800d5d0:	f003 f89a 	bl	8010708 <LoRaMacCommandsAddCmd>
                }
                break;
 800d5d4:	bf00      	nop
 800d5d6:	e25e      	b.n	800da96 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 800d5d8:	78fb      	ldrb	r3, [r7, #3]
 800d5da:	1c5a      	adds	r2, r3, #1
 800d5dc:	70fa      	strb	r2, [r7, #3]
 800d5de:	461a      	mov	r2, r3
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	4413      	add	r3, r2
 800d5e4:	781b      	ldrb	r3, [r3, #0]
 800d5e6:	f003 030f 	and.w	r3, r3, #15
 800d5ea:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84

                if( delay == 0 )
 800d5ee:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d104      	bne.n	800d600 <ProcessMacCommands+0x480>
                {
                    delay++;
 800d5f6:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800d5fa:	3301      	adds	r3, #1
 800d5fc:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 800d600:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800d604:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d608:	fb02 f303 	mul.w	r3, r2, r3
 800d60c:	461a      	mov	r2, r3
 800d60e:	4b6a      	ldr	r3, [pc, #424]	; (800d7b8 <ProcessMacCommands+0x638>)
 800d610:	651a      	str	r2, [r3, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800d612:	4b69      	ldr	r3, [pc, #420]	; (800d7b8 <ProcessMacCommands+0x638>)
 800d614:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d616:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800d61a:	4a67      	ldr	r2, [pc, #412]	; (800d7b8 <ProcessMacCommands+0x638>)
 800d61c:	6553      	str	r3, [r2, #84]	; 0x54
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 800d61e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800d622:	2200      	movs	r2, #0
 800d624:	4619      	mov	r1, r3
 800d626:	2008      	movs	r0, #8
 800d628:	f003 f86e 	bl	8010708 <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 800d62c:	f7ff fd98 	bl	800d160 <SetMlmeScheduleUplinkIndication>
                break;
 800d630:	e231      	b.n	800da96 <ProcessMacCommands+0x916>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 800d632:	78fb      	ldrb	r3, [r7, #3]
 800d634:	1c5a      	adds	r2, r3, #1
 800d636:	70fa      	strb	r2, [r7, #3]
 800d638:	461a      	mov	r2, r3
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	4413      	add	r3, r2
 800d63e:	781b      	ldrb	r3, [r3, #0]
 800d640:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 800d644:	2300      	movs	r3, #0
 800d646:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 800d64a:	2300      	movs	r3, #0
 800d64c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 800d650:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800d654:	f003 0320 	and.w	r3, r3, #32
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d002      	beq.n	800d662 <ProcessMacCommands+0x4e2>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 800d65c:	2301      	movs	r3, #1
 800d65e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 800d662:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800d666:	f003 0310 	and.w	r3, r3, #16
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d002      	beq.n	800d674 <ProcessMacCommands+0x4f4>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 800d66e:	2301      	movs	r3, #1
 800d670:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 800d674:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800d678:	f003 030f 	and.w	r3, r3, #15
 800d67c:	b2db      	uxtb	r3, r3
 800d67e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 800d682:	4b4d      	ldr	r3, [pc, #308]	; (800d7b8 <ProcessMacCommands+0x638>)
 800d684:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d688:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800d68c:	4611      	mov	r1, r2
 800d68e:	4618      	mov	r0, r3
 800d690:	f004 feb2 	bl	80123f8 <RegionTxParamSetupReq>
 800d694:	4603      	mov	r3, r0
 800d696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d69a:	d03a      	beq.n	800d712 <ProcessMacCommands+0x592>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 800d69c:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 800d6a0:	4b45      	ldr	r3, [pc, #276]	; (800d7b8 <ProcessMacCommands+0x638>)
 800d6a2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 800d6a6:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800d6aa:	4b43      	ldr	r3, [pc, #268]	; (800d7b8 <ProcessMacCommands+0x638>)
 800d6ac:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 800d6b0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800d6b4:	461a      	mov	r2, r3
 800d6b6:	4b41      	ldr	r3, [pc, #260]	; (800d7bc <ProcessMacCommands+0x63c>)
 800d6b8:	5c9b      	ldrb	r3, [r3, r2]
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	f7f3 f886 	bl	80007cc <__aeabi_ui2f>
 800d6c0:	4603      	mov	r3, r0
 800d6c2:	4a3d      	ldr	r2, [pc, #244]	; (800d7b8 <ProcessMacCommands+0x638>)
 800d6c4:	6793      	str	r3, [r2, #120]	; 0x78
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 800d6c6:	2302      	movs	r3, #2
 800d6c8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800d6cc:	4b3a      	ldr	r3, [pc, #232]	; (800d7b8 <ProcessMacCommands+0x638>)
 800d6ce:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800d6d2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d6d6:	4b38      	ldr	r3, [pc, #224]	; (800d7b8 <ProcessMacCommands+0x638>)
 800d6d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d6dc:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800d6e0:	4611      	mov	r1, r2
 800d6e2:	4618      	mov	r0, r3
 800d6e4:	f004 fd8a 	bl	80121fc <RegionGetPhyParam>
 800d6e8:	4603      	mov	r3, r0
 800d6ea:	62bb      	str	r3, [r7, #40]	; 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 800d6ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6ee:	b25a      	sxtb	r2, r3
 800d6f0:	4b31      	ldr	r3, [pc, #196]	; (800d7b8 <ProcessMacCommands+0x638>)
 800d6f2:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800d6f6:	4293      	cmp	r3, r2
 800d6f8:	bfb8      	it	lt
 800d6fa:	4613      	movlt	r3, r2
 800d6fc:	b25a      	sxtb	r2, r3
 800d6fe:	4b2e      	ldr	r3, [pc, #184]	; (800d7b8 <ProcessMacCommands+0x638>)
 800d700:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 800d704:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800d708:	2200      	movs	r2, #0
 800d70a:	4619      	mov	r1, r3
 800d70c:	2009      	movs	r0, #9
 800d70e:	f002 fffb 	bl	8010708 <LoRaMacCommandsAddCmd>
                }
                break;
 800d712:	bf00      	nop
 800d714:	e1bf      	b.n	800da96 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 800d716:	2303      	movs	r3, #3
 800d718:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 800d71c:	78fb      	ldrb	r3, [r7, #3]
 800d71e:	1c5a      	adds	r2, r3, #1
 800d720:	70fa      	strb	r2, [r7, #3]
 800d722:	461a      	mov	r2, r3
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	4413      	add	r3, r2
 800d728:	781b      	ldrb	r3, [r3, #0]
 800d72a:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 800d72e:	78fb      	ldrb	r3, [r7, #3]
 800d730:	1c5a      	adds	r2, r3, #1
 800d732:	70fa      	strb	r2, [r7, #3]
 800d734:	461a      	mov	r2, r3
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	4413      	add	r3, r2
 800d73a:	781b      	ldrb	r3, [r3, #0]
 800d73c:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800d73e:	78fb      	ldrb	r3, [r7, #3]
 800d740:	1c5a      	adds	r2, r3, #1
 800d742:	70fa      	strb	r2, [r7, #3]
 800d744:	461a      	mov	r2, r3
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	4413      	add	r3, r2
 800d74a:	781b      	ldrb	r3, [r3, #0]
 800d74c:	021a      	lsls	r2, r3, #8
 800d74e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d750:	4313      	orrs	r3, r2
 800d752:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800d754:	78fb      	ldrb	r3, [r7, #3]
 800d756:	1c5a      	adds	r2, r3, #1
 800d758:	70fa      	strb	r2, [r7, #3]
 800d75a:	461a      	mov	r2, r3
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	4413      	add	r3, r2
 800d760:	781b      	ldrb	r3, [r3, #0]
 800d762:	041a      	lsls	r2, r3, #16
 800d764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d766:	4313      	orrs	r3, r2
 800d768:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency *= 100;
 800d76a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d76c:	2264      	movs	r2, #100	; 0x64
 800d76e:	fb02 f303 	mul.w	r3, r2, r3
 800d772:	627b      	str	r3, [r7, #36]	; 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 800d774:	4b10      	ldr	r3, [pc, #64]	; (800d7b8 <ProcessMacCommands+0x638>)
 800d776:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d77a:	f107 0220 	add.w	r2, r7, #32
 800d77e:	4611      	mov	r1, r2
 800d780:	4618      	mov	r0, r3
 800d782:	f004 fe4c 	bl	801241e <RegionDlChannelReq>
 800d786:	4603      	mov	r3, r0
 800d788:	b2db      	uxtb	r3, r3
 800d78a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 800d78e:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800d792:	b25b      	sxtb	r3, r3
 800d794:	2b00      	cmp	r3, #0
 800d796:	db0c      	blt.n	800d7b2 <ProcessMacCommands+0x632>
                {
                    macCmdPayload[0] = status;
 800d798:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800d79c:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 800d7a0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800d7a4:	2201      	movs	r2, #1
 800d7a6:	4619      	mov	r1, r3
 800d7a8:	200a      	movs	r0, #10
 800d7aa:	f002 ffad 	bl	8010708 <LoRaMacCommandsAddCmd>
                    // Setup indication to inform the application
                    SetMlmeScheduleUplinkIndication( );
 800d7ae:	f7ff fcd7 	bl	800d160 <SetMlmeScheduleUplinkIndication>
                }
                break;
 800d7b2:	bf00      	nop
 800d7b4:	e16f      	b.n	800da96 <ProcessMacCommands+0x916>
 800d7b6:	bf00      	nop
 800d7b8:	200008e8 	.word	0x200008e8
 800d7bc:	08019c2c 	.word	0x08019c2c
            }
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 800d7c0:	200a      	movs	r0, #10
 800d7c2:	f003 fac9 	bl	8010d58 <LoRaMacConfirmQueueIsCmdActive>
 800d7c6:	4603      	mov	r3, r0
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	f000 8164 	beq.w	800da96 <ProcessMacCommands+0x916>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 800d7ce:	210a      	movs	r1, #10
 800d7d0:	2000      	movs	r0, #0
 800d7d2:	f003 fa35 	bl	8010c40 <LoRaMacConfirmQueueSetStatus>
                    SysTime_t gpsEpochTime = { 0 };
 800d7d6:	f107 0318 	add.w	r3, r7, #24
 800d7da:	2200      	movs	r2, #0
 800d7dc:	601a      	str	r2, [r3, #0]
 800d7de:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 800d7e0:	f107 0310 	add.w	r3, r7, #16
 800d7e4:	2200      	movs	r2, #0
 800d7e6:	601a      	str	r2, [r3, #0]
 800d7e8:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 800d7ea:	f107 0308 	add.w	r3, r7, #8
 800d7ee:	2200      	movs	r2, #0
 800d7f0:	601a      	str	r2, [r3, #0]
 800d7f2:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 800d7f4:	78fb      	ldrb	r3, [r7, #3]
 800d7f6:	1c5a      	adds	r2, r3, #1
 800d7f8:	70fa      	strb	r2, [r7, #3]
 800d7fa:	461a      	mov	r2, r3
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	4413      	add	r3, r2
 800d800:	781b      	ldrb	r3, [r3, #0]
 800d802:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 800d804:	78fb      	ldrb	r3, [r7, #3]
 800d806:	1c5a      	adds	r2, r3, #1
 800d808:	70fa      	strb	r2, [r7, #3]
 800d80a:	461a      	mov	r2, r3
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	4413      	add	r3, r2
 800d810:	781b      	ldrb	r3, [r3, #0]
 800d812:	021a      	lsls	r2, r3, #8
 800d814:	69bb      	ldr	r3, [r7, #24]
 800d816:	4313      	orrs	r3, r2
 800d818:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 800d81a:	78fb      	ldrb	r3, [r7, #3]
 800d81c:	1c5a      	adds	r2, r3, #1
 800d81e:	70fa      	strb	r2, [r7, #3]
 800d820:	461a      	mov	r2, r3
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	4413      	add	r3, r2
 800d826:	781b      	ldrb	r3, [r3, #0]
 800d828:	041a      	lsls	r2, r3, #16
 800d82a:	69bb      	ldr	r3, [r7, #24]
 800d82c:	4313      	orrs	r3, r2
 800d82e:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800d830:	78fb      	ldrb	r3, [r7, #3]
 800d832:	1c5a      	adds	r2, r3, #1
 800d834:	70fa      	strb	r2, [r7, #3]
 800d836:	461a      	mov	r2, r3
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	4413      	add	r3, r2
 800d83c:	781b      	ldrb	r3, [r3, #0]
 800d83e:	061a      	lsls	r2, r3, #24
 800d840:	69bb      	ldr	r3, [r7, #24]
 800d842:	4313      	orrs	r3, r2
 800d844:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 800d846:	78fb      	ldrb	r3, [r7, #3]
 800d848:	1c5a      	adds	r2, r3, #1
 800d84a:	70fa      	strb	r2, [r7, #3]
 800d84c:	461a      	mov	r2, r3
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	4413      	add	r3, r2
 800d852:	781b      	ldrb	r3, [r3, #0]
 800d854:	b21b      	sxth	r3, r3
 800d856:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 800d858:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800d85c:	461a      	mov	r2, r3
 800d85e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d862:	fb03 f302 	mul.w	r3, r3, r2
 800d866:	121b      	asrs	r3, r3, #8
 800d868:	b21b      	sxth	r3, r3
 800d86a:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 800d86c:	f107 0310 	add.w	r3, r7, #16
 800d870:	f107 0218 	add.w	r2, r7, #24
 800d874:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d878:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epcoh offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 800d87c:	693a      	ldr	r2, [r7, #16]
 800d87e:	4b8c      	ldr	r3, [pc, #560]	; (800dab0 <ProcessMacCommands+0x930>)
 800d880:	4413      	add	r3, r2
 800d882:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 800d884:	f107 0308 	add.w	r3, r7, #8
 800d888:	4618      	mov	r0, r3
 800d88a:	f00a fa1b 	bl	8017cc4 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 800d88e:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 800d892:	4b88      	ldr	r3, [pc, #544]	; (800dab4 <ProcessMacCommands+0x934>)
 800d894:	f8d3 233c 	ldr.w	r2, [r3, #828]	; 0x33c
 800d898:	9200      	str	r2, [sp, #0]
 800d89a:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 800d89e:	f107 0210 	add.w	r2, r7, #16
 800d8a2:	ca06      	ldmia	r2, {r1, r2}
 800d8a4:	f00a f9a7 	bl	8017bf6 <SysTimeSub>
 800d8a8:	f107 0010 	add.w	r0, r7, #16
 800d8ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d8ae:	9300      	str	r3, [sp, #0]
 800d8b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d8b2:	f107 0208 	add.w	r2, r7, #8
 800d8b6:	ca06      	ldmia	r2, {r1, r2}
 800d8b8:	f00a f964 	bl	8017b84 <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 800d8bc:	f107 0310 	add.w	r3, r7, #16
 800d8c0:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d8c4:	f00a f9d0 	bl	8017c68 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 800d8c8:	f002 fde3 	bl	8010492 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 800d8cc:	4b79      	ldr	r3, [pc, #484]	; (800dab4 <ProcessMacCommands+0x934>)
 800d8ce:	2201      	movs	r2, #1
 800d8d0:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
                }
                break;
 800d8d4:	e0df      	b.n	800da96 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 800d8d6:	200d      	movs	r0, #13
 800d8d8:	f003 fa3e 	bl	8010d58 <LoRaMacConfirmQueueIsCmdActive>
 800d8dc:	4603      	mov	r3, r0
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	f000 80d9 	beq.w	800da96 <ProcessMacCommands+0x916>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 800d8e4:	210d      	movs	r1, #13
 800d8e6:	2000      	movs	r0, #0
 800d8e8:	f003 f9aa 	bl	8010c40 <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 800d8ec:	4b71      	ldr	r3, [pc, #452]	; (800dab4 <ProcessMacCommands+0x934>)
 800d8ee:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800d8f2:	2b04      	cmp	r3, #4
 800d8f4:	f000 80cf 	beq.w	800da96 <ProcessMacCommands+0x916>
 800d8f8:	4b6e      	ldr	r3, [pc, #440]	; (800dab4 <ProcessMacCommands+0x934>)
 800d8fa:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800d8fe:	2b05      	cmp	r3, #5
 800d900:	f000 80c9 	beq.w	800da96 <ProcessMacCommands+0x916>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 800d904:	f002 fda6 	bl	8010454 <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 800d908:	e0c5      	b.n	800da96 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 800d90a:	2303      	movs	r3, #3
 800d90c:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                uint32_t frequency = 0;
 800d910:	2300      	movs	r3, #0
 800d912:	67bb      	str	r3, [r7, #120]	; 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 800d914:	78fb      	ldrb	r3, [r7, #3]
 800d916:	1c5a      	adds	r2, r3, #1
 800d918:	70fa      	strb	r2, [r7, #3]
 800d91a:	461a      	mov	r2, r3
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	4413      	add	r3, r2
 800d920:	781b      	ldrb	r3, [r3, #0]
 800d922:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 800d924:	78fb      	ldrb	r3, [r7, #3]
 800d926:	1c5a      	adds	r2, r3, #1
 800d928:	70fa      	strb	r2, [r7, #3]
 800d92a:	461a      	mov	r2, r3
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	4413      	add	r3, r2
 800d930:	781b      	ldrb	r3, [r3, #0]
 800d932:	021b      	lsls	r3, r3, #8
 800d934:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d936:	4313      	orrs	r3, r2
 800d938:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 800d93a:	78fb      	ldrb	r3, [r7, #3]
 800d93c:	1c5a      	adds	r2, r3, #1
 800d93e:	70fa      	strb	r2, [r7, #3]
 800d940:	461a      	mov	r2, r3
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	4413      	add	r3, r2
 800d946:	781b      	ldrb	r3, [r3, #0]
 800d948:	041b      	lsls	r3, r3, #16
 800d94a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d94c:	4313      	orrs	r3, r2
 800d94e:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency *= 100;
 800d950:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d952:	2264      	movs	r2, #100	; 0x64
 800d954:	fb02 f303 	mul.w	r3, r2, r3
 800d958:	67bb      	str	r3, [r7, #120]	; 0x78
                datarate = payload[macIndex++] & 0x0F;
 800d95a:	78fb      	ldrb	r3, [r7, #3]
 800d95c:	1c5a      	adds	r2, r3, #1
 800d95e:	70fa      	strb	r2, [r7, #3]
 800d960:	461a      	mov	r2, r3
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	4413      	add	r3, r2
 800d966:	781b      	ldrb	r3, [r3, #0]
 800d968:	f003 030f 	and.w	r3, r3, #15
 800d96c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 800d970:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800d974:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800d976:	4618      	mov	r0, r3
 800d978:	f002 fd72 	bl	8010460 <LoRaMacClassBPingSlotChannelReq>
 800d97c:	4603      	mov	r3, r0
 800d97e:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                macCmdPayload[0] = status;
 800d982:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 800d986:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 800d98a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800d98e:	2201      	movs	r2, #1
 800d990:	4619      	mov	r1, r3
 800d992:	2011      	movs	r0, #17
 800d994:	f002 feb8 	bl	8010708 <LoRaMacCommandsAddCmd>
                break;
 800d998:	e07d      	b.n	800da96 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 800d99a:	200e      	movs	r0, #14
 800d99c:	f003 f9dc 	bl	8010d58 <LoRaMacConfirmQueueIsCmdActive>
 800d9a0:	4603      	mov	r3, r0
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d077      	beq.n	800da96 <ProcessMacCommands+0x916>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 800d9a6:	210e      	movs	r1, #14
 800d9a8:	2000      	movs	r0, #0
 800d9aa:	f003 f949 	bl	8010c40 <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 800d9ae:	2300      	movs	r3, #0
 800d9b0:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    uint8_t beaconTimingChannel = 0;
 800d9b4:	2300      	movs	r3, #0
 800d9b6:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 800d9ba:	78fb      	ldrb	r3, [r7, #3]
 800d9bc:	1c5a      	adds	r2, r3, #1
 800d9be:	70fa      	strb	r2, [r7, #3]
 800d9c0:	461a      	mov	r2, r3
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	4413      	add	r3, r2
 800d9c6:	781b      	ldrb	r3, [r3, #0]
 800d9c8:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 800d9cc:	78fb      	ldrb	r3, [r7, #3]
 800d9ce:	1c5a      	adds	r2, r3, #1
 800d9d0:	70fa      	strb	r2, [r7, #3]
 800d9d2:	461a      	mov	r2, r3
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	4413      	add	r3, r2
 800d9d8:	781b      	ldrb	r3, [r3, #0]
 800d9da:	021b      	lsls	r3, r3, #8
 800d9dc:	b21a      	sxth	r2, r3
 800d9de:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 800d9e2:	4313      	orrs	r3, r2
 800d9e4:	b21b      	sxth	r3, r3
 800d9e6:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingChannel = payload[macIndex++];
 800d9ea:	78fb      	ldrb	r3, [r7, #3]
 800d9ec:	1c5a      	adds	r2, r3, #1
 800d9ee:	70fa      	strb	r2, [r7, #3]
 800d9f0:	461a      	mov	r2, r3
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	4413      	add	r3, r2
 800d9f6:	781b      	ldrb	r3, [r3, #0]
 800d9f8:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 800d9fc:	4b2e      	ldr	r3, [pc, #184]	; (800dab8 <ProcessMacCommands+0x938>)
 800d9fe:	681a      	ldr	r2, [r3, #0]
 800da00:	f897 107d 	ldrb.w	r1, [r7, #125]	; 0x7d
 800da04:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800da08:	4618      	mov	r0, r3
 800da0a:	f002 fd35 	bl	8010478 <LoRaMacClassBBeaconTimingAns>
                }
                break;
 800da0e:	e042      	b.n	800da96 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 800da10:	2300      	movs	r3, #0
 800da12:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 800da16:	78fb      	ldrb	r3, [r7, #3]
 800da18:	1c5a      	adds	r2, r3, #1
 800da1a:	70fa      	strb	r2, [r7, #3]
 800da1c:	461a      	mov	r2, r3
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	4413      	add	r3, r2
 800da22:	781b      	ldrb	r3, [r3, #0]
 800da24:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 800da28:	78fb      	ldrb	r3, [r7, #3]
 800da2a:	1c5a      	adds	r2, r3, #1
 800da2c:	70fa      	strb	r2, [r7, #3]
 800da2e:	461a      	mov	r2, r3
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	4413      	add	r3, r2
 800da34:	781b      	ldrb	r3, [r3, #0]
 800da36:	021b      	lsls	r3, r3, #8
 800da38:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800da3c:	4313      	orrs	r3, r2
 800da3e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 800da42:	78fb      	ldrb	r3, [r7, #3]
 800da44:	1c5a      	adds	r2, r3, #1
 800da46:	70fa      	strb	r2, [r7, #3]
 800da48:	461a      	mov	r2, r3
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	4413      	add	r3, r2
 800da4e:	781b      	ldrb	r3, [r3, #0]
 800da50:	041b      	lsls	r3, r3, #16
 800da52:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800da56:	4313      	orrs	r3, r2
 800da58:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency *= 100;
 800da5c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800da60:	2264      	movs	r2, #100	; 0x64
 800da62:	fb02 f303 	mul.w	r3, r2, r3
 800da66:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 800da6a:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800da6e:	f002 fd16 	bl	801049e <LoRaMacClassBBeaconFreqReq>
 800da72:	4603      	mov	r3, r0
 800da74:	2b00      	cmp	r3, #0
 800da76:	d003      	beq.n	800da80 <ProcessMacCommands+0x900>
                    {
                        macCmdPayload[0] = 1;
 800da78:	2301      	movs	r3, #1
 800da7a:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
 800da7e:	e002      	b.n	800da86 <ProcessMacCommands+0x906>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 800da80:	2300      	movs	r3, #0
 800da82:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 800da86:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800da8a:	2201      	movs	r2, #1
 800da8c:	4619      	mov	r1, r3
 800da8e:	2013      	movs	r0, #19
 800da90:	f002 fe3a 	bl	8010708 <LoRaMacCommandsAddCmd>
                }
                break;
 800da94:	bf00      	nop
    while( macIndex < commandsSize )
 800da96:	78fa      	ldrb	r2, [r7, #3]
 800da98:	78bb      	ldrb	r3, [r7, #2]
 800da9a:	429a      	cmp	r2, r3
 800da9c:	f4ff ab88 	bcc.w	800d1b0 <ProcessMacCommands+0x30>
 800daa0:	e002      	b.n	800daa8 <ProcessMacCommands+0x928>
            return;
 800daa2:	bf00      	nop
 800daa4:	e000      	b.n	800daa8 <ProcessMacCommands+0x928>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 800daa6:	bf00      	nop
        }
    }
}
 800daa8:	378c      	adds	r7, #140	; 0x8c
 800daaa:	46bd      	mov	sp, r7
 800daac:	bd90      	pop	{r4, r7, pc}
 800daae:	bf00      	nop
 800dab0:	12d53d80 	.word	0x12d53d80
 800dab4:	200003e0 	.word	0x200003e0
 800dab8:	20001668 	.word	0x20001668

0800dabc <Send>:

/* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 800dabc:	b580      	push	{r7, lr}
 800dabe:	b08e      	sub	sp, #56	; 0x38
 800dac0:	af02      	add	r7, sp, #8
 800dac2:	60f8      	str	r0, [r7, #12]
 800dac4:	607a      	str	r2, [r7, #4]
 800dac6:	461a      	mov	r2, r3
 800dac8:	460b      	mov	r3, r1
 800daca:	72fb      	strb	r3, [r7, #11]
 800dacc:	4613      	mov	r3, r2
 800dace:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800dad0:	2303      	movs	r3, #3
 800dad2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 800dad6:	4b65      	ldr	r3, [pc, #404]	; (800dc6c <Send+0x1b0>)
 800dad8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800dadc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 800dae0:	4b62      	ldr	r3, [pc, #392]	; (800dc6c <Send+0x1b0>)
 800dae2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800dae6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800daea:	4b60      	ldr	r3, [pc, #384]	; (800dc6c <Send+0x1b0>)
 800daec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800daee:	62bb      	str	r3, [r7, #40]	; 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800daf0:	4b5e      	ldr	r3, [pc, #376]	; (800dc6c <Send+0x1b0>)
 800daf2:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d101      	bne.n	800dafe <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 800dafa:	2307      	movs	r3, #7
 800dafc:	e0b1      	b.n	800dc62 <Send+0x1a6>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 800dafe:	4b5b      	ldr	r3, [pc, #364]	; (800dc6c <Send+0x1b0>)
 800db00:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
 800db04:	2b00      	cmp	r3, #0
 800db06:	d102      	bne.n	800db0e <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 800db08:	4b58      	ldr	r3, [pc, #352]	; (800dc6c <Send+0x1b0>)
 800db0a:	2200      	movs	r2, #0
 800db0c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    fCtrl.Value = 0;
 800db0e:	2300      	movs	r3, #0
 800db10:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 800db14:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800db18:	f36f 0303 	bfc	r3, #0, #4
 800db1c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 800db20:	4b52      	ldr	r3, [pc, #328]	; (800dc6c <Send+0x1b0>)
 800db22:	f893 20fe 	ldrb.w	r2, [r3, #254]	; 0xfe
 800db26:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800db2a:	f362 13c7 	bfi	r3, r2, #7, #1
 800db2e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800db32:	4b4e      	ldr	r3, [pc, #312]	; (800dc6c <Send+0x1b0>)
 800db34:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800db38:	2b01      	cmp	r3, #1
 800db3a:	d106      	bne.n	800db4a <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 800db3c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800db40:	f043 0310 	orr.w	r3, r3, #16
 800db44:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 800db48:	e005      	b.n	800db56 <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 800db4a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800db4e:	f36f 1304 	bfc	r3, #4, #1
 800db52:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 800db56:	4b45      	ldr	r3, [pc, #276]	; (800dc6c <Send+0x1b0>)
 800db58:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d005      	beq.n	800db6c <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 800db60:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800db64:	f043 0320 	orr.w	r3, r3, #32
 800db68:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // ADR next request
    adrNext.Version = Nvm.MacGroup2.Version;
 800db6c:	4b3f      	ldr	r3, [pc, #252]	; (800dc6c <Send+0x1b0>)
 800db6e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800db72:	617b      	str	r3, [r7, #20]
    adrNext.UpdateChanMask = true;
 800db74:	2301      	movs	r3, #1
 800db76:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 800db78:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800db7c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800db80:	b2db      	uxtb	r3, r3
 800db82:	2b00      	cmp	r3, #0
 800db84:	bf14      	ite	ne
 800db86:	2301      	movne	r3, #1
 800db88:	2300      	moveq	r3, #0
 800db8a:	b2db      	uxtb	r3, r3
 800db8c:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800db8e:	4b37      	ldr	r3, [pc, #220]	; (800dc6c <Send+0x1b0>)
 800db90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db92:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800db94:	4b36      	ldr	r3, [pc, #216]	; (800dc70 <Send+0x1b4>)
 800db96:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	; 0x3f4
 800db9a:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 800db9c:	4b34      	ldr	r3, [pc, #208]	; (800dc70 <Send+0x1b4>)
 800db9e:	f8b3 33f6 	ldrh.w	r3, [r3, #1014]	; 0x3f6
 800dba2:	847b      	strh	r3, [r7, #34]	; 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800dba4:	4b31      	ldr	r3, [pc, #196]	; (800dc6c <Send+0x1b0>)
 800dba6:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800dbaa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800dbae:	4b2f      	ldr	r3, [pc, #188]	; (800dc6c <Send+0x1b0>)
 800dbb0:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800dbb4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800dbb8:	4b2c      	ldr	r3, [pc, #176]	; (800dc6c <Send+0x1b0>)
 800dbba:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800dbbe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 800dbc2:	4b2a      	ldr	r3, [pc, #168]	; (800dc6c <Send+0x1b0>)
 800dbc4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800dbc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 800dbcc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800dbd0:	f107 0014 	add.w	r0, r7, #20
 800dbd4:	4a27      	ldr	r2, [pc, #156]	; (800dc74 <Send+0x1b8>)
 800dbd6:	4928      	ldr	r1, [pc, #160]	; (800dc78 <Send+0x1bc>)
 800dbd8:	f002 fb7c 	bl	80102d4 <LoRaMacAdrCalcNext>
 800dbdc:	4603      	mov	r3, r0
 800dbde:	461a      	mov	r2, r3
 800dbe0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800dbe4:	f362 1386 	bfi	r3, r2, #6, #1
 800dbe8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower, &adrAckCounter );

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 800dbec:	7afa      	ldrb	r2, [r7, #11]
 800dbee:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800dbf2:	893b      	ldrh	r3, [r7, #8]
 800dbf4:	9300      	str	r3, [sp, #0]
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	68f8      	ldr	r0, [r7, #12]
 800dbfa:	f000 fc21 	bl	800e440 <PrepareFrame>
 800dbfe:	4603      	mov	r3, r0
 800dc00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 800dc04:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d003      	beq.n	800dc14 <Send+0x158>
 800dc0c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dc10:	2b0a      	cmp	r3, #10
 800dc12:	d107      	bne.n	800dc24 <Send+0x168>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 800dc14:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800dc18:	4618      	mov	r0, r3
 800dc1a:	f000 f96d 	bl	800def8 <ScheduleTx>
 800dc1e:	4603      	mov	r3, r0
 800dc20:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 800dc24:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d00a      	beq.n	800dc42 <Send+0x186>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 800dc2c:	4a0f      	ldr	r2, [pc, #60]	; (800dc6c <Send+0x1b0>)
 800dc2e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800dc32:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 800dc36:	4a0d      	ldr	r2, [pc, #52]	; (800dc6c <Send+0x1b0>)
 800dc38:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800dc3c:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
 800dc40:	e00d      	b.n	800dc5e <Send+0x1a2>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 800dc42:	4b0a      	ldr	r3, [pc, #40]	; (800dc6c <Send+0x1b0>)
 800dc44:	2200      	movs	r2, #0
 800dc46:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 800dc4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc4c:	4a07      	ldr	r2, [pc, #28]	; (800dc6c <Send+0x1b0>)
 800dc4e:	6293      	str	r3, [r2, #40]	; 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 800dc50:	f002 fdd2 	bl	80107f8 <LoRaMacCommandsRemoveNoneStickyCmds>
 800dc54:	4603      	mov	r3, r0
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d001      	beq.n	800dc5e <Send+0x1a2>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800dc5a:	2313      	movs	r3, #19
 800dc5c:	e001      	b.n	800dc62 <Send+0x1a6>
        }
    }
    return status;
 800dc5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800dc62:	4618      	mov	r0, r3
 800dc64:	3730      	adds	r7, #48	; 0x30
 800dc66:	46bd      	mov	sp, r7
 800dc68:	bd80      	pop	{r7, pc}
 800dc6a:	bf00      	nop
 800dc6c:	200008e8 	.word	0x200008e8
 800dc70:	200003e0 	.word	0x200003e0
 800dc74:	20000920 	.word	0x20000920
 800dc78:	20000921 	.word	0x20000921

0800dc7c <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 800dc7c:	b580      	push	{r7, lr}
 800dc7e:	b084      	sub	sp, #16
 800dc80:	af00      	add	r7, sp, #0
 800dc82:	4603      	mov	r3, r0
 800dc84:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800dc86:	2300      	movs	r3, #0
 800dc88:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 800dc8a:	2300      	movs	r3, #0
 800dc8c:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 800dc8e:	2301      	movs	r3, #1
 800dc90:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 800dc92:	79fb      	ldrb	r3, [r7, #7]
 800dc94:	2bff      	cmp	r3, #255	; 0xff
 800dc96:	d129      	bne.n	800dcec <SendReJoinReq+0x70>
    {
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 800dc98:	2000      	movs	r0, #0
 800dc9a:	f7ff f941 	bl	800cf20 <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 800dc9e:	4b1a      	ldr	r3, [pc, #104]	; (800dd08 <SendReJoinReq+0x8c>)
 800dca0:	2200      	movs	r2, #0
 800dca2:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 800dca6:	4b18      	ldr	r3, [pc, #96]	; (800dd08 <SendReJoinReq+0x8c>)
 800dca8:	4a18      	ldr	r2, [pc, #96]	; (800dd0c <SendReJoinReq+0x90>)
 800dcaa:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800dcae:	4b16      	ldr	r3, [pc, #88]	; (800dd08 <SendReJoinReq+0x8c>)
 800dcb0:	22ff      	movs	r2, #255	; 0xff
 800dcb2:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 800dcb6:	7b3b      	ldrb	r3, [r7, #12]
 800dcb8:	f36f 1347 	bfc	r3, #5, #3
 800dcbc:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 800dcbe:	7b3a      	ldrb	r2, [r7, #12]
 800dcc0:	4b11      	ldr	r3, [pc, #68]	; (800dd08 <SendReJoinReq+0x8c>)
 800dcc2:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d

            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 800dcc6:	f7fc fc8f 	bl	800a5e8 <SecureElementGetJoinEui>
 800dcca:	4603      	mov	r3, r0
 800dccc:	2208      	movs	r2, #8
 800dcce:	4619      	mov	r1, r3
 800dcd0:	480f      	ldr	r0, [pc, #60]	; (800dd10 <SendReJoinReq+0x94>)
 800dcd2:	f006 fd5a 	bl	801478a <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 800dcd6:	f7fc fc65 	bl	800a5a4 <SecureElementGetDevEui>
 800dcda:	4603      	mov	r3, r0
 800dcdc:	2208      	movs	r2, #8
 800dcde:	4619      	mov	r1, r3
 800dce0:	480c      	ldr	r0, [pc, #48]	; (800dd14 <SendReJoinReq+0x98>)
 800dce2:	f006 fd52 	bl	801478a <memcpy1>

            allowDelayedTx = false;
 800dce6:	2300      	movs	r3, #0
 800dce8:	73fb      	strb	r3, [r7, #15]

            break;
 800dcea:	e002      	b.n	800dcf2 <SendReJoinReq+0x76>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800dcec:	2302      	movs	r3, #2
 800dcee:	73bb      	strb	r3, [r7, #14]
            break;
 800dcf0:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 800dcf2:	7bfb      	ldrb	r3, [r7, #15]
 800dcf4:	4618      	mov	r0, r3
 800dcf6:	f000 f8ff 	bl	800def8 <ScheduleTx>
 800dcfa:	4603      	mov	r3, r0
 800dcfc:	73bb      	strb	r3, [r7, #14]
    return status;
 800dcfe:	7bbb      	ldrb	r3, [r7, #14]
}
 800dd00:	4618      	mov	r0, r3
 800dd02:	3710      	adds	r7, #16
 800dd04:	46bd      	mov	sp, r7
 800dd06:	bd80      	pop	{r7, pc}
 800dd08:	200003e0 	.word	0x200003e0
 800dd0c:	200003e2 	.word	0x200003e2
 800dd10:	200004ee 	.word	0x200004ee
 800dd14:	200004f6 	.word	0x200004f6

0800dd18 <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 800dd18:	b580      	push	{r7, lr}
 800dd1a:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800dd1c:	f002 fb49 	bl	80103b2 <LoRaMacClassBIsBeaconExpected>
 800dd20:	4603      	mov	r3, r0
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d001      	beq.n	800dd2a <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 800dd26:	230e      	movs	r3, #14
 800dd28:	e013      	b.n	800dd52 <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800dd2a:	4b0b      	ldr	r3, [pc, #44]	; (800dd58 <CheckForClassBCollision+0x40>)
 800dd2c:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800dd30:	2b01      	cmp	r3, #1
 800dd32:	d10d      	bne.n	800dd50 <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800dd34:	f002 fb44 	bl	80103c0 <LoRaMacClassBIsPingExpected>
 800dd38:	4603      	mov	r3, r0
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d001      	beq.n	800dd42 <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800dd3e:	230f      	movs	r3, #15
 800dd40:	e007      	b.n	800dd52 <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800dd42:	f002 fb44 	bl	80103ce <LoRaMacClassBIsMulticastExpected>
 800dd46:	4603      	mov	r3, r0
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d001      	beq.n	800dd50 <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800dd4c:	230f      	movs	r3, #15
 800dd4e:	e000      	b.n	800dd52 <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 800dd50:	2300      	movs	r3, #0
}
 800dd52:	4618      	mov	r0, r3
 800dd54:	bd80      	pop	{r7, pc}
 800dd56:	bf00      	nop
 800dd58:	200008e8 	.word	0x200008e8

0800dd5c <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 800dd5c:	b590      	push	{r4, r7, lr}
 800dd5e:	b083      	sub	sp, #12
 800dd60:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800dd62:	4b2d      	ldr	r3, [pc, #180]	; (800de18 <ComputeRxWindowParameters+0xbc>)
 800dd64:	f893 4040 	ldrb.w	r4, [r3, #64]	; 0x40
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800dd68:	4b2b      	ldr	r3, [pc, #172]	; (800de18 <ComputeRxWindowParameters+0xbc>)
 800dd6a:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800dd6e:	4b2a      	ldr	r3, [pc, #168]	; (800de18 <ComputeRxWindowParameters+0xbc>)
 800dd70:	f893 1075 	ldrb.w	r1, [r3, #117]	; 0x75
 800dd74:	4b28      	ldr	r3, [pc, #160]	; (800de18 <ComputeRxWindowParameters+0xbc>)
 800dd76:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 800dd7a:	4b27      	ldr	r3, [pc, #156]	; (800de18 <ComputeRxWindowParameters+0xbc>)
 800dd7c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800dd80:	b25b      	sxtb	r3, r3
 800dd82:	f004 fba3 	bl	80124cc <RegionApplyDrOffset>
 800dd86:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800dd88:	b259      	sxtb	r1, r3
 800dd8a:	4b23      	ldr	r3, [pc, #140]	; (800de18 <ComputeRxWindowParameters+0xbc>)
 800dd8c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800dd90:	4b21      	ldr	r3, [pc, #132]	; (800de18 <ComputeRxWindowParameters+0xbc>)
 800dd92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dd94:	4821      	ldr	r0, [pc, #132]	; (800de1c <ComputeRxWindowParameters+0xc0>)
 800dd96:	9000      	str	r0, [sp, #0]
 800dd98:	4620      	mov	r0, r4
 800dd9a:	f004 faa7 	bl	80122ec <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800dd9e:	4b1e      	ldr	r3, [pc, #120]	; (800de18 <ComputeRxWindowParameters+0xbc>)
 800dda0:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 800dda4:	4b1c      	ldr	r3, [pc, #112]	; (800de18 <ComputeRxWindowParameters+0xbc>)
 800dda6:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800ddaa:	b259      	sxtb	r1, r3
 800ddac:	4b1a      	ldr	r3, [pc, #104]	; (800de18 <ComputeRxWindowParameters+0xbc>)
 800ddae:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800ddb2:	4b19      	ldr	r3, [pc, #100]	; (800de18 <ComputeRxWindowParameters+0xbc>)
 800ddb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ddb6:	4c1a      	ldr	r4, [pc, #104]	; (800de20 <ComputeRxWindowParameters+0xc4>)
 800ddb8:	9400      	str	r4, [sp, #0]
 800ddba:	f004 fa97 	bl	80122ec <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800ddbe:	4b16      	ldr	r3, [pc, #88]	; (800de18 <ComputeRxWindowParameters+0xbc>)
 800ddc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ddc2:	4a18      	ldr	r2, [pc, #96]	; (800de24 <ComputeRxWindowParameters+0xc8>)
 800ddc4:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 800ddc8:	4413      	add	r3, r2
 800ddca:	4a16      	ldr	r2, [pc, #88]	; (800de24 <ComputeRxWindowParameters+0xc8>)
 800ddcc:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800ddd0:	4b11      	ldr	r3, [pc, #68]	; (800de18 <ComputeRxWindowParameters+0xbc>)
 800ddd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ddd4:	4a13      	ldr	r2, [pc, #76]	; (800de24 <ComputeRxWindowParameters+0xc8>)
 800ddd6:	f8d2 23d8 	ldr.w	r2, [r2, #984]	; 0x3d8
 800ddda:	4413      	add	r3, r2
 800dddc:	4a11      	ldr	r2, [pc, #68]	; (800de24 <ComputeRxWindowParameters+0xc8>)
 800ddde:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4

    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800dde2:	4b0d      	ldr	r3, [pc, #52]	; (800de18 <ComputeRxWindowParameters+0xbc>)
 800dde4:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d111      	bne.n	800de10 <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800ddec:	4b0a      	ldr	r3, [pc, #40]	; (800de18 <ComputeRxWindowParameters+0xbc>)
 800ddee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ddf0:	4a0c      	ldr	r2, [pc, #48]	; (800de24 <ComputeRxWindowParameters+0xc8>)
 800ddf2:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 800ddf6:	4413      	add	r3, r2
 800ddf8:	4a0a      	ldr	r2, [pc, #40]	; (800de24 <ComputeRxWindowParameters+0xc8>)
 800ddfa:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800ddfe:	4b06      	ldr	r3, [pc, #24]	; (800de18 <ComputeRxWindowParameters+0xbc>)
 800de00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800de02:	4a08      	ldr	r2, [pc, #32]	; (800de24 <ComputeRxWindowParameters+0xc8>)
 800de04:	f8d2 23d8 	ldr.w	r2, [r2, #984]	; 0x3d8
 800de08:	4413      	add	r3, r2
 800de0a:	4a06      	ldr	r2, [pc, #24]	; (800de24 <ComputeRxWindowParameters+0xc8>)
 800de0c:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4
    }
}
 800de10:	bf00      	nop
 800de12:	3704      	adds	r7, #4
 800de14:	46bd      	mov	sp, r7
 800de16:	bd90      	pop	{r4, r7, pc}
 800de18:	200008e8 	.word	0x200008e8
 800de1c:	20000798 	.word	0x20000798
 800de20:	200007ac 	.word	0x200007ac
 800de24:	200003e0 	.word	0x200003e0

0800de28 <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 800de28:	b580      	push	{r7, lr}
 800de2a:	b082      	sub	sp, #8
 800de2c:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 800de2e:	2300      	movs	r3, #0
 800de30:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800de32:	4b13      	ldr	r3, [pc, #76]	; (800de80 <VerifyTxFrame+0x58>)
 800de34:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d01b      	beq.n	800de74 <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800de3c:	1d3b      	adds	r3, r7, #4
 800de3e:	4618      	mov	r0, r3
 800de40:	f002 fd20 	bl	8010884 <LoRaMacCommandsGetSizeSerializedCmds>
 800de44:	4603      	mov	r3, r0
 800de46:	2b00      	cmp	r3, #0
 800de48:	d001      	beq.n	800de4e <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800de4a:	2313      	movs	r3, #19
 800de4c:	e013      	b.n	800de76 <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 800de4e:	4b0d      	ldr	r3, [pc, #52]	; (800de84 <VerifyTxFrame+0x5c>)
 800de50:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 800de54:	4a0a      	ldr	r2, [pc, #40]	; (800de80 <VerifyTxFrame+0x58>)
 800de56:	f992 1039 	ldrsb.w	r1, [r2, #57]	; 0x39
 800de5a:	687a      	ldr	r2, [r7, #4]
 800de5c:	b2d2      	uxtb	r2, r2
 800de5e:	4618      	mov	r0, r3
 800de60:	f7ff f956 	bl	800d110 <ValidatePayloadLength>
 800de64:	4603      	mov	r3, r0
 800de66:	f083 0301 	eor.w	r3, r3, #1
 800de6a:	b2db      	uxtb	r3, r3
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d001      	beq.n	800de74 <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 800de70:	2308      	movs	r3, #8
 800de72:	e000      	b.n	800de76 <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 800de74:	2300      	movs	r3, #0
}
 800de76:	4618      	mov	r0, r3
 800de78:	3708      	adds	r7, #8
 800de7a:	46bd      	mov	sp, r7
 800de7c:	bd80      	pop	{r7, pc}
 800de7e:	bf00      	nop
 800de80:	200008e8 	.word	0x200008e8
 800de84:	200003e0 	.word	0x200003e0

0800de88 <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 800de88:	b580      	push	{r7, lr}
 800de8a:	b082      	sub	sp, #8
 800de8c:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 800de8e:	4b18      	ldr	r3, [pc, #96]	; (800def0 <SerializeTxFrame+0x68>)
 800de90:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800de94:	2b00      	cmp	r3, #0
 800de96:	d002      	beq.n	800de9e <SerializeTxFrame+0x16>
 800de98:	2b04      	cmp	r3, #4
 800de9a:	d011      	beq.n	800dec0 <SerializeTxFrame+0x38>
 800de9c:	e021      	b.n	800dee2 <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800de9e:	4815      	ldr	r0, [pc, #84]	; (800def4 <SerializeTxFrame+0x6c>)
 800dea0:	f004 f823 	bl	8011eea <LoRaMacSerializerJoinRequest>
 800dea4:	4603      	mov	r3, r0
 800dea6:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800dea8:	79fb      	ldrb	r3, [r7, #7]
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d001      	beq.n	800deb2 <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800deae:	2311      	movs	r3, #17
 800deb0:	e01a      	b.n	800dee8 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800deb2:	4b0f      	ldr	r3, [pc, #60]	; (800def0 <SerializeTxFrame+0x68>)
 800deb4:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800deb8:	b29a      	uxth	r2, r3
 800deba:	4b0d      	ldr	r3, [pc, #52]	; (800def0 <SerializeTxFrame+0x68>)
 800debc:	801a      	strh	r2, [r3, #0]
            break;
 800debe:	e012      	b.n	800dee6 <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 800dec0:	480c      	ldr	r0, [pc, #48]	; (800def4 <SerializeTxFrame+0x6c>)
 800dec2:	f004 f894 	bl	8011fee <LoRaMacSerializerData>
 800dec6:	4603      	mov	r3, r0
 800dec8:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800deca:	79fb      	ldrb	r3, [r7, #7]
 800decc:	2b00      	cmp	r3, #0
 800dece:	d001      	beq.n	800ded4 <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800ded0:	2311      	movs	r3, #17
 800ded2:	e009      	b.n	800dee8 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800ded4:	4b06      	ldr	r3, [pc, #24]	; (800def0 <SerializeTxFrame+0x68>)
 800ded6:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800deda:	b29a      	uxth	r2, r3
 800dedc:	4b04      	ldr	r3, [pc, #16]	; (800def0 <SerializeTxFrame+0x68>)
 800dede:	801a      	strh	r2, [r3, #0]
            break;
 800dee0:	e001      	b.n	800dee6 <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 800dee2:	2303      	movs	r3, #3
 800dee4:	e000      	b.n	800dee8 <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 800dee6:	2300      	movs	r3, #0
}
 800dee8:	4618      	mov	r0, r3
 800deea:	3708      	adds	r7, #8
 800deec:	46bd      	mov	sp, r7
 800deee:	bd80      	pop	{r7, pc}
 800def0:	200003e0 	.word	0x200003e0
 800def4:	200004e8 	.word	0x200004e8

0800def8 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 800def8:	b580      	push	{r7, lr}
 800defa:	b090      	sub	sp, #64	; 0x40
 800defc:	af02      	add	r7, sp, #8
 800defe:	4603      	mov	r3, r0
 800df00:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800df02:	2303      	movs	r3, #3
 800df04:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 800df08:	f7ff ff06 	bl	800dd18 <CheckForClassBCollision>
 800df0c:	4603      	mov	r3, r0
 800df0e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 800df12:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800df16:	2b00      	cmp	r3, #0
 800df18:	d002      	beq.n	800df20 <ScheduleTx+0x28>
    {
        return status;
 800df1a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800df1e:	e08f      	b.n	800e040 <ScheduleTx+0x148>
    }

    // Update back-off
    CalculateBackOff( );
 800df20:	f000 f8fa 	bl	800e118 <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 800df24:	f7ff ffb0 	bl	800de88 <SerializeTxFrame>
 800df28:	4603      	mov	r3, r0
 800df2a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 800df2e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800df32:	2b00      	cmp	r3, #0
 800df34:	d002      	beq.n	800df3c <ScheduleTx+0x44>
    {
        return status;
 800df36:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800df3a:	e081      	b.n	800e040 <ScheduleTx+0x148>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 800df3c:	4b42      	ldr	r3, [pc, #264]	; (800e048 <ScheduleTx+0x150>)
 800df3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df40:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800df42:	4b41      	ldr	r3, [pc, #260]	; (800e048 <ScheduleTx+0x150>)
 800df44:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800df48:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 800df4a:	4b3f      	ldr	r3, [pc, #252]	; (800e048 <ScheduleTx+0x150>)
 800df4c:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 800df50:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800df52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800df56:	4618      	mov	r0, r3
 800df58:	f009 feec 	bl	8017d34 <SysTimeGetMcuTime>
 800df5c:	4638      	mov	r0, r7
 800df5e:	4b3a      	ldr	r3, [pc, #232]	; (800e048 <ScheduleTx+0x150>)
 800df60:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800df64:	9200      	str	r2, [sp, #0]
 800df66:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800df6a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800df6e:	ca06      	ldmia	r2, {r1, r2}
 800df70:	f009 fe41 	bl	8017bf6 <SysTimeSub>
 800df74:	f107 0320 	add.w	r3, r7, #32
 800df78:	463a      	mov	r2, r7
 800df7a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800df7e:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 800df82:	4b31      	ldr	r3, [pc, #196]	; (800e048 <ScheduleTx+0x150>)
 800df84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df86:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 800df88:	2300      	movs	r3, #0
 800df8a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    nextChan.Joined = true;
 800df8e:	2301      	movs	r3, #1
 800df90:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 800df92:	4b2e      	ldr	r3, [pc, #184]	; (800e04c <ScheduleTx+0x154>)
 800df94:	881b      	ldrh	r3, [r3, #0]
 800df96:	857b      	strh	r3, [r7, #42]	; 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800df98:	4b2b      	ldr	r3, [pc, #172]	; (800e048 <ScheduleTx+0x150>)
 800df9a:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d104      	bne.n	800dfac <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 800dfa2:	2301      	movs	r3, #1
 800dfa4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        nextChan.Joined = false;
 800dfa8:	2300      	movs	r3, #0
 800dfaa:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 800dfac:	4b26      	ldr	r3, [pc, #152]	; (800e048 <ScheduleTx+0x150>)
 800dfae:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800dfb2:	f107 0114 	add.w	r1, r7, #20
 800dfb6:	4b26      	ldr	r3, [pc, #152]	; (800e050 <ScheduleTx+0x158>)
 800dfb8:	9300      	str	r3, [sp, #0]
 800dfba:	4b26      	ldr	r3, [pc, #152]	; (800e054 <ScheduleTx+0x15c>)
 800dfbc:	4a26      	ldr	r2, [pc, #152]	; (800e058 <ScheduleTx+0x160>)
 800dfbe:	f004 fa5b 	bl	8012478 <RegionNextChannel>
 800dfc2:	4603      	mov	r3, r0
 800dfc4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( status != LORAMAC_STATUS_OK )
 800dfc8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d022      	beq.n	800e016 <ScheduleTx+0x11e>
    {
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 800dfd0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800dfd4:	2b0b      	cmp	r3, #11
 800dfd6:	d11b      	bne.n	800e010 <ScheduleTx+0x118>
 800dfd8:	7bfb      	ldrb	r3, [r7, #15]
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d018      	beq.n	800e010 <ScheduleTx+0x118>
            ( allowDelayedTx == true ) )
        {
            // Allow delayed transmissions. We have to allow it in case
            // the MAC must retransmit a frame with the frame repetitions
            if( MacCtx.DutyCycleWaitTime != 0 )
 800dfde:	4b1b      	ldr	r3, [pc, #108]	; (800e04c <ScheduleTx+0x154>)
 800dfe0:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d011      	beq.n	800e00c <ScheduleTx+0x114>
            {// Send later - prepare timer
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 800dfe8:	4b18      	ldr	r3, [pc, #96]	; (800e04c <ScheduleTx+0x154>)
 800dfea:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800dfee:	f043 0320 	orr.w	r3, r3, #32
 800dff2:	4a16      	ldr	r2, [pc, #88]	; (800e04c <ScheduleTx+0x154>)
 800dff4:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 800dff8:	4b14      	ldr	r3, [pc, #80]	; (800e04c <ScheduleTx+0x154>)
 800dffa:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 800dffe:	4619      	mov	r1, r3
 800e000:	4816      	ldr	r0, [pc, #88]	; (800e05c <ScheduleTx+0x164>)
 800e002:	f00a fc23 	bl	801884c <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 800e006:	4815      	ldr	r0, [pc, #84]	; (800e05c <ScheduleTx+0x164>)
 800e008:	f00a fb42 	bl	8018690 <UTIL_TIMER_Start>
            }
            return LORAMAC_STATUS_OK;
 800e00c:	2300      	movs	r3, #0
 800e00e:	e017      	b.n	800e040 <ScheduleTx+0x148>
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 800e010:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e014:	e014      	b.n	800e040 <ScheduleTx+0x148>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 800e016:	f7ff fea1 	bl	800dd5c <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 800e01a:	f7ff ff05 	bl	800de28 <VerifyTxFrame>
 800e01e:	4603      	mov	r3, r0
 800e020:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 800e024:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d002      	beq.n	800e032 <ScheduleTx+0x13a>
    {
        return status;
 800e02c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e030:	e006      	b.n	800e040 <ScheduleTx+0x148>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 800e032:	4b06      	ldr	r3, [pc, #24]	; (800e04c <ScheduleTx+0x154>)
 800e034:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 800e038:	4618      	mov	r0, r3
 800e03a:	f000 fb1d 	bl	800e678 <SendFrameOnChannel>
 800e03e:	4603      	mov	r3, r0
}
 800e040:	4618      	mov	r0, r3
 800e042:	3738      	adds	r7, #56	; 0x38
 800e044:	46bd      	mov	sp, r7
 800e046:	bd80      	pop	{r7, pc}
 800e048:	200008e8 	.word	0x200008e8
 800e04c:	200003e0 	.word	0x200003e0
 800e050:	20000918 	.word	0x20000918
 800e054:	20000864 	.word	0x20000864
 800e058:	200007f5 	.word	0x200007f5
 800e05c:	20000748 	.word	0x20000748

0800e060 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 800e060:	b580      	push	{r7, lr}
 800e062:	b084      	sub	sp, #16
 800e064:	af00      	add	r7, sp, #0
 800e066:	4603      	mov	r3, r0
 800e068:	460a      	mov	r2, r1
 800e06a:	71fb      	strb	r3, [r7, #7]
 800e06c:	4613      	mov	r3, r2
 800e06e:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800e070:	2313      	movs	r3, #19
 800e072:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 800e074:	2300      	movs	r3, #0
 800e076:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 800e078:	4b25      	ldr	r3, [pc, #148]	; (800e110 <SecureFrame+0xb0>)
 800e07a:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d002      	beq.n	800e088 <SecureFrame+0x28>
 800e082:	2b04      	cmp	r3, #4
 800e084:	d011      	beq.n	800e0aa <SecureFrame+0x4a>
 800e086:	e03b      	b.n	800e100 <SecureFrame+0xa0>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800e088:	4822      	ldr	r0, [pc, #136]	; (800e114 <SecureFrame+0xb4>)
 800e08a:	f003 faf7 	bl	801167c <LoRaMacCryptoPrepareJoinRequest>
 800e08e:	4603      	mov	r3, r0
 800e090:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800e092:	7bfb      	ldrb	r3, [r7, #15]
 800e094:	2b00      	cmp	r3, #0
 800e096:	d001      	beq.n	800e09c <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800e098:	2311      	movs	r3, #17
 800e09a:	e034      	b.n	800e106 <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800e09c:	4b1c      	ldr	r3, [pc, #112]	; (800e110 <SecureFrame+0xb0>)
 800e09e:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800e0a2:	b29a      	uxth	r2, r3
 800e0a4:	4b1a      	ldr	r3, [pc, #104]	; (800e110 <SecureFrame+0xb0>)
 800e0a6:	801a      	strh	r2, [r3, #0]
            break;
 800e0a8:	e02c      	b.n	800e104 <SecureFrame+0xa4>
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800e0aa:	f107 0308 	add.w	r3, r7, #8
 800e0ae:	4618      	mov	r0, r3
 800e0b0:	f003 fa0a 	bl	80114c8 <LoRaMacCryptoGetFCntUp>
 800e0b4:	4603      	mov	r3, r0
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d001      	beq.n	800e0be <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800e0ba:	2312      	movs	r3, #18
 800e0bc:	e023      	b.n	800e106 <SecureFrame+0xa6>
            }

            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 800e0be:	4b14      	ldr	r3, [pc, #80]	; (800e110 <SecureFrame+0xb0>)
 800e0c0:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d104      	bne.n	800e0d2 <SecureFrame+0x72>
 800e0c8:	4b11      	ldr	r3, [pc, #68]	; (800e110 <SecureFrame+0xb0>)
 800e0ca:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 800e0ce:	2b01      	cmp	r3, #1
 800e0d0:	d902      	bls.n	800e0d8 <SecureFrame+0x78>
            {
                fCntUp -= 1;
 800e0d2:	68bb      	ldr	r3, [r7, #8]
 800e0d4:	3b01      	subs	r3, #1
 800e0d6:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 800e0d8:	68b8      	ldr	r0, [r7, #8]
 800e0da:	79ba      	ldrb	r2, [r7, #6]
 800e0dc:	79f9      	ldrb	r1, [r7, #7]
 800e0de:	4b0d      	ldr	r3, [pc, #52]	; (800e114 <SecureFrame+0xb4>)
 800e0e0:	f003 fbe4 	bl	80118ac <LoRaMacCryptoSecureMessage>
 800e0e4:	4603      	mov	r3, r0
 800e0e6:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800e0e8:	7bfb      	ldrb	r3, [r7, #15]
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d001      	beq.n	800e0f2 <SecureFrame+0x92>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800e0ee:	2311      	movs	r3, #17
 800e0f0:	e009      	b.n	800e106 <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800e0f2:	4b07      	ldr	r3, [pc, #28]	; (800e110 <SecureFrame+0xb0>)
 800e0f4:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800e0f8:	b29a      	uxth	r2, r3
 800e0fa:	4b05      	ldr	r3, [pc, #20]	; (800e110 <SecureFrame+0xb0>)
 800e0fc:	801a      	strh	r2, [r3, #0]
            break;
 800e0fe:	e001      	b.n	800e104 <SecureFrame+0xa4>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 800e100:	2303      	movs	r3, #3
 800e102:	e000      	b.n	800e106 <SecureFrame+0xa6>
    }
    return LORAMAC_STATUS_OK;
 800e104:	2300      	movs	r3, #0
}
 800e106:	4618      	mov	r0, r3
 800e108:	3710      	adds	r7, #16
 800e10a:	46bd      	mov	sp, r7
 800e10c:	bd80      	pop	{r7, pc}
 800e10e:	bf00      	nop
 800e110:	200003e0 	.word	0x200003e0
 800e114:	200004e8 	.word	0x200004e8

0800e118 <CalculateBackOff>:

static void CalculateBackOff( void )
{
 800e118:	b480      	push	{r7}
 800e11a:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 800e11c:	4b09      	ldr	r3, [pc, #36]	; (800e144 <CalculateBackOff+0x2c>)
 800e11e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e120:	2b00      	cmp	r3, #0
 800e122:	d10a      	bne.n	800e13a <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 800e124:	4b07      	ldr	r3, [pc, #28]	; (800e144 <CalculateBackOff+0x2c>)
 800e126:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 800e12a:	3b01      	subs	r3, #1
 800e12c:	4a06      	ldr	r2, [pc, #24]	; (800e148 <CalculateBackOff+0x30>)
 800e12e:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
 800e132:	fb02 f303 	mul.w	r3, r2, r3
 800e136:	4a03      	ldr	r2, [pc, #12]	; (800e144 <CalculateBackOff+0x2c>)
 800e138:	6313      	str	r3, [r2, #48]	; 0x30
    }
}
 800e13a:	bf00      	nop
 800e13c:	46bd      	mov	sp, r7
 800e13e:	bc80      	pop	{r7}
 800e140:	4770      	bx	lr
 800e142:	bf00      	nop
 800e144:	200008e8 	.word	0x200008e8
 800e148:	200003e0 	.word	0x200003e0

0800e14c <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 800e14c:	b580      	push	{r7, lr}
 800e14e:	b082      	sub	sp, #8
 800e150:	af00      	add	r7, sp, #0
 800e152:	4603      	mov	r3, r0
 800e154:	7139      	strb	r1, [r7, #4]
 800e156:	71fb      	strb	r3, [r7, #7]
 800e158:	4613      	mov	r3, r2
 800e15a:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 800e15c:	79fb      	ldrb	r3, [r7, #7]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d002      	beq.n	800e168 <RemoveMacCommands+0x1c>
 800e162:	79fb      	ldrb	r3, [r7, #7]
 800e164:	2b01      	cmp	r3, #1
 800e166:	d10d      	bne.n	800e184 <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 800e168:	79bb      	ldrb	r3, [r7, #6]
 800e16a:	2b01      	cmp	r3, #1
 800e16c:	d108      	bne.n	800e180 <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 800e16e:	793b      	ldrb	r3, [r7, #4]
 800e170:	f003 0320 	and.w	r3, r3, #32
 800e174:	b2db      	uxtb	r3, r3
 800e176:	2b00      	cmp	r3, #0
 800e178:	d004      	beq.n	800e184 <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 800e17a:	f002 fb61 	bl	8010840 <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 800e17e:	e001      	b.n	800e184 <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 800e180:	f002 fb5e 	bl	8010840 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 800e184:	bf00      	nop
 800e186:	3708      	adds	r7, #8
 800e188:	46bd      	mov	sp, r7
 800e18a:	bd80      	pop	{r7, pc}

0800e18c <ResetMacParameters>:


static void ResetMacParameters( void )
{
 800e18c:	b5b0      	push	{r4, r5, r7, lr}
 800e18e:	b08e      	sub	sp, #56	; 0x38
 800e190:	af00      	add	r7, sp, #0
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 800e192:	4b68      	ldr	r3, [pc, #416]	; (800e334 <ResetMacParameters+0x1a8>)
 800e194:	2200      	movs	r2, #0
 800e196:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 800e19a:	4b66      	ldr	r3, [pc, #408]	; (800e334 <ResetMacParameters+0x1a8>)
 800e19c:	2200      	movs	r2, #0
 800e19e:	629a      	str	r2, [r3, #40]	; 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 800e1a0:	4b65      	ldr	r3, [pc, #404]	; (800e338 <ResetMacParameters+0x1ac>)
 800e1a2:	2200      	movs	r2, #0
 800e1a4:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    MacCtx.AckTimeoutRetries = 1;
 800e1a8:	4b63      	ldr	r3, [pc, #396]	; (800e338 <ResetMacParameters+0x1ac>)
 800e1aa:	2201      	movs	r2, #1
 800e1ac:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    MacCtx.AckTimeoutRetriesCounter = 1;
 800e1b0:	4b61      	ldr	r3, [pc, #388]	; (800e338 <ResetMacParameters+0x1ac>)
 800e1b2:	2201      	movs	r2, #1
 800e1b4:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    MacCtx.AckTimeoutRetry = false;
 800e1b8:	4b5f      	ldr	r3, [pc, #380]	; (800e338 <ResetMacParameters+0x1ac>)
 800e1ba:	2200      	movs	r2, #0
 800e1bc:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413

    Nvm.MacGroup2.MaxDCycle = 0;
 800e1c0:	4b5c      	ldr	r3, [pc, #368]	; (800e334 <ResetMacParameters+0x1a8>)
 800e1c2:	2200      	movs	r2, #0
 800e1c4:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
    Nvm.MacGroup2.AggregatedDCycle = 1;
 800e1c8:	4b5a      	ldr	r3, [pc, #360]	; (800e334 <ResetMacParameters+0x1a8>)
 800e1ca:	2201      	movs	r2, #1
 800e1cc:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800e1d0:	4b58      	ldr	r3, [pc, #352]	; (800e334 <ResetMacParameters+0x1a8>)
 800e1d2:	f993 20c4 	ldrsb.w	r2, [r3, #196]	; 0xc4
 800e1d6:	4b57      	ldr	r3, [pc, #348]	; (800e334 <ResetMacParameters+0x1a8>)
 800e1d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800e1dc:	4b55      	ldr	r3, [pc, #340]	; (800e334 <ResetMacParameters+0x1a8>)
 800e1de:	f993 20c5 	ldrsb.w	r2, [r3, #197]	; 0xc5
 800e1e2:	4b54      	ldr	r3, [pc, #336]	; (800e334 <ResetMacParameters+0x1a8>)
 800e1e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 800e1e8:	4b52      	ldr	r3, [pc, #328]	; (800e334 <ResetMacParameters+0x1a8>)
 800e1ea:	f893 20a1 	ldrb.w	r2, [r3, #161]	; 0xa1
 800e1ee:	4b51      	ldr	r3, [pc, #324]	; (800e334 <ResetMacParameters+0x1a8>)
 800e1f0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800e1f4:	4b4f      	ldr	r3, [pc, #316]	; (800e334 <ResetMacParameters+0x1a8>)
 800e1f6:	4a4f      	ldr	r2, [pc, #316]	; (800e334 <ResetMacParameters+0x1a8>)
 800e1f8:	3364      	adds	r3, #100	; 0x64
 800e1fa:	32a4      	adds	r2, #164	; 0xa4
 800e1fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e200:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800e204:	4b4b      	ldr	r3, [pc, #300]	; (800e334 <ResetMacParameters+0x1a8>)
 800e206:	4a4b      	ldr	r2, [pc, #300]	; (800e334 <ResetMacParameters+0x1a8>)
 800e208:	336c      	adds	r3, #108	; 0x6c
 800e20a:	32ac      	adds	r2, #172	; 0xac
 800e20c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e210:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 800e214:	4b47      	ldr	r3, [pc, #284]	; (800e334 <ResetMacParameters+0x1a8>)
 800e216:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
 800e21a:	4b46      	ldr	r3, [pc, #280]	; (800e334 <ResetMacParameters+0x1a8>)
 800e21c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 800e220:	4b44      	ldr	r3, [pc, #272]	; (800e334 <ResetMacParameters+0x1a8>)
 800e222:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
 800e226:	4b43      	ldr	r3, [pc, #268]	; (800e334 <ResetMacParameters+0x1a8>)
 800e228:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 800e22c:	4b41      	ldr	r3, [pc, #260]	; (800e334 <ResetMacParameters+0x1a8>)
 800e22e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800e232:	4a40      	ldr	r2, [pc, #256]	; (800e334 <ResetMacParameters+0x1a8>)
 800e234:	6793      	str	r3, [r2, #120]	; 0x78
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800e236:	4b3f      	ldr	r3, [pc, #252]	; (800e334 <ResetMacParameters+0x1a8>)
 800e238:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800e23c:	4a3d      	ldr	r2, [pc, #244]	; (800e334 <ResetMacParameters+0x1a8>)
 800e23e:	67d3      	str	r3, [r2, #124]	; 0x7c

    MacCtx.NodeAckRequested = false;
 800e240:	4b3d      	ldr	r3, [pc, #244]	; (800e338 <ResetMacParameters+0x1ac>)
 800e242:	2200      	movs	r2, #0
 800e244:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    Nvm.MacGroup1.SrvAckRequested = false;
 800e248:	4b3a      	ldr	r3, [pc, #232]	; (800e334 <ResetMacParameters+0x1a8>)
 800e24a:	2200      	movs	r2, #0
 800e24c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 800e250:	2301      	movs	r3, #1
 800e252:	733b      	strb	r3, [r7, #12]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800e254:	4b39      	ldr	r3, [pc, #228]	; (800e33c <ResetMacParameters+0x1b0>)
 800e256:	607b      	str	r3, [r7, #4]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800e258:	4b39      	ldr	r3, [pc, #228]	; (800e340 <ResetMacParameters+0x1b4>)
 800e25a:	60bb      	str	r3, [r7, #8]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800e25c:	4b35      	ldr	r3, [pc, #212]	; (800e334 <ResetMacParameters+0x1a8>)
 800e25e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e262:	1d3a      	adds	r2, r7, #4
 800e264:	4611      	mov	r1, r2
 800e266:	4618      	mov	r0, r3
 800e268:	f003 fff2 	bl	8012250 <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 800e26c:	4b32      	ldr	r3, [pc, #200]	; (800e338 <ResetMacParameters+0x1ac>)
 800e26e:	2200      	movs	r2, #0
 800e270:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800e274:	4b30      	ldr	r3, [pc, #192]	; (800e338 <ResetMacParameters+0x1ac>)
 800e276:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 800e27a:	4b2f      	ldr	r3, [pc, #188]	; (800e338 <ResetMacParameters+0x1ac>)
 800e27c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800e280:	4b2c      	ldr	r3, [pc, #176]	; (800e334 <ResetMacParameters+0x1a8>)
 800e282:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e284:	4a2c      	ldr	r2, [pc, #176]	; (800e338 <ResetMacParameters+0x1ac>)
 800e286:	f8c2 33d0 	str.w	r3, [r2, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800e28a:	4b2a      	ldr	r3, [pc, #168]	; (800e334 <ResetMacParameters+0x1a8>)
 800e28c:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800e290:	4b29      	ldr	r3, [pc, #164]	; (800e338 <ResetMacParameters+0x1ac>)
 800e292:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800e296:	4b27      	ldr	r3, [pc, #156]	; (800e334 <ResetMacParameters+0x1a8>)
 800e298:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800e29c:	4b26      	ldr	r3, [pc, #152]	; (800e338 <ResetMacParameters+0x1ac>)
 800e29e:	f883 23dd 	strb.w	r2, [r3, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 800e2a2:	4b25      	ldr	r3, [pc, #148]	; (800e338 <ResetMacParameters+0x1ac>)
 800e2a4:	2200      	movs	r2, #0
 800e2a6:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800e2aa:	4b23      	ldr	r3, [pc, #140]	; (800e338 <ResetMacParameters+0x1ac>)
 800e2ac:	2201      	movs	r2, #1
 800e2ae:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800e2b2:	4a21      	ldr	r2, [pc, #132]	; (800e338 <ResetMacParameters+0x1ac>)
 800e2b4:	4b20      	ldr	r3, [pc, #128]	; (800e338 <ResetMacParameters+0x1ac>)
 800e2b6:	f502 7478 	add.w	r4, r2, #992	; 0x3e0
 800e2ba:	f503 7573 	add.w	r5, r3, #972	; 0x3cc
 800e2be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e2c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e2c2:	682b      	ldr	r3, [r5, #0]
 800e2c4:	6023      	str	r3, [r4, #0]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800e2c6:	4b1c      	ldr	r3, [pc, #112]	; (800e338 <ResetMacParameters+0x1ac>)
 800e2c8:	2201      	movs	r2, #1
 800e2ca:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800e2ce:	4b1a      	ldr	r3, [pc, #104]	; (800e338 <ResetMacParameters+0x1ac>)
 800e2d0:	2202      	movs	r2, #2
 800e2d2:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 800e2d6:	2300      	movs	r3, #0
 800e2d8:	633b      	str	r3, [r7, #48]	; 0x30
    classBCallbacks.MacProcessNotify = NULL;
 800e2da:	2300      	movs	r3, #0
 800e2dc:	637b      	str	r3, [r7, #52]	; 0x34

    if( MacCtx.MacCallbacks != NULL )
 800e2de:	4b16      	ldr	r3, [pc, #88]	; (800e338 <ResetMacParameters+0x1ac>)
 800e2e0:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d009      	beq.n	800e2fc <ResetMacParameters+0x170>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 800e2e8:	4b13      	ldr	r3, [pc, #76]	; (800e338 <ResetMacParameters+0x1ac>)
 800e2ea:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800e2ee:	685b      	ldr	r3, [r3, #4]
 800e2f0:	633b      	str	r3, [r7, #48]	; 0x30
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 800e2f2:	4b11      	ldr	r3, [pc, #68]	; (800e338 <ResetMacParameters+0x1ac>)
 800e2f4:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800e2f8:	691b      	ldr	r3, [r3, #16]
 800e2fa:	637b      	str	r3, [r7, #52]	; 0x34
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 800e2fc:	4b11      	ldr	r3, [pc, #68]	; (800e344 <ResetMacParameters+0x1b8>)
 800e2fe:	613b      	str	r3, [r7, #16]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 800e300:	4b11      	ldr	r3, [pc, #68]	; (800e348 <ResetMacParameters+0x1bc>)
 800e302:	617b      	str	r3, [r7, #20]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 800e304:	4b11      	ldr	r3, [pc, #68]	; (800e34c <ResetMacParameters+0x1c0>)
 800e306:	61bb      	str	r3, [r7, #24]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 800e308:	4b11      	ldr	r3, [pc, #68]	; (800e350 <ResetMacParameters+0x1c4>)
 800e30a:	61fb      	str	r3, [r7, #28]
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 800e30c:	4b11      	ldr	r3, [pc, #68]	; (800e354 <ResetMacParameters+0x1c8>)
 800e30e:	623b      	str	r3, [r7, #32]
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 800e310:	4b11      	ldr	r3, [pc, #68]	; (800e358 <ResetMacParameters+0x1cc>)
 800e312:	627b      	str	r3, [r7, #36]	; 0x24
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 800e314:	4b11      	ldr	r3, [pc, #68]	; (800e35c <ResetMacParameters+0x1d0>)
 800e316:	62bb      	str	r3, [r7, #40]	; 0x28
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 800e318:	4b11      	ldr	r3, [pc, #68]	; (800e360 <ResetMacParameters+0x1d4>)
 800e31a:	62fb      	str	r3, [r7, #44]	; 0x2c

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 800e31c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800e320:	f107 0310 	add.w	r3, r7, #16
 800e324:	4a0f      	ldr	r2, [pc, #60]	; (800e364 <ResetMacParameters+0x1d8>)
 800e326:	4618      	mov	r0, r3
 800e328:	f001 ffec 	bl	8010304 <LoRaMacClassBInit>
}
 800e32c:	bf00      	nop
 800e32e:	3738      	adds	r7, #56	; 0x38
 800e330:	46bd      	mov	sp, r7
 800e332:	bdb0      	pop	{r4, r5, r7, pc}
 800e334:	200008e8 	.word	0x200008e8
 800e338:	200003e0 	.word	0x200003e0
 800e33c:	20000ac0 	.word	0x20000ac0
 800e340:	20000adc 	.word	0x20000adc
 800e344:	20000840 	.word	0x20000840
 800e348:	200007fc 	.word	0x200007fc
 800e34c:	2000082c 	.word	0x2000082c
 800e350:	20000861 	.word	0x20000861
 800e354:	200009b4 	.word	0x200009b4
 800e358:	20000928 	.word	0x20000928
 800e35c:	2000092c 	.word	0x2000092c
 800e360:	200009b8 	.word	0x200009b8
 800e364:	20000ba4 	.word	0x20000ba4

0800e368 <RxWindowSetup>:
 *
 * \param [IN] rxTimer  Window timer to be topped.
 * \param [IN] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 800e368:	b580      	push	{r7, lr}
 800e36a:	b082      	sub	sp, #8
 800e36c:	af00      	add	r7, sp, #0
 800e36e:	6078      	str	r0, [r7, #4]
 800e370:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 800e372:	6878      	ldr	r0, [r7, #4]
 800e374:	f00a f9fa 	bl	801876c <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 800e378:	4b0e      	ldr	r3, [pc, #56]	; (800e3b4 <RxWindowSetup+0x4c>)
 800e37a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e37c:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800e37e:	4b0e      	ldr	r3, [pc, #56]	; (800e3b8 <RxWindowSetup+0x50>)
 800e380:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e384:	4a0d      	ldr	r2, [pc, #52]	; (800e3bc <RxWindowSetup+0x54>)
 800e386:	6839      	ldr	r1, [r7, #0]
 800e388:	4618      	mov	r0, r3
 800e38a:	f003 ffc9 	bl	8012320 <RegionRxConfig>
 800e38e:	4603      	mov	r3, r0
 800e390:	2b00      	cmp	r3, #0
 800e392:	d00a      	beq.n	800e3aa <RxWindowSetup+0x42>
    {
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 800e394:	4b07      	ldr	r3, [pc, #28]	; (800e3b4 <RxWindowSetup+0x4c>)
 800e396:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e398:	4a07      	ldr	r2, [pc, #28]	; (800e3b8 <RxWindowSetup+0x50>)
 800e39a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800e39c:	4610      	mov	r0, r2
 800e39e:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 800e3a0:	683b      	ldr	r3, [r7, #0]
 800e3a2:	7cda      	ldrb	r2, [r3, #19]
 800e3a4:	4b06      	ldr	r3, [pc, #24]	; (800e3c0 <RxWindowSetup+0x58>)
 800e3a6:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
}
 800e3aa:	bf00      	nop
 800e3ac:	3708      	adds	r7, #8
 800e3ae:	46bd      	mov	sp, r7
 800e3b0:	bd80      	pop	{r7, pc}
 800e3b2:	bf00      	nop
 800e3b4:	08019c7c 	.word	0x08019c7c
 800e3b8:	200008e8 	.word	0x200008e8
 800e3bc:	20000800 	.word	0x20000800
 800e3c0:	200003e0 	.word	0x200003e0

0800e3c4 <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 800e3c4:	b590      	push	{r4, r7, lr}
 800e3c6:	b083      	sub	sp, #12
 800e3c8:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800e3ca:	4b18      	ldr	r3, [pc, #96]	; (800e42c <OpenContinuousRxCWindow+0x68>)
 800e3cc:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 800e3d0:	4b16      	ldr	r3, [pc, #88]	; (800e42c <OpenContinuousRxCWindow+0x68>)
 800e3d2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800e3d6:	b259      	sxtb	r1, r3
 800e3d8:	4b14      	ldr	r3, [pc, #80]	; (800e42c <OpenContinuousRxCWindow+0x68>)
 800e3da:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800e3de:	4b13      	ldr	r3, [pc, #76]	; (800e42c <OpenContinuousRxCWindow+0x68>)
 800e3e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e3e2:	4c13      	ldr	r4, [pc, #76]	; (800e430 <OpenContinuousRxCWindow+0x6c>)
 800e3e4:	9400      	str	r4, [sp, #0]
 800e3e6:	f003 ff81 	bl	80122ec <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800e3ea:	4b12      	ldr	r3, [pc, #72]	; (800e434 <OpenContinuousRxCWindow+0x70>)
 800e3ec:	2202      	movs	r2, #2
 800e3ee:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800e3f2:	4b10      	ldr	r3, [pc, #64]	; (800e434 <OpenContinuousRxCWindow+0x70>)
 800e3f4:	2201      	movs	r2, #1
 800e3f6:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800e3fa:	4b0c      	ldr	r3, [pc, #48]	; (800e42c <OpenContinuousRxCWindow+0x68>)
 800e3fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e400:	4a0d      	ldr	r2, [pc, #52]	; (800e438 <OpenContinuousRxCWindow+0x74>)
 800e402:	490b      	ldr	r1, [pc, #44]	; (800e430 <OpenContinuousRxCWindow+0x6c>)
 800e404:	4618      	mov	r0, r3
 800e406:	f003 ff8b 	bl	8012320 <RegionRxConfig>
 800e40a:	4603      	mov	r3, r0
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d009      	beq.n	800e424 <OpenContinuousRxCWindow+0x60>
    {
        Radio.Rx( 0 ); // Continuous mode
 800e410:	4b0a      	ldr	r3, [pc, #40]	; (800e43c <OpenContinuousRxCWindow+0x78>)
 800e412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e414:	2000      	movs	r0, #0
 800e416:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 800e418:	4b06      	ldr	r3, [pc, #24]	; (800e434 <OpenContinuousRxCWindow+0x70>)
 800e41a:	f893 23f3 	ldrb.w	r2, [r3, #1011]	; 0x3f3
 800e41e:	4b05      	ldr	r3, [pc, #20]	; (800e434 <OpenContinuousRxCWindow+0x70>)
 800e420:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
}
 800e424:	bf00      	nop
 800e426:	3704      	adds	r7, #4
 800e428:	46bd      	mov	sp, r7
 800e42a:	bd90      	pop	{r4, r7, pc}
 800e42c:	200008e8 	.word	0x200008e8
 800e430:	200007c0 	.word	0x200007c0
 800e434:	200003e0 	.word	0x200003e0
 800e438:	20000800 	.word	0x20000800
 800e43c:	08019c7c 	.word	0x08019c7c

0800e440 <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 800e440:	b580      	push	{r7, lr}
 800e442:	b088      	sub	sp, #32
 800e444:	af00      	add	r7, sp, #0
 800e446:	60f8      	str	r0, [r7, #12]
 800e448:	60b9      	str	r1, [r7, #8]
 800e44a:	603b      	str	r3, [r7, #0]
 800e44c:	4613      	mov	r3, r2
 800e44e:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 800e450:	4b82      	ldr	r3, [pc, #520]	; (800e65c <PrepareFrame+0x21c>)
 800e452:	2200      	movs	r2, #0
 800e454:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 800e456:	4b81      	ldr	r3, [pc, #516]	; (800e65c <PrepareFrame+0x21c>)
 800e458:	2200      	movs	r2, #0
 800e45a:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    uint32_t fCntUp = 0;
 800e45e:	2300      	movs	r3, #0
 800e460:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 800e462:	2300      	movs	r3, #0
 800e464:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 800e466:	2300      	movs	r3, #0
 800e468:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 800e46a:	683b      	ldr	r3, [r7, #0]
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d101      	bne.n	800e474 <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 800e470:	2300      	movs	r3, #0
 800e472:	853b      	strh	r3, [r7, #40]	; 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 800e474:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e476:	461a      	mov	r2, r3
 800e478:	6839      	ldr	r1, [r7, #0]
 800e47a:	4879      	ldr	r0, [pc, #484]	; (800e660 <PrepareFrame+0x220>)
 800e47c:	f006 f985 	bl	801478a <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 800e480:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e482:	b2da      	uxtb	r2, r3
 800e484:	4b75      	ldr	r3, [pc, #468]	; (800e65c <PrepareFrame+0x21c>)
 800e486:	f883 2237 	strb.w	r2, [r3, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	781a      	ldrb	r2, [r3, #0]
 800e48e:	4b73      	ldr	r3, [pc, #460]	; (800e65c <PrepareFrame+0x21c>)
 800e490:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	781b      	ldrb	r3, [r3, #0]
 800e496:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800e49a:	b2db      	uxtb	r3, r3
 800e49c:	2b07      	cmp	r3, #7
 800e49e:	f000 80b9 	beq.w	800e614 <PrepareFrame+0x1d4>
 800e4a2:	2b07      	cmp	r3, #7
 800e4a4:	f300 80d0 	bgt.w	800e648 <PrepareFrame+0x208>
 800e4a8:	2b02      	cmp	r3, #2
 800e4aa:	d006      	beq.n	800e4ba <PrepareFrame+0x7a>
 800e4ac:	2b04      	cmp	r3, #4
 800e4ae:	f040 80cb 	bne.w	800e648 <PrepareFrame+0x208>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 800e4b2:	4b6a      	ldr	r3, [pc, #424]	; (800e65c <PrepareFrame+0x21c>)
 800e4b4:	2201      	movs	r2, #1
 800e4b6:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 800e4ba:	4b68      	ldr	r3, [pc, #416]	; (800e65c <PrepareFrame+0x21c>)
 800e4bc:	2204      	movs	r2, #4
 800e4be:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 800e4c2:	4b66      	ldr	r3, [pc, #408]	; (800e65c <PrepareFrame+0x21c>)
 800e4c4:	4a67      	ldr	r2, [pc, #412]	; (800e664 <PrepareFrame+0x224>)
 800e4c6:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800e4ca:	4b64      	ldr	r3, [pc, #400]	; (800e65c <PrepareFrame+0x21c>)
 800e4cc:	22ff      	movs	r2, #255	; 0xff
 800e4ce:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	781a      	ldrb	r2, [r3, #0]
 800e4d6:	4b61      	ldr	r3, [pc, #388]	; (800e65c <PrepareFrame+0x21c>)
 800e4d8:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 800e4dc:	4a5f      	ldr	r2, [pc, #380]	; (800e65c <PrepareFrame+0x21c>)
 800e4de:	79fb      	ldrb	r3, [r7, #7]
 800e4e0:	f882 3128 	strb.w	r3, [r2, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 800e4e4:	4b60      	ldr	r3, [pc, #384]	; (800e668 <PrepareFrame+0x228>)
 800e4e6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800e4ea:	4a5c      	ldr	r2, [pc, #368]	; (800e65c <PrepareFrame+0x21c>)
 800e4ec:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800e4f0:	68bb      	ldr	r3, [r7, #8]
 800e4f2:	781a      	ldrb	r2, [r3, #0]
 800e4f4:	4b59      	ldr	r3, [pc, #356]	; (800e65c <PrepareFrame+0x21c>)
 800e4f6:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 800e4fa:	4b58      	ldr	r3, [pc, #352]	; (800e65c <PrepareFrame+0x21c>)
 800e4fc:	f893 2237 	ldrb.w	r2, [r3, #567]	; 0x237
 800e500:	4b56      	ldr	r3, [pc, #344]	; (800e65c <PrepareFrame+0x21c>)
 800e502:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 800e506:	4b55      	ldr	r3, [pc, #340]	; (800e65c <PrepareFrame+0x21c>)
 800e508:	4a55      	ldr	r2, [pc, #340]	; (800e660 <PrepareFrame+0x220>)
 800e50a:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800e50e:	f107 0318 	add.w	r3, r7, #24
 800e512:	4618      	mov	r0, r3
 800e514:	f002 ffd8 	bl	80114c8 <LoRaMacCryptoGetFCntUp>
 800e518:	4603      	mov	r3, r0
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d001      	beq.n	800e522 <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800e51e:	2312      	movs	r3, #18
 800e520:	e098      	b.n	800e654 <PrepareFrame+0x214>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 800e522:	69bb      	ldr	r3, [r7, #24]
 800e524:	b29a      	uxth	r2, r3
 800e526:	4b4d      	ldr	r3, [pc, #308]	; (800e65c <PrepareFrame+0x21c>)
 800e528:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116

            // Reset confirm parameters
            MacCtx.McpsConfirm.NbRetries = 0;
 800e52c:	4b4b      	ldr	r3, [pc, #300]	; (800e65c <PrepareFrame+0x21c>)
 800e52e:	2200      	movs	r2, #0
 800e530:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
            MacCtx.McpsConfirm.AckReceived = false;
 800e534:	4b49      	ldr	r3, [pc, #292]	; (800e65c <PrepareFrame+0x21c>)
 800e536:	2200      	movs	r2, #0
 800e538:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 800e53c:	69bb      	ldr	r3, [r7, #24]
 800e53e:	4a47      	ldr	r2, [pc, #284]	; (800e65c <PrepareFrame+0x21c>)
 800e540:	f8c2 3444 	str.w	r3, [r2, #1092]	; 0x444

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800e544:	f107 0314 	add.w	r3, r7, #20
 800e548:	4618      	mov	r0, r3
 800e54a:	f002 f99b 	bl	8010884 <LoRaMacCommandsGetSizeSerializedCmds>
 800e54e:	4603      	mov	r3, r0
 800e550:	2b00      	cmp	r3, #0
 800e552:	d001      	beq.n	800e558 <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800e554:	2313      	movs	r3, #19
 800e556:	e07d      	b.n	800e654 <PrepareFrame+0x214>
            }

            if( macCmdsSize > 0 )
 800e558:	697b      	ldr	r3, [r7, #20]
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d076      	beq.n	800e64c <PrepareFrame+0x20c>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 800e55e:	4b42      	ldr	r3, [pc, #264]	; (800e668 <PrepareFrame+0x228>)
 800e560:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800e564:	4618      	mov	r0, r3
 800e566:	f7fe fdab 	bl	800d0c0 <GetMaxAppPayloadWithoutFOptsLength>
 800e56a:	4603      	mov	r3, r0
 800e56c:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800e56e:	4b3b      	ldr	r3, [pc, #236]	; (800e65c <PrepareFrame+0x21c>)
 800e570:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 800e574:	2b00      	cmp	r3, #0
 800e576:	d01d      	beq.n	800e5b4 <PrepareFrame+0x174>
 800e578:	697b      	ldr	r3, [r7, #20]
 800e57a:	2b0f      	cmp	r3, #15
 800e57c:	d81a      	bhi.n	800e5b4 <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 800e57e:	f107 0314 	add.w	r3, r7, #20
 800e582:	4a3a      	ldr	r2, [pc, #232]	; (800e66c <PrepareFrame+0x22c>)
 800e584:	4619      	mov	r1, r3
 800e586:	200f      	movs	r0, #15
 800e588:	f002 f992 	bl	80108b0 <LoRaMacCommandsSerializeCmds>
 800e58c:	4603      	mov	r3, r0
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d001      	beq.n	800e596 <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800e592:	2313      	movs	r3, #19
 800e594:	e05e      	b.n	800e654 <PrepareFrame+0x214>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 800e596:	697b      	ldr	r3, [r7, #20]
 800e598:	f003 030f 	and.w	r3, r3, #15
 800e59c:	b2d9      	uxtb	r1, r3
 800e59e:	68ba      	ldr	r2, [r7, #8]
 800e5a0:	7813      	ldrb	r3, [r2, #0]
 800e5a2:	f361 0303 	bfi	r3, r1, #0, #4
 800e5a6:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800e5a8:	68bb      	ldr	r3, [r7, #8]
 800e5aa:	781a      	ldrb	r2, [r3, #0]
 800e5ac:	4b2b      	ldr	r3, [pc, #172]	; (800e65c <PrepareFrame+0x21c>)
 800e5ae:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 800e5b2:	e04b      	b.n	800e64c <PrepareFrame+0x20c>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800e5b4:	4b29      	ldr	r3, [pc, #164]	; (800e65c <PrepareFrame+0x21c>)
 800e5b6:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d010      	beq.n	800e5e0 <PrepareFrame+0x1a0>
 800e5be:	697b      	ldr	r3, [r7, #20]
 800e5c0:	2b0f      	cmp	r3, #15
 800e5c2:	d90d      	bls.n	800e5e0 <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800e5c4:	7ffb      	ldrb	r3, [r7, #31]
 800e5c6:	f107 0114 	add.w	r1, r7, #20
 800e5ca:	4a29      	ldr	r2, [pc, #164]	; (800e670 <PrepareFrame+0x230>)
 800e5cc:	4618      	mov	r0, r3
 800e5ce:	f002 f96f 	bl	80108b0 <LoRaMacCommandsSerializeCmds>
 800e5d2:	4603      	mov	r3, r0
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d001      	beq.n	800e5dc <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800e5d8:	2313      	movs	r3, #19
 800e5da:	e03b      	b.n	800e654 <PrepareFrame+0x214>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 800e5dc:	230a      	movs	r3, #10
 800e5de:	e039      	b.n	800e654 <PrepareFrame+0x214>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800e5e0:	7ffb      	ldrb	r3, [r7, #31]
 800e5e2:	f107 0114 	add.w	r1, r7, #20
 800e5e6:	4a22      	ldr	r2, [pc, #136]	; (800e670 <PrepareFrame+0x230>)
 800e5e8:	4618      	mov	r0, r3
 800e5ea:	f002 f961 	bl	80108b0 <LoRaMacCommandsSerializeCmds>
 800e5ee:	4603      	mov	r3, r0
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d001      	beq.n	800e5f8 <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800e5f4:	2313      	movs	r3, #19
 800e5f6:	e02d      	b.n	800e654 <PrepareFrame+0x214>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 800e5f8:	4b18      	ldr	r3, [pc, #96]	; (800e65c <PrepareFrame+0x21c>)
 800e5fa:	2200      	movs	r2, #0
 800e5fc:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 800e600:	4b16      	ldr	r3, [pc, #88]	; (800e65c <PrepareFrame+0x21c>)
 800e602:	4a1b      	ldr	r2, [pc, #108]	; (800e670 <PrepareFrame+0x230>)
 800e604:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 800e608:	697b      	ldr	r3, [r7, #20]
 800e60a:	b2da      	uxtb	r2, r3
 800e60c:	4b13      	ldr	r3, [pc, #76]	; (800e65c <PrepareFrame+0x21c>)
 800e60e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            break;
 800e612:	e01b      	b.n	800e64c <PrepareFrame+0x20c>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 800e614:	683b      	ldr	r3, [r7, #0]
 800e616:	2b00      	cmp	r3, #0
 800e618:	d01a      	beq.n	800e650 <PrepareFrame+0x210>
 800e61a:	4b10      	ldr	r3, [pc, #64]	; (800e65c <PrepareFrame+0x21c>)
 800e61c:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 800e620:	2b00      	cmp	r3, #0
 800e622:	d015      	beq.n	800e650 <PrepareFrame+0x210>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 800e624:	4813      	ldr	r0, [pc, #76]	; (800e674 <PrepareFrame+0x234>)
 800e626:	4b0d      	ldr	r3, [pc, #52]	; (800e65c <PrepareFrame+0x21c>)
 800e628:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 800e62c:	b29b      	uxth	r3, r3
 800e62e:	461a      	mov	r2, r3
 800e630:	6839      	ldr	r1, [r7, #0]
 800e632:	f006 f8aa 	bl	801478a <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 800e636:	4b09      	ldr	r3, [pc, #36]	; (800e65c <PrepareFrame+0x21c>)
 800e638:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 800e63c:	b29b      	uxth	r3, r3
 800e63e:	3301      	adds	r3, #1
 800e640:	b29a      	uxth	r2, r3
 800e642:	4b06      	ldr	r3, [pc, #24]	; (800e65c <PrepareFrame+0x21c>)
 800e644:	801a      	strh	r2, [r3, #0]
            }
            break;
 800e646:	e003      	b.n	800e650 <PrepareFrame+0x210>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 800e648:	2302      	movs	r3, #2
 800e64a:	e003      	b.n	800e654 <PrepareFrame+0x214>
            break;
 800e64c:	bf00      	nop
 800e64e:	e000      	b.n	800e652 <PrepareFrame+0x212>
            break;
 800e650:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 800e652:	2300      	movs	r3, #0
}
 800e654:	4618      	mov	r0, r3
 800e656:	3720      	adds	r7, #32
 800e658:	46bd      	mov	sp, r7
 800e65a:	bd80      	pop	{r7, pc}
 800e65c:	200003e0 	.word	0x200003e0
 800e660:	20000518 	.word	0x20000518
 800e664:	200003e2 	.word	0x200003e2
 800e668:	200008e8 	.word	0x200008e8
 800e66c:	200004f8 	.word	0x200004f8
 800e670:	20000868 	.word	0x20000868
 800e674:	200003e3 	.word	0x200003e3

0800e678 <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 800e678:	b580      	push	{r7, lr}
 800e67a:	b08a      	sub	sp, #40	; 0x28
 800e67c:	af00      	add	r7, sp, #0
 800e67e:	4603      	mov	r3, r0
 800e680:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e682:	2303      	movs	r3, #3
 800e684:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 800e688:	2300      	movs	r3, #0
 800e68a:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 800e68c:	79fb      	ldrb	r3, [r7, #7]
 800e68e:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800e690:	4b47      	ldr	r3, [pc, #284]	; (800e7b0 <SendFrameOnChannel+0x138>)
 800e692:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800e696:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800e698:	4b45      	ldr	r3, [pc, #276]	; (800e7b0 <SendFrameOnChannel+0x138>)
 800e69a:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800e69e:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 800e6a0:	4b43      	ldr	r3, [pc, #268]	; (800e7b0 <SendFrameOnChannel+0x138>)
 800e6a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e6a4:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800e6a6:	4b42      	ldr	r3, [pc, #264]	; (800e7b0 <SendFrameOnChannel+0x138>)
 800e6a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e6aa:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 800e6ac:	4b41      	ldr	r3, [pc, #260]	; (800e7b4 <SendFrameOnChannel+0x13c>)
 800e6ae:	881b      	ldrh	r3, [r3, #0]
 800e6b0:	83bb      	strh	r3, [r7, #28]

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 800e6b2:	4b3f      	ldr	r3, [pc, #252]	; (800e7b0 <SendFrameOnChannel+0x138>)
 800e6b4:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800e6b8:	f107 020f 	add.w	r2, r7, #15
 800e6bc:	f107 0110 	add.w	r1, r7, #16
 800e6c0:	4b3d      	ldr	r3, [pc, #244]	; (800e7b8 <SendFrameOnChannel+0x140>)
 800e6c2:	f003 fe42 	bl	801234a <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e6c6:	4b3b      	ldr	r3, [pc, #236]	; (800e7b4 <SendFrameOnChannel+0x13c>)
 800e6c8:	2201      	movs	r2, #1
 800e6ca:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800e6ce:	4b38      	ldr	r3, [pc, #224]	; (800e7b0 <SendFrameOnChannel+0x138>)
 800e6d0:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800e6d4:	b2da      	uxtb	r2, r3
 800e6d6:	4b37      	ldr	r3, [pc, #220]	; (800e7b4 <SendFrameOnChannel+0x13c>)
 800e6d8:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
    MacCtx.McpsConfirm.TxPower = txPower;
 800e6dc:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800e6e0:	4b34      	ldr	r3, [pc, #208]	; (800e7b4 <SendFrameOnChannel+0x13c>)
 800e6e2:	f883 243b 	strb.w	r2, [r3, #1083]	; 0x43b
    MacCtx.McpsConfirm.Channel = channel;
 800e6e6:	79fb      	ldrb	r3, [r7, #7]
 800e6e8:	4a32      	ldr	r2, [pc, #200]	; (800e7b4 <SendFrameOnChannel+0x13c>)
 800e6ea:	f8c2 3448 	str.w	r3, [r2, #1096]	; 0x448

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800e6ee:	4b31      	ldr	r3, [pc, #196]	; (800e7b4 <SendFrameOnChannel+0x13c>)
 800e6f0:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800e6f4:	4a2f      	ldr	r2, [pc, #188]	; (800e7b4 <SendFrameOnChannel+0x13c>)
 800e6f6:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800e6fa:	4b2e      	ldr	r3, [pc, #184]	; (800e7b4 <SendFrameOnChannel+0x13c>)
 800e6fc:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800e700:	4a2c      	ldr	r2, [pc, #176]	; (800e7b4 <SendFrameOnChannel+0x13c>)
 800e702:	f8c2 3450 	str.w	r3, [r2, #1104]	; 0x450

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 800e706:	f001 fe69 	bl	80103dc <LoRaMacClassBIsBeaconModeActive>
 800e70a:	4603      	mov	r3, r0
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d00b      	beq.n	800e728 <SendFrameOnChannel+0xb0>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 800e710:	4b28      	ldr	r3, [pc, #160]	; (800e7b4 <SendFrameOnChannel+0x13c>)
 800e712:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800e716:	4618      	mov	r0, r3
 800e718:	f001 fecb 	bl	80104b2 <LoRaMacClassBIsUplinkCollision>
 800e71c:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 800e71e:	6a3b      	ldr	r3, [r7, #32]
 800e720:	2b00      	cmp	r3, #0
 800e722:	d001      	beq.n	800e728 <SendFrameOnChannel+0xb0>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 800e724:	2310      	movs	r3, #16
 800e726:	e03e      	b.n	800e7a6 <SendFrameOnChannel+0x12e>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800e728:	4b21      	ldr	r3, [pc, #132]	; (800e7b0 <SendFrameOnChannel+0x138>)
 800e72a:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800e72e:	2b01      	cmp	r3, #1
 800e730:	d101      	bne.n	800e736 <SendFrameOnChannel+0xbe>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 800e732:	f001 fec8 	bl	80104c6 <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 800e736:	f001 fe62 	bl	80103fe <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 800e73a:	4b1d      	ldr	r3, [pc, #116]	; (800e7b0 <SendFrameOnChannel+0x138>)
 800e73c:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800e740:	b2db      	uxtb	r3, r3
 800e742:	4a1c      	ldr	r2, [pc, #112]	; (800e7b4 <SendFrameOnChannel+0x13c>)
 800e744:	f892 2415 	ldrb.w	r2, [r2, #1045]	; 0x415
 800e748:	4611      	mov	r1, r2
 800e74a:	4618      	mov	r0, r3
 800e74c:	f7ff fc88 	bl	800e060 <SecureFrame>
 800e750:	4603      	mov	r3, r0
 800e752:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if( status != LORAMAC_STATUS_OK )
 800e756:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d002      	beq.n	800e764 <SendFrameOnChannel+0xec>
    {
        return status;
 800e75e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e762:	e020      	b.n	800e7a6 <SendFrameOnChannel+0x12e>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800e764:	4b13      	ldr	r3, [pc, #76]	; (800e7b4 <SendFrameOnChannel+0x13c>)
 800e766:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e76a:	f043 0302 	orr.w	r3, r3, #2
 800e76e:	4a11      	ldr	r2, [pc, #68]	; (800e7b4 <SendFrameOnChannel+0x13c>)
 800e770:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    if( MacCtx.NodeAckRequested == false )
 800e774:	4b0f      	ldr	r3, [pc, #60]	; (800e7b4 <SendFrameOnChannel+0x13c>)
 800e776:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800e77a:	f083 0301 	eor.w	r3, r3, #1
 800e77e:	b2db      	uxtb	r3, r3
 800e780:	2b00      	cmp	r3, #0
 800e782:	d007      	beq.n	800e794 <SendFrameOnChannel+0x11c>
    {
        MacCtx.ChannelsNbTransCounter++;
 800e784:	4b0b      	ldr	r3, [pc, #44]	; (800e7b4 <SendFrameOnChannel+0x13c>)
 800e786:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 800e78a:	3301      	adds	r3, #1
 800e78c:	b2da      	uxtb	r2, r3
 800e78e:	4b09      	ldr	r3, [pc, #36]	; (800e7b4 <SendFrameOnChannel+0x13c>)
 800e790:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    }

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 800e794:	4b09      	ldr	r3, [pc, #36]	; (800e7bc <SendFrameOnChannel+0x144>)
 800e796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e798:	4a06      	ldr	r2, [pc, #24]	; (800e7b4 <SendFrameOnChannel+0x13c>)
 800e79a:	8812      	ldrh	r2, [r2, #0]
 800e79c:	b2d2      	uxtb	r2, r2
 800e79e:	4611      	mov	r1, r2
 800e7a0:	4807      	ldr	r0, [pc, #28]	; (800e7c0 <SendFrameOnChannel+0x148>)
 800e7a2:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 800e7a4:	2300      	movs	r3, #0
}
 800e7a6:	4618      	mov	r0, r3
 800e7a8:	3728      	adds	r7, #40	; 0x28
 800e7aa:	46bd      	mov	sp, r7
 800e7ac:	bd80      	pop	{r7, pc}
 800e7ae:	bf00      	nop
 800e7b0:	200008e8 	.word	0x200008e8
 800e7b4:	200003e0 	.word	0x200003e0
 800e7b8:	200007f8 	.word	0x200007f8
 800e7bc:	08019c7c 	.word	0x08019c7c
 800e7c0:	200003e2 	.word	0x200003e2

0800e7c4 <SetTxContinuousWave>:

static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout )
{
 800e7c4:	b580      	push	{r7, lr}
 800e7c6:	b086      	sub	sp, #24
 800e7c8:	af00      	add	r7, sp, #0
 800e7ca:	4603      	mov	r3, r0
 800e7cc:	80fb      	strh	r3, [r7, #6]
    ContinuousWaveParams_t continuousWave;

    continuousWave.Channel = MacCtx.Channel;
 800e7ce:	4b15      	ldr	r3, [pc, #84]	; (800e824 <SetTxContinuousWave+0x60>)
 800e7d0:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 800e7d4:	723b      	strb	r3, [r7, #8]
    continuousWave.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800e7d6:	4b14      	ldr	r3, [pc, #80]	; (800e828 <SetTxContinuousWave+0x64>)
 800e7d8:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800e7dc:	727b      	strb	r3, [r7, #9]
    continuousWave.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800e7de:	4b12      	ldr	r3, [pc, #72]	; (800e828 <SetTxContinuousWave+0x64>)
 800e7e0:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800e7e4:	72bb      	strb	r3, [r7, #10]
    continuousWave.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 800e7e6:	4b10      	ldr	r3, [pc, #64]	; (800e828 <SetTxContinuousWave+0x64>)
 800e7e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e7ea:	60fb      	str	r3, [r7, #12]
    continuousWave.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800e7ec:	4b0e      	ldr	r3, [pc, #56]	; (800e828 <SetTxContinuousWave+0x64>)
 800e7ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e7f0:	613b      	str	r3, [r7, #16]
    continuousWave.Timeout = timeout;
 800e7f2:	88fb      	ldrh	r3, [r7, #6]
 800e7f4:	82bb      	strh	r3, [r7, #20]

    RegionSetContinuousWave( Nvm.MacGroup2.Region, &continuousWave );
 800e7f6:	4b0c      	ldr	r3, [pc, #48]	; (800e828 <SetTxContinuousWave+0x64>)
 800e7f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e7fc:	f107 0208 	add.w	r2, r7, #8
 800e800:	4611      	mov	r1, r2
 800e802:	4618      	mov	r0, r3
 800e804:	f003 fe50 	bl	80124a8 <RegionSetContinuousWave>

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800e808:	4b06      	ldr	r3, [pc, #24]	; (800e824 <SetTxContinuousWave+0x60>)
 800e80a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e80e:	f043 0302 	orr.w	r3, r3, #2
 800e812:	4a04      	ldr	r2, [pc, #16]	; (800e824 <SetTxContinuousWave+0x60>)
 800e814:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 800e818:	2300      	movs	r3, #0
}
 800e81a:	4618      	mov	r0, r3
 800e81c:	3718      	adds	r7, #24
 800e81e:	46bd      	mov	sp, r7
 800e820:	bd80      	pop	{r7, pc}
 800e822:	bf00      	nop
 800e824:	200003e0 	.word	0x200003e0
 800e828:	200008e8 	.word	0x200008e8

0800e82c <SetTxContinuousWave1>:

static LoRaMacStatus_t SetTxContinuousWave1( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 800e82c:	b580      	push	{r7, lr}
 800e82e:	b082      	sub	sp, #8
 800e830:	af00      	add	r7, sp, #0
 800e832:	4603      	mov	r3, r0
 800e834:	6039      	str	r1, [r7, #0]
 800e836:	80fb      	strh	r3, [r7, #6]
 800e838:	4613      	mov	r3, r2
 800e83a:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 800e83c:	4b09      	ldr	r3, [pc, #36]	; (800e864 <SetTxContinuousWave1+0x38>)
 800e83e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e840:	f997 1005 	ldrsb.w	r1, [r7, #5]
 800e844:	88fa      	ldrh	r2, [r7, #6]
 800e846:	6838      	ldr	r0, [r7, #0]
 800e848:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800e84a:	4b07      	ldr	r3, [pc, #28]	; (800e868 <SetTxContinuousWave1+0x3c>)
 800e84c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e850:	f043 0302 	orr.w	r3, r3, #2
 800e854:	4a04      	ldr	r2, [pc, #16]	; (800e868 <SetTxContinuousWave1+0x3c>)
 800e856:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 800e85a:	2300      	movs	r3, #0
}
 800e85c:	4618      	mov	r0, r3
 800e85e:	3708      	adds	r7, #8
 800e860:	46bd      	mov	sp, r7
 800e862:	bd80      	pop	{r7, pc}
 800e864:	08019c7c 	.word	0x08019c7c
 800e868:	200003e0 	.word	0x200003e0

0800e86c <GetNvmData>:

LoRaMacNvmData_t* GetNvmData( void )
{
 800e86c:	b480      	push	{r7}
 800e86e:	af00      	add	r7, sp, #0
    return &Nvm;
 800e870:	4b02      	ldr	r3, [pc, #8]	; (800e87c <GetNvmData+0x10>)
}
 800e872:	4618      	mov	r0, r3
 800e874:	46bd      	mov	sp, r7
 800e876:	bc80      	pop	{r7}
 800e878:	4770      	bx	lr
 800e87a:	bf00      	nop
 800e87c:	200008e8 	.word	0x200008e8

0800e880 <RestoreNvmData>:

LoRaMacStatus_t RestoreNvmData( LoRaMacNvmData_t* nvm )
{
 800e880:	b580      	push	{r7, lr}
 800e882:	b084      	sub	sp, #16
 800e884:	af00      	add	r7, sp, #0
 800e886:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 800e888:	2300      	movs	r3, #0
 800e88a:	60fb      	str	r3, [r7, #12]

    // Status and parameter validation
    if( nvm == NULL )
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d101      	bne.n	800e896 <RestoreNvmData+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800e892:	2303      	movs	r3, #3
 800e894:	e09a      	b.n	800e9cc <RestoreNvmData+0x14c>
    }
    if( MacCtx.MacState != LORAMAC_STOPPED )
 800e896:	4b4f      	ldr	r3, [pc, #316]	; (800e9d4 <RestoreNvmData+0x154>)
 800e898:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e89c:	2b01      	cmp	r3, #1
 800e89e:	d001      	beq.n	800e8a4 <RestoreNvmData+0x24>
    {
        return LORAMAC_STATUS_BUSY;
 800e8a0:	2301      	movs	r3, #1
 800e8a2:	e093      	b.n	800e9cc <RestoreNvmData+0x14c>
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvm->Crypto, sizeof( nvm->Crypto ) -
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	2124      	movs	r1, #36	; 0x24
 800e8a8:	4618      	mov	r0, r3
 800e8aa:	f005 ffc3 	bl	8014834 <Crc32>
 800e8ae:	60f8      	str	r0, [r7, #12]
                                            sizeof( nvm->Crypto.Crc32 ) );
    if( crc == nvm->Crypto.Crc32 )
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8b4:	68fa      	ldr	r2, [r7, #12]
 800e8b6:	429a      	cmp	r2, r3
 800e8b8:	d105      	bne.n	800e8c6 <RestoreNvmData+0x46>
    {
        memcpy1( ( uint8_t* ) &Nvm.Crypto, ( uint8_t* ) &nvm->Crypto,
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	2228      	movs	r2, #40	; 0x28
 800e8be:	4619      	mov	r1, r3
 800e8c0:	4845      	ldr	r0, [pc, #276]	; (800e9d8 <RestoreNvmData+0x158>)
 800e8c2:	f005 ff62 	bl	801478a <memcpy1>
                 sizeof( Nvm.Crypto ) );
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvm->MacGroup1, sizeof( nvm->MacGroup1 ) -
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	3328      	adds	r3, #40	; 0x28
 800e8ca:	2114      	movs	r1, #20
 800e8cc:	4618      	mov	r0, r3
 800e8ce:	f005 ffb1 	bl	8014834 <Crc32>
 800e8d2:	60f8      	str	r0, [r7, #12]
                                               sizeof( nvm->MacGroup1.Crc32 ) );
    if( crc == nvm->MacGroup1.Crc32 )
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e8d8:	68fa      	ldr	r2, [r7, #12]
 800e8da:	429a      	cmp	r2, r3
 800e8dc:	d106      	bne.n	800e8ec <RestoreNvmData+0x6c>
    {
        memcpy1( ( uint8_t* ) &Nvm.MacGroup1, ( uint8_t* ) &nvm->MacGroup1,
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	3328      	adds	r3, #40	; 0x28
 800e8e2:	2218      	movs	r2, #24
 800e8e4:	4619      	mov	r1, r3
 800e8e6:	483d      	ldr	r0, [pc, #244]	; (800e9dc <RestoreNvmData+0x15c>)
 800e8e8:	f005 ff4f 	bl	801478a <memcpy1>
                 sizeof( Nvm.MacGroup1 ) );
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvm->MacGroup2, sizeof( nvm->MacGroup2 ) -
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	3340      	adds	r3, #64	; 0x40
 800e8f0:	21d4      	movs	r1, #212	; 0xd4
 800e8f2:	4618      	mov	r0, r3
 800e8f4:	f005 ff9e 	bl	8014834 <Crc32>
 800e8f8:	60f8      	str	r0, [r7, #12]
                                               sizeof( nvm->MacGroup2.Crc32 ) );
    if( crc == nvm->MacGroup2.Crc32 )
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800e900:	68fa      	ldr	r2, [r7, #12]
 800e902:	429a      	cmp	r2, r3
 800e904:	d11f      	bne.n	800e946 <RestoreNvmData+0xc6>
    {
        memcpy1( ( uint8_t* ) &Nvm.MacGroup2, ( uint8_t* ) &nvm->MacGroup2,
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	3340      	adds	r3, #64	; 0x40
 800e90a:	22d8      	movs	r2, #216	; 0xd8
 800e90c:	4619      	mov	r1, r3
 800e90e:	4834      	ldr	r0, [pc, #208]	; (800e9e0 <RestoreNvmData+0x160>)
 800e910:	f005 ff3b 	bl	801478a <memcpy1>
                 sizeof( Nvm.MacGroup2 ) );

        // Initialize RxC config parameters.
        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800e914:	4b2f      	ldr	r3, [pc, #188]	; (800e9d4 <RestoreNvmData+0x154>)
 800e916:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 800e91a:	4b2e      	ldr	r3, [pc, #184]	; (800e9d4 <RestoreNvmData+0x154>)
 800e91c:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800e920:	4b2d      	ldr	r3, [pc, #180]	; (800e9d8 <RestoreNvmData+0x158>)
 800e922:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e924:	4a2b      	ldr	r2, [pc, #172]	; (800e9d4 <RestoreNvmData+0x154>)
 800e926:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800e92a:	4b2b      	ldr	r3, [pc, #172]	; (800e9d8 <RestoreNvmData+0x158>)
 800e92c:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800e930:	4b28      	ldr	r3, [pc, #160]	; (800e9d4 <RestoreNvmData+0x154>)
 800e932:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
        MacCtx.RxWindowCConfig.RxContinuous = true;
 800e936:	4b27      	ldr	r3, [pc, #156]	; (800e9d4 <RestoreNvmData+0x154>)
 800e938:	2201      	movs	r2, #1
 800e93a:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800e93e:	4b25      	ldr	r3, [pc, #148]	; (800e9d4 <RestoreNvmData+0x154>)
 800e940:	2202      	movs	r2, #2
 800e942:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvm->SecureElement, sizeof( nvm->SecureElement ) -
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	f503 738c 	add.w	r3, r3, #280	; 0x118
 800e94c:	21bc      	movs	r1, #188	; 0xbc
 800e94e:	4618      	mov	r0, r3
 800e950:	f005 ff70 	bl	8014834 <Crc32>
 800e954:	60f8      	str	r0, [r7, #12]
                                                   sizeof( nvm->SecureElement.Crc32 ) );
    if( crc == nvm->SecureElement.Crc32 )
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 800e95c:	68fa      	ldr	r2, [r7, #12]
 800e95e:	429a      	cmp	r2, r3
 800e960:	d107      	bne.n	800e972 <RestoreNvmData+0xf2>
    {
        memcpy1( ( uint8_t* ) &Nvm.SecureElement,( uint8_t* ) &nvm->SecureElement,
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	f503 738c 	add.w	r3, r3, #280	; 0x118
 800e968:	22c0      	movs	r2, #192	; 0xc0
 800e96a:	4619      	mov	r1, r3
 800e96c:	481d      	ldr	r0, [pc, #116]	; (800e9e4 <RestoreNvmData+0x164>)
 800e96e:	f005 ff0c 	bl	801478a <memcpy1>
                 sizeof( Nvm.SecureElement ) );
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvm->RegionGroup1, sizeof( nvm->RegionGroup1 ) -
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 800e978:	2118      	movs	r1, #24
 800e97a:	4618      	mov	r0, r3
 800e97c:	f005 ff5a 	bl	8014834 <Crc32>
 800e980:	60f8      	str	r0, [r7, #12]
                                            sizeof( nvm->RegionGroup1.Crc32 ) );
    if( crc == nvm->RegionGroup1.Crc32 )
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	f8d3 31f0 	ldr.w	r3, [r3, #496]	; 0x1f0
 800e988:	68fa      	ldr	r2, [r7, #12]
 800e98a:	429a      	cmp	r2, r3
 800e98c:	d107      	bne.n	800e99e <RestoreNvmData+0x11e>
    {
        memcpy1( ( uint8_t* ) &Nvm.RegionGroup1,( uint8_t* ) &nvm->RegionGroup1,
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 800e994:	221c      	movs	r2, #28
 800e996:	4619      	mov	r1, r3
 800e998:	4813      	ldr	r0, [pc, #76]	; (800e9e8 <RestoreNvmData+0x168>)
 800e99a:	f005 fef6 	bl	801478a <memcpy1>
                 sizeof( Nvm.RegionGroup1 ) );
    }

    crc = Crc32( ( uint8_t* ) &nvm->ClassB, sizeof( nvm->ClassB ) -
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 800e9a4:	2114      	movs	r1, #20
 800e9a6:	4618      	mov	r0, r3
 800e9a8:	f005 ff44 	bl	8014834 <Crc32>
 800e9ac:	60f8      	str	r0, [r7, #12]
                                            sizeof( nvm->ClassB.Crc32 ) );
    if( crc == nvm->ClassB.Crc32 )
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 800e9b4:	68fa      	ldr	r2, [r7, #12]
 800e9b6:	429a      	cmp	r2, r3
 800e9b8:	d107      	bne.n	800e9ca <RestoreNvmData+0x14a>
    {
        memcpy1( ( uint8_t* ) &Nvm.ClassB,( uint8_t* ) &nvm->ClassB,
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 800e9c0:	2218      	movs	r2, #24
 800e9c2:	4619      	mov	r1, r3
 800e9c4:	4809      	ldr	r0, [pc, #36]	; (800e9ec <RestoreNvmData+0x16c>)
 800e9c6:	f005 fee0 	bl	801478a <memcpy1>
                 sizeof( Nvm.ClassB ) );
    }

    return LORAMAC_STATUS_OK;
 800e9ca:	2300      	movs	r3, #0
}
 800e9cc:	4618      	mov	r0, r3
 800e9ce:	3710      	adds	r7, #16
 800e9d0:	46bd      	mov	sp, r7
 800e9d2:	bd80      	pop	{r7, pc}
 800e9d4:	200003e0 	.word	0x200003e0
 800e9d8:	200008e8 	.word	0x200008e8
 800e9dc:	20000910 	.word	0x20000910
 800e9e0:	20000928 	.word	0x20000928
 800e9e4:	20000a00 	.word	0x20000a00
 800e9e8:	20000ac0 	.word	0x20000ac0
 800e9ec:	20000ba4 	.word	0x20000ba4

0800e9f0 <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 800e9f0:	b480      	push	{r7}
 800e9f2:	b083      	sub	sp, #12
 800e9f4:	af00      	add	r7, sp, #0
 800e9f6:	6078      	str	r0, [r7, #4]
 800e9f8:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d002      	beq.n	800ea06 <DetermineFrameType+0x16>
 800ea00:	683b      	ldr	r3, [r7, #0]
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d101      	bne.n	800ea0a <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800ea06:	2303      	movs	r3, #3
 800ea08:	e03b      	b.n	800ea82 <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	7b1b      	ldrb	r3, [r3, #12]
 800ea0e:	f003 030f 	and.w	r3, r3, #15
 800ea12:	b2db      	uxtb	r3, r3
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d008      	beq.n	800ea2a <DetermineFrameType+0x3a>
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d003      	beq.n	800ea2a <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 800ea22:	683b      	ldr	r3, [r7, #0]
 800ea24:	2200      	movs	r2, #0
 800ea26:	701a      	strb	r2, [r3, #0]
 800ea28:	e02a      	b.n	800ea80 <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d103      	bne.n	800ea3c <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 800ea34:	683b      	ldr	r3, [r7, #0]
 800ea36:	2201      	movs	r2, #1
 800ea38:	701a      	strb	r2, [r3, #0]
 800ea3a:	e021      	b.n	800ea80 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	7b1b      	ldrb	r3, [r3, #12]
 800ea40:	f003 030f 	and.w	r3, r3, #15
 800ea44:	b2db      	uxtb	r3, r3
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d108      	bne.n	800ea5c <DetermineFrameType+0x6c>
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d103      	bne.n	800ea5c <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 800ea54:	683b      	ldr	r3, [r7, #0]
 800ea56:	2202      	movs	r2, #2
 800ea58:	701a      	strb	r2, [r3, #0]
 800ea5a:	e011      	b.n	800ea80 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	7b1b      	ldrb	r3, [r3, #12]
 800ea60:	f003 030f 	and.w	r3, r3, #15
 800ea64:	b2db      	uxtb	r3, r3
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d108      	bne.n	800ea7c <DetermineFrameType+0x8c>
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d003      	beq.n	800ea7c <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 800ea74:	683b      	ldr	r3, [r7, #0]
 800ea76:	2203      	movs	r2, #3
 800ea78:	701a      	strb	r2, [r3, #0]
 800ea7a:	e001      	b.n	800ea80 <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 800ea7c:	2317      	movs	r3, #23
 800ea7e:	e000      	b.n	800ea82 <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 800ea80:	2300      	movs	r3, #0
}
 800ea82:	4618      	mov	r0, r3
 800ea84:	370c      	adds	r7, #12
 800ea86:	46bd      	mov	sp, r7
 800ea88:	bc80      	pop	{r7}
 800ea8a:	4770      	bx	lr

0800ea8c <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 800ea8c:	b480      	push	{r7}
 800ea8e:	af00      	add	r7, sp, #0
    // Unconfirmed uplink, when all retransmissions are done.
    if( MacCtx.ChannelsNbTransCounter >=
 800ea90:	4b12      	ldr	r3, [pc, #72]	; (800eadc <CheckRetransUnconfirmedUplink+0x50>)
 800ea92:	f893 2410 	ldrb.w	r2, [r3, #1040]	; 0x410
        Nvm.MacGroup2.MacParams.ChannelsNbTrans )
 800ea96:	4b12      	ldr	r3, [pc, #72]	; (800eae0 <CheckRetransUnconfirmedUplink+0x54>)
 800ea98:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
    if( MacCtx.ChannelsNbTransCounter >=
 800ea9c:	429a      	cmp	r2, r3
 800ea9e:	d301      	bcc.n	800eaa4 <CheckRetransUnconfirmedUplink+0x18>
    {
        return true;
 800eaa0:	2301      	movs	r3, #1
 800eaa2:	e016      	b.n	800ead2 <CheckRetransUnconfirmedUplink+0x46>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800eaa4:	4b0d      	ldr	r3, [pc, #52]	; (800eadc <CheckRetransUnconfirmedUplink+0x50>)
 800eaa6:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800eaaa:	f003 0302 	and.w	r3, r3, #2
 800eaae:	b2db      	uxtb	r3, r3
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d00d      	beq.n	800ead0 <CheckRetransUnconfirmedUplink+0x44>
    {
        // For Class A stop in each case
        if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 800eab4:	4b0a      	ldr	r3, [pc, #40]	; (800eae0 <CheckRetransUnconfirmedUplink+0x54>)
 800eab6:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d101      	bne.n	800eac2 <CheckRetransUnconfirmedUplink+0x36>
        {
            return true;
 800eabe:	2301      	movs	r3, #1
 800eac0:	e007      	b.n	800ead2 <CheckRetransUnconfirmedUplink+0x46>
        }
        else
        {// For Class B & C stop only if the frame was received in RX1 window
            if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 800eac2:	4b06      	ldr	r3, [pc, #24]	; (800eadc <CheckRetransUnconfirmedUplink+0x50>)
 800eac4:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d101      	bne.n	800ead0 <CheckRetransUnconfirmedUplink+0x44>
            {
                return true;
 800eacc:	2301      	movs	r3, #1
 800eace:	e000      	b.n	800ead2 <CheckRetransUnconfirmedUplink+0x46>
            }
        }
    }
    return false;
 800ead0:	2300      	movs	r3, #0
}
 800ead2:	4618      	mov	r0, r3
 800ead4:	46bd      	mov	sp, r7
 800ead6:	bc80      	pop	{r7}
 800ead8:	4770      	bx	lr
 800eada:	bf00      	nop
 800eadc:	200003e0 	.word	0x200003e0
 800eae0:	200008e8 	.word	0x200008e8

0800eae4 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 800eae4:	b480      	push	{r7}
 800eae6:	af00      	add	r7, sp, #0
    // Confirmed uplink, when all retransmissions ( tries to get a ack ) are done.
    if( MacCtx.AckTimeoutRetriesCounter >=
 800eae8:	4b0e      	ldr	r3, [pc, #56]	; (800eb24 <CheckRetransConfirmedUplink+0x40>)
 800eaea:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
        MacCtx.AckTimeoutRetries )
 800eaee:	4b0d      	ldr	r3, [pc, #52]	; (800eb24 <CheckRetransConfirmedUplink+0x40>)
 800eaf0:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
    if( MacCtx.AckTimeoutRetriesCounter >=
 800eaf4:	429a      	cmp	r2, r3
 800eaf6:	d301      	bcc.n	800eafc <CheckRetransConfirmedUplink+0x18>
    {
        return true;
 800eaf8:	2301      	movs	r3, #1
 800eafa:	e00f      	b.n	800eb1c <CheckRetransConfirmedUplink+0x38>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800eafc:	4b09      	ldr	r3, [pc, #36]	; (800eb24 <CheckRetransConfirmedUplink+0x40>)
 800eafe:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800eb02:	f003 0302 	and.w	r3, r3, #2
 800eb06:	b2db      	uxtb	r3, r3
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d006      	beq.n	800eb1a <CheckRetransConfirmedUplink+0x36>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 800eb0c:	4b05      	ldr	r3, [pc, #20]	; (800eb24 <CheckRetransConfirmedUplink+0x40>)
 800eb0e:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d001      	beq.n	800eb1a <CheckRetransConfirmedUplink+0x36>
        {
            return true;
 800eb16:	2301      	movs	r3, #1
 800eb18:	e000      	b.n	800eb1c <CheckRetransConfirmedUplink+0x38>
        }
    }
    return false;
 800eb1a:	2300      	movs	r3, #0
}
 800eb1c:	4618      	mov	r0, r3
 800eb1e:	46bd      	mov	sp, r7
 800eb20:	bc80      	pop	{r7}
 800eb22:	4770      	bx	lr
 800eb24:	200003e0 	.word	0x200003e0

0800eb28 <StopRetransmission>:

static bool StopRetransmission( void )
{
 800eb28:	b480      	push	{r7}
 800eb2a:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 800eb2c:	4b1a      	ldr	r3, [pc, #104]	; (800eb98 <StopRetransmission+0x70>)
 800eb2e:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800eb32:	f003 0302 	and.w	r3, r3, #2
 800eb36:	b2db      	uxtb	r3, r3
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d009      	beq.n	800eb50 <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800eb3c:	4b16      	ldr	r3, [pc, #88]	; (800eb98 <StopRetransmission+0x70>)
 800eb3e:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d00e      	beq.n	800eb64 <StopRetransmission+0x3c>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 800eb46:	4b14      	ldr	r3, [pc, #80]	; (800eb98 <StopRetransmission+0x70>)
 800eb48:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800eb4c:	2b01      	cmp	r3, #1
 800eb4e:	d009      	beq.n	800eb64 <StopRetransmission+0x3c>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 800eb50:	4b12      	ldr	r3, [pc, #72]	; (800eb9c <StopRetransmission+0x74>)
 800eb52:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d004      	beq.n	800eb64 <StopRetransmission+0x3c>
        {
            Nvm.MacGroup1.AdrAckCounter++;
 800eb5a:	4b10      	ldr	r3, [pc, #64]	; (800eb9c <StopRetransmission+0x74>)
 800eb5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb5e:	3301      	adds	r3, #1
 800eb60:	4a0e      	ldr	r2, [pc, #56]	; (800eb9c <StopRetransmission+0x74>)
 800eb62:	6293      	str	r3, [r2, #40]	; 0x28
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 800eb64:	4b0c      	ldr	r3, [pc, #48]	; (800eb98 <StopRetransmission+0x70>)
 800eb66:	2200      	movs	r2, #0
 800eb68:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    MacCtx.NodeAckRequested = false;
 800eb6c:	4b0a      	ldr	r3, [pc, #40]	; (800eb98 <StopRetransmission+0x70>)
 800eb6e:	2200      	movs	r2, #0
 800eb70:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    MacCtx.AckTimeoutRetry = false;
 800eb74:	4b08      	ldr	r3, [pc, #32]	; (800eb98 <StopRetransmission+0x70>)
 800eb76:	2200      	movs	r2, #0
 800eb78:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800eb7c:	4b06      	ldr	r3, [pc, #24]	; (800eb98 <StopRetransmission+0x70>)
 800eb7e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800eb82:	f023 0302 	bic.w	r3, r3, #2
 800eb86:	4a04      	ldr	r2, [pc, #16]	; (800eb98 <StopRetransmission+0x70>)
 800eb88:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return true;
 800eb8c:	2301      	movs	r3, #1
}
 800eb8e:	4618      	mov	r0, r3
 800eb90:	46bd      	mov	sp, r7
 800eb92:	bc80      	pop	{r7}
 800eb94:	4770      	bx	lr
 800eb96:	bf00      	nop
 800eb98:	200003e0 	.word	0x200003e0
 800eb9c:	200008e8 	.word	0x200008e8

0800eba0 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 800eba0:	b580      	push	{r7, lr}
 800eba2:	b082      	sub	sp, #8
 800eba4:	af00      	add	r7, sp, #0
 800eba6:	4603      	mov	r3, r0
 800eba8:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 800ebaa:	4b0b      	ldr	r3, [pc, #44]	; (800ebd8 <CallNvmDataChangeCallback+0x38>)
 800ebac:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d00c      	beq.n	800ebce <CallNvmDataChangeCallback+0x2e>
        ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 800ebb4:	4b08      	ldr	r3, [pc, #32]	; (800ebd8 <CallNvmDataChangeCallback+0x38>)
 800ebb6:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800ebba:	68db      	ldr	r3, [r3, #12]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d006      	beq.n	800ebce <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 800ebc0:	4b05      	ldr	r3, [pc, #20]	; (800ebd8 <CallNvmDataChangeCallback+0x38>)
 800ebc2:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800ebc6:	68db      	ldr	r3, [r3, #12]
 800ebc8:	88fa      	ldrh	r2, [r7, #6]
 800ebca:	4610      	mov	r0, r2
 800ebcc:	4798      	blx	r3
    }
}
 800ebce:	bf00      	nop
 800ebd0:	3708      	adds	r7, #8
 800ebd2:	46bd      	mov	sp, r7
 800ebd4:	bd80      	pop	{r7, pc}
 800ebd6:	bf00      	nop
 800ebd8:	200003e0 	.word	0x200003e0

0800ebdc <AckTimeoutRetriesProcess>:

static void AckTimeoutRetriesProcess( void )
{
 800ebdc:	b580      	push	{r7, lr}
 800ebde:	b084      	sub	sp, #16
 800ebe0:	af00      	add	r7, sp, #0
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 800ebe2:	4b1b      	ldr	r3, [pc, #108]	; (800ec50 <AckTimeoutRetriesProcess+0x74>)
 800ebe4:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 800ebe8:	4b19      	ldr	r3, [pc, #100]	; (800ec50 <AckTimeoutRetriesProcess+0x74>)
 800ebea:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
 800ebee:	429a      	cmp	r2, r3
 800ebf0:	d229      	bcs.n	800ec46 <AckTimeoutRetriesProcess+0x6a>
    {
        MacCtx.AckTimeoutRetriesCounter++;
 800ebf2:	4b17      	ldr	r3, [pc, #92]	; (800ec50 <AckTimeoutRetriesProcess+0x74>)
 800ebf4:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 800ebf8:	3301      	adds	r3, #1
 800ebfa:	b2da      	uxtb	r2, r3
 800ebfc:	4b14      	ldr	r3, [pc, #80]	; (800ec50 <AckTimeoutRetriesProcess+0x74>)
 800ebfe:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 800ec02:	4b13      	ldr	r3, [pc, #76]	; (800ec50 <AckTimeoutRetriesProcess+0x74>)
 800ec04:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 800ec08:	f003 0301 	and.w	r3, r3, #1
 800ec0c:	b2db      	uxtb	r3, r3
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d019      	beq.n	800ec46 <AckTimeoutRetriesProcess+0x6a>
        {
            GetPhyParams_t getPhy;
            PhyParam_t phyParam;

            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800ec12:	2322      	movs	r3, #34	; 0x22
 800ec14:	723b      	strb	r3, [r7, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800ec16:	4b0f      	ldr	r3, [pc, #60]	; (800ec54 <AckTimeoutRetriesProcess+0x78>)
 800ec18:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800ec1c:	72bb      	strb	r3, [r7, #10]
            getPhy.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800ec1e:	4b0d      	ldr	r3, [pc, #52]	; (800ec54 <AckTimeoutRetriesProcess+0x78>)
 800ec20:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800ec24:	727b      	strb	r3, [r7, #9]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ec26:	4b0b      	ldr	r3, [pc, #44]	; (800ec54 <AckTimeoutRetriesProcess+0x78>)
 800ec28:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ec2c:	f107 0208 	add.w	r2, r7, #8
 800ec30:	4611      	mov	r1, r2
 800ec32:	4618      	mov	r0, r3
 800ec34:	f003 fae2 	bl	80121fc <RegionGetPhyParam>
 800ec38:	4603      	mov	r3, r0
 800ec3a:	607b      	str	r3, [r7, #4]
            Nvm.MacGroup1.ChannelsDatarate = phyParam.Value;
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	b25a      	sxtb	r2, r3
 800ec40:	4b04      	ldr	r3, [pc, #16]	; (800ec54 <AckTimeoutRetriesProcess+0x78>)
 800ec42:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        }
    }
}
 800ec46:	bf00      	nop
 800ec48:	3710      	adds	r7, #16
 800ec4a:	46bd      	mov	sp, r7
 800ec4c:	bd80      	pop	{r7, pc}
 800ec4e:	bf00      	nop
 800ec50:	200003e0 	.word	0x200003e0
 800ec54:	200008e8 	.word	0x200008e8

0800ec58 <AckTimeoutRetriesFinalize>:

static void AckTimeoutRetriesFinalize( void )
{
 800ec58:	b580      	push	{r7, lr}
 800ec5a:	b084      	sub	sp, #16
 800ec5c:	af00      	add	r7, sp, #0
    if( MacCtx.McpsConfirm.AckReceived == false )
 800ec5e:	4b14      	ldr	r3, [pc, #80]	; (800ecb0 <AckTimeoutRetriesFinalize+0x58>)
 800ec60:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 800ec64:	f083 0301 	eor.w	r3, r3, #1
 800ec68:	b2db      	uxtb	r3, r3
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d015      	beq.n	800ec9a <AckTimeoutRetriesFinalize+0x42>
    {
        InitDefaultsParams_t params;
        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800ec6e:	2302      	movs	r3, #2
 800ec70:	733b      	strb	r3, [r7, #12]
        params.NvmGroup1 = &Nvm.RegionGroup1;
 800ec72:	4b10      	ldr	r3, [pc, #64]	; (800ecb4 <AckTimeoutRetriesFinalize+0x5c>)
 800ec74:	607b      	str	r3, [r7, #4]
        params.NvmGroup2 = &Nvm.RegionGroup2;
 800ec76:	4b10      	ldr	r3, [pc, #64]	; (800ecb8 <AckTimeoutRetriesFinalize+0x60>)
 800ec78:	60bb      	str	r3, [r7, #8]
        RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800ec7a:	4b10      	ldr	r3, [pc, #64]	; (800ecbc <AckTimeoutRetriesFinalize+0x64>)
 800ec7c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ec80:	1d3a      	adds	r2, r7, #4
 800ec82:	4611      	mov	r1, r2
 800ec84:	4618      	mov	r0, r3
 800ec86:	f003 fae3 	bl	8012250 <RegionInitDefaults>

        MacCtx.NodeAckRequested = false;
 800ec8a:	4b09      	ldr	r3, [pc, #36]	; (800ecb0 <AckTimeoutRetriesFinalize+0x58>)
 800ec8c:	2200      	movs	r2, #0
 800ec8e:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        MacCtx.McpsConfirm.AckReceived = false;
 800ec92:	4b07      	ldr	r3, [pc, #28]	; (800ecb0 <AckTimeoutRetriesFinalize+0x58>)
 800ec94:	2200      	movs	r2, #0
 800ec96:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
    }
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 800ec9a:	4b05      	ldr	r3, [pc, #20]	; (800ecb0 <AckTimeoutRetriesFinalize+0x58>)
 800ec9c:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 800eca0:	4b03      	ldr	r3, [pc, #12]	; (800ecb0 <AckTimeoutRetriesFinalize+0x58>)
 800eca2:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
}
 800eca6:	bf00      	nop
 800eca8:	3710      	adds	r7, #16
 800ecaa:	46bd      	mov	sp, r7
 800ecac:	bd80      	pop	{r7, pc}
 800ecae:	bf00      	nop
 800ecb0:	200003e0 	.word	0x200003e0
 800ecb4:	20000ac0 	.word	0x20000ac0
 800ecb8:	20000adc 	.word	0x20000adc
 800ecbc:	200008e8 	.word	0x200008e8

0800ecc0 <IsRequestPending>:

static uint8_t IsRequestPending( void )
{
 800ecc0:	b480      	push	{r7}
 800ecc2:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 800ecc4:	4b0b      	ldr	r3, [pc, #44]	; (800ecf4 <IsRequestPending+0x34>)
 800ecc6:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800ecca:	f003 0304 	and.w	r3, r3, #4
 800ecce:	b2db      	uxtb	r3, r3
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d107      	bne.n	800ece4 <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 800ecd4:	4b07      	ldr	r3, [pc, #28]	; (800ecf4 <IsRequestPending+0x34>)
 800ecd6:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800ecda:	f003 0301 	and.w	r3, r3, #1
 800ecde:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d001      	beq.n	800ece8 <IsRequestPending+0x28>
    {
        return 1;
 800ece4:	2301      	movs	r3, #1
 800ece6:	e000      	b.n	800ecea <IsRequestPending+0x2a>
    }
    return 0;
 800ece8:	2300      	movs	r3, #0
}
 800ecea:	4618      	mov	r0, r3
 800ecec:	46bd      	mov	sp, r7
 800ecee:	bc80      	pop	{r7}
 800ecf0:	4770      	bx	lr
 800ecf2:	bf00      	nop
 800ecf4:	200003e0 	.word	0x200003e0

0800ecf8 <LoRaMacInitialization>:


LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 800ecf8:	b590      	push	{r4, r7, lr}
 800ecfa:	b08f      	sub	sp, #60	; 0x3c
 800ecfc:	af02      	add	r7, sp, #8
 800ecfe:	6178      	str	r0, [r7, #20]
 800ed00:	6139      	str	r1, [r7, #16]
 800ed02:	4613      	mov	r3, r2
 800ed04:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 800ed06:	697b      	ldr	r3, [r7, #20]
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d002      	beq.n	800ed12 <LoRaMacInitialization+0x1a>
 800ed0c:	693b      	ldr	r3, [r7, #16]
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d101      	bne.n	800ed16 <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800ed12:	2303      	movs	r3, #3
 800ed14:	e275      	b.n	800f202 <LoRaMacInitialization+0x50a>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800ed16:	697b      	ldr	r3, [r7, #20]
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d00b      	beq.n	800ed36 <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 800ed1e:	697b      	ldr	r3, [r7, #20]
 800ed20:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d007      	beq.n	800ed36 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 800ed26:	697b      	ldr	r3, [r7, #20]
 800ed28:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d003      	beq.n	800ed36 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 800ed2e:	697b      	ldr	r3, [r7, #20]
 800ed30:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d101      	bne.n	800ed3a <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800ed36:	2303      	movs	r3, #3
 800ed38:	e263      	b.n	800f202 <LoRaMacInitialization+0x50a>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 800ed3a:	7bfb      	ldrb	r3, [r7, #15]
 800ed3c:	4618      	mov	r0, r3
 800ed3e:	f003 fa4d 	bl	80121dc <RegionIsActive>
 800ed42:	4603      	mov	r3, r0
 800ed44:	f083 0301 	eor.w	r3, r3, #1
 800ed48:	b2db      	uxtb	r3, r3
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d001      	beq.n	800ed52 <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 800ed4e:	2309      	movs	r3, #9
 800ed50:	e257      	b.n	800f202 <LoRaMacInitialization+0x50a>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 800ed52:	6978      	ldr	r0, [r7, #20]
 800ed54:	f001 fef6 	bl	8010b44 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 800ed58:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800ed5c:	2100      	movs	r1, #0
 800ed5e:	48c7      	ldr	r0, [pc, #796]	; (800f07c <LoRaMacInitialization+0x384>)
 800ed60:	f005 fd4e 	bl	8014800 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 800ed64:	f44f 62a1 	mov.w	r2, #1288	; 0x508
 800ed68:	2100      	movs	r1, #0
 800ed6a:	48c5      	ldr	r0, [pc, #788]	; (800f080 <LoRaMacInitialization+0x388>)
 800ed6c:	f005 fd48 	bl	8014800 <memset1>

    // Set non zero variables to its default value
    MacCtx.AckTimeoutRetriesCounter = 1;
 800ed70:	4bc3      	ldr	r3, [pc, #780]	; (800f080 <LoRaMacInitialization+0x388>)
 800ed72:	2201      	movs	r2, #1
 800ed74:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    MacCtx.AckTimeoutRetries = 1;
 800ed78:	4bc1      	ldr	r3, [pc, #772]	; (800f080 <LoRaMacInitialization+0x388>)
 800ed7a:	2201      	movs	r2, #1
 800ed7c:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    Nvm.MacGroup2.Region = region;
 800ed80:	4abe      	ldr	r2, [pc, #760]	; (800f07c <LoRaMacInitialization+0x384>)
 800ed82:	7bfb      	ldrb	r3, [r7, #15]
 800ed84:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 800ed88:	4bbc      	ldr	r3, [pc, #752]	; (800f07c <LoRaMacInitialization+0x384>)
 800ed8a:	2200      	movs	r2, #0
 800ed8c:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
    Nvm.MacGroup2.MacParams.RepeaterSupport = false; /* ST_WORKAROUND: Keep repeater feature */
 800ed90:	4bba      	ldr	r3, [pc, #744]	; (800f07c <LoRaMacInitialization+0x384>)
 800ed92:	2200      	movs	r2, #0
 800ed94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 800ed98:	4bb8      	ldr	r3, [pc, #736]	; (800f07c <LoRaMacInitialization+0x384>)
 800ed9a:	4aba      	ldr	r2, [pc, #744]	; (800f084 <LoRaMacInitialization+0x38c>)
 800ed9c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800eda0:	230f      	movs	r3, #15
 800eda2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800eda6:	4bb5      	ldr	r3, [pc, #724]	; (800f07c <LoRaMacInitialization+0x384>)
 800eda8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800edac:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800edb0:	4611      	mov	r1, r2
 800edb2:	4618      	mov	r0, r3
 800edb4:	f003 fa22 	bl	80121fc <RegionGetPhyParam>
 800edb8:	4603      	mov	r3, r0
 800edba:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 800edbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	bf14      	ite	ne
 800edc2:	2301      	movne	r3, #1
 800edc4:	2300      	moveq	r3, #0
 800edc6:	b2da      	uxtb	r2, r3
 800edc8:	4bac      	ldr	r3, [pc, #688]	; (800f07c <LoRaMacInitialization+0x384>)
 800edca:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100

    getPhy.Attribute = PHY_DEF_TX_POWER;
 800edce:	230a      	movs	r3, #10
 800edd0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800edd4:	4ba9      	ldr	r3, [pc, #676]	; (800f07c <LoRaMacInitialization+0x384>)
 800edd6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800edda:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800edde:	4611      	mov	r1, r2
 800ede0:	4618      	mov	r0, r3
 800ede2:	f003 fa0b 	bl	80121fc <RegionGetPhyParam>
 800ede6:	4603      	mov	r3, r0
 800ede8:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 800edea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edec:	b25a      	sxtb	r2, r3
 800edee:	4ba3      	ldr	r3, [pc, #652]	; (800f07c <LoRaMacInitialization+0x384>)
 800edf0:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4

    getPhy.Attribute = PHY_DEF_TX_DR;
 800edf4:	2306      	movs	r3, #6
 800edf6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800edfa:	4ba0      	ldr	r3, [pc, #640]	; (800f07c <LoRaMacInitialization+0x384>)
 800edfc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ee00:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800ee04:	4611      	mov	r1, r2
 800ee06:	4618      	mov	r0, r3
 800ee08:	f003 f9f8 	bl	80121fc <RegionGetPhyParam>
 800ee0c:	4603      	mov	r3, r0
 800ee0e:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 800ee10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee12:	b25a      	sxtb	r2, r3
 800ee14:	4b99      	ldr	r3, [pc, #612]	; (800f07c <LoRaMacInitialization+0x384>)
 800ee16:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 800ee1a:	2310      	movs	r3, #16
 800ee1c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ee20:	4b96      	ldr	r3, [pc, #600]	; (800f07c <LoRaMacInitialization+0x384>)
 800ee22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ee26:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800ee2a:	4611      	mov	r1, r2
 800ee2c:	4618      	mov	r0, r3
 800ee2e:	f003 f9e5 	bl	80121fc <RegionGetPhyParam>
 800ee32:	4603      	mov	r3, r0
 800ee34:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 800ee36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee38:	4a90      	ldr	r2, [pc, #576]	; (800f07c <LoRaMacInitialization+0x384>)
 800ee3a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 800ee3e:	2311      	movs	r3, #17
 800ee40:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ee44:	4b8d      	ldr	r3, [pc, #564]	; (800f07c <LoRaMacInitialization+0x384>)
 800ee46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ee4a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800ee4e:	4611      	mov	r1, r2
 800ee50:	4618      	mov	r0, r3
 800ee52:	f003 f9d3 	bl	80121fc <RegionGetPhyParam>
 800ee56:	4603      	mov	r3, r0
 800ee58:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 800ee5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee5c:	4a87      	ldr	r2, [pc, #540]	; (800f07c <LoRaMacInitialization+0x384>)
 800ee5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 800ee62:	2312      	movs	r3, #18
 800ee64:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ee68:	4b84      	ldr	r3, [pc, #528]	; (800f07c <LoRaMacInitialization+0x384>)
 800ee6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ee6e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800ee72:	4611      	mov	r1, r2
 800ee74:	4618      	mov	r0, r3
 800ee76:	f003 f9c1 	bl	80121fc <RegionGetPhyParam>
 800ee7a:	4603      	mov	r3, r0
 800ee7c:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 800ee7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee80:	4a7e      	ldr	r2, [pc, #504]	; (800f07c <LoRaMacInitialization+0x384>)
 800ee82:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 800ee86:	2313      	movs	r3, #19
 800ee88:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ee8c:	4b7b      	ldr	r3, [pc, #492]	; (800f07c <LoRaMacInitialization+0x384>)
 800ee8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ee92:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800ee96:	4611      	mov	r1, r2
 800ee98:	4618      	mov	r0, r3
 800ee9a:	f003 f9af 	bl	80121fc <RegionGetPhyParam>
 800ee9e:	4603      	mov	r3, r0
 800eea0:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 800eea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eea4:	4a75      	ldr	r2, [pc, #468]	; (800f07c <LoRaMacInitialization+0x384>)
 800eea6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 800eeaa:	2314      	movs	r3, #20
 800eeac:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800eeb0:	4b72      	ldr	r3, [pc, #456]	; (800f07c <LoRaMacInitialization+0x384>)
 800eeb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800eeb6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800eeba:	4611      	mov	r1, r2
 800eebc:	4618      	mov	r0, r3
 800eebe:	f003 f99d 	bl	80121fc <RegionGetPhyParam>
 800eec2:	4603      	mov	r3, r0
 800eec4:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 800eec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eec8:	4a6c      	ldr	r2, [pc, #432]	; (800f07c <LoRaMacInitialization+0x384>)
 800eeca:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 800eece:	2317      	movs	r3, #23
 800eed0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800eed4:	4b69      	ldr	r3, [pc, #420]	; (800f07c <LoRaMacInitialization+0x384>)
 800eed6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800eeda:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800eede:	4611      	mov	r1, r2
 800eee0:	4618      	mov	r0, r3
 800eee2:	f003 f98b 	bl	80121fc <RegionGetPhyParam>
 800eee6:	4603      	mov	r3, r0
 800eee8:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 800eeea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eeec:	b2da      	uxtb	r2, r3
 800eeee:	4b63      	ldr	r3, [pc, #396]	; (800f07c <LoRaMacInitialization+0x384>)
 800eef0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 800eef4:	2318      	movs	r3, #24
 800eef6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800eefa:	4b60      	ldr	r3, [pc, #384]	; (800f07c <LoRaMacInitialization+0x384>)
 800eefc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ef00:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800ef04:	4611      	mov	r1, r2
 800ef06:	4618      	mov	r0, r3
 800ef08:	f003 f978 	bl	80121fc <RegionGetPhyParam>
 800ef0c:	4603      	mov	r3, r0
 800ef0e:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 800ef10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef12:	4a5a      	ldr	r2, [pc, #360]	; (800f07c <LoRaMacInitialization+0x384>)
 800ef14:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 800ef18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef1a:	4a58      	ldr	r2, [pc, #352]	; (800f07c <LoRaMacInitialization+0x384>)
 800ef1c:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

    getPhy.Attribute = PHY_DEF_RX2_DR;
 800ef20:	2319      	movs	r3, #25
 800ef22:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ef26:	4b55      	ldr	r3, [pc, #340]	; (800f07c <LoRaMacInitialization+0x384>)
 800ef28:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ef2c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800ef30:	4611      	mov	r1, r2
 800ef32:	4618      	mov	r0, r3
 800ef34:	f003 f962 	bl	80121fc <RegionGetPhyParam>
 800ef38:	4603      	mov	r3, r0
 800ef3a:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 800ef3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef3e:	b2da      	uxtb	r2, r3
 800ef40:	4b4e      	ldr	r3, [pc, #312]	; (800f07c <LoRaMacInitialization+0x384>)
 800ef42:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 800ef46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef48:	b2da      	uxtb	r2, r3
 800ef4a:	4b4c      	ldr	r3, [pc, #304]	; (800f07c <LoRaMacInitialization+0x384>)
 800ef4c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 800ef50:	231e      	movs	r3, #30
 800ef52:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ef56:	4b49      	ldr	r3, [pc, #292]	; (800f07c <LoRaMacInitialization+0x384>)
 800ef58:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ef5c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800ef60:	4611      	mov	r1, r2
 800ef62:	4618      	mov	r0, r3
 800ef64:	f003 f94a 	bl	80121fc <RegionGetPhyParam>
 800ef68:	4603      	mov	r3, r0
 800ef6a:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 800ef6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef6e:	b2da      	uxtb	r2, r3
 800ef70:	4b42      	ldr	r3, [pc, #264]	; (800f07c <LoRaMacInitialization+0x384>)
 800ef72:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 800ef76:	231f      	movs	r3, #31
 800ef78:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ef7c:	4b3f      	ldr	r3, [pc, #252]	; (800f07c <LoRaMacInitialization+0x384>)
 800ef7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ef82:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800ef86:	4611      	mov	r1, r2
 800ef88:	4618      	mov	r0, r3
 800ef8a:	f003 f937 	bl	80121fc <RegionGetPhyParam>
 800ef8e:	4603      	mov	r3, r0
 800ef90:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 800ef92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef94:	b2da      	uxtb	r2, r3
 800ef96:	4b39      	ldr	r3, [pc, #228]	; (800f07c <LoRaMacInitialization+0x384>)
 800ef98:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 800ef9c:	2320      	movs	r3, #32
 800ef9e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800efa2:	4b36      	ldr	r3, [pc, #216]	; (800f07c <LoRaMacInitialization+0x384>)
 800efa4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800efa8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800efac:	4611      	mov	r1, r2
 800efae:	4618      	mov	r0, r3
 800efb0:	f003 f924 	bl	80121fc <RegionGetPhyParam>
 800efb4:	4603      	mov	r3, r0
 800efb6:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 800efb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efba:	4a30      	ldr	r2, [pc, #192]	; (800f07c <LoRaMacInitialization+0x384>)
 800efbc:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 800efc0:	2321      	movs	r3, #33	; 0x21
 800efc2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800efc6:	4b2d      	ldr	r3, [pc, #180]	; (800f07c <LoRaMacInitialization+0x384>)
 800efc8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800efcc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800efd0:	4611      	mov	r1, r2
 800efd2:	4618      	mov	r0, r3
 800efd4:	f003 f912 	bl	80121fc <RegionGetPhyParam>
 800efd8:	4603      	mov	r3, r0
 800efda:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 800efdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efde:	4a27      	ldr	r2, [pc, #156]	; (800f07c <LoRaMacInitialization+0x384>)
 800efe0:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 800efe4:	230b      	movs	r3, #11
 800efe6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800efea:	4b24      	ldr	r3, [pc, #144]	; (800f07c <LoRaMacInitialization+0x384>)
 800efec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800eff0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800eff4:	4611      	mov	r1, r2
 800eff6:	4618      	mov	r0, r3
 800eff8:	f003 f900 	bl	80121fc <RegionGetPhyParam>
 800effc:	4603      	mov	r3, r0
 800effe:	627b      	str	r3, [r7, #36]	; 0x24
    MacCtx.AdrAckLimit = phyParam.Value;
 800f000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f002:	b29a      	uxth	r2, r3
 800f004:	4b1e      	ldr	r3, [pc, #120]	; (800f080 <LoRaMacInitialization+0x388>)
 800f006:	f8a3 23f4 	strh.w	r2, [r3, #1012]	; 0x3f4

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 800f00a:	230c      	movs	r3, #12
 800f00c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800f010:	4b1a      	ldr	r3, [pc, #104]	; (800f07c <LoRaMacInitialization+0x384>)
 800f012:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f016:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800f01a:	4611      	mov	r1, r2
 800f01c:	4618      	mov	r0, r3
 800f01e:	f003 f8ed 	bl	80121fc <RegionGetPhyParam>
 800f022:	4603      	mov	r3, r0
 800f024:	627b      	str	r3, [r7, #36]	; 0x24
    MacCtx.AdrAckDelay = phyParam.Value;
 800f026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f028:	b29a      	uxth	r2, r3
 800f02a:	4b15      	ldr	r3, [pc, #84]	; (800f080 <LoRaMacInitialization+0x388>)
 800f02c:	f8a3 23f6 	strh.w	r2, [r3, #1014]	; 0x3f6

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 800f030:	4b12      	ldr	r3, [pc, #72]	; (800f07c <LoRaMacInitialization+0x384>)
 800f032:	2201      	movs	r2, #1
 800f034:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 800f038:	4b10      	ldr	r3, [pc, #64]	; (800f07c <LoRaMacInitialization+0x384>)
 800f03a:	220a      	movs	r2, #10
 800f03c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 800f040:	4b0e      	ldr	r3, [pc, #56]	; (800f07c <LoRaMacInitialization+0x384>)
 800f042:	2206      	movs	r2, #6
 800f044:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 800f048:	4b0c      	ldr	r3, [pc, #48]	; (800f07c <LoRaMacInitialization+0x384>)
 800f04a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f04e:	4a0b      	ldr	r2, [pc, #44]	; (800f07c <LoRaMacInitialization+0x384>)
 800f050:	6453      	str	r3, [r2, #68]	; 0x44
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 800f052:	4b0a      	ldr	r3, [pc, #40]	; (800f07c <LoRaMacInitialization+0x384>)
 800f054:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 800f058:	4b08      	ldr	r3, [pc, #32]	; (800f07c <LoRaMacInitialization+0x384>)
 800f05a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 800f05e:	4b07      	ldr	r3, [pc, #28]	; (800f07c <LoRaMacInitialization+0x384>)
 800f060:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f064:	4a05      	ldr	r2, [pc, #20]	; (800f07c <LoRaMacInitialization+0x384>)
 800f066:	64d3      	str	r3, [r2, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 800f068:	4b04      	ldr	r3, [pc, #16]	; (800f07c <LoRaMacInitialization+0x384>)
 800f06a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f06e:	4a03      	ldr	r2, [pc, #12]	; (800f07c <LoRaMacInitialization+0x384>)
 800f070:	6513      	str	r3, [r2, #80]	; 0x50
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 800f072:	4b02      	ldr	r3, [pc, #8]	; (800f07c <LoRaMacInitialization+0x384>)
 800f074:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f078:	e006      	b.n	800f088 <LoRaMacInitialization+0x390>
 800f07a:	bf00      	nop
 800f07c:	200008e8 	.word	0x200008e8
 800f080:	200003e0 	.word	0x200003e0
 800f084:	01000300 	.word	0x01000300
 800f088:	4a60      	ldr	r2, [pc, #384]	; (800f20c <LoRaMacInitialization+0x514>)
 800f08a:	6553      	str	r3, [r2, #84]	; 0x54
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 800f08c:	4b5f      	ldr	r3, [pc, #380]	; (800f20c <LoRaMacInitialization+0x514>)
 800f08e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800f092:	4a5e      	ldr	r2, [pc, #376]	; (800f20c <LoRaMacInitialization+0x514>)
 800f094:	6593      	str	r3, [r2, #88]	; 0x58
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 800f096:	4b5d      	ldr	r3, [pc, #372]	; (800f20c <LoRaMacInitialization+0x514>)
 800f098:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800f09c:	4a5b      	ldr	r2, [pc, #364]	; (800f20c <LoRaMacInitialization+0x514>)
 800f09e:	65d3      	str	r3, [r2, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 800f0a0:	4b5a      	ldr	r3, [pc, #360]	; (800f20c <LoRaMacInitialization+0x514>)
 800f0a2:	f893 20a0 	ldrb.w	r2, [r3, #160]	; 0xa0
 800f0a6:	4b59      	ldr	r3, [pc, #356]	; (800f20c <LoRaMacInitialization+0x514>)
 800f0a8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 800f0ac:	2300      	movs	r3, #0
 800f0ae:	f887 3020 	strb.w	r3, [r7, #32]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800f0b2:	4b57      	ldr	r3, [pc, #348]	; (800f210 <LoRaMacInitialization+0x518>)
 800f0b4:	61bb      	str	r3, [r7, #24]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800f0b6:	4b57      	ldr	r3, [pc, #348]	; (800f214 <LoRaMacInitialization+0x51c>)
 800f0b8:	61fb      	str	r3, [r7, #28]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800f0ba:	4b54      	ldr	r3, [pc, #336]	; (800f20c <LoRaMacInitialization+0x514>)
 800f0bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f0c0:	f107 0218 	add.w	r2, r7, #24
 800f0c4:	4611      	mov	r1, r2
 800f0c6:	4618      	mov	r0, r3
 800f0c8:	f003 f8c2 	bl	8012250 <RegionInitDefaults>

    MacCtx.MacCallbacks = callbacks;
 800f0cc:	4a52      	ldr	r2, [pc, #328]	; (800f218 <LoRaMacInitialization+0x520>)
 800f0ce:	693b      	ldr	r3, [r7, #16]
 800f0d0:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
    ResetMacParameters( );
 800f0d4:	f7ff f85a 	bl	800e18c <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 800f0d8:	4b4c      	ldr	r3, [pc, #304]	; (800f20c <LoRaMacInitialization+0x514>)
 800f0da:	2201      	movs	r2, #1
 800f0dc:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd

    MacCtx.MacPrimitives = primitives;
 800f0e0:	4a4d      	ldr	r2, [pc, #308]	; (800f218 <LoRaMacInitialization+0x520>)
 800f0e2:	697b      	ldr	r3, [r7, #20]
 800f0e4:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 800f0e8:	4b4b      	ldr	r3, [pc, #300]	; (800f218 <LoRaMacInitialization+0x520>)
 800f0ea:	2200      	movs	r2, #0
 800f0ec:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
    MacCtx.MacState = LORAMAC_STOPPED;
 800f0f0:	4b49      	ldr	r3, [pc, #292]	; (800f218 <LoRaMacInitialization+0x520>)
 800f0f2:	2201      	movs	r2, #1
 800f0f4:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 800f0f8:	4b44      	ldr	r3, [pc, #272]	; (800f20c <LoRaMacInitialization+0x514>)
 800f0fa:	2200      	movs	r2, #0
 800f0fc:	62da      	str	r2, [r3, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 800f0fe:	4b43      	ldr	r3, [pc, #268]	; (800f20c <LoRaMacInitialization+0x514>)
 800f100:	2200      	movs	r2, #0
 800f102:	631a      	str	r2, [r3, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 800f104:	2300      	movs	r3, #0
 800f106:	9300      	str	r3, [sp, #0]
 800f108:	4b44      	ldr	r3, [pc, #272]	; (800f21c <LoRaMacInitialization+0x524>)
 800f10a:	2200      	movs	r2, #0
 800f10c:	f04f 31ff 	mov.w	r1, #4294967295
 800f110:	4843      	ldr	r0, [pc, #268]	; (800f220 <LoRaMacInitialization+0x528>)
 800f112:	f009 fa87 	bl	8018624 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 800f116:	2300      	movs	r3, #0
 800f118:	9300      	str	r3, [sp, #0]
 800f11a:	4b42      	ldr	r3, [pc, #264]	; (800f224 <LoRaMacInitialization+0x52c>)
 800f11c:	2200      	movs	r2, #0
 800f11e:	f04f 31ff 	mov.w	r1, #4294967295
 800f122:	4841      	ldr	r0, [pc, #260]	; (800f228 <LoRaMacInitialization+0x530>)
 800f124:	f009 fa7e 	bl	8018624 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 800f128:	2300      	movs	r3, #0
 800f12a:	9300      	str	r3, [sp, #0]
 800f12c:	4b3f      	ldr	r3, [pc, #252]	; (800f22c <LoRaMacInitialization+0x534>)
 800f12e:	2200      	movs	r2, #0
 800f130:	f04f 31ff 	mov.w	r1, #4294967295
 800f134:	483e      	ldr	r0, [pc, #248]	; (800f230 <LoRaMacInitialization+0x538>)
 800f136:	f009 fa75 	bl	8018624 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 800f13a:	2300      	movs	r3, #0
 800f13c:	9300      	str	r3, [sp, #0]
 800f13e:	4b3d      	ldr	r3, [pc, #244]	; (800f234 <LoRaMacInitialization+0x53c>)
 800f140:	2200      	movs	r2, #0
 800f142:	f04f 31ff 	mov.w	r1, #4294967295
 800f146:	483c      	ldr	r0, [pc, #240]	; (800f238 <LoRaMacInitialization+0x540>)
 800f148:	f009 fa6c 	bl	8018624 <UTIL_TIMER_Create>

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 800f14c:	4c2f      	ldr	r4, [pc, #188]	; (800f20c <LoRaMacInitialization+0x514>)
 800f14e:	463b      	mov	r3, r7
 800f150:	4618      	mov	r0, r3
 800f152:	f008 fdef 	bl	8017d34 <SysTimeGetMcuTime>
 800f156:	f504 7382 	add.w	r3, r4, #260	; 0x104
 800f15a:	463a      	mov	r2, r7
 800f15c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f160:	e883 0003 	stmia.w	r3, {r0, r1}

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 800f164:	4b2c      	ldr	r3, [pc, #176]	; (800f218 <LoRaMacInitialization+0x520>)
 800f166:	4a35      	ldr	r2, [pc, #212]	; (800f23c <LoRaMacInitialization+0x544>)
 800f168:	f8c3 234c 	str.w	r2, [r3, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 800f16c:	4b2a      	ldr	r3, [pc, #168]	; (800f218 <LoRaMacInitialization+0x520>)
 800f16e:	4a34      	ldr	r2, [pc, #208]	; (800f240 <LoRaMacInitialization+0x548>)
 800f170:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 800f174:	4b28      	ldr	r3, [pc, #160]	; (800f218 <LoRaMacInitialization+0x520>)
 800f176:	4a33      	ldr	r2, [pc, #204]	; (800f244 <LoRaMacInitialization+0x54c>)
 800f178:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 800f17c:	4b26      	ldr	r3, [pc, #152]	; (800f218 <LoRaMacInitialization+0x520>)
 800f17e:	4a32      	ldr	r2, [pc, #200]	; (800f248 <LoRaMacInitialization+0x550>)
 800f180:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 800f184:	4b24      	ldr	r3, [pc, #144]	; (800f218 <LoRaMacInitialization+0x520>)
 800f186:	4a31      	ldr	r2, [pc, #196]	; (800f24c <LoRaMacInitialization+0x554>)
 800f188:	f8c3 2358 	str.w	r2, [r3, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 800f18c:	4b30      	ldr	r3, [pc, #192]	; (800f250 <LoRaMacInitialization+0x558>)
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	4830      	ldr	r0, [pc, #192]	; (800f254 <LoRaMacInitialization+0x55c>)
 800f192:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement, callbacks->GetUniqueId ) != SECURE_ELEMENT_SUCCESS ) /* ST_WORKAROUND: Add unique ID callback as input parameter */
 800f194:	693b      	ldr	r3, [r7, #16]
 800f196:	689b      	ldr	r3, [r3, #8]
 800f198:	4619      	mov	r1, r3
 800f19a:	482f      	ldr	r0, [pc, #188]	; (800f258 <LoRaMacInitialization+0x560>)
 800f19c:	f7fa ff4e 	bl	800a03c <SecureElementInit>
 800f1a0:	4603      	mov	r3, r0
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d001      	beq.n	800f1aa <LoRaMacInitialization+0x4b2>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800f1a6:	2311      	movs	r3, #17
 800f1a8:	e02b      	b.n	800f202 <LoRaMacInitialization+0x50a>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 800f1aa:	4818      	ldr	r0, [pc, #96]	; (800f20c <LoRaMacInitialization+0x514>)
 800f1ac:	f002 f950 	bl	8011450 <LoRaMacCryptoInit>
 800f1b0:	4603      	mov	r3, r0
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d001      	beq.n	800f1ba <LoRaMacInitialization+0x4c2>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800f1b6:	2311      	movs	r3, #17
 800f1b8:	e023      	b.n	800f202 <LoRaMacInitialization+0x50a>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 800f1ba:	f001 fa95 	bl	80106e8 <LoRaMacCommandsInit>
 800f1be:	4603      	mov	r3, r0
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d001      	beq.n	800f1c8 <LoRaMacInitialization+0x4d0>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800f1c4:	2313      	movs	r3, #19
 800f1c6:	e01c      	b.n	800f202 <LoRaMacInitialization+0x50a>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 800f1c8:	4824      	ldr	r0, [pc, #144]	; (800f25c <LoRaMacInitialization+0x564>)
 800f1ca:	f002 f9ff 	bl	80115cc <LoRaMacCryptoSetMulticastReference>
 800f1ce:	4603      	mov	r3, r0
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d001      	beq.n	800f1d8 <LoRaMacInitialization+0x4e0>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800f1d4:	2311      	movs	r3, #17
 800f1d6:	e014      	b.n	800f202 <LoRaMacInitialization+0x50a>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 800f1d8:	4b1d      	ldr	r3, [pc, #116]	; (800f250 <LoRaMacInitialization+0x558>)
 800f1da:	695b      	ldr	r3, [r3, #20]
 800f1dc:	4798      	blx	r3
 800f1de:	4603      	mov	r3, r0
 800f1e0:	4618      	mov	r0, r3
 800f1e2:	f005 faad 	bl	8014740 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800f1e6:	4b1a      	ldr	r3, [pc, #104]	; (800f250 <LoRaMacInitialization+0x558>)
 800f1e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f1ea:	4a08      	ldr	r2, [pc, #32]	; (800f20c <LoRaMacInitialization+0x514>)
 800f1ec:	f892 20fd 	ldrb.w	r2, [r2, #253]	; 0xfd
 800f1f0:	4610      	mov	r0, r2
 800f1f2:	4798      	blx	r3
    Radio.Sleep( );
 800f1f4:	4b16      	ldr	r3, [pc, #88]	; (800f250 <LoRaMacInitialization+0x558>)
 800f1f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1f8:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800f1fa:	2001      	movs	r0, #1
 800f1fc:	f7fd faaa 	bl	800c754 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 800f200:	2300      	movs	r3, #0
}
 800f202:	4618      	mov	r0, r3
 800f204:	3734      	adds	r7, #52	; 0x34
 800f206:	46bd      	mov	sp, r7
 800f208:	bd90      	pop	{r4, r7, pc}
 800f20a:	bf00      	nop
 800f20c:	200008e8 	.word	0x200008e8
 800f210:	20000ac0 	.word	0x20000ac0
 800f214:	20000adc 	.word	0x20000adc
 800f218:	200003e0 	.word	0x200003e0
 800f21c:	0800ccdd 	.word	0x0800ccdd
 800f220:	20000748 	.word	0x20000748
 800f224:	0800cd51 	.word	0x0800cd51
 800f228:	20000760 	.word	0x20000760
 800f22c:	0800cdbd 	.word	0x0800cdbd
 800f230:	20000778 	.word	0x20000778
 800f234:	0800ce31 	.word	0x0800ce31
 800f238:	200007d8 	.word	0x200007d8
 800f23c:	0800b8e1 	.word	0x0800b8e1
 800f240:	0800b959 	.word	0x0800b959
 800f244:	0800ba31 	.word	0x0800ba31
 800f248:	0800b9e5 	.word	0x0800b9e5
 800f24c:	0800ba6d 	.word	0x0800ba6d
 800f250:	08019c7c 	.word	0x08019c7c
 800f254:	2000072c 	.word	0x2000072c
 800f258:	20000a00 	.word	0x20000a00
 800f25c:	200009b8 	.word	0x200009b8

0800f260 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 800f260:	b480      	push	{r7}
 800f262:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 800f264:	4b04      	ldr	r3, [pc, #16]	; (800f278 <LoRaMacStart+0x18>)
 800f266:	2200      	movs	r2, #0
 800f268:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    return LORAMAC_STATUS_OK;
 800f26c:	2300      	movs	r3, #0
}
 800f26e:	4618      	mov	r0, r3
 800f270:	46bd      	mov	sp, r7
 800f272:	bc80      	pop	{r7}
 800f274:	4770      	bx	lr
 800f276:	bf00      	nop
 800f278:	200003e0 	.word	0x200003e0

0800f27c <LoRaMacQueryTxPossible>:
    }
    return LORAMAC_STATUS_BUSY;
}

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 800f27c:	b580      	push	{r7, lr}
 800f27e:	b08a      	sub	sp, #40	; 0x28
 800f280:	af00      	add	r7, sp, #0
 800f282:	4603      	mov	r3, r0
 800f284:	6039      	str	r1, [r7, #0]
 800f286:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800f288:	4b3e      	ldr	r3, [pc, #248]	; (800f384 <LoRaMacQueryTxPossible+0x108>)
 800f28a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f28c:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800f28e:	4b3d      	ldr	r3, [pc, #244]	; (800f384 <LoRaMacQueryTxPossible+0x108>)
 800f290:	f993 30c5 	ldrsb.w	r3, [r3, #197]	; 0xc5
 800f294:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800f296:	4b3b      	ldr	r3, [pc, #236]	; (800f384 <LoRaMacQueryTxPossible+0x108>)
 800f298:	f993 30c4 	ldrsb.w	r3, [r3, #196]	; 0xc4
 800f29c:	73bb      	strb	r3, [r7, #14]
    size_t macCmdsSize = 0;
 800f29e:	2300      	movs	r3, #0
 800f2a0:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 800f2a2:	683b      	ldr	r3, [r7, #0]
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d101      	bne.n	800f2ac <LoRaMacQueryTxPossible+0x30>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800f2a8:	2303      	movs	r3, #3
 800f2aa:	e066      	b.n	800f37a <LoRaMacQueryTxPossible+0xfe>
    }

    // Setup ADR request
    adrNext.Version = Nvm.MacGroup2.Version;
 800f2ac:	4b35      	ldr	r3, [pc, #212]	; (800f384 <LoRaMacQueryTxPossible+0x108>)
 800f2ae:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800f2b2:	617b      	str	r3, [r7, #20]
    adrNext.UpdateChanMask = false;
 800f2b4:	2300      	movs	r3, #0
 800f2b6:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800f2b8:	4b32      	ldr	r3, [pc, #200]	; (800f384 <LoRaMacQueryTxPossible+0x108>)
 800f2ba:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 800f2be:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800f2c0:	4b30      	ldr	r3, [pc, #192]	; (800f384 <LoRaMacQueryTxPossible+0x108>)
 800f2c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2c4:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800f2c6:	4b30      	ldr	r3, [pc, #192]	; (800f388 <LoRaMacQueryTxPossible+0x10c>)
 800f2c8:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	; 0x3f4
 800f2cc:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 800f2ce:	4b2e      	ldr	r3, [pc, #184]	; (800f388 <LoRaMacQueryTxPossible+0x10c>)
 800f2d0:	f8b3 33f6 	ldrh.w	r3, [r3, #1014]	; 0x3f6
 800f2d4:	847b      	strh	r3, [r7, #34]	; 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800f2d6:	4b2b      	ldr	r3, [pc, #172]	; (800f384 <LoRaMacQueryTxPossible+0x108>)
 800f2d8:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800f2dc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800f2e0:	4b28      	ldr	r3, [pc, #160]	; (800f384 <LoRaMacQueryTxPossible+0x108>)
 800f2e2:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800f2e6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800f2ea:	4b26      	ldr	r3, [pc, #152]	; (800f384 <LoRaMacQueryTxPossible+0x108>)
 800f2ec:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800f2f0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 800f2f4:	4b23      	ldr	r3, [pc, #140]	; (800f384 <LoRaMacQueryTxPossible+0x108>)
 800f2f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f2fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 800f2fe:	f107 0310 	add.w	r3, r7, #16
 800f302:	f107 020e 	add.w	r2, r7, #14
 800f306:	f107 010f 	add.w	r1, r7, #15
 800f30a:	f107 0014 	add.w	r0, r7, #20
 800f30e:	f000 ffe1 	bl	80102d4 <LoRaMacAdrCalcNext>

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800f312:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f316:	4618      	mov	r0, r3
 800f318:	f7fd fed2 	bl	800d0c0 <GetMaxAppPayloadWithoutFOptsLength>
 800f31c:	4603      	mov	r3, r0
 800f31e:	461a      	mov	r2, r3
 800f320:	683b      	ldr	r3, [r7, #0]
 800f322:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800f324:	f107 0308 	add.w	r3, r7, #8
 800f328:	4618      	mov	r0, r3
 800f32a:	f001 faab 	bl	8010884 <LoRaMacCommandsGetSizeSerializedCmds>
 800f32e:	4603      	mov	r3, r0
 800f330:	2b00      	cmp	r3, #0
 800f332:	d001      	beq.n	800f338 <LoRaMacQueryTxPossible+0xbc>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800f334:	2313      	movs	r3, #19
 800f336:	e020      	b.n	800f37a <LoRaMacQueryTxPossible+0xfe>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 800f338:	68bb      	ldr	r3, [r7, #8]
 800f33a:	2b0f      	cmp	r3, #15
 800f33c:	d819      	bhi.n	800f372 <LoRaMacQueryTxPossible+0xf6>
 800f33e:	683b      	ldr	r3, [r7, #0]
 800f340:	785b      	ldrb	r3, [r3, #1]
 800f342:	461a      	mov	r2, r3
 800f344:	68bb      	ldr	r3, [r7, #8]
 800f346:	429a      	cmp	r2, r3
 800f348:	d313      	bcc.n	800f372 <LoRaMacQueryTxPossible+0xf6>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 800f34a:	683b      	ldr	r3, [r7, #0]
 800f34c:	785a      	ldrb	r2, [r3, #1]
 800f34e:	68bb      	ldr	r3, [r7, #8]
 800f350:	b2db      	uxtb	r3, r3
 800f352:	1ad3      	subs	r3, r2, r3
 800f354:	b2da      	uxtb	r2, r3
 800f356:	683b      	ldr	r3, [r7, #0]
 800f358:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 800f35a:	683b      	ldr	r3, [r7, #0]
 800f35c:	785b      	ldrb	r3, [r3, #1]
 800f35e:	4619      	mov	r1, r3
 800f360:	79fa      	ldrb	r2, [r7, #7]
 800f362:	68bb      	ldr	r3, [r7, #8]
 800f364:	4413      	add	r3, r2
 800f366:	4299      	cmp	r1, r3
 800f368:	d301      	bcc.n	800f36e <LoRaMacQueryTxPossible+0xf2>
        {
            return LORAMAC_STATUS_OK;
 800f36a:	2300      	movs	r3, #0
 800f36c:	e005      	b.n	800f37a <LoRaMacQueryTxPossible+0xfe>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 800f36e:	2308      	movs	r3, #8
 800f370:	e003      	b.n	800f37a <LoRaMacQueryTxPossible+0xfe>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 800f372:	683b      	ldr	r3, [r7, #0]
 800f374:	2200      	movs	r2, #0
 800f376:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 800f378:	2308      	movs	r3, #8
    }
}
 800f37a:	4618      	mov	r0, r3
 800f37c:	3728      	adds	r7, #40	; 0x28
 800f37e:	46bd      	mov	sp, r7
 800f380:	bd80      	pop	{r7, pc}
 800f382:	bf00      	nop
 800f384:	200008e8 	.word	0x200008e8
 800f388:	200003e0 	.word	0x200003e0

0800f38c <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 800f38c:	b590      	push	{r4, r7, lr}
 800f38e:	b087      	sub	sp, #28
 800f390:	af00      	add	r7, sp, #0
 800f392:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800f394:	2300      	movs	r3, #0
 800f396:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d101      	bne.n	800f3a2 <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800f39e:	2303      	movs	r3, #3
 800f3a0:	e14b      	b.n	800f63a <LoRaMacMibGetRequestConfirm+0x2ae>
    }

    switch( mibGet->Type )
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	781b      	ldrb	r3, [r3, #0]
 800f3a6:	2b28      	cmp	r3, #40	; 0x28
 800f3a8:	f200 8140 	bhi.w	800f62c <LoRaMacMibGetRequestConfirm+0x2a0>
 800f3ac:	a201      	add	r2, pc, #4	; (adr r2, 800f3b4 <LoRaMacMibGetRequestConfirm+0x28>)
 800f3ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3b2:	bf00      	nop
 800f3b4:	0800f459 	.word	0x0800f459
 800f3b8:	0800f465 	.word	0x0800f465
 800f3bc:	0800f471 	.word	0x0800f471
 800f3c0:	0800f47d 	.word	0x0800f47d
 800f3c4:	0800f489 	.word	0x0800f489
 800f3c8:	0800f495 	.word	0x0800f495
 800f3cc:	0800f4a1 	.word	0x0800f4a1
 800f3d0:	0800f62d 	.word	0x0800f62d
 800f3d4:	0800f62d 	.word	0x0800f62d
 800f3d8:	0800f62d 	.word	0x0800f62d
 800f3dc:	0800f62d 	.word	0x0800f62d
 800f3e0:	0800f62d 	.word	0x0800f62d
 800f3e4:	0800f62d 	.word	0x0800f62d
 800f3e8:	0800f62d 	.word	0x0800f62d
 800f3ec:	0800f62d 	.word	0x0800f62d
 800f3f0:	0800f4ad 	.word	0x0800f4ad
 800f3f4:	0800f4b9 	.word	0x0800f4b9
 800f3f8:	0800f4c5 	.word	0x0800f4c5
 800f3fc:	0800f4e7 	.word	0x0800f4e7
 800f400:	0800f4f9 	.word	0x0800f4f9
 800f404:	0800f50b 	.word	0x0800f50b
 800f408:	0800f51d 	.word	0x0800f51d
 800f40c:	0800f551 	.word	0x0800f551
 800f410:	0800f52f 	.word	0x0800f52f
 800f414:	0800f573 	.word	0x0800f573
 800f418:	0800f57f 	.word	0x0800f57f
 800f41c:	0800f589 	.word	0x0800f589
 800f420:	0800f593 	.word	0x0800f593
 800f424:	0800f59d 	.word	0x0800f59d
 800f428:	0800f5a7 	.word	0x0800f5a7
 800f42c:	0800f5b1 	.word	0x0800f5b1
 800f430:	0800f5bd 	.word	0x0800f5bd
 800f434:	0800f5d5 	.word	0x0800f5d5
 800f438:	0800f5c9 	.word	0x0800f5c9
 800f43c:	0800f5e1 	.word	0x0800f5e1
 800f440:	0800f5eb 	.word	0x0800f5eb
 800f444:	0800f5f7 	.word	0x0800f5f7
 800f448:	0800f60d 	.word	0x0800f60d
 800f44c:	0800f601 	.word	0x0800f601
 800f450:	0800f62d 	.word	0x0800f62d
 800f454:	0800f619 	.word	0x0800f619
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 800f458:	4b7a      	ldr	r3, [pc, #488]	; (800f644 <LoRaMacMibGetRequestConfirm+0x2b8>)
 800f45a:	f893 20fc 	ldrb.w	r2, [r3, #252]	; 0xfc
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	711a      	strb	r2, [r3, #4]
            break;
 800f462:	e0e9      	b.n	800f638 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800f464:	4b77      	ldr	r3, [pc, #476]	; (800f644 <LoRaMacMibGetRequestConfirm+0x2b8>)
 800f466:	f893 2110 	ldrb.w	r2, [r3, #272]	; 0x110
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	711a      	strb	r2, [r3, #4]
            break;
 800f46e:	e0e3      	b.n	800f638 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_DEV_EUI:
        {
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 800f470:	f7fb f898 	bl	800a5a4 <SecureElementGetDevEui>
 800f474:	4602      	mov	r2, r0
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	605a      	str	r2, [r3, #4]
            break;
 800f47a:	e0dd      	b.n	800f638 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_JOIN_EUI:
        {
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 800f47c:	f7fb f8b4 	bl	800a5e8 <SecureElementGetJoinEui>
 800f480:	4602      	mov	r2, r0
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	605a      	str	r2, [r3, #4]
            break;
 800f486:	e0d7      	b.n	800f638 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 800f488:	4b6e      	ldr	r3, [pc, #440]	; (800f644 <LoRaMacMibGetRequestConfirm+0x2b8>)
 800f48a:	f893 20fe 	ldrb.w	r2, [r3, #254]	; 0xfe
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	711a      	strb	r2, [r3, #4]
            break;
 800f492:	e0d1      	b.n	800f638 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 800f494:	4b6b      	ldr	r3, [pc, #428]	; (800f644 <LoRaMacMibGetRequestConfirm+0x2b8>)
 800f496:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	605a      	str	r2, [r3, #4]
            break;
 800f49e:	e0cb      	b.n	800f638 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_DEV_ADDR:
        {
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 800f4a0:	4b68      	ldr	r3, [pc, #416]	; (800f644 <LoRaMacMibGetRequestConfirm+0x2b8>)
 800f4a2:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	605a      	str	r2, [r3, #4]
            break;
 800f4aa:	e0c5      	b.n	800f638 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 800f4ac:	4b65      	ldr	r3, [pc, #404]	; (800f644 <LoRaMacMibGetRequestConfirm+0x2b8>)
 800f4ae:	f893 20fd 	ldrb.w	r2, [r3, #253]	; 0xfd
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	711a      	strb	r2, [r3, #4]
            break;
 800f4b6:	e0bf      	b.n	800f638 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800f4b8:	4b62      	ldr	r3, [pc, #392]	; (800f644 <LoRaMacMibGetRequestConfirm+0x2b8>)
 800f4ba:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	711a      	strb	r2, [r3, #4]
            break;
 800f4c2:	e0b9      	b.n	800f638 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        /* ST_WORKAROUND_END */
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 800f4c4:	231d      	movs	r3, #29
 800f4c6:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800f4c8:	4b5e      	ldr	r3, [pc, #376]	; (800f644 <LoRaMacMibGetRequestConfirm+0x2b8>)
 800f4ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f4ce:	f107 0210 	add.w	r2, r7, #16
 800f4d2:	4611      	mov	r1, r2
 800f4d4:	4618      	mov	r0, r3
 800f4d6:	f002 fe91 	bl	80121fc <RegionGetPhyParam>
 800f4da:	4603      	mov	r3, r0
 800f4dc:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 800f4de:	68fa      	ldr	r2, [r7, #12]
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	605a      	str	r2, [r3, #4]
            break;
 800f4e4:	e0a8      	b.n	800f638 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	4a56      	ldr	r2, [pc, #344]	; (800f644 <LoRaMacMibGetRequestConfirm+0x2b8>)
 800f4ea:	3304      	adds	r3, #4
 800f4ec:	3264      	adds	r2, #100	; 0x64
 800f4ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f4f2:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 800f4f6:	e09f      	b.n	800f638 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	4a52      	ldr	r2, [pc, #328]	; (800f644 <LoRaMacMibGetRequestConfirm+0x2b8>)
 800f4fc:	3304      	adds	r3, #4
 800f4fe:	32a4      	adds	r2, #164	; 0xa4
 800f500:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f504:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 800f508:	e096      	b.n	800f638 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	4a4d      	ldr	r2, [pc, #308]	; (800f644 <LoRaMacMibGetRequestConfirm+0x2b8>)
 800f50e:	3304      	adds	r3, #4
 800f510:	326c      	adds	r2, #108	; 0x6c
 800f512:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f516:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 800f51a:	e08d      	b.n	800f638 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	4a49      	ldr	r2, [pc, #292]	; (800f644 <LoRaMacMibGetRequestConfirm+0x2b8>)
 800f520:	3304      	adds	r3, #4
 800f522:	32ac      	adds	r2, #172	; 0xac
 800f524:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f528:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 800f52c:	e084      	b.n	800f638 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 800f52e:	231b      	movs	r3, #27
 800f530:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800f532:	4b44      	ldr	r3, [pc, #272]	; (800f644 <LoRaMacMibGetRequestConfirm+0x2b8>)
 800f534:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f538:	f107 0210 	add.w	r2, r7, #16
 800f53c:	4611      	mov	r1, r2
 800f53e:	4618      	mov	r0, r3
 800f540:	f002 fe5c 	bl	80121fc <RegionGetPhyParam>
 800f544:	4603      	mov	r3, r0
 800f546:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 800f548:	68fa      	ldr	r2, [r7, #12]
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	605a      	str	r2, [r3, #4]
            break;
 800f54e:	e073      	b.n	800f638 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 800f550:	231a      	movs	r3, #26
 800f552:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800f554:	4b3b      	ldr	r3, [pc, #236]	; (800f644 <LoRaMacMibGetRequestConfirm+0x2b8>)
 800f556:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f55a:	f107 0210 	add.w	r2, r7, #16
 800f55e:	4611      	mov	r1, r2
 800f560:	4618      	mov	r0, r3
 800f562:	f002 fe4b 	bl	80121fc <RegionGetPhyParam>
 800f566:	4603      	mov	r3, r0
 800f568:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 800f56a:	68fa      	ldr	r2, [r7, #12]
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	605a      	str	r2, [r3, #4]
            break;
 800f570:	e062      	b.n	800f638 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800f572:	4b34      	ldr	r3, [pc, #208]	; (800f644 <LoRaMacMibGetRequestConfirm+0x2b8>)
 800f574:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	711a      	strb	r2, [r3, #4]
            break;
 800f57c:	e05c      	b.n	800f638 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 800f57e:	4b31      	ldr	r3, [pc, #196]	; (800f644 <LoRaMacMibGetRequestConfirm+0x2b8>)
 800f580:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	605a      	str	r2, [r3, #4]
            break;
 800f586:	e057      	b.n	800f638 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 800f588:	4b2e      	ldr	r3, [pc, #184]	; (800f644 <LoRaMacMibGetRequestConfirm+0x2b8>)
 800f58a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	605a      	str	r2, [r3, #4]
            break;
 800f590:	e052      	b.n	800f638 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 800f592:	4b2c      	ldr	r3, [pc, #176]	; (800f644 <LoRaMacMibGetRequestConfirm+0x2b8>)
 800f594:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	605a      	str	r2, [r3, #4]
            break;
 800f59a:	e04d      	b.n	800f638 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 800f59c:	4b29      	ldr	r3, [pc, #164]	; (800f644 <LoRaMacMibGetRequestConfirm+0x2b8>)
 800f59e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	605a      	str	r2, [r3, #4]
            break;
 800f5a4:	e048      	b.n	800f638 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 800f5a6:	4b27      	ldr	r3, [pc, #156]	; (800f644 <LoRaMacMibGetRequestConfirm+0x2b8>)
 800f5a8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	605a      	str	r2, [r3, #4]
            break;
 800f5ae:	e043      	b.n	800f638 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800f5b0:	4b24      	ldr	r3, [pc, #144]	; (800f644 <LoRaMacMibGetRequestConfirm+0x2b8>)
 800f5b2:	f993 20c5 	ldrsb.w	r2, [r3, #197]	; 0xc5
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	711a      	strb	r2, [r3, #4]
            break;
 800f5ba:	e03d      	b.n	800f638 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800f5bc:	4b21      	ldr	r3, [pc, #132]	; (800f644 <LoRaMacMibGetRequestConfirm+0x2b8>)
 800f5be:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	711a      	strb	r2, [r3, #4]
            break;
 800f5c6:	e037      	b.n	800f638 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800f5c8:	4b1e      	ldr	r3, [pc, #120]	; (800f644 <LoRaMacMibGetRequestConfirm+0x2b8>)
 800f5ca:	f993 20c4 	ldrsb.w	r2, [r3, #196]	; 0xc4
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	711a      	strb	r2, [r3, #4]
            break;
 800f5d2:	e031      	b.n	800f638 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800f5d4:	4b1b      	ldr	r3, [pc, #108]	; (800f644 <LoRaMacMibGetRequestConfirm+0x2b8>)
 800f5d6:	f993 2038 	ldrsb.w	r2, [r3, #56]	; 0x38
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	711a      	strb	r2, [r3, #4]
            break;
 800f5de:	e02b      	b.n	800f638 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 800f5e0:	4b18      	ldr	r3, [pc, #96]	; (800f644 <LoRaMacMibGetRequestConfirm+0x2b8>)
 800f5e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	605a      	str	r2, [r3, #4]
            break;
 800f5e8:	e026      	b.n	800f638 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 800f5ea:	4b16      	ldr	r3, [pc, #88]	; (800f644 <LoRaMacMibGetRequestConfirm+0x2b8>)
 800f5ec:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	711a      	strb	r2, [r3, #4]
            break;
 800f5f4:	e020      	b.n	800f638 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800f5f6:	4b13      	ldr	r3, [pc, #76]	; (800f644 <LoRaMacMibGetRequestConfirm+0x2b8>)
 800f5f8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	605a      	str	r2, [r3, #4]
            break;
 800f5fe:	e01b      	b.n	800f638 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = GetNvmData( );
 800f600:	f7ff f934 	bl	800e86c <GetNvmData>
 800f604:	4602      	mov	r2, r0
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	605a      	str	r2, [r3, #4]
            break;
 800f60a:	e015      	b.n	800f638 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800f60c:	4b0d      	ldr	r3, [pc, #52]	; (800f644 <LoRaMacMibGetRequestConfirm+0x2b8>)
 800f60e:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	605a      	str	r2, [r3, #4]
            break;
 800f616:	e00f      	b.n	800f638 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	4a0a      	ldr	r2, [pc, #40]	; (800f644 <LoRaMacMibGetRequestConfirm+0x2b8>)
 800f61c:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
 800f620:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 800f622:	687c      	ldr	r4, [r7, #4]
 800f624:	f002 ff74 	bl	8012510 <RegionGetVersion>
 800f628:	60a0      	str	r0, [r4, #8]
            break;
 800f62a:	e005      	b.n	800f638 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 800f62c:	6878      	ldr	r0, [r7, #4]
 800f62e:	f000 fefd 	bl	801042c <LoRaMacClassBMibGetRequestConfirm>
 800f632:	4603      	mov	r3, r0
 800f634:	75fb      	strb	r3, [r7, #23]
            break;
 800f636:	bf00      	nop
        }
    }
    return status;
 800f638:	7dfb      	ldrb	r3, [r7, #23]
}
 800f63a:	4618      	mov	r0, r3
 800f63c:	371c      	adds	r7, #28
 800f63e:	46bd      	mov	sp, r7
 800f640:	bd90      	pop	{r4, r7, pc}
 800f642:	bf00      	nop
 800f644:	200008e8 	.word	0x200008e8

0800f648 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 800f648:	b580      	push	{r7, lr}
 800f64a:	b086      	sub	sp, #24
 800f64c:	af00      	add	r7, sp, #0
 800f64e:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800f650:	2300      	movs	r3, #0
 800f652:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	2b00      	cmp	r3, #0
 800f658:	d101      	bne.n	800f65e <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800f65a:	2303      	movs	r3, #3
 800f65c:	e32b      	b.n	800fcb6 <LoRaMacMibSetRequestConfirm+0x66e>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 800f65e:	4bbe      	ldr	r3, [pc, #760]	; (800f958 <LoRaMacMibSetRequestConfirm+0x310>)
 800f660:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f664:	f003 0302 	and.w	r3, r3, #2
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d001      	beq.n	800f670 <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 800f66c:	2301      	movs	r3, #1
 800f66e:	e322      	b.n	800fcb6 <LoRaMacMibSetRequestConfirm+0x66e>
    }

    switch( mibSet->Type )
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	781b      	ldrb	r3, [r3, #0]
 800f674:	2b27      	cmp	r3, #39	; 0x27
 800f676:	f200 82fc 	bhi.w	800fc72 <LoRaMacMibSetRequestConfirm+0x62a>
 800f67a:	a201      	add	r2, pc, #4	; (adr r2, 800f680 <LoRaMacMibSetRequestConfirm+0x38>)
 800f67c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f680:	0800f721 	.word	0x0800f721
 800f684:	0800f731 	.word	0x0800f731
 800f688:	0800f74b 	.word	0x0800f74b
 800f68c:	0800f763 	.word	0x0800f763
 800f690:	0800f77b 	.word	0x0800f77b
 800f694:	0800f787 	.word	0x0800f787
 800f698:	0800f793 	.word	0x0800f793
 800f69c:	0800f79f 	.word	0x0800f79f
 800f6a0:	0800f7c5 	.word	0x0800f7c5
 800f6a4:	0800f7eb 	.word	0x0800f7eb
 800f6a8:	0800f811 	.word	0x0800f811
 800f6ac:	0800f837 	.word	0x0800f837
 800f6b0:	0800f85d 	.word	0x0800f85d
 800f6b4:	0800f883 	.word	0x0800f883
 800f6b8:	0800f8a9 	.word	0x0800f8a9
 800f6bc:	0800f8cf 	.word	0x0800f8cf
 800f6c0:	0800f8ef 	.word	0x0800f8ef
 800f6c4:	0800fc73 	.word	0x0800fc73
 800f6c8:	0800f8fb 	.word	0x0800f8fb
 800f6cc:	0800f977 	.word	0x0800f977
 800f6d0:	0800f9b7 	.word	0x0800f9b7
 800f6d4:	0800fa19 	.word	0x0800fa19
 800f6d8:	0800fa89 	.word	0x0800fa89
 800f6dc:	0800fa59 	.word	0x0800fa59
 800f6e0:	0800fab9 	.word	0x0800fab9
 800f6e4:	0800fadb 	.word	0x0800fadb
 800f6e8:	0800fae5 	.word	0x0800fae5
 800f6ec:	0800faef 	.word	0x0800faef
 800f6f0:	0800faf9 	.word	0x0800faf9
 800f6f4:	0800fb03 	.word	0x0800fb03
 800f6f8:	0800fb0d 	.word	0x0800fb0d
 800f6fc:	0800fb3f 	.word	0x0800fb3f
 800f700:	0800fbab 	.word	0x0800fbab
 800f704:	0800fb79 	.word	0x0800fb79
 800f708:	0800fbdd 	.word	0x0800fbdd
 800f70c:	0800fbf3 	.word	0x0800fbf3
 800f710:	0800fc0b 	.word	0x0800fc0b
 800f714:	0800fc15 	.word	0x0800fc15
 800f718:	0800fc21 	.word	0x0800fc21
 800f71c:	0800fc49 	.word	0x0800fc49
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	791b      	ldrb	r3, [r3, #4]
 800f724:	4618      	mov	r0, r3
 800f726:	f7fd fbfb 	bl	800cf20 <SwitchClass>
 800f72a:	4603      	mov	r3, r0
 800f72c:	75fb      	strb	r3, [r7, #23]
            break;
 800f72e:	e2c1      	b.n	800fcb4 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	791b      	ldrb	r3, [r3, #4]
 800f734:	2b02      	cmp	r3, #2
 800f736:	d005      	beq.n	800f744 <LoRaMacMibSetRequestConfirm+0xfc>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	791a      	ldrb	r2, [r3, #4]
 800f73c:	4b87      	ldr	r3, [pc, #540]	; (800f95c <LoRaMacMibSetRequestConfirm+0x314>)
 800f73e:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800f742:	e2b7      	b.n	800fcb4 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f744:	2303      	movs	r3, #3
 800f746:	75fb      	strb	r3, [r7, #23]
            break;
 800f748:	e2b4      	b.n	800fcb4 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	685b      	ldr	r3, [r3, #4]
 800f74e:	4618      	mov	r0, r3
 800f750:	f7fa ff10 	bl	800a574 <SecureElementSetDevEui>
 800f754:	4603      	mov	r3, r0
 800f756:	2b00      	cmp	r3, #0
 800f758:	f000 8291 	beq.w	800fc7e <LoRaMacMibSetRequestConfirm+0x636>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f75c:	2303      	movs	r3, #3
 800f75e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800f760:	e28d      	b.n	800fc7e <LoRaMacMibSetRequestConfirm+0x636>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	685b      	ldr	r3, [r3, #4]
 800f766:	4618      	mov	r0, r3
 800f768:	f7fa ff26 	bl	800a5b8 <SecureElementSetJoinEui>
 800f76c:	4603      	mov	r3, r0
 800f76e:	2b00      	cmp	r3, #0
 800f770:	f000 8287 	beq.w	800fc82 <LoRaMacMibSetRequestConfirm+0x63a>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f774:	2303      	movs	r3, #3
 800f776:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800f778:	e283      	b.n	800fc82 <LoRaMacMibSetRequestConfirm+0x63a>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	791a      	ldrb	r2, [r3, #4]
 800f77e:	4b77      	ldr	r3, [pc, #476]	; (800f95c <LoRaMacMibSetRequestConfirm+0x314>)
 800f780:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
            break;
 800f784:	e296      	b.n	800fcb4 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	685b      	ldr	r3, [r3, #4]
 800f78a:	4a74      	ldr	r2, [pc, #464]	; (800f95c <LoRaMacMibSetRequestConfirm+0x314>)
 800f78c:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
            break;
 800f790:	e290      	b.n	800fcb4 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_DEV_ADDR:
        {
            Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	685b      	ldr	r3, [r3, #4]
 800f796:	4a71      	ldr	r2, [pc, #452]	; (800f95c <LoRaMacMibSetRequestConfirm+0x314>)
 800f798:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
            break;
 800f79c:	e28a      	b.n	800fcb4 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	685b      	ldr	r3, [r3, #4]
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d00b      	beq.n	800f7be <LoRaMacMibSetRequestConfirm+0x176>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	685b      	ldr	r3, [r3, #4]
 800f7aa:	4619      	mov	r1, r3
 800f7ac:	2000      	movs	r0, #0
 800f7ae:	f001 ff35 	bl	801161c <LoRaMacCryptoSetKey>
 800f7b2:	4603      	mov	r3, r0
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	f000 8266 	beq.w	800fc86 <LoRaMacMibSetRequestConfirm+0x63e>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800f7ba:	2311      	movs	r3, #17
 800f7bc:	e27b      	b.n	800fcb6 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f7be:	2303      	movs	r3, #3
 800f7c0:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800f7c2:	e260      	b.n	800fc86 <LoRaMacMibSetRequestConfirm+0x63e>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	685b      	ldr	r3, [r3, #4]
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d00b      	beq.n	800f7e4 <LoRaMacMibSetRequestConfirm+0x19c>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	685b      	ldr	r3, [r3, #4]
 800f7d0:	4619      	mov	r1, r3
 800f7d2:	2001      	movs	r0, #1
 800f7d4:	f001 ff22 	bl	801161c <LoRaMacCryptoSetKey>
 800f7d8:	4603      	mov	r3, r0
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	f000 8255 	beq.w	800fc8a <LoRaMacMibSetRequestConfirm+0x642>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800f7e0:	2311      	movs	r3, #17
 800f7e2:	e268      	b.n	800fcb6 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f7e4:	2303      	movs	r3, #3
 800f7e6:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800f7e8:	e24f      	b.n	800fc8a <LoRaMacMibSetRequestConfirm+0x642>
            break;
        }
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	685b      	ldr	r3, [r3, #4]
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d00b      	beq.n	800f80a <LoRaMacMibSetRequestConfirm+0x1c2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	685b      	ldr	r3, [r3, #4]
 800f7f6:	4619      	mov	r1, r3
 800f7f8:	2002      	movs	r0, #2
 800f7fa:	f001 ff0f 	bl	801161c <LoRaMacCryptoSetKey>
 800f7fe:	4603      	mov	r3, r0
 800f800:	2b00      	cmp	r3, #0
 800f802:	f000 8244 	beq.w	800fc8e <LoRaMacMibSetRequestConfirm+0x646>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800f806:	2311      	movs	r3, #17
 800f808:	e255      	b.n	800fcb6 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f80a:	2303      	movs	r3, #3
 800f80c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800f80e:	e23e      	b.n	800fc8e <LoRaMacMibSetRequestConfirm+0x646>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	685b      	ldr	r3, [r3, #4]
 800f814:	2b00      	cmp	r3, #0
 800f816:	d00b      	beq.n	800f830 <LoRaMacMibSetRequestConfirm+0x1e8>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	685b      	ldr	r3, [r3, #4]
 800f81c:	4619      	mov	r1, r3
 800f81e:	2003      	movs	r0, #3
 800f820:	f001 fefc 	bl	801161c <LoRaMacCryptoSetKey>
 800f824:	4603      	mov	r3, r0
 800f826:	2b00      	cmp	r3, #0
 800f828:	f000 8233 	beq.w	800fc92 <LoRaMacMibSetRequestConfirm+0x64a>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800f82c:	2311      	movs	r3, #17
 800f82e:	e242      	b.n	800fcb6 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f830:	2303      	movs	r3, #3
 800f832:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800f834:	e22d      	b.n	800fc92 <LoRaMacMibSetRequestConfirm+0x64a>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	685b      	ldr	r3, [r3, #4]
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	d00b      	beq.n	800f856 <LoRaMacMibSetRequestConfirm+0x20e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	685b      	ldr	r3, [r3, #4]
 800f842:	4619      	mov	r1, r3
 800f844:	207f      	movs	r0, #127	; 0x7f
 800f846:	f001 fee9 	bl	801161c <LoRaMacCryptoSetKey>
 800f84a:	4603      	mov	r3, r0
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	f000 8222 	beq.w	800fc96 <LoRaMacMibSetRequestConfirm+0x64e>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800f852:	2311      	movs	r3, #17
 800f854:	e22f      	b.n	800fcb6 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f856:	2303      	movs	r3, #3
 800f858:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800f85a:	e21c      	b.n	800fc96 <LoRaMacMibSetRequestConfirm+0x64e>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 ) /* ST_WORKAROUND: reduced LORAMAC_MAX_MC_CTX */
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	685b      	ldr	r3, [r3, #4]
 800f860:	2b00      	cmp	r3, #0
 800f862:	d00b      	beq.n	800f87c <LoRaMacMibSetRequestConfirm+0x234>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	685b      	ldr	r3, [r3, #4]
 800f868:	4619      	mov	r1, r3
 800f86a:	2080      	movs	r0, #128	; 0x80
 800f86c:	f001 fed6 	bl	801161c <LoRaMacCryptoSetKey>
 800f870:	4603      	mov	r3, r0
 800f872:	2b00      	cmp	r3, #0
 800f874:	f000 8211 	beq.w	800fc9a <LoRaMacMibSetRequestConfirm+0x652>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800f878:	2311      	movs	r3, #17
 800f87a:	e21c      	b.n	800fcb6 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f87c:	2303      	movs	r3, #3
 800f87e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800f880:	e20b      	b.n	800fc9a <LoRaMacMibSetRequestConfirm+0x652>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	685b      	ldr	r3, [r3, #4]
 800f886:	2b00      	cmp	r3, #0
 800f888:	d00b      	beq.n	800f8a2 <LoRaMacMibSetRequestConfirm+0x25a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	685b      	ldr	r3, [r3, #4]
 800f88e:	4619      	mov	r1, r3
 800f890:	2081      	movs	r0, #129	; 0x81
 800f892:	f001 fec3 	bl	801161c <LoRaMacCryptoSetKey>
 800f896:	4603      	mov	r3, r0
 800f898:	2b00      	cmp	r3, #0
 800f89a:	f000 8200 	beq.w	800fc9e <LoRaMacMibSetRequestConfirm+0x656>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800f89e:	2311      	movs	r3, #17
 800f8a0:	e209      	b.n	800fcb6 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f8a2:	2303      	movs	r3, #3
 800f8a4:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800f8a6:	e1fa      	b.n	800fc9e <LoRaMacMibSetRequestConfirm+0x656>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	685b      	ldr	r3, [r3, #4]
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d00b      	beq.n	800f8c8 <LoRaMacMibSetRequestConfirm+0x280>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	685b      	ldr	r3, [r3, #4]
 800f8b4:	4619      	mov	r1, r3
 800f8b6:	2082      	movs	r0, #130	; 0x82
 800f8b8:	f001 feb0 	bl	801161c <LoRaMacCryptoSetKey>
 800f8bc:	4603      	mov	r3, r0
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	f000 81ef 	beq.w	800fca2 <LoRaMacMibSetRequestConfirm+0x65a>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800f8c4:	2311      	movs	r3, #17
 800f8c6:	e1f6      	b.n	800fcb6 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f8c8:	2303      	movs	r3, #3
 800f8ca:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800f8cc:	e1e9      	b.n	800fca2 <LoRaMacMibSetRequestConfirm+0x65a>
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	791a      	ldrb	r2, [r3, #4]
 800f8d2:	4b22      	ldr	r3, [pc, #136]	; (800f95c <LoRaMacMibSetRequestConfirm+0x314>)
 800f8d4:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800f8d8:	4b21      	ldr	r3, [pc, #132]	; (800f960 <LoRaMacMibSetRequestConfirm+0x318>)
 800f8da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f8dc:	4a1f      	ldr	r2, [pc, #124]	; (800f95c <LoRaMacMibSetRequestConfirm+0x314>)
 800f8de:	f892 20fd 	ldrb.w	r2, [r2, #253]	; 0xfd
 800f8e2:	4610      	mov	r0, r2
 800f8e4:	4798      	blx	r3
            /* ST_WORAROUND_BEGIN: Required to avoid keeping the radio active after init */
            Radio.Sleep( );
 800f8e6:	4b1e      	ldr	r3, [pc, #120]	; (800f960 <LoRaMacMibSetRequestConfirm+0x318>)
 800f8e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8ea:	4798      	blx	r3
            /* ST_WORKAROUND_END */
            break;
 800f8ec:	e1e2      	b.n	800fcb4 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	791a      	ldrb	r2, [r3, #4]
 800f8f2:	4b1a      	ldr	r3, [pc, #104]	; (800f95c <LoRaMacMibSetRequestConfirm+0x314>)
 800f8f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
            break;
 800f8f8:	e1dc      	b.n	800fcb4 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        /* ST_WORKAROUND_END */
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	7a1b      	ldrb	r3, [r3, #8]
 800f8fe:	b25b      	sxtb	r3, r3
 800f900:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800f902:	4b16      	ldr	r3, [pc, #88]	; (800f95c <LoRaMacMibSetRequestConfirm+0x314>)
 800f904:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 800f908:	727b      	strb	r3, [r7, #9]
            /* ST_WORAROUND_BEGIN: Check also the Rx Frequency parameter */
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 800f90a:	4b14      	ldr	r3, [pc, #80]	; (800f95c <LoRaMacMibSetRequestConfirm+0x314>)
 800f90c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f910:	f107 0108 	add.w	r1, r7, #8
 800f914:	2207      	movs	r2, #7
 800f916:	4618      	mov	r0, r3
 800f918:	f002 fcac 	bl	8012274 <RegionVerify>
 800f91c:	4603      	mov	r3, r0
 800f91e:	f083 0301 	eor.w	r3, r3, #1
 800f922:	b2db      	uxtb	r3, r3
 800f924:	2b00      	cmp	r3, #0
 800f926:	d002      	beq.n	800f92e <LoRaMacMibSetRequestConfirm+0x2e6>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f928:	2303      	movs	r3, #3
 800f92a:	75fb      	strb	r3, [r7, #23]
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            /* ST_WORKAROUND_END */
            break;
 800f92c:	e1c2      	b.n	800fcb4 <LoRaMacMibSetRequestConfirm+0x66c>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	685b      	ldr	r3, [r3, #4]
 800f932:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 800f934:	4b09      	ldr	r3, [pc, #36]	; (800f95c <LoRaMacMibSetRequestConfirm+0x314>)
 800f936:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f93a:	f107 0108 	add.w	r1, r7, #8
 800f93e:	2200      	movs	r2, #0
 800f940:	4618      	mov	r0, r3
 800f942:	f002 fc97 	bl	8012274 <RegionVerify>
 800f946:	4603      	mov	r3, r0
 800f948:	f083 0301 	eor.w	r3, r3, #1
 800f94c:	b2db      	uxtb	r3, r3
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d008      	beq.n	800f964 <LoRaMacMibSetRequestConfirm+0x31c>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f952:	2303      	movs	r3, #3
 800f954:	75fb      	strb	r3, [r7, #23]
            break;
 800f956:	e1ad      	b.n	800fcb4 <LoRaMacMibSetRequestConfirm+0x66c>
 800f958:	200003e0 	.word	0x200003e0
 800f95c:	200008e8 	.word	0x200008e8
 800f960:	08019c7c 	.word	0x08019c7c
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 800f964:	4bb6      	ldr	r3, [pc, #728]	; (800fc40 <LoRaMacMibSetRequestConfirm+0x5f8>)
 800f966:	687a      	ldr	r2, [r7, #4]
 800f968:	3364      	adds	r3, #100	; 0x64
 800f96a:	3204      	adds	r2, #4
 800f96c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f970:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 800f974:	e19e      	b.n	800fcb4 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	7a1b      	ldrb	r3, [r3, #8]
 800f97a:	b25b      	sxtb	r3, r3
 800f97c:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800f97e:	4bb0      	ldr	r3, [pc, #704]	; (800fc40 <LoRaMacMibSetRequestConfirm+0x5f8>)
 800f980:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 800f984:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800f986:	4bae      	ldr	r3, [pc, #696]	; (800fc40 <LoRaMacMibSetRequestConfirm+0x5f8>)
 800f988:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f98c:	f107 0108 	add.w	r1, r7, #8
 800f990:	2207      	movs	r2, #7
 800f992:	4618      	mov	r0, r3
 800f994:	f002 fc6e 	bl	8012274 <RegionVerify>
 800f998:	4603      	mov	r3, r0
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d008      	beq.n	800f9b0 <LoRaMacMibSetRequestConfirm+0x368>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 800f99e:	4ba8      	ldr	r3, [pc, #672]	; (800fc40 <LoRaMacMibSetRequestConfirm+0x5f8>)
 800f9a0:	687a      	ldr	r2, [r7, #4]
 800f9a2:	33a4      	adds	r3, #164	; 0xa4
 800f9a4:	3204      	adds	r2, #4
 800f9a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f9aa:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800f9ae:	e181      	b.n	800fcb4 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f9b0:	2303      	movs	r3, #3
 800f9b2:	75fb      	strb	r3, [r7, #23]
            break;
 800f9b4:	e17e      	b.n	800fcb4 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	7a1b      	ldrb	r3, [r3, #8]
 800f9ba:	b25b      	sxtb	r3, r3
 800f9bc:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800f9be:	4ba0      	ldr	r3, [pc, #640]	; (800fc40 <LoRaMacMibSetRequestConfirm+0x5f8>)
 800f9c0:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 800f9c4:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800f9c6:	4b9e      	ldr	r3, [pc, #632]	; (800fc40 <LoRaMacMibSetRequestConfirm+0x5f8>)
 800f9c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f9cc:	f107 0108 	add.w	r1, r7, #8
 800f9d0:	2207      	movs	r2, #7
 800f9d2:	4618      	mov	r0, r3
 800f9d4:	f002 fc4e 	bl	8012274 <RegionVerify>
 800f9d8:	4603      	mov	r3, r0
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d019      	beq.n	800fa12 <LoRaMacMibSetRequestConfirm+0x3ca>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 800f9de:	4b98      	ldr	r3, [pc, #608]	; (800fc40 <LoRaMacMibSetRequestConfirm+0x5f8>)
 800f9e0:	687a      	ldr	r2, [r7, #4]
 800f9e2:	336c      	adds	r3, #108	; 0x6c
 800f9e4:	3204      	adds	r2, #4
 800f9e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f9ea:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 800f9ee:	4b94      	ldr	r3, [pc, #592]	; (800fc40 <LoRaMacMibSetRequestConfirm+0x5f8>)
 800f9f0:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800f9f4:	2b02      	cmp	r3, #2
 800f9f6:	f040 8156 	bne.w	800fca6 <LoRaMacMibSetRequestConfirm+0x65e>
 800f9fa:	4b91      	ldr	r3, [pc, #580]	; (800fc40 <LoRaMacMibSetRequestConfirm+0x5f8>)
 800f9fc:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	f000 8150 	beq.w	800fca6 <LoRaMacMibSetRequestConfirm+0x65e>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 800fa06:	4b8f      	ldr	r3, [pc, #572]	; (800fc44 <LoRaMacMibSetRequestConfirm+0x5fc>)
 800fa08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa0a:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 800fa0c:	f7fe fcda 	bl	800e3c4 <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800fa10:	e149      	b.n	800fca6 <LoRaMacMibSetRequestConfirm+0x65e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800fa12:	2303      	movs	r3, #3
 800fa14:	75fb      	strb	r3, [r7, #23]
            break;
 800fa16:	e146      	b.n	800fca6 <LoRaMacMibSetRequestConfirm+0x65e>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	7a1b      	ldrb	r3, [r3, #8]
 800fa1c:	b25b      	sxtb	r3, r3
 800fa1e:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800fa20:	4b87      	ldr	r3, [pc, #540]	; (800fc40 <LoRaMacMibSetRequestConfirm+0x5f8>)
 800fa22:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 800fa26:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800fa28:	4b85      	ldr	r3, [pc, #532]	; (800fc40 <LoRaMacMibSetRequestConfirm+0x5f8>)
 800fa2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fa2e:	f107 0108 	add.w	r1, r7, #8
 800fa32:	2207      	movs	r2, #7
 800fa34:	4618      	mov	r0, r3
 800fa36:	f002 fc1d 	bl	8012274 <RegionVerify>
 800fa3a:	4603      	mov	r3, r0
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d008      	beq.n	800fa52 <LoRaMacMibSetRequestConfirm+0x40a>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 800fa40:	4b7f      	ldr	r3, [pc, #508]	; (800fc40 <LoRaMacMibSetRequestConfirm+0x5f8>)
 800fa42:	687a      	ldr	r2, [r7, #4]
 800fa44:	33ac      	adds	r3, #172	; 0xac
 800fa46:	3204      	adds	r2, #4
 800fa48:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fa4c:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800fa50:	e130      	b.n	800fcb4 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800fa52:	2303      	movs	r3, #3
 800fa54:	75fb      	strb	r3, [r7, #23]
            break;
 800fa56:	e12d      	b.n	800fcb4 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	685b      	ldr	r3, [r3, #4]
 800fa5c:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 800fa5e:	2301      	movs	r3, #1
 800fa60:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 800fa62:	4b77      	ldr	r3, [pc, #476]	; (800fc40 <LoRaMacMibSetRequestConfirm+0x5f8>)
 800fa64:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fa68:	f107 020c 	add.w	r2, r7, #12
 800fa6c:	4611      	mov	r1, r2
 800fa6e:	4618      	mov	r0, r3
 800fa70:	f002 fc29 	bl	80122c6 <RegionChanMaskSet>
 800fa74:	4603      	mov	r3, r0
 800fa76:	f083 0301 	eor.w	r3, r3, #1
 800fa7a:	b2db      	uxtb	r3, r3
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	f000 8114 	beq.w	800fcaa <LoRaMacMibSetRequestConfirm+0x662>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800fa82:	2303      	movs	r3, #3
 800fa84:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800fa86:	e110      	b.n	800fcaa <LoRaMacMibSetRequestConfirm+0x662>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	685b      	ldr	r3, [r3, #4]
 800fa8c:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 800fa8e:	2300      	movs	r3, #0
 800fa90:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 800fa92:	4b6b      	ldr	r3, [pc, #428]	; (800fc40 <LoRaMacMibSetRequestConfirm+0x5f8>)
 800fa94:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fa98:	f107 020c 	add.w	r2, r7, #12
 800fa9c:	4611      	mov	r1, r2
 800fa9e:	4618      	mov	r0, r3
 800faa0:	f002 fc11 	bl	80122c6 <RegionChanMaskSet>
 800faa4:	4603      	mov	r3, r0
 800faa6:	f083 0301 	eor.w	r3, r3, #1
 800faaa:	b2db      	uxtb	r3, r3
 800faac:	2b00      	cmp	r3, #0
 800faae:	f000 80fe 	beq.w	800fcae <LoRaMacMibSetRequestConfirm+0x666>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800fab2:	2303      	movs	r3, #3
 800fab4:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800fab6:	e0fa      	b.n	800fcae <LoRaMacMibSetRequestConfirm+0x666>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	791b      	ldrb	r3, [r3, #4]
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d009      	beq.n	800fad4 <LoRaMacMibSetRequestConfirm+0x48c>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 800fac4:	2b0f      	cmp	r3, #15
 800fac6:	d805      	bhi.n	800fad4 <LoRaMacMibSetRequestConfirm+0x48c>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	791a      	ldrb	r2, [r3, #4]
 800facc:	4b5c      	ldr	r3, [pc, #368]	; (800fc40 <LoRaMacMibSetRequestConfirm+0x5f8>)
 800face:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800fad2:	e0ef      	b.n	800fcb4 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800fad4:	2303      	movs	r3, #3
 800fad6:	75fb      	strb	r3, [r7, #23]
            break;
 800fad8:	e0ec      	b.n	800fcb4 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	685b      	ldr	r3, [r3, #4]
 800fade:	4a58      	ldr	r2, [pc, #352]	; (800fc40 <LoRaMacMibSetRequestConfirm+0x5f8>)
 800fae0:	64d3      	str	r3, [r2, #76]	; 0x4c
            break;
 800fae2:	e0e7      	b.n	800fcb4 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	685b      	ldr	r3, [r3, #4]
 800fae8:	4a55      	ldr	r2, [pc, #340]	; (800fc40 <LoRaMacMibSetRequestConfirm+0x5f8>)
 800faea:	6513      	str	r3, [r2, #80]	; 0x50
            break;
 800faec:	e0e2      	b.n	800fcb4 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	685b      	ldr	r3, [r3, #4]
 800faf2:	4a53      	ldr	r2, [pc, #332]	; (800fc40 <LoRaMacMibSetRequestConfirm+0x5f8>)
 800faf4:	6553      	str	r3, [r2, #84]	; 0x54
            break;
 800faf6:	e0dd      	b.n	800fcb4 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	685b      	ldr	r3, [r3, #4]
 800fafc:	4a50      	ldr	r2, [pc, #320]	; (800fc40 <LoRaMacMibSetRequestConfirm+0x5f8>)
 800fafe:	6593      	str	r3, [r2, #88]	; 0x58
            break;
 800fb00:	e0d8      	b.n	800fcb4 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	685b      	ldr	r3, [r3, #4]
 800fb06:	4a4e      	ldr	r2, [pc, #312]	; (800fc40 <LoRaMacMibSetRequestConfirm+0x5f8>)
 800fb08:	65d3      	str	r3, [r2, #92]	; 0x5c
            break;
 800fb0a:	e0d3      	b.n	800fcb4 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800fb12:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 800fb14:	4b4a      	ldr	r3, [pc, #296]	; (800fc40 <LoRaMacMibSetRequestConfirm+0x5f8>)
 800fb16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fb1a:	f107 0108 	add.w	r1, r7, #8
 800fb1e:	2206      	movs	r2, #6
 800fb20:	4618      	mov	r0, r3
 800fb22:	f002 fba7 	bl	8012274 <RegionVerify>
 800fb26:	4603      	mov	r3, r0
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d005      	beq.n	800fb38 <LoRaMacMibSetRequestConfirm+0x4f0>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 800fb2c:	f997 2008 	ldrsb.w	r2, [r7, #8]
 800fb30:	4b43      	ldr	r3, [pc, #268]	; (800fc40 <LoRaMacMibSetRequestConfirm+0x5f8>)
 800fb32:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800fb36:	e0bd      	b.n	800fcb4 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800fb38:	2303      	movs	r3, #3
 800fb3a:	75fb      	strb	r3, [r7, #23]
            break;
 800fb3c:	e0ba      	b.n	800fcb4 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800fb44:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800fb46:	4b3e      	ldr	r3, [pc, #248]	; (800fc40 <LoRaMacMibSetRequestConfirm+0x5f8>)
 800fb48:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800fb4c:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800fb4e:	4b3c      	ldr	r3, [pc, #240]	; (800fc40 <LoRaMacMibSetRequestConfirm+0x5f8>)
 800fb50:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fb54:	f107 0108 	add.w	r1, r7, #8
 800fb58:	2205      	movs	r2, #5
 800fb5a:	4618      	mov	r0, r3
 800fb5c:	f002 fb8a 	bl	8012274 <RegionVerify>
 800fb60:	4603      	mov	r3, r0
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d005      	beq.n	800fb72 <LoRaMacMibSetRequestConfirm+0x52a>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 800fb66:	f997 2008 	ldrsb.w	r2, [r7, #8]
 800fb6a:	4b35      	ldr	r3, [pc, #212]	; (800fc40 <LoRaMacMibSetRequestConfirm+0x5f8>)
 800fb6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800fb70:	e0a0      	b.n	800fcb4 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800fb72:	2303      	movs	r3, #3
 800fb74:	75fb      	strb	r3, [r7, #23]
            break;
 800fb76:	e09d      	b.n	800fcb4 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800fb7e:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 800fb80:	4b2f      	ldr	r3, [pc, #188]	; (800fc40 <LoRaMacMibSetRequestConfirm+0x5f8>)
 800fb82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fb86:	f107 0108 	add.w	r1, r7, #8
 800fb8a:	220a      	movs	r2, #10
 800fb8c:	4618      	mov	r0, r3
 800fb8e:	f002 fb71 	bl	8012274 <RegionVerify>
 800fb92:	4603      	mov	r3, r0
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	d005      	beq.n	800fba4 <LoRaMacMibSetRequestConfirm+0x55c>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 800fb98:	f997 2008 	ldrsb.w	r2, [r7, #8]
 800fb9c:	4b28      	ldr	r3, [pc, #160]	; (800fc40 <LoRaMacMibSetRequestConfirm+0x5f8>)
 800fb9e:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800fba2:	e087      	b.n	800fcb4 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800fba4:	2303      	movs	r3, #3
 800fba6:	75fb      	strb	r3, [r7, #23]
            break;
 800fba8:	e084      	b.n	800fcb4 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800fbb0:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 800fbb2:	4b23      	ldr	r3, [pc, #140]	; (800fc40 <LoRaMacMibSetRequestConfirm+0x5f8>)
 800fbb4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fbb8:	f107 0108 	add.w	r1, r7, #8
 800fbbc:	2209      	movs	r2, #9
 800fbbe:	4618      	mov	r0, r3
 800fbc0:	f002 fb58 	bl	8012274 <RegionVerify>
 800fbc4:	4603      	mov	r3, r0
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	d005      	beq.n	800fbd6 <LoRaMacMibSetRequestConfirm+0x58e>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 800fbca:	f997 2008 	ldrsb.w	r2, [r7, #8]
 800fbce:	4b1c      	ldr	r3, [pc, #112]	; (800fc40 <LoRaMacMibSetRequestConfirm+0x5f8>)
 800fbd0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800fbd4:	e06e      	b.n	800fcb4 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800fbd6:	2303      	movs	r3, #3
 800fbd8:	75fb      	strb	r3, [r7, #23]
            break;
 800fbda:	e06b      	b.n	800fcb4 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	685b      	ldr	r3, [r3, #4]
 800fbe0:	4a17      	ldr	r2, [pc, #92]	; (800fc40 <LoRaMacMibSetRequestConfirm+0x5f8>)
 800fbe2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 800fbe6:	4b16      	ldr	r3, [pc, #88]	; (800fc40 <LoRaMacMibSetRequestConfirm+0x5f8>)
 800fbe8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fbec:	4a14      	ldr	r2, [pc, #80]	; (800fc40 <LoRaMacMibSetRequestConfirm+0x5f8>)
 800fbee:	6453      	str	r3, [r2, #68]	; 0x44
            break;
 800fbf0:	e060      	b.n	800fcb4 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	791a      	ldrb	r2, [r3, #4]
 800fbf6:	4b12      	ldr	r3, [pc, #72]	; (800fc40 <LoRaMacMibSetRequestConfirm+0x5f8>)
 800fbf8:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 800fbfc:	4b10      	ldr	r3, [pc, #64]	; (800fc40 <LoRaMacMibSetRequestConfirm+0x5f8>)
 800fbfe:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 800fc02:	4b0f      	ldr	r3, [pc, #60]	; (800fc40 <LoRaMacMibSetRequestConfirm+0x5f8>)
 800fc04:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            break;
 800fc08:	e054      	b.n	800fcb4 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	685b      	ldr	r3, [r3, #4]
 800fc0e:	4a0c      	ldr	r2, [pc, #48]	; (800fc40 <LoRaMacMibSetRequestConfirm+0x5f8>)
 800fc10:	67d3      	str	r3, [r2, #124]	; 0x7c
            break;
 800fc12:	e04f      	b.n	800fcb4 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	685b      	ldr	r3, [r3, #4]
 800fc18:	4a09      	ldr	r2, [pc, #36]	; (800fc40 <LoRaMacMibSetRequestConfirm+0x5f8>)
 800fc1a:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
            break;
 800fc1e:	e049      	b.n	800fcb4 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_NVM_CTXS:
        {
            if( mibSet->Param.Contexts != 0 )
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	685b      	ldr	r3, [r3, #4]
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d007      	beq.n	800fc38 <LoRaMacMibSetRequestConfirm+0x5f0>
            {
                status = RestoreNvmData( mibSet->Param.Contexts );
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	685b      	ldr	r3, [r3, #4]
 800fc2c:	4618      	mov	r0, r3
 800fc2e:	f7fe fe27 	bl	800e880 <RestoreNvmData>
 800fc32:	4603      	mov	r3, r0
 800fc34:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800fc36:	e03d      	b.n	800fcb4 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800fc38:	2303      	movs	r3, #3
 800fc3a:	75fb      	strb	r3, [r7, #23]
            break;
 800fc3c:	e03a      	b.n	800fcb4 <LoRaMacMibSetRequestConfirm+0x66c>
 800fc3e:	bf00      	nop
 800fc40:	200008e8 	.word	0x200008e8
 800fc44:	08019c7c 	.word	0x08019c7c
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	799b      	ldrb	r3, [r3, #6]
 800fc4c:	2b01      	cmp	r3, #1
 800fc4e:	d80d      	bhi.n	800fc6c <LoRaMacMibSetRequestConfirm+0x624>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 800fc50:	4a1b      	ldr	r2, [pc, #108]	; (800fcc0 <LoRaMacMibSetRequestConfirm+0x678>)
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	685b      	ldr	r3, [r3, #4]
 800fc56:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	6858      	ldr	r0, [r3, #4]
 800fc5e:	f001 fc23 	bl	80114a8 <LoRaMacCryptoSetLrWanVersion>
 800fc62:	4603      	mov	r3, r0
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d024      	beq.n	800fcb2 <LoRaMacMibSetRequestConfirm+0x66a>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800fc68:	2311      	movs	r3, #17
 800fc6a:	e024      	b.n	800fcb6 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800fc6c:	2303      	movs	r3, #3
 800fc6e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800fc70:	e01f      	b.n	800fcb2 <LoRaMacMibSetRequestConfirm+0x66a>
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 800fc72:	6878      	ldr	r0, [r7, #4]
 800fc74:	f000 fbe4 	bl	8010440 <LoRaMacMibClassBSetRequestConfirm>
 800fc78:	4603      	mov	r3, r0
 800fc7a:	75fb      	strb	r3, [r7, #23]
            break;
 800fc7c:	e01a      	b.n	800fcb4 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 800fc7e:	bf00      	nop
 800fc80:	e018      	b.n	800fcb4 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 800fc82:	bf00      	nop
 800fc84:	e016      	b.n	800fcb4 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 800fc86:	bf00      	nop
 800fc88:	e014      	b.n	800fcb4 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 800fc8a:	bf00      	nop
 800fc8c:	e012      	b.n	800fcb4 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 800fc8e:	bf00      	nop
 800fc90:	e010      	b.n	800fcb4 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 800fc92:	bf00      	nop
 800fc94:	e00e      	b.n	800fcb4 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 800fc96:	bf00      	nop
 800fc98:	e00c      	b.n	800fcb4 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 800fc9a:	bf00      	nop
 800fc9c:	e00a      	b.n	800fcb4 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 800fc9e:	bf00      	nop
 800fca0:	e008      	b.n	800fcb4 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 800fca2:	bf00      	nop
 800fca4:	e006      	b.n	800fcb4 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 800fca6:	bf00      	nop
 800fca8:	e004      	b.n	800fcb4 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 800fcaa:	bf00      	nop
 800fcac:	e002      	b.n	800fcb4 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 800fcae:	bf00      	nop
 800fcb0:	e000      	b.n	800fcb4 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 800fcb2:	bf00      	nop
        }
    }
    return status;
 800fcb4:	7dfb      	ldrb	r3, [r7, #23]
}
 800fcb6:	4618      	mov	r0, r3
 800fcb8:	3718      	adds	r7, #24
 800fcba:	46bd      	mov	sp, r7
 800fcbc:	bd80      	pop	{r7, pc}
 800fcbe:	bf00      	nop
 800fcc0:	200008e8 	.word	0x200008e8

0800fcc4 <LoRaMacMlmeRequest>:
    }
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 800fcc4:	b580      	push	{r7, lr}
 800fcc6:	b086      	sub	sp, #24
 800fcc8:	af00      	add	r7, sp, #0
 800fcca:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800fccc:	2302      	movs	r3, #2
 800fcce:	75fb      	strb	r3, [r7, #23]
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800fcd0:	2300      	movs	r3, #0
 800fcd2:	81bb      	strh	r3, [r7, #12]

    if( mlmeRequest == NULL )
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d101      	bne.n	800fcde <LoRaMacMlmeRequest+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800fcda:	2303      	movs	r3, #3
 800fcdc:	e127      	b.n	800ff2e <LoRaMacMlmeRequest+0x26a>
    }
    if( LoRaMacIsBusy( ) == true )
 800fcde:	f7fc fd23 	bl	800c728 <LoRaMacIsBusy>
 800fce2:	4603      	mov	r3, r0
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	d001      	beq.n	800fcec <LoRaMacMlmeRequest+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 800fce8:	2301      	movs	r3, #1
 800fcea:	e120      	b.n	800ff2e <LoRaMacMlmeRequest+0x26a>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 800fcec:	f001 f8a6 	bl	8010e3c <LoRaMacConfirmQueueIsFull>
 800fcf0:	4603      	mov	r3, r0
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d001      	beq.n	800fcfa <LoRaMacMlmeRequest+0x36>
    {
        return LORAMAC_STATUS_BUSY;
 800fcf6:	2301      	movs	r3, #1
 800fcf8:	e119      	b.n	800ff2e <LoRaMacMlmeRequest+0x26a>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800fcfa:	f001 f893 	bl	8010e24 <LoRaMacConfirmQueueGetCnt>
 800fcfe:	4603      	mov	r3, r0
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d104      	bne.n	800fd0e <LoRaMacMlmeRequest+0x4a>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 800fd04:	2214      	movs	r2, #20
 800fd06:	2100      	movs	r1, #0
 800fd08:	488b      	ldr	r0, [pc, #556]	; (800ff38 <LoRaMacMlmeRequest+0x274>)
 800fd0a:	f004 fd79 	bl	8014800 <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fd0e:	4b8b      	ldr	r3, [pc, #556]	; (800ff3c <LoRaMacMlmeRequest+0x278>)
 800fd10:	2201      	movs	r2, #1
 800fd12:	f883 244d 	strb.w	r2, [r3, #1101]	; 0x44d

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 800fd16:	4a89      	ldr	r2, [pc, #548]	; (800ff3c <LoRaMacMlmeRequest+0x278>)
 800fd18:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800fd1c:	f043 0304 	orr.w	r3, r3, #4
 800fd20:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    queueElement.Request = mlmeRequest->Type;
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	781b      	ldrb	r3, [r3, #0]
 800fd28:	743b      	strb	r3, [r7, #16]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fd2a:	2301      	movs	r3, #1
 800fd2c:	747b      	strb	r3, [r7, #17]
    queueElement.RestrictCommonReadyToHandle = false;
 800fd2e:	2300      	movs	r3, #0
 800fd30:	74fb      	strb	r3, [r7, #19]

    switch( mlmeRequest->Type )
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	781b      	ldrb	r3, [r3, #0]
 800fd36:	3b01      	subs	r3, #1
 800fd38:	2b0d      	cmp	r3, #13
 800fd3a:	f200 80ce 	bhi.w	800feda <LoRaMacMlmeRequest+0x216>
 800fd3e:	a201      	add	r2, pc, #4	; (adr r2, 800fd44 <LoRaMacMlmeRequest+0x80>)
 800fd40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd44:	0800fd7d 	.word	0x0800fd7d
 800fd48:	0800fedb 	.word	0x0800fedb
 800fd4c:	0800fedb 	.word	0x0800fedb
 800fd50:	0800fde7 	.word	0x0800fde7
 800fd54:	0800fe05 	.word	0x0800fe05
 800fd58:	0800fe15 	.word	0x0800fe15
 800fd5c:	0800fedb 	.word	0x0800fedb
 800fd60:	0800fedb 	.word	0x0800fedb
 800fd64:	0800fedb 	.word	0x0800fedb
 800fd68:	0800fe31 	.word	0x0800fe31
 800fd6c:	0800fedb 	.word	0x0800fedb
 800fd70:	0800feaf 	.word	0x0800feaf
 800fd74:	0800fe4f 	.word	0x0800fe4f
 800fd78:	0800fe91 	.word	0x0800fe91
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 800fd7c:	4b6f      	ldr	r3, [pc, #444]	; (800ff3c <LoRaMacMlmeRequest+0x278>)
 800fd7e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800fd82:	f003 0320 	and.w	r3, r3, #32
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d001      	beq.n	800fd8e <LoRaMacMlmeRequest+0xca>
            {
                return LORAMAC_STATUS_BUSY;
 800fd8a:	2301      	movs	r3, #1
 800fd8c:	e0cf      	b.n	800ff2e <LoRaMacMlmeRequest+0x26a>
            }

            ResetMacParameters( );
 800fd8e:	f7fe f9fd 	bl	800e18c <ResetMacParameters>

            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 800fd92:	4b6b      	ldr	r3, [pc, #428]	; (800ff40 <LoRaMacMlmeRequest+0x27c>)
 800fd94:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	791b      	ldrb	r3, [r3, #4]
 800fd9c:	b25b      	sxtb	r3, r3
 800fd9e:	2200      	movs	r2, #0
 800fda0:	4619      	mov	r1, r3
 800fda2:	f002 fb4f 	bl	8012444 <RegionAlternateDr>
 800fda6:	4603      	mov	r3, r0
 800fda8:	461a      	mov	r2, r3
 800fdaa:	4b65      	ldr	r3, [pc, #404]	; (800ff40 <LoRaMacMlmeRequest+0x27c>)
 800fdac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 800fdb0:	2307      	movs	r3, #7
 800fdb2:	747b      	strb	r3, [r7, #17]

            status = SendReJoinReq( JOIN_REQ );
 800fdb4:	20ff      	movs	r0, #255	; 0xff
 800fdb6:	f7fd ff61 	bl	800dc7c <SendReJoinReq>
 800fdba:	4603      	mov	r3, r0
 800fdbc:	75fb      	strb	r3, [r7, #23]

            if( status != LORAMAC_STATUS_OK )
 800fdbe:	7dfb      	ldrb	r3, [r7, #23]
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	f000 808c 	beq.w	800fede <LoRaMacMlmeRequest+0x21a>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 800fdc6:	4b5e      	ldr	r3, [pc, #376]	; (800ff40 <LoRaMacMlmeRequest+0x27c>)
 800fdc8:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	791b      	ldrb	r3, [r3, #4]
 800fdd0:	b25b      	sxtb	r3, r3
 800fdd2:	2201      	movs	r2, #1
 800fdd4:	4619      	mov	r1, r3
 800fdd6:	f002 fb35 	bl	8012444 <RegionAlternateDr>
 800fdda:	4603      	mov	r3, r0
 800fddc:	461a      	mov	r2, r3
 800fdde:	4b58      	ldr	r3, [pc, #352]	; (800ff40 <LoRaMacMlmeRequest+0x27c>)
 800fde0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            }
            break;
 800fde4:	e07b      	b.n	800fede <LoRaMacMlmeRequest+0x21a>
        }
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 800fde6:	2300      	movs	r3, #0
 800fde8:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800fdea:	f107 030c 	add.w	r3, r7, #12
 800fdee:	2200      	movs	r2, #0
 800fdf0:	4619      	mov	r1, r3
 800fdf2:	2002      	movs	r0, #2
 800fdf4:	f000 fc88 	bl	8010708 <LoRaMacCommandsAddCmd>
 800fdf8:	4603      	mov	r3, r0
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d071      	beq.n	800fee2 <LoRaMacMlmeRequest+0x21e>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800fdfe:	2313      	movs	r3, #19
 800fe00:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800fe02:	e06e      	b.n	800fee2 <LoRaMacMlmeRequest+0x21e>
        }
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	889b      	ldrh	r3, [r3, #4]
 800fe08:	4618      	mov	r0, r3
 800fe0a:	f7fe fcdb 	bl	800e7c4 <SetTxContinuousWave>
 800fe0e:	4603      	mov	r3, r0
 800fe10:	75fb      	strb	r3, [r7, #23]
            break;
 800fe12:	e06d      	b.n	800fef0 <LoRaMacMlmeRequest+0x22c>
        }
        case MLME_TXCW_1:
        {

            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	8898      	ldrh	r0, [r3, #4]
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	6899      	ldr	r1, [r3, #8]
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800fe22:	b2db      	uxtb	r3, r3
 800fe24:	461a      	mov	r2, r3
 800fe26:	f7fe fd01 	bl	800e82c <SetTxContinuousWave1>
 800fe2a:	4603      	mov	r3, r0
 800fe2c:	75fb      	strb	r3, [r7, #23]
            break;
 800fe2e:	e05f      	b.n	800fef0 <LoRaMacMlmeRequest+0x22c>
        }
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 800fe30:	2300      	movs	r3, #0
 800fe32:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800fe34:	f107 030c 	add.w	r3, r7, #12
 800fe38:	2200      	movs	r2, #0
 800fe3a:	4619      	mov	r1, r3
 800fe3c:	200d      	movs	r0, #13
 800fe3e:	f000 fc63 	bl	8010708 <LoRaMacCommandsAddCmd>
 800fe42:	4603      	mov	r3, r0
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d04e      	beq.n	800fee6 <LoRaMacMlmeRequest+0x222>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800fe48:	2313      	movs	r3, #19
 800fe4a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800fe4c:	e04b      	b.n	800fee6 <LoRaMacMlmeRequest+0x222>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 800fe4e:	4b3c      	ldr	r3, [pc, #240]	; (800ff40 <LoRaMacMlmeRequest+0x27c>)
 800fe50:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d148      	bne.n	800feea <LoRaMacMlmeRequest+0x226>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	791b      	ldrb	r3, [r3, #4]
 800fe5c:	75bb      	strb	r3, [r7, #22]

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	791b      	ldrb	r3, [r3, #4]
 800fe62:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800fe66:	b2db      	uxtb	r3, r3
 800fe68:	4618      	mov	r0, r3
 800fe6a:	f000 fabe 	bl	80103ea <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 800fe6e:	7dbb      	ldrb	r3, [r7, #22]
 800fe70:	733b      	strb	r3, [r7, #12]
                status = LORAMAC_STATUS_OK;
 800fe72:	2300      	movs	r3, #0
 800fe74:	75fb      	strb	r3, [r7, #23]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 800fe76:	f107 030c 	add.w	r3, r7, #12
 800fe7a:	2201      	movs	r2, #1
 800fe7c:	4619      	mov	r1, r3
 800fe7e:	2010      	movs	r0, #16
 800fe80:	f000 fc42 	bl	8010708 <LoRaMacCommandsAddCmd>
 800fe84:	4603      	mov	r3, r0
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d02f      	beq.n	800feea <LoRaMacMlmeRequest+0x226>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800fe8a:	2313      	movs	r3, #19
 800fe8c:	75fb      	strb	r3, [r7, #23]
                }
            }
            break;
 800fe8e:	e02c      	b.n	800feea <LoRaMacMlmeRequest+0x226>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 800fe90:	2300      	movs	r3, #0
 800fe92:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800fe94:	f107 030c 	add.w	r3, r7, #12
 800fe98:	2200      	movs	r2, #0
 800fe9a:	4619      	mov	r1, r3
 800fe9c:	2012      	movs	r0, #18
 800fe9e:	f000 fc33 	bl	8010708 <LoRaMacCommandsAddCmd>
 800fea2:	4603      	mov	r3, r0
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d022      	beq.n	800feee <LoRaMacMlmeRequest+0x22a>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800fea8:	2313      	movs	r3, #19
 800feaa:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800feac:	e01f      	b.n	800feee <LoRaMacMlmeRequest+0x22a>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 800feae:	2301      	movs	r3, #1
 800feb0:	74fb      	strb	r3, [r7, #19]

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 800feb2:	f000 fa50 	bl	8010356 <LoRaMacClassBIsAcquisitionInProgress>
 800feb6:	4603      	mov	r3, r0
 800feb8:	f083 0301 	eor.w	r3, r3, #1
 800febc:	b2db      	uxtb	r3, r3
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d008      	beq.n	800fed4 <LoRaMacMlmeRequest+0x210>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 800fec2:	2000      	movs	r0, #0
 800fec4:	f000 fa29 	bl	801031a <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 800fec8:	2000      	movs	r0, #0
 800feca:	f000 fa4b 	bl	8010364 <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 800fece:	2300      	movs	r3, #0
 800fed0:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 800fed2:	e00d      	b.n	800fef0 <LoRaMacMlmeRequest+0x22c>
                status = LORAMAC_STATUS_BUSY;
 800fed4:	2301      	movs	r3, #1
 800fed6:	75fb      	strb	r3, [r7, #23]
            break;
 800fed8:	e00a      	b.n	800fef0 <LoRaMacMlmeRequest+0x22c>
        }
        default:
            break;
 800feda:	bf00      	nop
 800fedc:	e008      	b.n	800fef0 <LoRaMacMlmeRequest+0x22c>
            break;
 800fede:	bf00      	nop
 800fee0:	e006      	b.n	800fef0 <LoRaMacMlmeRequest+0x22c>
            break;
 800fee2:	bf00      	nop
 800fee4:	e004      	b.n	800fef0 <LoRaMacMlmeRequest+0x22c>
            break;
 800fee6:	bf00      	nop
 800fee8:	e002      	b.n	800fef0 <LoRaMacMlmeRequest+0x22c>
            break;
 800feea:	bf00      	nop
 800feec:	e000      	b.n	800fef0 <LoRaMacMlmeRequest+0x22c>
            break;
 800feee:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800fef0:	4b12      	ldr	r3, [pc, #72]	; (800ff3c <LoRaMacMlmeRequest+0x278>)
 800fef2:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 800fefa:	7dfb      	ldrb	r3, [r7, #23]
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d010      	beq.n	800ff22 <LoRaMacMlmeRequest+0x25e>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800ff00:	f000 ff90 	bl	8010e24 <LoRaMacConfirmQueueGetCnt>
 800ff04:	4603      	mov	r3, r0
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d110      	bne.n	800ff2c <LoRaMacMlmeRequest+0x268>
        {
            MacCtx.NodeAckRequested = false;
 800ff0a:	4b0c      	ldr	r3, [pc, #48]	; (800ff3c <LoRaMacMlmeRequest+0x278>)
 800ff0c:	2200      	movs	r2, #0
 800ff0e:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800ff12:	4a0a      	ldr	r2, [pc, #40]	; (800ff3c <LoRaMacMlmeRequest+0x278>)
 800ff14:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800ff18:	f36f 0382 	bfc	r3, #2, #1
 800ff1c:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 800ff20:	e004      	b.n	800ff2c <LoRaMacMlmeRequest+0x268>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 800ff22:	f107 0310 	add.w	r3, r7, #16
 800ff26:	4618      	mov	r0, r3
 800ff28:	f000 fe2e 	bl	8010b88 <LoRaMacConfirmQueueAdd>
    }
    return status;
 800ff2c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ff2e:	4618      	mov	r0, r3
 800ff30:	3718      	adds	r7, #24
 800ff32:	46bd      	mov	sp, r7
 800ff34:	bd80      	pop	{r7, pc}
 800ff36:	bf00      	nop
 800ff38:	2000082c 	.word	0x2000082c
 800ff3c:	200003e0 	.word	0x200003e0
 800ff40:	200008e8 	.word	0x200008e8

0800ff44 <LoRaMacMcpsRequest>:

/* ST_WORKAROUND_BEGIN: Update MCPS request with new input parameter to allow delayed tx */
LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 800ff44:	b580      	push	{r7, lr}
 800ff46:	b08c      	sub	sp, #48	; 0x30
 800ff48:	af02      	add	r7, sp, #8
 800ff4a:	6078      	str	r0, [r7, #4]
 800ff4c:	460b      	mov	r3, r1
 800ff4e:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800ff50:	2302      	movs	r3, #2
 800ff52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 800ff56:	2300      	movs	r3, #0
 800ff58:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    /* ST_WORKAROUND_BEGIN: remove GCC9 warning */
    void* fBuffer = NULL;
 800ff5c:	2300      	movs	r3, #0
 800ff5e:	623b      	str	r3, [r7, #32]
    /* ST_WORKAROUND_END */
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 800ff60:	2300      	movs	r3, #0
 800ff62:	777b      	strb	r3, [r7, #29]
    bool readyToSend = false;
 800ff64:	2300      	movs	r3, #0
 800ff66:	773b      	strb	r3, [r7, #28]

    if( mcpsRequest == NULL )
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d101      	bne.n	800ff72 <LoRaMacMcpsRequest+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800ff6e:	2303      	movs	r3, #3
 800ff70:	e0d4      	b.n	801011c <LoRaMacMcpsRequest+0x1d8>
    }
    if( LoRaMacIsBusy( ) == true )
 800ff72:	f7fc fbd9 	bl	800c728 <LoRaMacIsBusy>
 800ff76:	4603      	mov	r3, r0
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d001      	beq.n	800ff80 <LoRaMacMcpsRequest+0x3c>
    {
        return LORAMAC_STATUS_BUSY;
 800ff7c:	2301      	movs	r3, #1
 800ff7e:	e0cd      	b.n	801011c <LoRaMacMcpsRequest+0x1d8>
    }

    macHdr.Value = 0;
 800ff80:	2300      	movs	r3, #0
 800ff82:	733b      	strb	r3, [r7, #12]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 800ff84:	2214      	movs	r2, #20
 800ff86:	2100      	movs	r1, #0
 800ff88:	4866      	ldr	r0, [pc, #408]	; (8010124 <LoRaMacMcpsRequest+0x1e0>)
 800ff8a:	f004 fc39 	bl	8014800 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ff8e:	4b66      	ldr	r3, [pc, #408]	; (8010128 <LoRaMacMcpsRequest+0x1e4>)
 800ff90:	2201      	movs	r2, #1
 800ff92:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439

    // AckTimeoutRetriesCounter must be reset every time a new request (unconfirmed or confirmed) is performed.
    MacCtx.AckTimeoutRetriesCounter = 1;
 800ff96:	4b64      	ldr	r3, [pc, #400]	; (8010128 <LoRaMacMcpsRequest+0x1e4>)
 800ff98:	2201      	movs	r2, #1
 800ff9a:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412

    switch( mcpsRequest->Type )
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	781b      	ldrb	r3, [r3, #0]
 800ffa2:	2b03      	cmp	r3, #3
 800ffa4:	d03d      	beq.n	8010022 <LoRaMacMcpsRequest+0xde>
 800ffa6:	2b03      	cmp	r3, #3
 800ffa8:	dc4f      	bgt.n	801004a <LoRaMacMcpsRequest+0x106>
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	d002      	beq.n	800ffb4 <LoRaMacMcpsRequest+0x70>
 800ffae:	2b01      	cmp	r3, #1
 800ffb0:	d019      	beq.n	800ffe6 <LoRaMacMcpsRequest+0xa2>
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
            datarate = mcpsRequest->Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 800ffb2:	e04a      	b.n	801004a <LoRaMacMcpsRequest+0x106>
            readyToSend = true;
 800ffb4:	2301      	movs	r3, #1
 800ffb6:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 800ffb8:	4b5b      	ldr	r3, [pc, #364]	; (8010128 <LoRaMacMcpsRequest+0x1e4>)
 800ffba:	2201      	movs	r2, #1
 800ffbc:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 800ffc0:	7b3b      	ldrb	r3, [r7, #12]
 800ffc2:	2202      	movs	r2, #2
 800ffc4:	f362 1347 	bfi	r3, r2, #5, #3
 800ffc8:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	791b      	ldrb	r3, [r3, #4]
 800ffce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	689b      	ldr	r3, [r3, #8]
 800ffd6:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	899b      	ldrh	r3, [r3, #12]
 800ffdc:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	7b9b      	ldrb	r3, [r3, #14]
 800ffe2:	777b      	strb	r3, [r7, #29]
            break;
 800ffe4:	e032      	b.n	801004c <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 800ffe6:	2301      	movs	r3, #1
 800ffe8:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	7bdb      	ldrb	r3, [r3, #15]
 800ffee:	2b08      	cmp	r3, #8
 800fff0:	bf28      	it	cs
 800fff2:	2308      	movcs	r3, #8
 800fff4:	b2da      	uxtb	r2, r3
 800fff6:	4b4c      	ldr	r3, [pc, #304]	; (8010128 <LoRaMacMcpsRequest+0x1e4>)
 800fff8:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 800fffc:	7b3b      	ldrb	r3, [r7, #12]
 800fffe:	2204      	movs	r2, #4
 8010000:	f362 1347 	bfi	r3, r2, #5, #3
 8010004:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	791b      	ldrb	r3, [r3, #4]
 801000a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	689b      	ldr	r3, [r3, #8]
 8010012:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	899b      	ldrh	r3, [r3, #12]
 8010018:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	7b9b      	ldrb	r3, [r3, #14]
 801001e:	777b      	strb	r3, [r7, #29]
            break;
 8010020:	e014      	b.n	801004c <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 8010022:	2301      	movs	r3, #1
 8010024:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 8010026:	4b40      	ldr	r3, [pc, #256]	; (8010128 <LoRaMacMcpsRequest+0x1e4>)
 8010028:	2201      	movs	r2, #1
 801002a:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 801002e:	7b3b      	ldrb	r3, [r7, #12]
 8010030:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8010034:	733b      	strb	r3, [r7, #12]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	685b      	ldr	r3, [r3, #4]
 801003a:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	891b      	ldrh	r3, [r3, #8]
 8010040:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	7a9b      	ldrb	r3, [r3, #10]
 8010046:	777b      	strb	r3, [r7, #29]
            break;
 8010048:	e000      	b.n	801004c <LoRaMacMcpsRequest+0x108>
            break;
 801004a:	bf00      	nop
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 801004c:	2302      	movs	r3, #2
 801004e:	753b      	strb	r3, [r7, #20]
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8010050:	4b36      	ldr	r3, [pc, #216]	; (801012c <LoRaMacMcpsRequest+0x1e8>)
 8010052:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8010056:	75bb      	strb	r3, [r7, #22]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010058:	4b34      	ldr	r3, [pc, #208]	; (801012c <LoRaMacMcpsRequest+0x1e8>)
 801005a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801005e:	f107 0214 	add.w	r2, r7, #20
 8010062:	4611      	mov	r1, r2
 8010064:	4618      	mov	r0, r3
 8010066:	f002 f8c9 	bl	80121fc <RegionGetPhyParam>
 801006a:	4603      	mov	r3, r0
 801006c:	613b      	str	r3, [r7, #16]
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 801006e:	693b      	ldr	r3, [r7, #16]
 8010070:	b25b      	sxtb	r3, r3
 8010072:	f997 201d 	ldrsb.w	r2, [r7, #29]
 8010076:	4293      	cmp	r3, r2
 8010078:	bfb8      	it	lt
 801007a:	4613      	movlt	r3, r2
 801007c:	777b      	strb	r3, [r7, #29]

    if( readyToSend == true )
 801007e:	7f3b      	ldrb	r3, [r7, #28]
 8010080:	2b00      	cmp	r3, #0
 8010082:	d044      	beq.n	801010e <LoRaMacMcpsRequest+0x1ca>
    {
        if( Nvm.MacGroup2.AdrCtrlOn == false )
 8010084:	4b29      	ldr	r3, [pc, #164]	; (801012c <LoRaMacMcpsRequest+0x1e8>)
 8010086:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 801008a:	f083 0301 	eor.w	r3, r3, #1
 801008e:	b2db      	uxtb	r3, r3
 8010090:	2b00      	cmp	r3, #0
 8010092:	d019      	beq.n	80100c8 <LoRaMacMcpsRequest+0x184>
        {
            verify.DatarateParams.Datarate = datarate;
 8010094:	7f7b      	ldrb	r3, [r7, #29]
 8010096:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8010098:	4b24      	ldr	r3, [pc, #144]	; (801012c <LoRaMacMcpsRequest+0x1e8>)
 801009a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 801009e:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 80100a0:	4b22      	ldr	r3, [pc, #136]	; (801012c <LoRaMacMcpsRequest+0x1e8>)
 80100a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80100a6:	f107 0108 	add.w	r1, r7, #8
 80100aa:	2205      	movs	r2, #5
 80100ac:	4618      	mov	r0, r3
 80100ae:	f002 f8e1 	bl	8012274 <RegionVerify>
 80100b2:	4603      	mov	r3, r0
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	d005      	beq.n	80100c4 <LoRaMacMcpsRequest+0x180>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 80100b8:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80100bc:	4b1b      	ldr	r3, [pc, #108]	; (801012c <LoRaMacMcpsRequest+0x1e8>)
 80100be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80100c2:	e001      	b.n	80100c8 <LoRaMacMcpsRequest+0x184>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 80100c4:	2303      	movs	r3, #3
 80100c6:	e029      	b.n	801011c <LoRaMacMcpsRequest+0x1d8>
            }
        }

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 80100c8:	8bfa      	ldrh	r2, [r7, #30]
 80100ca:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 80100ce:	f107 000c 	add.w	r0, r7, #12
 80100d2:	78fb      	ldrb	r3, [r7, #3]
 80100d4:	9300      	str	r3, [sp, #0]
 80100d6:	4613      	mov	r3, r2
 80100d8:	6a3a      	ldr	r2, [r7, #32]
 80100da:	f7fd fcef 	bl	800dabc <Send>
 80100de:	4603      	mov	r3, r0
 80100e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if( status == LORAMAC_STATUS_OK )
 80100e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d10c      	bne.n	8010106 <LoRaMacMcpsRequest+0x1c2>
        {
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	781a      	ldrb	r2, [r3, #0]
 80100f0:	4b0d      	ldr	r3, [pc, #52]	; (8010128 <LoRaMacMcpsRequest+0x1e4>)
 80100f2:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
            MacCtx.MacFlags.Bits.McpsReq = 1;
 80100f6:	4a0c      	ldr	r2, [pc, #48]	; (8010128 <LoRaMacMcpsRequest+0x1e4>)
 80100f8:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 80100fc:	f043 0301 	orr.w	r3, r3, #1
 8010100:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 8010104:	e003      	b.n	801010e <LoRaMacMcpsRequest+0x1ca>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 8010106:	4b08      	ldr	r3, [pc, #32]	; (8010128 <LoRaMacMcpsRequest+0x1e4>)
 8010108:	2200      	movs	r2, #0
 801010a:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        }
    }

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 801010e:	4b06      	ldr	r3, [pc, #24]	; (8010128 <LoRaMacMcpsRequest+0x1e4>)
 8010110:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	611a      	str	r2, [r3, #16]

    return status;
 8010118:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801011c:	4618      	mov	r0, r3
 801011e:	3728      	adds	r7, #40	; 0x28
 8010120:	46bd      	mov	sp, r7
 8010122:	bd80      	pop	{r7, pc}
 8010124:	20000818 	.word	0x20000818
 8010128:	200003e0 	.word	0x200003e0
 801012c:	200008e8 	.word	0x200008e8

08010130 <LoRaMacTestSetDutyCycleOn>:
/* ST_WORKAROUND_END */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 8010130:	b580      	push	{r7, lr}
 8010132:	b084      	sub	sp, #16
 8010134:	af00      	add	r7, sp, #0
 8010136:	4603      	mov	r3, r0
 8010138:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 801013a:	79fb      	ldrb	r3, [r7, #7]
 801013c:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 801013e:	4b0a      	ldr	r3, [pc, #40]	; (8010168 <LoRaMacTestSetDutyCycleOn+0x38>)
 8010140:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010144:	f107 010c 	add.w	r1, r7, #12
 8010148:	220f      	movs	r2, #15
 801014a:	4618      	mov	r0, r3
 801014c:	f002 f892 	bl	8012274 <RegionVerify>
 8010150:	4603      	mov	r3, r0
 8010152:	2b00      	cmp	r3, #0
 8010154:	d003      	beq.n	801015e <LoRaMacTestSetDutyCycleOn+0x2e>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 8010156:	4a04      	ldr	r2, [pc, #16]	; (8010168 <LoRaMacTestSetDutyCycleOn+0x38>)
 8010158:	79fb      	ldrb	r3, [r7, #7]
 801015a:	f882 3100 	strb.w	r3, [r2, #256]	; 0x100
    }
}
 801015e:	bf00      	nop
 8010160:	3710      	adds	r7, #16
 8010162:	46bd      	mov	sp, r7
 8010164:	bd80      	pop	{r7, pc}
 8010166:	bf00      	nop
 8010168:	200008e8 	.word	0x200008e8

0801016c <CalcNextV10X>:

#include "Region.h"
#include "LoRaMacAdr.h"

static bool CalcNextV10X( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 801016c:	b580      	push	{r7, lr}
 801016e:	b08c      	sub	sp, #48	; 0x30
 8010170:	af00      	add	r7, sp, #0
 8010172:	60f8      	str	r0, [r7, #12]
 8010174:	60b9      	str	r1, [r7, #8]
 8010176:	607a      	str	r2, [r7, #4]
 8010178:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 801017a:	2300      	movs	r3, #0
 801017c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = adrNext->Datarate;
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	7c1b      	ldrb	r3, [r3, #16]
 8010184:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = adrNext->TxPower;
 8010188:	68fb      	ldr	r3, [r7, #12]
 801018a:	7c5b      	ldrb	r3, [r3, #17]
 801018c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	689a      	ldr	r2, [r3, #8]
 8010194:	683b      	ldr	r3, [r7, #0]
 8010196:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 8010198:	68fb      	ldr	r3, [r7, #12]
 801019a:	795b      	ldrb	r3, [r3, #5]
 801019c:	2b00      	cmp	r3, #0
 801019e:	f000 808b 	beq.w	80102b8 <CalcNextV10X+0x14c>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 80101a2:	2302      	movs	r3, #2
 80101a4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 80101a8:	68fb      	ldr	r3, [r7, #12]
 80101aa:	7c9b      	ldrb	r3, [r3, #18]
 80101ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80101b0:	68fb      	ldr	r3, [r7, #12]
 80101b2:	7cdb      	ldrb	r3, [r3, #19]
 80101b4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80101b8:	4611      	mov	r1, r2
 80101ba:	4618      	mov	r0, r3
 80101bc:	f002 f81e 	bl	80121fc <RegionGetPhyParam>
 80101c0:	4603      	mov	r3, r0
 80101c2:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 80101c4:	6a3b      	ldr	r3, [r7, #32]
 80101c6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        datarate = MAX( datarate, minTxDatarate );
 80101ca:	f997 202c 	ldrsb.w	r2, [r7, #44]	; 0x2c
 80101ce:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 80101d2:	4293      	cmp	r3, r2
 80101d4:	bfb8      	it	lt
 80101d6:	4613      	movlt	r3, r2
 80101d8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        if( datarate == minTxDatarate )
 80101dc:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 80101e0:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 80101e4:	429a      	cmp	r2, r3
 80101e6:	d106      	bne.n	80101f6 <CalcNextV10X+0x8a>
        {
            *adrAckCounter = 0;
 80101e8:	683b      	ldr	r3, [r7, #0]
 80101ea:	2200      	movs	r2, #0
 80101ec:	601a      	str	r2, [r3, #0]
            adrAckReq = false;
 80101ee:	2300      	movs	r3, #0
 80101f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80101f4:	e060      	b.n	80102b8 <CalcNextV10X+0x14c>
        }
        else
        {
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 80101f6:	68fb      	ldr	r3, [r7, #12]
 80101f8:	689b      	ldr	r3, [r3, #8]
 80101fa:	68fa      	ldr	r2, [r7, #12]
 80101fc:	8992      	ldrh	r2, [r2, #12]
 80101fe:	4293      	cmp	r3, r2
 8010200:	d303      	bcc.n	801020a <CalcNextV10X+0x9e>
            {
                adrAckReq = true;
 8010202:	2301      	movs	r3, #1
 8010204:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8010208:	e002      	b.n	8010210 <CalcNextV10X+0xa4>
            }
            else
            {
                adrAckReq = false;
 801020a:	2300      	movs	r3, #0
 801020c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            }
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 8010210:	68fb      	ldr	r3, [r7, #12]
 8010212:	689b      	ldr	r3, [r3, #8]
 8010214:	68fa      	ldr	r2, [r7, #12]
 8010216:	8992      	ldrh	r2, [r2, #12]
 8010218:	4611      	mov	r1, r2
 801021a:	68fa      	ldr	r2, [r7, #12]
 801021c:	89d2      	ldrh	r2, [r2, #14]
 801021e:	440a      	add	r2, r1
 8010220:	4293      	cmp	r3, r2
 8010222:	d349      	bcc.n	80102b8 <CalcNextV10X+0x14c>
            {
                // Set TX Power to maximum
                getPhy.Attribute = PHY_MAX_TX_POWER;
 8010224:	2308      	movs	r3, #8
 8010226:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 801022a:	68fb      	ldr	r3, [r7, #12]
 801022c:	7cdb      	ldrb	r3, [r3, #19]
 801022e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8010232:	4611      	mov	r1, r2
 8010234:	4618      	mov	r0, r3
 8010236:	f001 ffe1 	bl	80121fc <RegionGetPhyParam>
 801023a:	4603      	mov	r3, r0
 801023c:	623b      	str	r3, [r7, #32]
                txPower = phyParam.Value;
 801023e:	6a3b      	ldr	r3, [r7, #32]
 8010240:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 8010244:	68fb      	ldr	r3, [r7, #12]
 8010246:	689b      	ldr	r3, [r3, #8]
 8010248:	68fa      	ldr	r2, [r7, #12]
 801024a:	89d2      	ldrh	r2, [r2, #14]
 801024c:	fbb3 f1f2 	udiv	r1, r3, r2
 8010250:	fb02 f201 	mul.w	r2, r2, r1
 8010254:	1a9b      	subs	r3, r3, r2
 8010256:	2b01      	cmp	r3, #1
 8010258:	d12e      	bne.n	80102b8 <CalcNextV10X+0x14c>
                {
                    // Decrease the datarate
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 801025a:	2322      	movs	r3, #34	; 0x22
 801025c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    getPhy.Datarate = datarate;
 8010260:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8010264:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8010268:	68fb      	ldr	r3, [r7, #12]
 801026a:	7c9b      	ldrb	r3, [r3, #18]
 801026c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8010270:	68fb      	ldr	r3, [r7, #12]
 8010272:	7cdb      	ldrb	r3, [r3, #19]
 8010274:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8010278:	4611      	mov	r1, r2
 801027a:	4618      	mov	r0, r3
 801027c:	f001 ffbe 	bl	80121fc <RegionGetPhyParam>
 8010280:	4603      	mov	r3, r0
 8010282:	623b      	str	r3, [r7, #32]
                    datarate = phyParam.Value;
 8010284:	6a3b      	ldr	r3, [r7, #32]
 8010286:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

                    if( datarate == minTxDatarate )
 801028a:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 801028e:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 8010292:	429a      	cmp	r2, r3
 8010294:	d110      	bne.n	80102b8 <CalcNextV10X+0x14c>
                    {
                        // We must set adrAckReq to false as soon as we reach the lowest datarate
                        adrAckReq = false;
 8010296:	2300      	movs	r3, #0
 8010298:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                        if( adrNext->UpdateChanMask == true )
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	791b      	ldrb	r3, [r3, #4]
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d009      	beq.n	80102b8 <CalcNextV10X+0x14c>
                        {
                            InitDefaultsParams_t params;
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 80102a4:	2302      	movs	r3, #2
 80102a6:	773b      	strb	r3, [r7, #28]
                            RegionInitDefaults( adrNext->Region, &params );
 80102a8:	68fb      	ldr	r3, [r7, #12]
 80102aa:	7cdb      	ldrb	r3, [r3, #19]
 80102ac:	f107 0214 	add.w	r2, r7, #20
 80102b0:	4611      	mov	r1, r2
 80102b2:	4618      	mov	r0, r3
 80102b4:	f001 ffcc 	bl	8012250 <RegionInitDefaults>
                }
            }
        }
    }

    *drOut = datarate;
 80102b8:	68bb      	ldr	r3, [r7, #8]
 80102ba:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80102be:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80102c6:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 80102c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80102cc:	4618      	mov	r0, r3
 80102ce:	3730      	adds	r7, #48	; 0x30
 80102d0:	46bd      	mov	sp, r7
 80102d2:	bd80      	pop	{r7, pc}

080102d4 <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 80102d4:	b580      	push	{r7, lr}
 80102d6:	b084      	sub	sp, #16
 80102d8:	af00      	add	r7, sp, #0
 80102da:	60f8      	str	r0, [r7, #12]
 80102dc:	60b9      	str	r1, [r7, #8]
 80102de:	607a      	str	r2, [r7, #4]
 80102e0:	603b      	str	r3, [r7, #0]
    if( adrNext->Version.Fields.Minor == 0 )
 80102e2:	68fb      	ldr	r3, [r7, #12]
 80102e4:	789b      	ldrb	r3, [r3, #2]
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d107      	bne.n	80102fa <LoRaMacAdrCalcNext+0x26>
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
 80102ea:	683b      	ldr	r3, [r7, #0]
 80102ec:	687a      	ldr	r2, [r7, #4]
 80102ee:	68b9      	ldr	r1, [r7, #8]
 80102f0:	68f8      	ldr	r0, [r7, #12]
 80102f2:	f7ff ff3b 	bl	801016c <CalcNextV10X>
 80102f6:	4603      	mov	r3, r0
 80102f8:	e000      	b.n	80102fc <LoRaMacAdrCalcNext+0x28>
    }
    return false;
 80102fa:	2300      	movs	r3, #0
}
 80102fc:	4618      	mov	r0, r3
 80102fe:	3710      	adds	r7, #16
 8010300:	46bd      	mov	sp, r7
 8010302:	bd80      	pop	{r7, pc}

08010304 <LoRaMacClassBInit>:
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks,
                        LoRaMacClassBNvmData_t* nvm )
{
 8010304:	b480      	push	{r7}
 8010306:	b085      	sub	sp, #20
 8010308:	af00      	add	r7, sp, #0
 801030a:	60f8      	str	r0, [r7, #12]
 801030c:	60b9      	str	r1, [r7, #8]
 801030e:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8010310:	bf00      	nop
 8010312:	3714      	adds	r7, #20
 8010314:	46bd      	mov	sp, r7
 8010316:	bc80      	pop	{r7}
 8010318:	4770      	bx	lr

0801031a <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 801031a:	b480      	push	{r7}
 801031c:	b083      	sub	sp, #12
 801031e:	af00      	add	r7, sp, #0
 8010320:	4603      	mov	r3, r0
 8010322:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8010324:	bf00      	nop
 8010326:	370c      	adds	r7, #12
 8010328:	46bd      	mov	sp, r7
 801032a:	bc80      	pop	{r7}
 801032c:	4770      	bx	lr

0801032e <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 801032e:	b480      	push	{r7}
 8010330:	b083      	sub	sp, #12
 8010332:	af00      	add	r7, sp, #0
 8010334:	4603      	mov	r3, r0
 8010336:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8010338:	bf00      	nop
 801033a:	370c      	adds	r7, #12
 801033c:	46bd      	mov	sp, r7
 801033e:	bc80      	pop	{r7}
 8010340:	4770      	bx	lr

08010342 <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 8010342:	b480      	push	{r7}
 8010344:	b083      	sub	sp, #12
 8010346:	af00      	add	r7, sp, #0
 8010348:	4603      	mov	r3, r0
 801034a:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801034c:	bf00      	nop
 801034e:	370c      	adds	r7, #12
 8010350:	46bd      	mov	sp, r7
 8010352:	bc80      	pop	{r7}
 8010354:	4770      	bx	lr

08010356 <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 8010356:	b480      	push	{r7}
 8010358:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 801035a:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801035c:	4618      	mov	r0, r3
 801035e:	46bd      	mov	sp, r7
 8010360:	bc80      	pop	{r7}
 8010362:	4770      	bx	lr

08010364 <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 8010364:	b480      	push	{r7}
 8010366:	b083      	sub	sp, #12
 8010368:	af00      	add	r7, sp, #0
 801036a:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801036c:	bf00      	nop
 801036e:	370c      	adds	r7, #12
 8010370:	46bd      	mov	sp, r7
 8010372:	bc80      	pop	{r7}
 8010374:	4770      	bx	lr

08010376 <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 8010376:	b480      	push	{r7}
 8010378:	b083      	sub	sp, #12
 801037a:	af00      	add	r7, sp, #0
 801037c:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801037e:	bf00      	nop
 8010380:	370c      	adds	r7, #12
 8010382:	46bd      	mov	sp, r7
 8010384:	bc80      	pop	{r7}
 8010386:	4770      	bx	lr

08010388 <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 8010388:	b480      	push	{r7}
 801038a:	b083      	sub	sp, #12
 801038c:	af00      	add	r7, sp, #0
 801038e:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8010390:	bf00      	nop
 8010392:	370c      	adds	r7, #12
 8010394:	46bd      	mov	sp, r7
 8010396:	bc80      	pop	{r7}
 8010398:	4770      	bx	lr

0801039a <LoRaMacClassBRxBeacon>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 801039a:	b480      	push	{r7}
 801039c:	b083      	sub	sp, #12
 801039e:	af00      	add	r7, sp, #0
 80103a0:	6078      	str	r0, [r7, #4]
 80103a2:	460b      	mov	r3, r1
 80103a4:	807b      	strh	r3, [r7, #2]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 80103a6:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80103a8:	4618      	mov	r0, r3
 80103aa:	370c      	adds	r7, #12
 80103ac:	46bd      	mov	sp, r7
 80103ae:	bc80      	pop	{r7}
 80103b0:	4770      	bx	lr

080103b2 <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 80103b2:	b480      	push	{r7}
 80103b4:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80103b6:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80103b8:	4618      	mov	r0, r3
 80103ba:	46bd      	mov	sp, r7
 80103bc:	bc80      	pop	{r7}
 80103be:	4770      	bx	lr

080103c0 <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 80103c0:	b480      	push	{r7}
 80103c2:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80103c4:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80103c6:	4618      	mov	r0, r3
 80103c8:	46bd      	mov	sp, r7
 80103ca:	bc80      	pop	{r7}
 80103cc:	4770      	bx	lr

080103ce <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 80103ce:	b480      	push	{r7}
 80103d0:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80103d2:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80103d4:	4618      	mov	r0, r3
 80103d6:	46bd      	mov	sp, r7
 80103d8:	bc80      	pop	{r7}
 80103da:	4770      	bx	lr

080103dc <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 80103dc:	b480      	push	{r7}
 80103de:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80103e0:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80103e2:	4618      	mov	r0, r3
 80103e4:	46bd      	mov	sp, r7
 80103e6:	bc80      	pop	{r7}
 80103e8:	4770      	bx	lr

080103ea <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 80103ea:	b480      	push	{r7}
 80103ec:	b083      	sub	sp, #12
 80103ee:	af00      	add	r7, sp, #0
 80103f0:	4603      	mov	r3, r0
 80103f2:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80103f4:	bf00      	nop
 80103f6:	370c      	adds	r7, #12
 80103f8:	46bd      	mov	sp, r7
 80103fa:	bc80      	pop	{r7}
 80103fc:	4770      	bx	lr

080103fe <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 80103fe:	b480      	push	{r7}
 8010400:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8010402:	bf00      	nop
 8010404:	46bd      	mov	sp, r7
 8010406:	bc80      	pop	{r7}
 8010408:	4770      	bx	lr

0801040a <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 801040a:	b480      	push	{r7}
 801040c:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801040e:	bf00      	nop
 8010410:	46bd      	mov	sp, r7
 8010412:	bc80      	pop	{r7}
 8010414:	4770      	bx	lr

08010416 <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 8010416:	b480      	push	{r7}
 8010418:	b083      	sub	sp, #12
 801041a:	af00      	add	r7, sp, #0
 801041c:	4603      	mov	r3, r0
 801041e:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8010420:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8010422:	4618      	mov	r0, r3
 8010424:	370c      	adds	r7, #12
 8010426:	46bd      	mov	sp, r7
 8010428:	bc80      	pop	{r7}
 801042a:	4770      	bx	lr

0801042c <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 801042c:	b480      	push	{r7}
 801042e:	b083      	sub	sp, #12
 8010430:	af00      	add	r7, sp, #0
 8010432:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8010434:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8010436:	4618      	mov	r0, r3
 8010438:	370c      	adds	r7, #12
 801043a:	46bd      	mov	sp, r7
 801043c:	bc80      	pop	{r7}
 801043e:	4770      	bx	lr

08010440 <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 8010440:	b480      	push	{r7}
 8010442:	b083      	sub	sp, #12
 8010444:	af00      	add	r7, sp, #0
 8010446:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8010448:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801044a:	4618      	mov	r0, r3
 801044c:	370c      	adds	r7, #12
 801044e:	46bd      	mov	sp, r7
 8010450:	bc80      	pop	{r7}
 8010452:	4770      	bx	lr

08010454 <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 8010454:	b480      	push	{r7}
 8010456:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8010458:	bf00      	nop
 801045a:	46bd      	mov	sp, r7
 801045c:	bc80      	pop	{r7}
 801045e:	4770      	bx	lr

08010460 <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 8010460:	b480      	push	{r7}
 8010462:	b083      	sub	sp, #12
 8010464:	af00      	add	r7, sp, #0
 8010466:	4603      	mov	r3, r0
 8010468:	6039      	str	r1, [r7, #0]
 801046a:	71fb      	strb	r3, [r7, #7]
        ClassBNvm->PingSlotCtx.Datarate = datarate;
    }

    return status;
#else
    return 0;
 801046c:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801046e:	4618      	mov	r0, r3
 8010470:	370c      	adds	r7, #12
 8010472:	46bd      	mov	sp, r7
 8010474:	bc80      	pop	{r7}
 8010476:	4770      	bx	lr

08010478 <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 8010478:	b480      	push	{r7}
 801047a:	b083      	sub	sp, #12
 801047c:	af00      	add	r7, sp, #0
 801047e:	4603      	mov	r3, r0
 8010480:	603a      	str	r2, [r7, #0]
 8010482:	80fb      	strh	r3, [r7, #6]
 8010484:	460b      	mov	r3, r1
 8010486:	717b      	strb	r3, [r7, #5]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8010488:	bf00      	nop
 801048a:	370c      	adds	r7, #12
 801048c:	46bd      	mov	sp, r7
 801048e:	bc80      	pop	{r7}
 8010490:	4770      	bx	lr

08010492 <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 8010492:	b480      	push	{r7}
 8010494:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8010496:	bf00      	nop
 8010498:	46bd      	mov	sp, r7
 801049a:	bc80      	pop	{r7}
 801049c:	4770      	bx	lr

0801049e <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 801049e:	b480      	push	{r7}
 80104a0:	b083      	sub	sp, #12
 80104a2:	af00      	add	r7, sp, #0
 80104a4:	6078      	str	r0, [r7, #4]
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
        return true;
    }
    return false;
#else
    return false;
 80104a6:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80104a8:	4618      	mov	r0, r3
 80104aa:	370c      	adds	r7, #12
 80104ac:	46bd      	mov	sp, r7
 80104ae:	bc80      	pop	{r7}
 80104b0:	4770      	bx	lr

080104b2 <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 80104b2:	b480      	push	{r7}
 80104b4:	b083      	sub	sp, #12
 80104b6:	af00      	add	r7, sp, #0
 80104b8:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 80104ba:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80104bc:	4618      	mov	r0, r3
 80104be:	370c      	adds	r7, #12
 80104c0:	46bd      	mov	sp, r7
 80104c2:	bc80      	pop	{r7}
 80104c4:	4770      	bx	lr

080104c6 <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 80104c6:	b480      	push	{r7}
 80104c8:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80104ca:	bf00      	nop
 80104cc:	46bd      	mov	sp, r7
 80104ce:	bc80      	pop	{r7}
 80104d0:	4770      	bx	lr

080104d2 <LoRaMacClassBProcess>:
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}

void LoRaMacClassBProcess( void )
{
 80104d2:	b480      	push	{r7}
 80104d4:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80104d6:	bf00      	nop
 80104d8:	46bd      	mov	sp, r7
 80104da:	bc80      	pop	{r7}
 80104dc:	4770      	bx	lr

080104de <IsSlotFree>:
 *
 * \param[IN]     slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 80104de:	b480      	push	{r7}
 80104e0:	b085      	sub	sp, #20
 80104e2:	af00      	add	r7, sp, #0
 80104e4:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 80104ea:	2300      	movs	r3, #0
 80104ec:	81fb      	strh	r3, [r7, #14]
 80104ee:	e00a      	b.n	8010506 <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 80104f0:	89fb      	ldrh	r3, [r7, #14]
 80104f2:	68ba      	ldr	r2, [r7, #8]
 80104f4:	4413      	add	r3, r2
 80104f6:	781b      	ldrb	r3, [r3, #0]
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d001      	beq.n	8010500 <IsSlotFree+0x22>
        {
            return false;
 80104fc:	2300      	movs	r3, #0
 80104fe:	e006      	b.n	801050e <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8010500:	89fb      	ldrh	r3, [r7, #14]
 8010502:	3301      	adds	r3, #1
 8010504:	81fb      	strh	r3, [r7, #14]
 8010506:	89fb      	ldrh	r3, [r7, #14]
 8010508:	2b0f      	cmp	r3, #15
 801050a:	d9f1      	bls.n	80104f0 <IsSlotFree+0x12>
        }
    }
    return true;
 801050c:	2301      	movs	r3, #1
}
 801050e:	4618      	mov	r0, r3
 8010510:	3714      	adds	r7, #20
 8010512:	46bd      	mov	sp, r7
 8010514:	bc80      	pop	{r7}
 8010516:	4770      	bx	lr

08010518 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 8010518:	b580      	push	{r7, lr}
 801051a:	b082      	sub	sp, #8
 801051c:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 801051e:	2300      	movs	r3, #0
 8010520:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8010522:	e007      	b.n	8010534 <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 8010524:	79fb      	ldrb	r3, [r7, #7]
 8010526:	3301      	adds	r3, #1
 8010528:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 801052a:	79fb      	ldrb	r3, [r7, #7]
 801052c:	2b0f      	cmp	r3, #15
 801052e:	d101      	bne.n	8010534 <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 8010530:	2300      	movs	r3, #0
 8010532:	e012      	b.n	801055a <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8010534:	79fb      	ldrb	r3, [r7, #7]
 8010536:	011b      	lsls	r3, r3, #4
 8010538:	3308      	adds	r3, #8
 801053a:	4a0a      	ldr	r2, [pc, #40]	; (8010564 <MallocNewMacCommandSlot+0x4c>)
 801053c:	4413      	add	r3, r2
 801053e:	4618      	mov	r0, r3
 8010540:	f7ff ffcd 	bl	80104de <IsSlotFree>
 8010544:	4603      	mov	r3, r0
 8010546:	f083 0301 	eor.w	r3, r3, #1
 801054a:	b2db      	uxtb	r3, r3
 801054c:	2b00      	cmp	r3, #0
 801054e:	d1e9      	bne.n	8010524 <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 8010550:	79fb      	ldrb	r3, [r7, #7]
 8010552:	011b      	lsls	r3, r3, #4
 8010554:	3308      	adds	r3, #8
 8010556:	4a03      	ldr	r2, [pc, #12]	; (8010564 <MallocNewMacCommandSlot+0x4c>)
 8010558:	4413      	add	r3, r2
}
 801055a:	4618      	mov	r0, r3
 801055c:	3708      	adds	r7, #8
 801055e:	46bd      	mov	sp, r7
 8010560:	bd80      	pop	{r7, pc}
 8010562:	bf00      	nop
 8010564:	20000bc0 	.word	0x20000bc0

08010568 <FreeMacCommandSlot>:
 * \param[IN]     slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 8010568:	b580      	push	{r7, lr}
 801056a:	b082      	sub	sp, #8
 801056c:	af00      	add	r7, sp, #0
 801056e:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	2b00      	cmp	r3, #0
 8010574:	d101      	bne.n	801057a <FreeMacCommandSlot+0x12>
    {
        return false;
 8010576:	2300      	movs	r3, #0
 8010578:	e005      	b.n	8010586 <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 801057a:	2210      	movs	r2, #16
 801057c:	2100      	movs	r1, #0
 801057e:	6878      	ldr	r0, [r7, #4]
 8010580:	f004 f93e 	bl	8014800 <memset1>

    return true;
 8010584:	2301      	movs	r3, #1
}
 8010586:	4618      	mov	r0, r3
 8010588:	3708      	adds	r7, #8
 801058a:	46bd      	mov	sp, r7
 801058c:	bd80      	pop	{r7, pc}

0801058e <LinkedListInit>:
 *
 * \param[IN]     list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 801058e:	b480      	push	{r7}
 8010590:	b083      	sub	sp, #12
 8010592:	af00      	add	r7, sp, #0
 8010594:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	2b00      	cmp	r3, #0
 801059a:	d101      	bne.n	80105a0 <LinkedListInit+0x12>
    {
        return false;
 801059c:	2300      	movs	r3, #0
 801059e:	e006      	b.n	80105ae <LinkedListInit+0x20>
    }

    list->First = NULL;
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	2200      	movs	r2, #0
 80105a4:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	2200      	movs	r2, #0
 80105aa:	605a      	str	r2, [r3, #4]

    return true;
 80105ac:	2301      	movs	r3, #1
}
 80105ae:	4618      	mov	r0, r3
 80105b0:	370c      	adds	r7, #12
 80105b2:	46bd      	mov	sp, r7
 80105b4:	bc80      	pop	{r7}
 80105b6:	4770      	bx	lr

080105b8 <LinkedListAdd>:
 * \param[IN]     list           - List where the element shall be added.
 * \param[IN]     element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 80105b8:	b480      	push	{r7}
 80105ba:	b083      	sub	sp, #12
 80105bc:	af00      	add	r7, sp, #0
 80105be:	6078      	str	r0, [r7, #4]
 80105c0:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d002      	beq.n	80105ce <LinkedListAdd+0x16>
 80105c8:	683b      	ldr	r3, [r7, #0]
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	d101      	bne.n	80105d2 <LinkedListAdd+0x1a>
    {
        return false;
 80105ce:	2300      	movs	r3, #0
 80105d0:	e015      	b.n	80105fe <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	681b      	ldr	r3, [r3, #0]
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d102      	bne.n	80105e0 <LinkedListAdd+0x28>
    {
        list->First = element;
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	683a      	ldr	r2, [r7, #0]
 80105de:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	685b      	ldr	r3, [r3, #4]
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	d003      	beq.n	80105f0 <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	685b      	ldr	r3, [r3, #4]
 80105ec:	683a      	ldr	r2, [r7, #0]
 80105ee:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 80105f0:	683b      	ldr	r3, [r7, #0]
 80105f2:	2200      	movs	r2, #0
 80105f4:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	683a      	ldr	r2, [r7, #0]
 80105fa:	605a      	str	r2, [r3, #4]

    return true;
 80105fc:	2301      	movs	r3, #1
}
 80105fe:	4618      	mov	r0, r3
 8010600:	370c      	adds	r7, #12
 8010602:	46bd      	mov	sp, r7
 8010604:	bc80      	pop	{r7}
 8010606:	4770      	bx	lr

08010608 <LinkedListGetPrevious>:
 * \param[IN]     list           - List
 * \param[IN]     element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 8010608:	b480      	push	{r7}
 801060a:	b085      	sub	sp, #20
 801060c:	af00      	add	r7, sp, #0
 801060e:	6078      	str	r0, [r7, #4]
 8010610:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	2b00      	cmp	r3, #0
 8010616:	d002      	beq.n	801061e <LinkedListGetPrevious+0x16>
 8010618:	683b      	ldr	r3, [r7, #0]
 801061a:	2b00      	cmp	r3, #0
 801061c:	d101      	bne.n	8010622 <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 801061e:	2300      	movs	r3, #0
 8010620:	e016      	b.n	8010650 <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 8010628:	683a      	ldr	r2, [r7, #0]
 801062a:	68fb      	ldr	r3, [r7, #12]
 801062c:	429a      	cmp	r2, r3
 801062e:	d00c      	beq.n	801064a <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8010630:	e002      	b.n	8010638 <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 8010632:	68fb      	ldr	r3, [r7, #12]
 8010634:	681b      	ldr	r3, [r3, #0]
 8010636:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8010638:	68fb      	ldr	r3, [r7, #12]
 801063a:	2b00      	cmp	r3, #0
 801063c:	d007      	beq.n	801064e <LinkedListGetPrevious+0x46>
 801063e:	68fb      	ldr	r3, [r7, #12]
 8010640:	681b      	ldr	r3, [r3, #0]
 8010642:	683a      	ldr	r2, [r7, #0]
 8010644:	429a      	cmp	r2, r3
 8010646:	d1f4      	bne.n	8010632 <LinkedListGetPrevious+0x2a>
 8010648:	e001      	b.n	801064e <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 801064a:	2300      	movs	r3, #0
 801064c:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 801064e:	68fb      	ldr	r3, [r7, #12]
}
 8010650:	4618      	mov	r0, r3
 8010652:	3714      	adds	r7, #20
 8010654:	46bd      	mov	sp, r7
 8010656:	bc80      	pop	{r7}
 8010658:	4770      	bx	lr

0801065a <LinkedListRemove>:
 * \param[IN]     list           - List where the element shall be removed from.
 * \param[IN]     element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 801065a:	b580      	push	{r7, lr}
 801065c:	b084      	sub	sp, #16
 801065e:	af00      	add	r7, sp, #0
 8010660:	6078      	str	r0, [r7, #4]
 8010662:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	2b00      	cmp	r3, #0
 8010668:	d002      	beq.n	8010670 <LinkedListRemove+0x16>
 801066a:	683b      	ldr	r3, [r7, #0]
 801066c:	2b00      	cmp	r3, #0
 801066e:	d101      	bne.n	8010674 <LinkedListRemove+0x1a>
    {
        return false;
 8010670:	2300      	movs	r3, #0
 8010672:	e020      	b.n	80106b6 <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 8010674:	6839      	ldr	r1, [r7, #0]
 8010676:	6878      	ldr	r0, [r7, #4]
 8010678:	f7ff ffc6 	bl	8010608 <LinkedListGetPrevious>
 801067c:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	681b      	ldr	r3, [r3, #0]
 8010682:	683a      	ldr	r2, [r7, #0]
 8010684:	429a      	cmp	r2, r3
 8010686:	d103      	bne.n	8010690 <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 8010688:	683b      	ldr	r3, [r7, #0]
 801068a:	681a      	ldr	r2, [r3, #0]
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	685b      	ldr	r3, [r3, #4]
 8010694:	683a      	ldr	r2, [r7, #0]
 8010696:	429a      	cmp	r2, r3
 8010698:	d102      	bne.n	80106a0 <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	68fa      	ldr	r2, [r7, #12]
 801069e:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 80106a0:	68fb      	ldr	r3, [r7, #12]
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d003      	beq.n	80106ae <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 80106a6:	683b      	ldr	r3, [r7, #0]
 80106a8:	681a      	ldr	r2, [r3, #0]
 80106aa:	68fb      	ldr	r3, [r7, #12]
 80106ac:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 80106ae:	683b      	ldr	r3, [r7, #0]
 80106b0:	2200      	movs	r2, #0
 80106b2:	601a      	str	r2, [r3, #0]

    return true;
 80106b4:	2301      	movs	r3, #1
}
 80106b6:	4618      	mov	r0, r3
 80106b8:	3710      	adds	r7, #16
 80106ba:	46bd      	mov	sp, r7
 80106bc:	bd80      	pop	{r7, pc}

080106be <IsSticky>:
 * \param[IN]   cid                - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 80106be:	b480      	push	{r7}
 80106c0:	b083      	sub	sp, #12
 80106c2:	af00      	add	r7, sp, #0
 80106c4:	4603      	mov	r3, r0
 80106c6:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 80106c8:	79fb      	ldrb	r3, [r7, #7]
 80106ca:	2b05      	cmp	r3, #5
 80106cc:	d004      	beq.n	80106d8 <IsSticky+0x1a>
 80106ce:	2b05      	cmp	r3, #5
 80106d0:	db04      	blt.n	80106dc <IsSticky+0x1e>
 80106d2:	3b08      	subs	r3, #8
 80106d4:	2b02      	cmp	r3, #2
 80106d6:	d801      	bhi.n	80106dc <IsSticky+0x1e>
    {
        case MOTE_MAC_DL_CHANNEL_ANS:
        case MOTE_MAC_RX_PARAM_SETUP_ANS:
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
            return true;
 80106d8:	2301      	movs	r3, #1
 80106da:	e000      	b.n	80106de <IsSticky+0x20>
        default:
            return false;
 80106dc:	2300      	movs	r3, #0
    }
}
 80106de:	4618      	mov	r0, r3
 80106e0:	370c      	adds	r7, #12
 80106e2:	46bd      	mov	sp, r7
 80106e4:	bc80      	pop	{r7}
 80106e6:	4770      	bx	lr

080106e8 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 80106e8:	b580      	push	{r7, lr}
 80106ea:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 80106ec:	22fc      	movs	r2, #252	; 0xfc
 80106ee:	2100      	movs	r1, #0
 80106f0:	4804      	ldr	r0, [pc, #16]	; (8010704 <LoRaMacCommandsInit+0x1c>)
 80106f2:	f004 f885 	bl	8014800 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 80106f6:	4803      	ldr	r0, [pc, #12]	; (8010704 <LoRaMacCommandsInit+0x1c>)
 80106f8:	f7ff ff49 	bl	801058e <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 80106fc:	2300      	movs	r3, #0
}
 80106fe:	4618      	mov	r0, r3
 8010700:	bd80      	pop	{r7, pc}
 8010702:	bf00      	nop
 8010704:	20000bc0 	.word	0x20000bc0

08010708 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 8010708:	b580      	push	{r7, lr}
 801070a:	b086      	sub	sp, #24
 801070c:	af00      	add	r7, sp, #0
 801070e:	4603      	mov	r3, r0
 8010710:	60b9      	str	r1, [r7, #8]
 8010712:	607a      	str	r2, [r7, #4]
 8010714:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 8010716:	68bb      	ldr	r3, [r7, #8]
 8010718:	2b00      	cmp	r3, #0
 801071a:	d101      	bne.n	8010720 <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 801071c:	2301      	movs	r3, #1
 801071e:	e033      	b.n	8010788 <LoRaMacCommandsAddCmd+0x80>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 8010720:	f7ff fefa 	bl	8010518 <MallocNewMacCommandSlot>
 8010724:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 8010726:	697b      	ldr	r3, [r7, #20]
 8010728:	2b00      	cmp	r3, #0
 801072a:	d101      	bne.n	8010730 <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 801072c:	2302      	movs	r3, #2
 801072e:	e02b      	b.n	8010788 <LoRaMacCommandsAddCmd+0x80>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 8010730:	6979      	ldr	r1, [r7, #20]
 8010732:	4817      	ldr	r0, [pc, #92]	; (8010790 <LoRaMacCommandsAddCmd+0x88>)
 8010734:	f7ff ff40 	bl	80105b8 <LinkedListAdd>
 8010738:	4603      	mov	r3, r0
 801073a:	f083 0301 	eor.w	r3, r3, #1
 801073e:	b2db      	uxtb	r3, r3
 8010740:	2b00      	cmp	r3, #0
 8010742:	d001      	beq.n	8010748 <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 8010744:	2305      	movs	r3, #5
 8010746:	e01f      	b.n	8010788 <LoRaMacCommandsAddCmd+0x80>
    }

    // Set Values
    newCmd->CID = cid;
 8010748:	697b      	ldr	r3, [r7, #20]
 801074a:	7bfa      	ldrb	r2, [r7, #15]
 801074c:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 801074e:	697b      	ldr	r3, [r7, #20]
 8010750:	687a      	ldr	r2, [r7, #4]
 8010752:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 8010754:	697b      	ldr	r3, [r7, #20]
 8010756:	3305      	adds	r3, #5
 8010758:	687a      	ldr	r2, [r7, #4]
 801075a:	b292      	uxth	r2, r2
 801075c:	68b9      	ldr	r1, [r7, #8]
 801075e:	4618      	mov	r0, r3
 8010760:	f004 f813 	bl	801478a <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 8010764:	7bfb      	ldrb	r3, [r7, #15]
 8010766:	4618      	mov	r0, r3
 8010768:	f7ff ffa9 	bl	80106be <IsSticky>
 801076c:	4603      	mov	r3, r0
 801076e:	461a      	mov	r2, r3
 8010770:	697b      	ldr	r3, [r7, #20]
 8010772:	731a      	strb	r2, [r3, #12]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 8010774:	4b06      	ldr	r3, [pc, #24]	; (8010790 <LoRaMacCommandsAddCmd+0x88>)
 8010776:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	4413      	add	r3, r2
 801077e:	3301      	adds	r3, #1
 8010780:	4a03      	ldr	r2, [pc, #12]	; (8010790 <LoRaMacCommandsAddCmd+0x88>)
 8010782:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    return LORAMAC_COMMANDS_SUCCESS;
 8010786:	2300      	movs	r3, #0
}
 8010788:	4618      	mov	r0, r3
 801078a:	3718      	adds	r7, #24
 801078c:	46bd      	mov	sp, r7
 801078e:	bd80      	pop	{r7, pc}
 8010790:	20000bc0 	.word	0x20000bc0

08010794 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 8010794:	b580      	push	{r7, lr}
 8010796:	b082      	sub	sp, #8
 8010798:	af00      	add	r7, sp, #0
 801079a:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	2b00      	cmp	r3, #0
 80107a0:	d101      	bne.n	80107a6 <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80107a2:	2301      	movs	r3, #1
 80107a4:	e021      	b.n	80107ea <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 80107a6:	6879      	ldr	r1, [r7, #4]
 80107a8:	4812      	ldr	r0, [pc, #72]	; (80107f4 <LoRaMacCommandsRemoveCmd+0x60>)
 80107aa:	f7ff ff56 	bl	801065a <LinkedListRemove>
 80107ae:	4603      	mov	r3, r0
 80107b0:	f083 0301 	eor.w	r3, r3, #1
 80107b4:	b2db      	uxtb	r3, r3
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d001      	beq.n	80107be <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 80107ba:	2303      	movs	r3, #3
 80107bc:	e015      	b.n	80107ea <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 80107be:	4b0d      	ldr	r3, [pc, #52]	; (80107f4 <LoRaMacCommandsRemoveCmd+0x60>)
 80107c0:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	689b      	ldr	r3, [r3, #8]
 80107c8:	1ad3      	subs	r3, r2, r3
 80107ca:	3b01      	subs	r3, #1
 80107cc:	4a09      	ldr	r2, [pc, #36]	; (80107f4 <LoRaMacCommandsRemoveCmd+0x60>)
 80107ce:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 80107d2:	6878      	ldr	r0, [r7, #4]
 80107d4:	f7ff fec8 	bl	8010568 <FreeMacCommandSlot>
 80107d8:	4603      	mov	r3, r0
 80107da:	f083 0301 	eor.w	r3, r3, #1
 80107de:	b2db      	uxtb	r3, r3
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d001      	beq.n	80107e8 <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 80107e4:	2305      	movs	r3, #5
 80107e6:	e000      	b.n	80107ea <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80107e8:	2300      	movs	r3, #0
}
 80107ea:	4618      	mov	r0, r3
 80107ec:	3708      	adds	r7, #8
 80107ee:	46bd      	mov	sp, r7
 80107f0:	bd80      	pop	{r7, pc}
 80107f2:	bf00      	nop
 80107f4:	20000bc0 	.word	0x20000bc0

080107f8 <LoRaMacCommandsRemoveNoneStickyCmds>:
    }
    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 80107f8:	b580      	push	{r7, lr}
 80107fa:	b082      	sub	sp, #8
 80107fc:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 80107fe:	4b0f      	ldr	r3, [pc, #60]	; (801083c <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 8010800:	681b      	ldr	r3, [r3, #0]
 8010802:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8010804:	e012      	b.n	801082c <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	7b1b      	ldrb	r3, [r3, #12]
 801080a:	f083 0301 	eor.w	r3, r3, #1
 801080e:	b2db      	uxtb	r3, r3
 8010810:	2b00      	cmp	r3, #0
 8010812:	d008      	beq.n	8010826 <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	681b      	ldr	r3, [r3, #0]
 8010818:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 801081a:	6878      	ldr	r0, [r7, #4]
 801081c:	f7ff ffba 	bl	8010794 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 8010820:	683b      	ldr	r3, [r7, #0]
 8010822:	607b      	str	r3, [r7, #4]
 8010824:	e002      	b.n	801082c <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	681b      	ldr	r3, [r3, #0]
 801082a:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	2b00      	cmp	r3, #0
 8010830:	d1e9      	bne.n	8010806 <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8010832:	2300      	movs	r3, #0
}
 8010834:	4618      	mov	r0, r3
 8010836:	3708      	adds	r7, #8
 8010838:	46bd      	mov	sp, r7
 801083a:	bd80      	pop	{r7, pc}
 801083c:	20000bc0 	.word	0x20000bc0

08010840 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 8010840:	b580      	push	{r7, lr}
 8010842:	b082      	sub	sp, #8
 8010844:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8010846:	4b0e      	ldr	r3, [pc, #56]	; (8010880 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>)
 8010848:	681b      	ldr	r3, [r3, #0]
 801084a:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 801084c:	e00f      	b.n	801086e <LoRaMacCommandsRemoveStickyAnsCmds+0x2e>
    {
        nexElement = curElement->Next;
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	681b      	ldr	r3, [r3, #0]
 8010852:	603b      	str	r3, [r7, #0]
        if( IsSticky( curElement->CID ) == true )
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	791b      	ldrb	r3, [r3, #4]
 8010858:	4618      	mov	r0, r3
 801085a:	f7ff ff30 	bl	80106be <IsSticky>
 801085e:	4603      	mov	r3, r0
 8010860:	2b00      	cmp	r3, #0
 8010862:	d002      	beq.n	801086a <LoRaMacCommandsRemoveStickyAnsCmds+0x2a>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 8010864:	6878      	ldr	r0, [r7, #4]
 8010866:	f7ff ff95 	bl	8010794 <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 801086a:	683b      	ldr	r3, [r7, #0]
 801086c:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	2b00      	cmp	r3, #0
 8010872:	d1ec      	bne.n	801084e <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8010874:	2300      	movs	r3, #0
}
 8010876:	4618      	mov	r0, r3
 8010878:	3708      	adds	r7, #8
 801087a:	46bd      	mov	sp, r7
 801087c:	bd80      	pop	{r7, pc}
 801087e:	bf00      	nop
 8010880:	20000bc0 	.word	0x20000bc0

08010884 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 8010884:	b480      	push	{r7}
 8010886:	b083      	sub	sp, #12
 8010888:	af00      	add	r7, sp, #0
 801088a:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	2b00      	cmp	r3, #0
 8010890:	d101      	bne.n	8010896 <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8010892:	2301      	movs	r3, #1
 8010894:	e005      	b.n	80108a2 <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 8010896:	4b05      	ldr	r3, [pc, #20]	; (80108ac <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 8010898:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 80108a0:	2300      	movs	r3, #0
}
 80108a2:	4618      	mov	r0, r3
 80108a4:	370c      	adds	r7, #12
 80108a6:	46bd      	mov	sp, r7
 80108a8:	bc80      	pop	{r7}
 80108aa:	4770      	bx	lr
 80108ac:	20000bc0 	.word	0x20000bc0

080108b0 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 80108b0:	b580      	push	{r7, lr}
 80108b2:	b088      	sub	sp, #32
 80108b4:	af00      	add	r7, sp, #0
 80108b6:	60f8      	str	r0, [r7, #12]
 80108b8:	60b9      	str	r1, [r7, #8]
 80108ba:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 80108bc:	4b25      	ldr	r3, [pc, #148]	; (8010954 <LoRaMacCommandsSerializeCmds+0xa4>)
 80108be:	681b      	ldr	r3, [r3, #0]
 80108c0:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 80108c2:	2300      	movs	r3, #0
 80108c4:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d002      	beq.n	80108d2 <LoRaMacCommandsSerializeCmds+0x22>
 80108cc:	68bb      	ldr	r3, [r7, #8]
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d126      	bne.n	8010920 <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80108d2:	2301      	movs	r3, #1
 80108d4:	e039      	b.n	801094a <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 80108d6:	7efb      	ldrb	r3, [r7, #27]
 80108d8:	68fa      	ldr	r2, [r7, #12]
 80108da:	1ad2      	subs	r2, r2, r3
 80108dc:	69fb      	ldr	r3, [r7, #28]
 80108de:	689b      	ldr	r3, [r3, #8]
 80108e0:	3301      	adds	r3, #1
 80108e2:	429a      	cmp	r2, r3
 80108e4:	d320      	bcc.n	8010928 <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 80108e6:	7efb      	ldrb	r3, [r7, #27]
 80108e8:	1c5a      	adds	r2, r3, #1
 80108ea:	76fa      	strb	r2, [r7, #27]
 80108ec:	461a      	mov	r2, r3
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	4413      	add	r3, r2
 80108f2:	69fa      	ldr	r2, [r7, #28]
 80108f4:	7912      	ldrb	r2, [r2, #4]
 80108f6:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 80108f8:	7efb      	ldrb	r3, [r7, #27]
 80108fa:	687a      	ldr	r2, [r7, #4]
 80108fc:	18d0      	adds	r0, r2, r3
 80108fe:	69fb      	ldr	r3, [r7, #28]
 8010900:	1d59      	adds	r1, r3, #5
 8010902:	69fb      	ldr	r3, [r7, #28]
 8010904:	689b      	ldr	r3, [r3, #8]
 8010906:	b29b      	uxth	r3, r3
 8010908:	461a      	mov	r2, r3
 801090a:	f003 ff3e 	bl	801478a <memcpy1>
            itr += curElement->PayloadSize;
 801090e:	69fb      	ldr	r3, [r7, #28]
 8010910:	689b      	ldr	r3, [r3, #8]
 8010912:	b2da      	uxtb	r2, r3
 8010914:	7efb      	ldrb	r3, [r7, #27]
 8010916:	4413      	add	r3, r2
 8010918:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 801091a:	69fb      	ldr	r3, [r7, #28]
 801091c:	681b      	ldr	r3, [r3, #0]
 801091e:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8010920:	69fb      	ldr	r3, [r7, #28]
 8010922:	2b00      	cmp	r3, #0
 8010924:	d1d7      	bne.n	80108d6 <LoRaMacCommandsSerializeCmds+0x26>
 8010926:	e009      	b.n	801093c <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 8010928:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 801092a:	e007      	b.n	801093c <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 801092c:	69fb      	ldr	r3, [r7, #28]
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 8010932:	69f8      	ldr	r0, [r7, #28]
 8010934:	f7ff ff2e 	bl	8010794 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 8010938:	697b      	ldr	r3, [r7, #20]
 801093a:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 801093c:	69fb      	ldr	r3, [r7, #28]
 801093e:	2b00      	cmp	r3, #0
 8010940:	d1f4      	bne.n	801092c <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 8010942:	68b8      	ldr	r0, [r7, #8]
 8010944:	f7ff ff9e 	bl	8010884 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 8010948:	2300      	movs	r3, #0
}
 801094a:	4618      	mov	r0, r3
 801094c:	3720      	adds	r7, #32
 801094e:	46bd      	mov	sp, r7
 8010950:	bd80      	pop	{r7, pc}
 8010952:	bf00      	nop
 8010954:	20000bc0 	.word	0x20000bc0

08010958 <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
 8010958:	b480      	push	{r7}
 801095a:	b085      	sub	sp, #20
 801095c:	af00      	add	r7, sp, #0
 801095e:	6078      	str	r0, [r7, #4]
    if( cmdsPending == NULL )
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	2b00      	cmp	r3, #0
 8010964:	d101      	bne.n	801096a <LoRaMacCommandsStickyCmdsPending+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8010966:	2301      	movs	r3, #1
 8010968:	e016      	b.n	8010998 <LoRaMacCommandsStickyCmdsPending+0x40>
    }
    MacCommand_t* curElement;
    curElement = CommandsCtx.MacCommandList.First;
 801096a:	4b0e      	ldr	r3, [pc, #56]	; (80109a4 <LoRaMacCommandsStickyCmdsPending+0x4c>)
 801096c:	681b      	ldr	r3, [r3, #0]
 801096e:	60fb      	str	r3, [r7, #12]

    *cmdsPending = false;
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	2200      	movs	r2, #0
 8010974:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 8010976:	e00b      	b.n	8010990 <LoRaMacCommandsStickyCmdsPending+0x38>
    {
        if( curElement->IsSticky == true )
 8010978:	68fb      	ldr	r3, [r7, #12]
 801097a:	7b1b      	ldrb	r3, [r3, #12]
 801097c:	2b00      	cmp	r3, #0
 801097e:	d004      	beq.n	801098a <LoRaMacCommandsStickyCmdsPending+0x32>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	2201      	movs	r2, #1
 8010984:	701a      	strb	r2, [r3, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 8010986:	2300      	movs	r3, #0
 8010988:	e006      	b.n	8010998 <LoRaMacCommandsStickyCmdsPending+0x40>
        }
        curElement = curElement->Next;
 801098a:	68fb      	ldr	r3, [r7, #12]
 801098c:	681b      	ldr	r3, [r3, #0]
 801098e:	60fb      	str	r3, [r7, #12]
    while( curElement != NULL )
 8010990:	68fb      	ldr	r3, [r7, #12]
 8010992:	2b00      	cmp	r3, #0
 8010994:	d1f0      	bne.n	8010978 <LoRaMacCommandsStickyCmdsPending+0x20>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8010996:	2300      	movs	r3, #0
}
 8010998:	4618      	mov	r0, r3
 801099a:	3714      	adds	r7, #20
 801099c:	46bd      	mov	sp, r7
 801099e:	bc80      	pop	{r7}
 80109a0:	4770      	bx	lr
 80109a2:	bf00      	nop
 80109a4:	20000bc0 	.word	0x20000bc0

080109a8 <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 80109a8:	b480      	push	{r7}
 80109aa:	b085      	sub	sp, #20
 80109ac:	af00      	add	r7, sp, #0
 80109ae:	4603      	mov	r3, r0
 80109b0:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 80109b2:	2300      	movs	r3, #0
 80109b4:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 80109b6:	79fb      	ldrb	r3, [r7, #7]
 80109b8:	3b02      	subs	r3, #2
 80109ba:	2b11      	cmp	r3, #17
 80109bc:	d850      	bhi.n	8010a60 <LoRaMacCommandsGetCmdSize+0xb8>
 80109be:	a201      	add	r2, pc, #4	; (adr r2, 80109c4 <LoRaMacCommandsGetCmdSize+0x1c>)
 80109c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109c4:	08010a0d 	.word	0x08010a0d
 80109c8:	08010a13 	.word	0x08010a13
 80109cc:	08010a19 	.word	0x08010a19
 80109d0:	08010a1f 	.word	0x08010a1f
 80109d4:	08010a25 	.word	0x08010a25
 80109d8:	08010a2b 	.word	0x08010a2b
 80109dc:	08010a31 	.word	0x08010a31
 80109e0:	08010a37 	.word	0x08010a37
 80109e4:	08010a3d 	.word	0x08010a3d
 80109e8:	08010a61 	.word	0x08010a61
 80109ec:	08010a61 	.word	0x08010a61
 80109f0:	08010a43 	.word	0x08010a43
 80109f4:	08010a61 	.word	0x08010a61
 80109f8:	08010a61 	.word	0x08010a61
 80109fc:	08010a49 	.word	0x08010a49
 8010a00:	08010a4f 	.word	0x08010a4f
 8010a04:	08010a55 	.word	0x08010a55
 8010a08:	08010a5b 	.word	0x08010a5b
    {
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 8010a0c:	2303      	movs	r3, #3
 8010a0e:	73fb      	strb	r3, [r7, #15]
            break;
 8010a10:	e027      	b.n	8010a62 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 8010a12:	2305      	movs	r3, #5
 8010a14:	73fb      	strb	r3, [r7, #15]
            break;
 8010a16:	e024      	b.n	8010a62 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 8010a18:	2302      	movs	r3, #2
 8010a1a:	73fb      	strb	r3, [r7, #15]
            break;
 8010a1c:	e021      	b.n	8010a62 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 8010a1e:	2305      	movs	r3, #5
 8010a20:	73fb      	strb	r3, [r7, #15]
            break;
 8010a22:	e01e      	b.n	8010a62 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 8010a24:	2301      	movs	r3, #1
 8010a26:	73fb      	strb	r3, [r7, #15]
            break;
 8010a28:	e01b      	b.n	8010a62 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 8010a2a:	2306      	movs	r3, #6
 8010a2c:	73fb      	strb	r3, [r7, #15]
            break;
 8010a2e:	e018      	b.n	8010a62 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 8010a30:	2302      	movs	r3, #2
 8010a32:	73fb      	strb	r3, [r7, #15]
            break;
 8010a34:	e015      	b.n	8010a62 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 8010a36:	2302      	movs	r3, #2
 8010a38:	73fb      	strb	r3, [r7, #15]
            break;
 8010a3a:	e012      	b.n	8010a62 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 8010a3c:	2305      	movs	r3, #5
 8010a3e:	73fb      	strb	r3, [r7, #15]
            break;
 8010a40:	e00f      	b.n	8010a62 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 8010a42:	2306      	movs	r3, #6
 8010a44:	73fb      	strb	r3, [r7, #15]
            break;
 8010a46:	e00c      	b.n	8010a62 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 8010a48:	2301      	movs	r3, #1
 8010a4a:	73fb      	strb	r3, [r7, #15]
            break;
 8010a4c:	e009      	b.n	8010a62 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 8010a4e:	2305      	movs	r3, #5
 8010a50:	73fb      	strb	r3, [r7, #15]
            break;
 8010a52:	e006      	b.n	8010a62 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 8010a54:	2304      	movs	r3, #4
 8010a56:	73fb      	strb	r3, [r7, #15]
            break;
 8010a58:	e003      	b.n	8010a62 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 8010a5a:	2304      	movs	r3, #4
 8010a5c:	73fb      	strb	r3, [r7, #15]
            break;
 8010a5e:	e000      	b.n	8010a62 <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 8010a60:	bf00      	nop
        }
    }
    return cidSize;
 8010a62:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a64:	4618      	mov	r0, r3
 8010a66:	3714      	adds	r7, #20
 8010a68:	46bd      	mov	sp, r7
 8010a6a:	bc80      	pop	{r7}
 8010a6c:	4770      	bx	lr
 8010a6e:	bf00      	nop

08010a70 <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 8010a70:	b480      	push	{r7}
 8010a72:	b083      	sub	sp, #12
 8010a74:	af00      	add	r7, sp, #0
 8010a76:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	4a07      	ldr	r2, [pc, #28]	; (8010a98 <IncreaseBufferPointer+0x28>)
 8010a7c:	4293      	cmp	r3, r2
 8010a7e:	d102      	bne.n	8010a86 <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8010a80:	4b06      	ldr	r3, [pc, #24]	; (8010a9c <IncreaseBufferPointer+0x2c>)
 8010a82:	607b      	str	r3, [r7, #4]
 8010a84:	e002      	b.n	8010a8c <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	3304      	adds	r3, #4
 8010a8a:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 8010a8c:	687b      	ldr	r3, [r7, #4]
}
 8010a8e:	4618      	mov	r0, r3
 8010a90:	370c      	adds	r7, #12
 8010a92:	46bd      	mov	sp, r7
 8010a94:	bc80      	pop	{r7}
 8010a96:	4770      	bx	lr
 8010a98:	20000cd8 	.word	0x20000cd8
 8010a9c:	20000cc8 	.word	0x20000cc8

08010aa0 <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 8010aa0:	b480      	push	{r7}
 8010aa2:	b083      	sub	sp, #12
 8010aa4:	af00      	add	r7, sp, #0
 8010aa6:	4603      	mov	r3, r0
 8010aa8:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 8010aaa:	79fb      	ldrb	r3, [r7, #7]
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d101      	bne.n	8010ab4 <IsListEmpty+0x14>
    {
        return true;
 8010ab0:	2301      	movs	r3, #1
 8010ab2:	e000      	b.n	8010ab6 <IsListEmpty+0x16>
    }
    return false;
 8010ab4:	2300      	movs	r3, #0
}
 8010ab6:	4618      	mov	r0, r3
 8010ab8:	370c      	adds	r7, #12
 8010aba:	46bd      	mov	sp, r7
 8010abc:	bc80      	pop	{r7}
 8010abe:	4770      	bx	lr

08010ac0 <IsListFull>:

static bool IsListFull( uint8_t count )
{
 8010ac0:	b480      	push	{r7}
 8010ac2:	b083      	sub	sp, #12
 8010ac4:	af00      	add	r7, sp, #0
 8010ac6:	4603      	mov	r3, r0
 8010ac8:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 8010aca:	79fb      	ldrb	r3, [r7, #7]
 8010acc:	2b04      	cmp	r3, #4
 8010ace:	d901      	bls.n	8010ad4 <IsListFull+0x14>
    {
        return true;
 8010ad0:	2301      	movs	r3, #1
 8010ad2:	e000      	b.n	8010ad6 <IsListFull+0x16>
    }
    return false;
 8010ad4:	2300      	movs	r3, #0
}
 8010ad6:	4618      	mov	r0, r3
 8010ad8:	370c      	adds	r7, #12
 8010ada:	46bd      	mov	sp, r7
 8010adc:	bc80      	pop	{r7}
 8010ade:	4770      	bx	lr

08010ae0 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 8010ae0:	b580      	push	{r7, lr}
 8010ae2:	b086      	sub	sp, #24
 8010ae4:	af00      	add	r7, sp, #0
 8010ae6:	4603      	mov	r3, r0
 8010ae8:	60b9      	str	r1, [r7, #8]
 8010aea:	607a      	str	r2, [r7, #4]
 8010aec:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 8010aee:	68bb      	ldr	r3, [r7, #8]
 8010af0:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8010af2:	4b13      	ldr	r3, [pc, #76]	; (8010b40 <GetElement+0x60>)
 8010af4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010af8:	4618      	mov	r0, r3
 8010afa:	f7ff ffd1 	bl	8010aa0 <IsListEmpty>
 8010afe:	4603      	mov	r3, r0
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	d001      	beq.n	8010b08 <GetElement+0x28>
    {
        return NULL;
 8010b04:	2300      	movs	r3, #0
 8010b06:	e017      	b.n	8010b38 <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8010b08:	2300      	movs	r3, #0
 8010b0a:	74fb      	strb	r3, [r7, #19]
 8010b0c:	e00d      	b.n	8010b2a <GetElement+0x4a>
    {
        if( element->Request == request )
 8010b0e:	697b      	ldr	r3, [r7, #20]
 8010b10:	781b      	ldrb	r3, [r3, #0]
 8010b12:	7bfa      	ldrb	r2, [r7, #15]
 8010b14:	429a      	cmp	r2, r3
 8010b16:	d101      	bne.n	8010b1c <GetElement+0x3c>
        {
            // We have found the element
            return element;
 8010b18:	697b      	ldr	r3, [r7, #20]
 8010b1a:	e00d      	b.n	8010b38 <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 8010b1c:	6978      	ldr	r0, [r7, #20]
 8010b1e:	f7ff ffa7 	bl	8010a70 <IncreaseBufferPointer>
 8010b22:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8010b24:	7cfb      	ldrb	r3, [r7, #19]
 8010b26:	3301      	adds	r3, #1
 8010b28:	74fb      	strb	r3, [r7, #19]
 8010b2a:	4b05      	ldr	r3, [pc, #20]	; (8010b40 <GetElement+0x60>)
 8010b2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010b30:	7cfa      	ldrb	r2, [r7, #19]
 8010b32:	429a      	cmp	r2, r3
 8010b34:	d3eb      	bcc.n	8010b0e <GetElement+0x2e>
    }

    return NULL;
 8010b36:	2300      	movs	r3, #0
}
 8010b38:	4618      	mov	r0, r3
 8010b3a:	3718      	adds	r7, #24
 8010b3c:	46bd      	mov	sp, r7
 8010b3e:	bd80      	pop	{r7, pc}
 8010b40:	20000cbc 	.word	0x20000cbc

08010b44 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 8010b44:	b580      	push	{r7, lr}
 8010b46:	b082      	sub	sp, #8
 8010b48:	af00      	add	r7, sp, #0
 8010b4a:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 8010b4c:	4a0c      	ldr	r2, [pc, #48]	; (8010b80 <LoRaMacConfirmQueueInit+0x3c>)
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 8010b52:	4b0b      	ldr	r3, [pc, #44]	; (8010b80 <LoRaMacConfirmQueueInit+0x3c>)
 8010b54:	2200      	movs	r2, #0
 8010b56:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8010b5a:	4b09      	ldr	r3, [pc, #36]	; (8010b80 <LoRaMacConfirmQueueInit+0x3c>)
 8010b5c:	4a09      	ldr	r2, [pc, #36]	; (8010b84 <LoRaMacConfirmQueueInit+0x40>)
 8010b5e:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8010b60:	4b07      	ldr	r3, [pc, #28]	; (8010b80 <LoRaMacConfirmQueueInit+0x3c>)
 8010b62:	4a08      	ldr	r2, [pc, #32]	; (8010b84 <LoRaMacConfirmQueueInit+0x40>)
 8010b64:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 8010b66:	2214      	movs	r2, #20
 8010b68:	21ff      	movs	r1, #255	; 0xff
 8010b6a:	4806      	ldr	r0, [pc, #24]	; (8010b84 <LoRaMacConfirmQueueInit+0x40>)
 8010b6c:	f003 fe48 	bl	8014800 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010b70:	4b03      	ldr	r3, [pc, #12]	; (8010b80 <LoRaMacConfirmQueueInit+0x3c>)
 8010b72:	2201      	movs	r2, #1
 8010b74:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8010b78:	bf00      	nop
 8010b7a:	3708      	adds	r7, #8
 8010b7c:	46bd      	mov	sp, r7
 8010b7e:	bd80      	pop	{r7, pc}
 8010b80:	20000cbc 	.word	0x20000cbc
 8010b84:	20000cc8 	.word	0x20000cc8

08010b88 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 8010b88:	b580      	push	{r7, lr}
 8010b8a:	b082      	sub	sp, #8
 8010b8c:	af00      	add	r7, sp, #0
 8010b8e:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8010b90:	4b19      	ldr	r3, [pc, #100]	; (8010bf8 <LoRaMacConfirmQueueAdd+0x70>)
 8010b92:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010b96:	4618      	mov	r0, r3
 8010b98:	f7ff ff92 	bl	8010ac0 <IsListFull>
 8010b9c:	4603      	mov	r3, r0
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	d001      	beq.n	8010ba6 <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 8010ba2:	2300      	movs	r3, #0
 8010ba4:	e023      	b.n	8010bee <LoRaMacConfirmQueueAdd+0x66>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 8010ba6:	4b14      	ldr	r3, [pc, #80]	; (8010bf8 <LoRaMacConfirmQueueAdd+0x70>)
 8010ba8:	689b      	ldr	r3, [r3, #8]
 8010baa:	687a      	ldr	r2, [r7, #4]
 8010bac:	7812      	ldrb	r2, [r2, #0]
 8010bae:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 8010bb0:	4b11      	ldr	r3, [pc, #68]	; (8010bf8 <LoRaMacConfirmQueueAdd+0x70>)
 8010bb2:	689b      	ldr	r3, [r3, #8]
 8010bb4:	687a      	ldr	r2, [r7, #4]
 8010bb6:	7852      	ldrb	r2, [r2, #1]
 8010bb8:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 8010bba:	4b0f      	ldr	r3, [pc, #60]	; (8010bf8 <LoRaMacConfirmQueueAdd+0x70>)
 8010bbc:	689b      	ldr	r3, [r3, #8]
 8010bbe:	687a      	ldr	r2, [r7, #4]
 8010bc0:	78d2      	ldrb	r2, [r2, #3]
 8010bc2:	70da      	strb	r2, [r3, #3]
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 8010bc4:	4b0c      	ldr	r3, [pc, #48]	; (8010bf8 <LoRaMacConfirmQueueAdd+0x70>)
 8010bc6:	689b      	ldr	r3, [r3, #8]
 8010bc8:	2200      	movs	r2, #0
 8010bca:	709a      	strb	r2, [r3, #2]
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 8010bcc:	4b0a      	ldr	r3, [pc, #40]	; (8010bf8 <LoRaMacConfirmQueueAdd+0x70>)
 8010bce:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010bd2:	3301      	adds	r3, #1
 8010bd4:	b2da      	uxtb	r2, r3
 8010bd6:	4b08      	ldr	r3, [pc, #32]	; (8010bf8 <LoRaMacConfirmQueueAdd+0x70>)
 8010bd8:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 8010bdc:	4b06      	ldr	r3, [pc, #24]	; (8010bf8 <LoRaMacConfirmQueueAdd+0x70>)
 8010bde:	689b      	ldr	r3, [r3, #8]
 8010be0:	4618      	mov	r0, r3
 8010be2:	f7ff ff45 	bl	8010a70 <IncreaseBufferPointer>
 8010be6:	4603      	mov	r3, r0
 8010be8:	4a03      	ldr	r2, [pc, #12]	; (8010bf8 <LoRaMacConfirmQueueAdd+0x70>)
 8010bea:	6093      	str	r3, [r2, #8]

    return true;
 8010bec:	2301      	movs	r3, #1
}
 8010bee:	4618      	mov	r0, r3
 8010bf0:	3708      	adds	r7, #8
 8010bf2:	46bd      	mov	sp, r7
 8010bf4:	bd80      	pop	{r7, pc}
 8010bf6:	bf00      	nop
 8010bf8:	20000cbc 	.word	0x20000cbc

08010bfc <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 8010bfc:	b580      	push	{r7, lr}
 8010bfe:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8010c00:	4b0e      	ldr	r3, [pc, #56]	; (8010c3c <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8010c02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010c06:	4618      	mov	r0, r3
 8010c08:	f7ff ff4a 	bl	8010aa0 <IsListEmpty>
 8010c0c:	4603      	mov	r3, r0
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	d001      	beq.n	8010c16 <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 8010c12:	2300      	movs	r3, #0
 8010c14:	e010      	b.n	8010c38 <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 8010c16:	4b09      	ldr	r3, [pc, #36]	; (8010c3c <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8010c18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010c1c:	3b01      	subs	r3, #1
 8010c1e:	b2da      	uxtb	r2, r3
 8010c20:	4b06      	ldr	r3, [pc, #24]	; (8010c3c <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8010c22:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 8010c26:	4b05      	ldr	r3, [pc, #20]	; (8010c3c <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8010c28:	685b      	ldr	r3, [r3, #4]
 8010c2a:	4618      	mov	r0, r3
 8010c2c:	f7ff ff20 	bl	8010a70 <IncreaseBufferPointer>
 8010c30:	4603      	mov	r3, r0
 8010c32:	4a02      	ldr	r2, [pc, #8]	; (8010c3c <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8010c34:	6053      	str	r3, [r2, #4]

    return true;
 8010c36:	2301      	movs	r3, #1
}
 8010c38:	4618      	mov	r0, r3
 8010c3a:	bd80      	pop	{r7, pc}
 8010c3c:	20000cbc 	.word	0x20000cbc

08010c40 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 8010c40:	b580      	push	{r7, lr}
 8010c42:	b084      	sub	sp, #16
 8010c44:	af00      	add	r7, sp, #0
 8010c46:	4603      	mov	r3, r0
 8010c48:	460a      	mov	r2, r1
 8010c4a:	71fb      	strb	r3, [r7, #7]
 8010c4c:	4613      	mov	r3, r2
 8010c4e:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 8010c50:	2300      	movs	r3, #0
 8010c52:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8010c54:	4b10      	ldr	r3, [pc, #64]	; (8010c98 <LoRaMacConfirmQueueSetStatus+0x58>)
 8010c56:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010c5a:	4618      	mov	r0, r3
 8010c5c:	f7ff ff20 	bl	8010aa0 <IsListEmpty>
 8010c60:	4603      	mov	r3, r0
 8010c62:	f083 0301 	eor.w	r3, r3, #1
 8010c66:	b2db      	uxtb	r3, r3
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d011      	beq.n	8010c90 <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8010c6c:	4b0a      	ldr	r3, [pc, #40]	; (8010c98 <LoRaMacConfirmQueueSetStatus+0x58>)
 8010c6e:	6859      	ldr	r1, [r3, #4]
 8010c70:	4b09      	ldr	r3, [pc, #36]	; (8010c98 <LoRaMacConfirmQueueSetStatus+0x58>)
 8010c72:	689a      	ldr	r2, [r3, #8]
 8010c74:	79bb      	ldrb	r3, [r7, #6]
 8010c76:	4618      	mov	r0, r3
 8010c78:	f7ff ff32 	bl	8010ae0 <GetElement>
 8010c7c:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8010c7e:	68fb      	ldr	r3, [r7, #12]
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	d005      	beq.n	8010c90 <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 8010c84:	68fb      	ldr	r3, [r7, #12]
 8010c86:	79fa      	ldrb	r2, [r7, #7]
 8010c88:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 8010c8a:	68fb      	ldr	r3, [r7, #12]
 8010c8c:	2201      	movs	r2, #1
 8010c8e:	709a      	strb	r2, [r3, #2]
        }
    }
}
 8010c90:	bf00      	nop
 8010c92:	3710      	adds	r7, #16
 8010c94:	46bd      	mov	sp, r7
 8010c96:	bd80      	pop	{r7, pc}
 8010c98:	20000cbc 	.word	0x20000cbc

08010c9c <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 8010c9c:	b580      	push	{r7, lr}
 8010c9e:	b084      	sub	sp, #16
 8010ca0:	af00      	add	r7, sp, #0
 8010ca2:	4603      	mov	r3, r0
 8010ca4:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 8010ca6:	2300      	movs	r3, #0
 8010ca8:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8010caa:	4b10      	ldr	r3, [pc, #64]	; (8010cec <LoRaMacConfirmQueueGetStatus+0x50>)
 8010cac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010cb0:	4618      	mov	r0, r3
 8010cb2:	f7ff fef5 	bl	8010aa0 <IsListEmpty>
 8010cb6:	4603      	mov	r3, r0
 8010cb8:	f083 0301 	eor.w	r3, r3, #1
 8010cbc:	b2db      	uxtb	r3, r3
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d00e      	beq.n	8010ce0 <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8010cc2:	4b0a      	ldr	r3, [pc, #40]	; (8010cec <LoRaMacConfirmQueueGetStatus+0x50>)
 8010cc4:	6859      	ldr	r1, [r3, #4]
 8010cc6:	4b09      	ldr	r3, [pc, #36]	; (8010cec <LoRaMacConfirmQueueGetStatus+0x50>)
 8010cc8:	689a      	ldr	r2, [r3, #8]
 8010cca:	79fb      	ldrb	r3, [r7, #7]
 8010ccc:	4618      	mov	r0, r3
 8010cce:	f7ff ff07 	bl	8010ae0 <GetElement>
 8010cd2:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8010cd4:	68fb      	ldr	r3, [r7, #12]
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d002      	beq.n	8010ce0 <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 8010cda:	68fb      	ldr	r3, [r7, #12]
 8010cdc:	785b      	ldrb	r3, [r3, #1]
 8010cde:	e000      	b.n	8010ce2 <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010ce0:	2301      	movs	r3, #1
}
 8010ce2:	4618      	mov	r0, r3
 8010ce4:	3710      	adds	r7, #16
 8010ce6:	46bd      	mov	sp, r7
 8010ce8:	bd80      	pop	{r7, pc}
 8010cea:	bf00      	nop
 8010cec:	20000cbc 	.word	0x20000cbc

08010cf0 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 8010cf0:	b580      	push	{r7, lr}
 8010cf2:	b084      	sub	sp, #16
 8010cf4:	af00      	add	r7, sp, #0
 8010cf6:	4603      	mov	r3, r0
 8010cf8:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 8010cfa:	4b16      	ldr	r3, [pc, #88]	; (8010d54 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8010cfc:	685b      	ldr	r3, [r3, #4]
 8010cfe:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 8010d00:	4a14      	ldr	r2, [pc, #80]	; (8010d54 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8010d02:	79fb      	ldrb	r3, [r7, #7]
 8010d04:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8010d08:	4b12      	ldr	r3, [pc, #72]	; (8010d54 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8010d0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010d0e:	4618      	mov	r0, r3
 8010d10:	f7ff fec6 	bl	8010aa0 <IsListEmpty>
 8010d14:	4603      	mov	r3, r0
 8010d16:	f083 0301 	eor.w	r3, r3, #1
 8010d1a:	b2db      	uxtb	r3, r3
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d015      	beq.n	8010d4c <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 8010d20:	68fb      	ldr	r3, [r7, #12]
 8010d22:	79fa      	ldrb	r2, [r7, #7]
 8010d24:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 8010d26:	68fb      	ldr	r3, [r7, #12]
 8010d28:	78db      	ldrb	r3, [r3, #3]
 8010d2a:	f083 0301 	eor.w	r3, r3, #1
 8010d2e:	b2db      	uxtb	r3, r3
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	d002      	beq.n	8010d3a <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 8010d34:	68fb      	ldr	r3, [r7, #12]
 8010d36:	2201      	movs	r2, #1
 8010d38:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 8010d3a:	68f8      	ldr	r0, [r7, #12]
 8010d3c:	f7ff fe98 	bl	8010a70 <IncreaseBufferPointer>
 8010d40:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 8010d42:	4b04      	ldr	r3, [pc, #16]	; (8010d54 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8010d44:	689b      	ldr	r3, [r3, #8]
 8010d46:	68fa      	ldr	r2, [r7, #12]
 8010d48:	429a      	cmp	r2, r3
 8010d4a:	d1e9      	bne.n	8010d20 <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 8010d4c:	bf00      	nop
 8010d4e:	3710      	adds	r7, #16
 8010d50:	46bd      	mov	sp, r7
 8010d52:	bd80      	pop	{r7, pc}
 8010d54:	20000cbc 	.word	0x20000cbc

08010d58 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 8010d58:	b580      	push	{r7, lr}
 8010d5a:	b082      	sub	sp, #8
 8010d5c:	af00      	add	r7, sp, #0
 8010d5e:	4603      	mov	r3, r0
 8010d60:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 8010d62:	4b09      	ldr	r3, [pc, #36]	; (8010d88 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8010d64:	6859      	ldr	r1, [r3, #4]
 8010d66:	4b08      	ldr	r3, [pc, #32]	; (8010d88 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8010d68:	689a      	ldr	r2, [r3, #8]
 8010d6a:	79fb      	ldrb	r3, [r7, #7]
 8010d6c:	4618      	mov	r0, r3
 8010d6e:	f7ff feb7 	bl	8010ae0 <GetElement>
 8010d72:	4603      	mov	r3, r0
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d001      	beq.n	8010d7c <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 8010d78:	2301      	movs	r3, #1
 8010d7a:	e000      	b.n	8010d7e <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 8010d7c:	2300      	movs	r3, #0
}
 8010d7e:	4618      	mov	r0, r3
 8010d80:	3708      	adds	r7, #8
 8010d82:	46bd      	mov	sp, r7
 8010d84:	bd80      	pop	{r7, pc}
 8010d86:	bf00      	nop
 8010d88:	20000cbc 	.word	0x20000cbc

08010d8c <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 8010d8c:	b580      	push	{r7, lr}
 8010d8e:	b084      	sub	sp, #16
 8010d90:	af00      	add	r7, sp, #0
 8010d92:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8010d94:	4b22      	ldr	r3, [pc, #136]	; (8010e20 <LoRaMacConfirmQueueHandleCb+0x94>)
 8010d96:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010d9a:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 8010d9c:	2300      	movs	r3, #0
 8010d9e:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 8010da0:	2300      	movs	r3, #0
 8010da2:	73fb      	strb	r3, [r7, #15]
 8010da4:	e032      	b.n	8010e0c <LoRaMacConfirmQueueHandleCb+0x80>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 8010da6:	4b1e      	ldr	r3, [pc, #120]	; (8010e20 <LoRaMacConfirmQueueHandleCb+0x94>)
 8010da8:	685b      	ldr	r3, [r3, #4]
 8010daa:	781a      	ldrb	r2, [r3, #0]
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 8010db0:	4b1b      	ldr	r3, [pc, #108]	; (8010e20 <LoRaMacConfirmQueueHandleCb+0x94>)
 8010db2:	685b      	ldr	r3, [r3, #4]
 8010db4:	785a      	ldrb	r2, [r3, #1]
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 8010dba:	4b19      	ldr	r3, [pc, #100]	; (8010e20 <LoRaMacConfirmQueueHandleCb+0x94>)
 8010dbc:	685b      	ldr	r3, [r3, #4]
 8010dbe:	789b      	ldrb	r3, [r3, #2]
 8010dc0:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 8010dc2:	7b7b      	ldrb	r3, [r7, #13]
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	d005      	beq.n	8010dd4 <LoRaMacConfirmQueueHandleCb+0x48>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 8010dc8:	4b15      	ldr	r3, [pc, #84]	; (8010e20 <LoRaMacConfirmQueueHandleCb+0x94>)
 8010dca:	681b      	ldr	r3, [r3, #0]
 8010dcc:	689b      	ldr	r3, [r3, #8]
 8010dce:	6878      	ldr	r0, [r7, #4]
 8010dd0:	4798      	blx	r3
 8010dd2:	e00b      	b.n	8010dec <LoRaMacConfirmQueueHandleCb+0x60>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 8010dd4:	4b12      	ldr	r3, [pc, #72]	; (8010e20 <LoRaMacConfirmQueueHandleCb+0x94>)
 8010dd6:	685b      	ldr	r3, [r3, #4]
 8010dd8:	781b      	ldrb	r3, [r3, #0]
 8010dda:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 8010ddc:	4b10      	ldr	r3, [pc, #64]	; (8010e20 <LoRaMacConfirmQueueHandleCb+0x94>)
 8010dde:	685b      	ldr	r3, [r3, #4]
 8010de0:	785b      	ldrb	r3, [r3, #1]
 8010de2:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 8010de4:	4b0e      	ldr	r3, [pc, #56]	; (8010e20 <LoRaMacConfirmQueueHandleCb+0x94>)
 8010de6:	685b      	ldr	r3, [r3, #4]
 8010de8:	78db      	ldrb	r3, [r3, #3]
 8010dea:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 8010dec:	f7ff ff06 	bl	8010bfc <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 8010df0:	7b7b      	ldrb	r3, [r7, #13]
 8010df2:	f083 0301 	eor.w	r3, r3, #1
 8010df6:	b2db      	uxtb	r3, r3
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	d004      	beq.n	8010e06 <LoRaMacConfirmQueueHandleCb+0x7a>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 8010dfc:	f107 0308 	add.w	r3, r7, #8
 8010e00:	4618      	mov	r0, r3
 8010e02:	f7ff fec1 	bl	8010b88 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 8010e06:	7bfb      	ldrb	r3, [r7, #15]
 8010e08:	3301      	adds	r3, #1
 8010e0a:	73fb      	strb	r3, [r7, #15]
 8010e0c:	7bfa      	ldrb	r2, [r7, #15]
 8010e0e:	7bbb      	ldrb	r3, [r7, #14]
 8010e10:	429a      	cmp	r2, r3
 8010e12:	d3c8      	bcc.n	8010da6 <LoRaMacConfirmQueueHandleCb+0x1a>
        }
    }
}
 8010e14:	bf00      	nop
 8010e16:	bf00      	nop
 8010e18:	3710      	adds	r7, #16
 8010e1a:	46bd      	mov	sp, r7
 8010e1c:	bd80      	pop	{r7, pc}
 8010e1e:	bf00      	nop
 8010e20:	20000cbc 	.word	0x20000cbc

08010e24 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 8010e24:	b480      	push	{r7}
 8010e26:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8010e28:	4b03      	ldr	r3, [pc, #12]	; (8010e38 <LoRaMacConfirmQueueGetCnt+0x14>)
 8010e2a:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 8010e2e:	4618      	mov	r0, r3
 8010e30:	46bd      	mov	sp, r7
 8010e32:	bc80      	pop	{r7}
 8010e34:	4770      	bx	lr
 8010e36:	bf00      	nop
 8010e38:	20000cbc 	.word	0x20000cbc

08010e3c <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 8010e3c:	b580      	push	{r7, lr}
 8010e3e:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8010e40:	4b06      	ldr	r3, [pc, #24]	; (8010e5c <LoRaMacConfirmQueueIsFull+0x20>)
 8010e42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010e46:	4618      	mov	r0, r3
 8010e48:	f7ff fe3a 	bl	8010ac0 <IsListFull>
 8010e4c:	4603      	mov	r3, r0
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	d001      	beq.n	8010e56 <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 8010e52:	2301      	movs	r3, #1
 8010e54:	e000      	b.n	8010e58 <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 8010e56:	2300      	movs	r3, #0
    }
}
 8010e58:	4618      	mov	r0, r3
 8010e5a:	bd80      	pop	{r7, pc}
 8010e5c:	20000cbc 	.word	0x20000cbc

08010e60 <PayloadEncrypt>:
 * \param[IN]  size             - Size of data
 * \param[IN/OUT]  buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 8010e60:	b580      	push	{r7, lr}
 8010e62:	b08e      	sub	sp, #56	; 0x38
 8010e64:	af00      	add	r7, sp, #0
 8010e66:	60f8      	str	r0, [r7, #12]
 8010e68:	607b      	str	r3, [r7, #4]
 8010e6a:	460b      	mov	r3, r1
 8010e6c:	817b      	strh	r3, [r7, #10]
 8010e6e:	4613      	mov	r3, r2
 8010e70:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 8010e72:	68fb      	ldr	r3, [r7, #12]
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	d101      	bne.n	8010e7c <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8010e78:	230a      	movs	r3, #10
 8010e7a:	e087      	b.n	8010f8c <PayloadEncrypt+0x12c>
    }

    uint8_t bufferIndex = 0;
 8010e7c:	2300      	movs	r3, #0
 8010e7e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint16_t ctr = 1;
 8010e82:	2301      	movs	r3, #1
 8010e84:	86bb      	strh	r3, [r7, #52]	; 0x34
    uint8_t sBlock[16] = { 0 };
 8010e86:	2300      	movs	r3, #0
 8010e88:	623b      	str	r3, [r7, #32]
 8010e8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010e8e:	2200      	movs	r2, #0
 8010e90:	601a      	str	r2, [r3, #0]
 8010e92:	605a      	str	r2, [r3, #4]
 8010e94:	609a      	str	r2, [r3, #8]
    uint8_t aBlock[16] = { 0 };
 8010e96:	2300      	movs	r3, #0
 8010e98:	613b      	str	r3, [r7, #16]
 8010e9a:	f107 0314 	add.w	r3, r7, #20
 8010e9e:	2200      	movs	r2, #0
 8010ea0:	601a      	str	r2, [r3, #0]
 8010ea2:	605a      	str	r2, [r3, #4]
 8010ea4:	609a      	str	r2, [r3, #8]

    aBlock[0] = 0x01;
 8010ea6:	2301      	movs	r3, #1
 8010ea8:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 8010eaa:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8010eae:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	b2db      	uxtb	r3, r3
 8010eb4:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	0a1b      	lsrs	r3, r3, #8
 8010eba:	b2db      	uxtb	r3, r3
 8010ebc:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	0c1b      	lsrs	r3, r3, #16
 8010ec2:	b2db      	uxtb	r3, r3
 8010ec4:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	0e1b      	lsrs	r3, r3, #24
 8010eca:	b2db      	uxtb	r3, r3
 8010ecc:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 8010ece:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010ed0:	b2db      	uxtb	r3, r3
 8010ed2:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 8010ed4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010ed6:	0a1b      	lsrs	r3, r3, #8
 8010ed8:	b2db      	uxtb	r3, r3
 8010eda:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8010edc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010ede:	0c1b      	lsrs	r3, r3, #16
 8010ee0:	b2db      	uxtb	r3, r3
 8010ee2:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8010ee4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010ee6:	0e1b      	lsrs	r3, r3, #24
 8010ee8:	b2db      	uxtb	r3, r3
 8010eea:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 8010eec:	e049      	b.n	8010f82 <PayloadEncrypt+0x122>
    {
        aBlock[15] = ctr & 0xFF;
 8010eee:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8010ef0:	b2db      	uxtb	r3, r3
 8010ef2:	77fb      	strb	r3, [r7, #31]
        ctr++;
 8010ef4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8010ef6:	3301      	adds	r3, #1
 8010ef8:	86bb      	strh	r3, [r7, #52]	; 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8010efa:	f107 0320 	add.w	r3, r7, #32
 8010efe:	7a7a      	ldrb	r2, [r7, #9]
 8010f00:	f107 0010 	add.w	r0, r7, #16
 8010f04:	2110      	movs	r1, #16
 8010f06:	f7f9 fa04 	bl	800a312 <SecureElementAesEncrypt>
 8010f0a:	4603      	mov	r3, r0
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d001      	beq.n	8010f14 <PayloadEncrypt+0xb4>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8010f10:	230f      	movs	r3, #15
 8010f12:	e03b      	b.n	8010f8c <PayloadEncrypt+0x12c>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8010f14:	2300      	movs	r3, #0
 8010f16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010f1a:	e01f      	b.n	8010f5c <PayloadEncrypt+0xfc>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8010f1c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8010f20:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8010f24:	4413      	add	r3, r2
 8010f26:	461a      	mov	r2, r3
 8010f28:	68fb      	ldr	r3, [r7, #12]
 8010f2a:	4413      	add	r3, r2
 8010f2c:	7819      	ldrb	r1, [r3, #0]
 8010f2e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8010f32:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8010f36:	4413      	add	r3, r2
 8010f38:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8010f3c:	f897 0037 	ldrb.w	r0, [r7, #55]	; 0x37
 8010f40:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8010f44:	4403      	add	r3, r0
 8010f46:	4618      	mov	r0, r3
 8010f48:	68fb      	ldr	r3, [r7, #12]
 8010f4a:	4403      	add	r3, r0
 8010f4c:	404a      	eors	r2, r1
 8010f4e:	b2d2      	uxtb	r2, r2
 8010f50:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8010f52:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8010f56:	3301      	adds	r3, #1
 8010f58:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010f5c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8010f60:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8010f64:	2a10      	cmp	r2, #16
 8010f66:	bfa8      	it	ge
 8010f68:	2210      	movge	r2, #16
 8010f6a:	b212      	sxth	r2, r2
 8010f6c:	4293      	cmp	r3, r2
 8010f6e:	dbd5      	blt.n	8010f1c <PayloadEncrypt+0xbc>
        }
        size -= 16;
 8010f70:	897b      	ldrh	r3, [r7, #10]
 8010f72:	3b10      	subs	r3, #16
 8010f74:	b29b      	uxth	r3, r3
 8010f76:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 8010f78:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010f7c:	3310      	adds	r3, #16
 8010f7e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    while( size > 0 )
 8010f82:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	dcb1      	bgt.n	8010eee <PayloadEncrypt+0x8e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8010f8a:	2300      	movs	r3, #0
}
 8010f8c:	4618      	mov	r0, r3
 8010f8e:	3738      	adds	r7, #56	; 0x38
 8010f90:	46bd      	mov	sp, r7
 8010f92:	bd80      	pop	{r7, pc}

08010f94 <PrepareB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[IN/OUT]  b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 8010f94:	b490      	push	{r4, r7}
 8010f96:	b082      	sub	sp, #8
 8010f98:	af00      	add	r7, sp, #0
 8010f9a:	4604      	mov	r4, r0
 8010f9c:	4608      	mov	r0, r1
 8010f9e:	4611      	mov	r1, r2
 8010fa0:	461a      	mov	r2, r3
 8010fa2:	4623      	mov	r3, r4
 8010fa4:	80fb      	strh	r3, [r7, #6]
 8010fa6:	4603      	mov	r3, r0
 8010fa8:	717b      	strb	r3, [r7, #5]
 8010faa:	460b      	mov	r3, r1
 8010fac:	713b      	strb	r3, [r7, #4]
 8010fae:	4613      	mov	r3, r2
 8010fb0:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 8010fb2:	69bb      	ldr	r3, [r7, #24]
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	d101      	bne.n	8010fbc <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8010fb8:	230a      	movs	r3, #10
 8010fba:	e04e      	b.n	801105a <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 8010fbc:	69bb      	ldr	r3, [r7, #24]
 8010fbe:	2249      	movs	r2, #73	; 0x49
 8010fc0:	701a      	strb	r2, [r3, #0]
    }
    else
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    /* ST_WORAROUND_END */
    {
        b0[1] = 0x00;
 8010fc2:	69bb      	ldr	r3, [r7, #24]
 8010fc4:	3301      	adds	r3, #1
 8010fc6:	2200      	movs	r2, #0
 8010fc8:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 8010fca:	69bb      	ldr	r3, [r7, #24]
 8010fcc:	3302      	adds	r3, #2
 8010fce:	2200      	movs	r2, #0
 8010fd0:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 8010fd2:	69bb      	ldr	r3, [r7, #24]
 8010fd4:	3303      	adds	r3, #3
 8010fd6:	2200      	movs	r2, #0
 8010fd8:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 8010fda:	69bb      	ldr	r3, [r7, #24]
 8010fdc:	3304      	adds	r3, #4
 8010fde:	2200      	movs	r2, #0
 8010fe0:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 8010fe2:	69bb      	ldr	r3, [r7, #24]
 8010fe4:	3305      	adds	r3, #5
 8010fe6:	78fa      	ldrb	r2, [r7, #3]
 8010fe8:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 8010fea:	69bb      	ldr	r3, [r7, #24]
 8010fec:	3306      	adds	r3, #6
 8010fee:	693a      	ldr	r2, [r7, #16]
 8010ff0:	b2d2      	uxtb	r2, r2
 8010ff2:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 8010ff4:	693b      	ldr	r3, [r7, #16]
 8010ff6:	0a1a      	lsrs	r2, r3, #8
 8010ff8:	69bb      	ldr	r3, [r7, #24]
 8010ffa:	3307      	adds	r3, #7
 8010ffc:	b2d2      	uxtb	r2, r2
 8010ffe:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8011000:	693b      	ldr	r3, [r7, #16]
 8011002:	0c1a      	lsrs	r2, r3, #16
 8011004:	69bb      	ldr	r3, [r7, #24]
 8011006:	3308      	adds	r3, #8
 8011008:	b2d2      	uxtb	r2, r2
 801100a:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 801100c:	693b      	ldr	r3, [r7, #16]
 801100e:	0e1a      	lsrs	r2, r3, #24
 8011010:	69bb      	ldr	r3, [r7, #24]
 8011012:	3309      	adds	r3, #9
 8011014:	b2d2      	uxtb	r2, r2
 8011016:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 8011018:	69bb      	ldr	r3, [r7, #24]
 801101a:	330a      	adds	r3, #10
 801101c:	697a      	ldr	r2, [r7, #20]
 801101e:	b2d2      	uxtb	r2, r2
 8011020:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 8011022:	697b      	ldr	r3, [r7, #20]
 8011024:	0a1a      	lsrs	r2, r3, #8
 8011026:	69bb      	ldr	r3, [r7, #24]
 8011028:	330b      	adds	r3, #11
 801102a:	b2d2      	uxtb	r2, r2
 801102c:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 801102e:	697b      	ldr	r3, [r7, #20]
 8011030:	0c1a      	lsrs	r2, r3, #16
 8011032:	69bb      	ldr	r3, [r7, #24]
 8011034:	330c      	adds	r3, #12
 8011036:	b2d2      	uxtb	r2, r2
 8011038:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 801103a:	697b      	ldr	r3, [r7, #20]
 801103c:	0e1a      	lsrs	r2, r3, #24
 801103e:	69bb      	ldr	r3, [r7, #24]
 8011040:	330d      	adds	r3, #13
 8011042:	b2d2      	uxtb	r2, r2
 8011044:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 8011046:	69bb      	ldr	r3, [r7, #24]
 8011048:	330e      	adds	r3, #14
 801104a:	2200      	movs	r2, #0
 801104c:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 801104e:	69bb      	ldr	r3, [r7, #24]
 8011050:	330f      	adds	r3, #15
 8011052:	88fa      	ldrh	r2, [r7, #6]
 8011054:	b2d2      	uxtb	r2, r2
 8011056:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8011058:	2300      	movs	r3, #0
}
 801105a:	4618      	mov	r0, r3
 801105c:	3708      	adds	r7, #8
 801105e:	46bd      	mov	sp, r7
 8011060:	bc90      	pop	{r4, r7}
 8011062:	4770      	bx	lr

08011064 <ComputeCmacB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 8011064:	b590      	push	{r4, r7, lr}
 8011066:	b08b      	sub	sp, #44	; 0x2c
 8011068:	af04      	add	r7, sp, #16
 801106a:	6078      	str	r0, [r7, #4]
 801106c:	4608      	mov	r0, r1
 801106e:	4611      	mov	r1, r2
 8011070:	461a      	mov	r2, r3
 8011072:	4603      	mov	r3, r0
 8011074:	807b      	strh	r3, [r7, #2]
 8011076:	460b      	mov	r3, r1
 8011078:	707b      	strb	r3, [r7, #1]
 801107a:	4613      	mov	r3, r2
 801107c:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	2b00      	cmp	r3, #0
 8011082:	d002      	beq.n	801108a <ComputeCmacB0+0x26>
 8011084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011086:	2b00      	cmp	r3, #0
 8011088:	d101      	bne.n	801108e <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801108a:	230a      	movs	r3, #10
 801108c:	e024      	b.n	80110d8 <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 801108e:	887b      	ldrh	r3, [r7, #2]
 8011090:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011094:	d901      	bls.n	801109a <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8011096:	230e      	movs	r3, #14
 8011098:	e01e      	b.n	80110d8 <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE];

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 801109a:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 801109e:	783a      	ldrb	r2, [r7, #0]
 80110a0:	7879      	ldrb	r1, [r7, #1]
 80110a2:	8878      	ldrh	r0, [r7, #2]
 80110a4:	f107 0308 	add.w	r3, r7, #8
 80110a8:	9302      	str	r3, [sp, #8]
 80110aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110ac:	9301      	str	r3, [sp, #4]
 80110ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110b0:	9300      	str	r3, [sp, #0]
 80110b2:	4623      	mov	r3, r4
 80110b4:	f7ff ff6e 	bl	8010f94 <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 80110b8:	7879      	ldrb	r1, [r7, #1]
 80110ba:	887a      	ldrh	r2, [r7, #2]
 80110bc:	f107 0008 	add.w	r0, r7, #8
 80110c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110c2:	9300      	str	r3, [sp, #0]
 80110c4:	460b      	mov	r3, r1
 80110c6:	6879      	ldr	r1, [r7, #4]
 80110c8:	f7f9 f8d6 	bl	800a278 <SecureElementComputeAesCmac>
 80110cc:	4603      	mov	r3, r0
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	d001      	beq.n	80110d6 <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80110d2:	230f      	movs	r3, #15
 80110d4:	e000      	b.n	80110d8 <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 80110d6:	2300      	movs	r3, #0
}
 80110d8:	4618      	mov	r0, r3
 80110da:	371c      	adds	r7, #28
 80110dc:	46bd      	mov	sp, r7
 80110de:	bd90      	pop	{r4, r7, pc}

080110e0 <VerifyCmacB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[in]  expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 80110e0:	b590      	push	{r4, r7, lr}
 80110e2:	b0cd      	sub	sp, #308	; 0x134
 80110e4:	af04      	add	r7, sp, #16
 80110e6:	1d3c      	adds	r4, r7, #4
 80110e8:	6020      	str	r0, [r4, #0]
 80110ea:	460c      	mov	r4, r1
 80110ec:	4610      	mov	r0, r2
 80110ee:	4619      	mov	r1, r3
 80110f0:	1cbb      	adds	r3, r7, #2
 80110f2:	4622      	mov	r2, r4
 80110f4:	801a      	strh	r2, [r3, #0]
 80110f6:	1c7b      	adds	r3, r7, #1
 80110f8:	4602      	mov	r2, r0
 80110fa:	701a      	strb	r2, [r3, #0]
 80110fc:	463b      	mov	r3, r7
 80110fe:	460a      	mov	r2, r1
 8011100:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 8011102:	1d3b      	adds	r3, r7, #4
 8011104:	681b      	ldr	r3, [r3, #0]
 8011106:	2b00      	cmp	r3, #0
 8011108:	d101      	bne.n	801110e <VerifyCmacB0+0x2e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801110a:	230a      	movs	r3, #10
 801110c:	e04b      	b.n	80111a6 <VerifyCmacB0+0xc6>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 801110e:	1cbb      	adds	r3, r7, #2
 8011110:	881b      	ldrh	r3, [r3, #0]
 8011112:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011116:	d901      	bls.n	801111c <VerifyCmacB0+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8011118:	230e      	movs	r3, #14
 801111a:	e044      	b.n	80111a6 <VerifyCmacB0+0xc6>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 801111c:	f107 030c 	add.w	r3, r7, #12
 8011120:	f44f 7288 	mov.w	r2, #272	; 0x110
 8011124:	2100      	movs	r1, #0
 8011126:	4618      	mov	r0, r3
 8011128:	f003 fb6a 	bl	8014800 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 801112c:	f897 4130 	ldrb.w	r4, [r7, #304]	; 0x130
 8011130:	463b      	mov	r3, r7
 8011132:	781a      	ldrb	r2, [r3, #0]
 8011134:	1c7b      	adds	r3, r7, #1
 8011136:	7819      	ldrb	r1, [r3, #0]
 8011138:	1cbb      	adds	r3, r7, #2
 801113a:	8818      	ldrh	r0, [r3, #0]
 801113c:	f107 030c 	add.w	r3, r7, #12
 8011140:	9302      	str	r3, [sp, #8]
 8011142:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8011146:	9301      	str	r3, [sp, #4]
 8011148:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801114c:	9300      	str	r3, [sp, #0]
 801114e:	4623      	mov	r3, r4
 8011150:	f7ff ff20 	bl	8010f94 <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8011154:	f107 030c 	add.w	r3, r7, #12
 8011158:	3310      	adds	r3, #16
 801115a:	1cba      	adds	r2, r7, #2
 801115c:	8812      	ldrh	r2, [r2, #0]
 801115e:	1d39      	adds	r1, r7, #4
 8011160:	6809      	ldr	r1, [r1, #0]
 8011162:	4618      	mov	r0, r3
 8011164:	f003 fb11 	bl	801478a <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8011168:	2306      	movs	r3, #6
 801116a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 801116e:	1cbb      	adds	r3, r7, #2
 8011170:	881b      	ldrh	r3, [r3, #0]
 8011172:	3310      	adds	r3, #16
 8011174:	b299      	uxth	r1, r3
 8011176:	1c7b      	adds	r3, r7, #1
 8011178:	781b      	ldrb	r3, [r3, #0]
 801117a:	f107 000c 	add.w	r0, r7, #12
 801117e:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8011182:	f7f9 f897 	bl	800a2b4 <SecureElementVerifyAesCmac>
 8011186:	4603      	mov	r3, r0
 8011188:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 801118c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8011190:	2b00      	cmp	r3, #0
 8011192:	d101      	bne.n	8011198 <VerifyCmacB0+0xb8>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 8011194:	2300      	movs	r3, #0
 8011196:	e006      	b.n	80111a6 <VerifyCmacB0+0xc6>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 8011198:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 801119c:	2b01      	cmp	r3, #1
 801119e:	d101      	bne.n	80111a4 <VerifyCmacB0+0xc4>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 80111a0:	2301      	movs	r3, #1
 80111a2:	e000      	b.n	80111a6 <VerifyCmacB0+0xc6>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80111a4:	230f      	movs	r3, #15
}
 80111a6:	4618      	mov	r0, r3
 80111a8:	f507 7792 	add.w	r7, r7, #292	; 0x124
 80111ac:	46bd      	mov	sp, r7
 80111ae:	bd90      	pop	{r4, r7, pc}

080111b0 <GetKeyAddrItem>:
 * \param[IN]  addrID          - Address identifier
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 80111b0:	b480      	push	{r7}
 80111b2:	b085      	sub	sp, #20
 80111b4:	af00      	add	r7, sp, #0
 80111b6:	4603      	mov	r3, r0
 80111b8:	6039      	str	r1, [r7, #0]
 80111ba:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 80111bc:	2300      	movs	r3, #0
 80111be:	73fb      	strb	r3, [r7, #15]
 80111c0:	e011      	b.n	80111e6 <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 80111c2:	7bfb      	ldrb	r3, [r7, #15]
 80111c4:	4a0c      	ldr	r2, [pc, #48]	; (80111f8 <GetKeyAddrItem+0x48>)
 80111c6:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 80111ca:	79fa      	ldrb	r2, [r7, #7]
 80111cc:	429a      	cmp	r2, r3
 80111ce:	d107      	bne.n	80111e0 <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 80111d0:	7bfb      	ldrb	r3, [r7, #15]
 80111d2:	009b      	lsls	r3, r3, #2
 80111d4:	4a08      	ldr	r2, [pc, #32]	; (80111f8 <GetKeyAddrItem+0x48>)
 80111d6:	441a      	add	r2, r3
 80111d8:	683b      	ldr	r3, [r7, #0]
 80111da:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 80111dc:	2300      	movs	r3, #0
 80111de:	e006      	b.n	80111ee <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 80111e0:	7bfb      	ldrb	r3, [r7, #15]
 80111e2:	3301      	adds	r3, #1
 80111e4:	73fb      	strb	r3, [r7, #15]
 80111e6:	7bfb      	ldrb	r3, [r7, #15]
 80111e8:	2b01      	cmp	r3, #1
 80111ea:	d9ea      	bls.n	80111c2 <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 80111ec:	230c      	movs	r3, #12
}
 80111ee:	4618      	mov	r0, r3
 80111f0:	3714      	adds	r7, #20
 80111f2:	46bd      	mov	sp, r7
 80111f4:	bc80      	pop	{r7}
 80111f6:	4770      	bx	lr
 80111f8:	200000e4 	.word	0x200000e4

080111fc <DeriveSessionKey10x>:
 * \param[IN]  netID          - Network Identifier
 * \param[IN]  deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 80111fc:	b580      	push	{r7, lr}
 80111fe:	b088      	sub	sp, #32
 8011200:	af00      	add	r7, sp, #0
 8011202:	60b9      	str	r1, [r7, #8]
 8011204:	607a      	str	r2, [r7, #4]
 8011206:	461a      	mov	r2, r3
 8011208:	4603      	mov	r3, r0
 801120a:	73fb      	strb	r3, [r7, #15]
 801120c:	4613      	mov	r3, r2
 801120e:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 8011210:	2300      	movs	r3, #0
 8011212:	613b      	str	r3, [r7, #16]
 8011214:	f107 0314 	add.w	r3, r7, #20
 8011218:	2200      	movs	r2, #0
 801121a:	601a      	str	r2, [r3, #0]
 801121c:	605a      	str	r2, [r3, #4]
 801121e:	609a      	str	r2, [r3, #8]

    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
    switch( keyID )
 8011220:	7bfb      	ldrb	r3, [r7, #15]
 8011222:	2b02      	cmp	r3, #2
 8011224:	d002      	beq.n	801122c <DeriveSessionKey10x+0x30>
 8011226:	2b03      	cmp	r3, #3
 8011228:	d003      	beq.n	8011232 <DeriveSessionKey10x+0x36>
 801122a:	e005      	b.n	8011238 <DeriveSessionKey10x+0x3c>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case NWK_S_KEY:
#endif /* USE_LRWAN_1_1_X_CRYPTO */
            compBase[0] = 0x01;
 801122c:	2301      	movs	r3, #1
 801122e:	743b      	strb	r3, [r7, #16]
            break;
 8011230:	e004      	b.n	801123c <DeriveSessionKey10x+0x40>
        case APP_S_KEY:
            compBase[0] = 0x02;
 8011232:	2302      	movs	r3, #2
 8011234:	743b      	strb	r3, [r7, #16]
            break;
 8011236:	e001      	b.n	801123c <DeriveSessionKey10x+0x40>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8011238:	230b      	movs	r3, #11
 801123a:	e02a      	b.n	8011292 <DeriveSessionKey10x+0x96>
    }
   /* ST_WORKAROUND_END */

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 801123c:	68bb      	ldr	r3, [r7, #8]
 801123e:	b2db      	uxtb	r3, r3
 8011240:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 8011242:	68bb      	ldr	r3, [r7, #8]
 8011244:	0a1b      	lsrs	r3, r3, #8
 8011246:	b2db      	uxtb	r3, r3
 8011248:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 801124a:	68bb      	ldr	r3, [r7, #8]
 801124c:	0c1b      	lsrs	r3, r3, #16
 801124e:	b2db      	uxtb	r3, r3
 8011250:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	b2db      	uxtb	r3, r3
 8011256:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	0a1b      	lsrs	r3, r3, #8
 801125c:	b2db      	uxtb	r3, r3
 801125e:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	0c1b      	lsrs	r3, r3, #16
 8011264:	b2db      	uxtb	r3, r3
 8011266:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 8011268:	89bb      	ldrh	r3, [r7, #12]
 801126a:	b2db      	uxtb	r3, r3
 801126c:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 801126e:	89bb      	ldrh	r3, [r7, #12]
 8011270:	0a1b      	lsrs	r3, r3, #8
 8011272:	b29b      	uxth	r3, r3
 8011274:	b2db      	uxtb	r3, r3
 8011276:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8011278:	7bfa      	ldrb	r2, [r7, #15]
 801127a:	f107 0310 	add.w	r3, r7, #16
 801127e:	2101      	movs	r1, #1
 8011280:	4618      	mov	r0, r3
 8011282:	f7f9 f8a4 	bl	800a3ce <SecureElementDeriveAndStoreKey>
 8011286:	4603      	mov	r3, r0
 8011288:	2b00      	cmp	r3, #0
 801128a:	d001      	beq.n	8011290 <DeriveSessionKey10x+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801128c:	230f      	movs	r3, #15
 801128e:	e000      	b.n	8011292 <DeriveSessionKey10x+0x96>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8011290:	2300      	movs	r3, #0
}
 8011292:	4618      	mov	r0, r3
 8011294:	3720      	adds	r7, #32
 8011296:	46bd      	mov	sp, r7
 8011298:	bd80      	pop	{r7, pc}
	...

0801129c <GetLastFcntDown>:
 * \param[IN]     lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 801129c:	b480      	push	{r7}
 801129e:	b083      	sub	sp, #12
 80112a0:	af00      	add	r7, sp, #0
 80112a2:	4603      	mov	r3, r0
 80112a4:	6039      	str	r1, [r7, #0]
 80112a6:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 80112a8:	683b      	ldr	r3, [r7, #0]
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	d101      	bne.n	80112b2 <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80112ae:	230a      	movs	r3, #10
 80112b0:	e03b      	b.n	801132a <GetLastFcntDown+0x8e>
    }
    switch( fCntID )
 80112b2:	79fb      	ldrb	r3, [r7, #7]
 80112b4:	3b01      	subs	r3, #1
 80112b6:	2b03      	cmp	r3, #3
 80112b8:	d834      	bhi.n	8011324 <GetLastFcntDown+0x88>
 80112ba:	a201      	add	r2, pc, #4	; (adr r2, 80112c0 <GetLastFcntDown+0x24>)
 80112bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112c0:	080112d1 	.word	0x080112d1
 80112c4:	080112e9 	.word	0x080112e9
 80112c8:	08011301 	.word	0x08011301
 80112cc:	08011319 	.word	0x08011319
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 80112d0:	4b18      	ldr	r3, [pc, #96]	; (8011334 <GetLastFcntDown+0x98>)
 80112d2:	681b      	ldr	r3, [r3, #0]
 80112d4:	691a      	ldr	r2, [r3, #16]
 80112d6:	683b      	ldr	r3, [r7, #0]
 80112d8:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.NFCntDown;
 80112da:	4b16      	ldr	r3, [pc, #88]	; (8011334 <GetLastFcntDown+0x98>)
 80112dc:	681a      	ldr	r2, [r3, #0]
 80112de:	4b15      	ldr	r3, [pc, #84]	; (8011334 <GetLastFcntDown+0x98>)
 80112e0:	681b      	ldr	r3, [r3, #0]
 80112e2:	6912      	ldr	r2, [r2, #16]
 80112e4:	621a      	str	r2, [r3, #32]
            break;
 80112e6:	e01f      	b.n	8011328 <GetLastFcntDown+0x8c>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 80112e8:	4b12      	ldr	r3, [pc, #72]	; (8011334 <GetLastFcntDown+0x98>)
 80112ea:	681b      	ldr	r3, [r3, #0]
 80112ec:	695a      	ldr	r2, [r3, #20]
 80112ee:	683b      	ldr	r3, [r7, #0]
 80112f0:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.AFCntDown;
 80112f2:	4b10      	ldr	r3, [pc, #64]	; (8011334 <GetLastFcntDown+0x98>)
 80112f4:	681a      	ldr	r2, [r3, #0]
 80112f6:	4b0f      	ldr	r3, [pc, #60]	; (8011334 <GetLastFcntDown+0x98>)
 80112f8:	681b      	ldr	r3, [r3, #0]
 80112fa:	6952      	ldr	r2, [r2, #20]
 80112fc:	621a      	str	r2, [r3, #32]
            break;
 80112fe:	e013      	b.n	8011328 <GetLastFcntDown+0x8c>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 8011300:	4b0c      	ldr	r3, [pc, #48]	; (8011334 <GetLastFcntDown+0x98>)
 8011302:	681b      	ldr	r3, [r3, #0]
 8011304:	699a      	ldr	r2, [r3, #24]
 8011306:	683b      	ldr	r3, [r7, #0]
 8011308:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 801130a:	4b0a      	ldr	r3, [pc, #40]	; (8011334 <GetLastFcntDown+0x98>)
 801130c:	681a      	ldr	r2, [r3, #0]
 801130e:	4b09      	ldr	r3, [pc, #36]	; (8011334 <GetLastFcntDown+0x98>)
 8011310:	681b      	ldr	r3, [r3, #0]
 8011312:	6992      	ldr	r2, [r2, #24]
 8011314:	621a      	str	r2, [r3, #32]
            break;
 8011316:	e007      	b.n	8011328 <GetLastFcntDown+0x8c>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 8011318:	4b06      	ldr	r3, [pc, #24]	; (8011334 <GetLastFcntDown+0x98>)
 801131a:	681b      	ldr	r3, [r3, #0]
 801131c:	69da      	ldr	r2, [r3, #28]
 801131e:	683b      	ldr	r3, [r7, #0]
 8011320:	601a      	str	r2, [r3, #0]
            break;
 8011322:	e001      	b.n	8011328 <GetLastFcntDown+0x8c>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8011324:	2305      	movs	r3, #5
 8011326:	e000      	b.n	801132a <GetLastFcntDown+0x8e>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8011328:	2300      	movs	r3, #0
}
 801132a:	4618      	mov	r0, r3
 801132c:	370c      	adds	r7, #12
 801132e:	46bd      	mov	sp, r7
 8011330:	bc80      	pop	{r7}
 8011332:	4770      	bx	lr
 8011334:	20000ce0 	.word	0x20000ce0

08011338 <CheckFCntDown>:
 * \param[IN]     currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8011338:	b580      	push	{r7, lr}
 801133a:	b084      	sub	sp, #16
 801133c:	af00      	add	r7, sp, #0
 801133e:	4603      	mov	r3, r0
 8011340:	6039      	str	r1, [r7, #0]
 8011342:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 8011344:	2300      	movs	r3, #0
 8011346:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 8011348:	f107 020c 	add.w	r2, r7, #12
 801134c:	79fb      	ldrb	r3, [r7, #7]
 801134e:	4611      	mov	r1, r2
 8011350:	4618      	mov	r0, r3
 8011352:	f7ff ffa3 	bl	801129c <GetLastFcntDown>
 8011356:	4603      	mov	r3, r0
 8011358:	2b00      	cmp	r3, #0
 801135a:	d001      	beq.n	8011360 <CheckFCntDown+0x28>
    {
        return false;
 801135c:	2300      	movs	r3, #0
 801135e:	e00a      	b.n	8011376 <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 8011360:	68fb      	ldr	r3, [r7, #12]
 8011362:	683a      	ldr	r2, [r7, #0]
 8011364:	429a      	cmp	r2, r3
 8011366:	d803      	bhi.n	8011370 <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITAL_VALUE ) )
 8011368:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 801136a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801136e:	d101      	bne.n	8011374 <CheckFCntDown+0x3c>
    {
        return true;
 8011370:	2301      	movs	r3, #1
 8011372:	e000      	b.n	8011376 <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 8011374:	2300      	movs	r3, #0
    }
}
 8011376:	4618      	mov	r0, r3
 8011378:	3710      	adds	r7, #16
 801137a:	46bd      	mov	sp, r7
 801137c:	bd80      	pop	{r7, pc}
	...

08011380 <UpdateFCntDown>:
 * \param[IN]     currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8011380:	b480      	push	{r7}
 8011382:	b083      	sub	sp, #12
 8011384:	af00      	add	r7, sp, #0
 8011386:	4603      	mov	r3, r0
 8011388:	6039      	str	r1, [r7, #0]
 801138a:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 801138c:	79fb      	ldrb	r3, [r7, #7]
 801138e:	3b01      	subs	r3, #1
 8011390:	2b03      	cmp	r3, #3
 8011392:	d81f      	bhi.n	80113d4 <UpdateFCntDown+0x54>
 8011394:	a201      	add	r2, pc, #4	; (adr r2, 801139c <UpdateFCntDown+0x1c>)
 8011396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801139a:	bf00      	nop
 801139c:	080113ad 	.word	0x080113ad
 80113a0:	080113b7 	.word	0x080113b7
 80113a4:	080113c1 	.word	0x080113c1
 80113a8:	080113cb 	.word	0x080113cb
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 80113ac:	4b0c      	ldr	r3, [pc, #48]	; (80113e0 <UpdateFCntDown+0x60>)
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	683a      	ldr	r2, [r7, #0]
 80113b2:	611a      	str	r2, [r3, #16]
            break;
 80113b4:	e00f      	b.n	80113d6 <UpdateFCntDown+0x56>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 80113b6:	4b0a      	ldr	r3, [pc, #40]	; (80113e0 <UpdateFCntDown+0x60>)
 80113b8:	681b      	ldr	r3, [r3, #0]
 80113ba:	683a      	ldr	r2, [r7, #0]
 80113bc:	615a      	str	r2, [r3, #20]
            break;
 80113be:	e00a      	b.n	80113d6 <UpdateFCntDown+0x56>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 80113c0:	4b07      	ldr	r3, [pc, #28]	; (80113e0 <UpdateFCntDown+0x60>)
 80113c2:	681b      	ldr	r3, [r3, #0]
 80113c4:	683a      	ldr	r2, [r7, #0]
 80113c6:	619a      	str	r2, [r3, #24]
            break;
 80113c8:	e005      	b.n	80113d6 <UpdateFCntDown+0x56>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 80113ca:	4b05      	ldr	r3, [pc, #20]	; (80113e0 <UpdateFCntDown+0x60>)
 80113cc:	681b      	ldr	r3, [r3, #0]
 80113ce:	683a      	ldr	r2, [r7, #0]
 80113d0:	61da      	str	r2, [r3, #28]
            break;
 80113d2:	e000      	b.n	80113d6 <UpdateFCntDown+0x56>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 80113d4:	bf00      	nop
    }
}
 80113d6:	bf00      	nop
 80113d8:	370c      	adds	r7, #12
 80113da:	46bd      	mov	sp, r7
 80113dc:	bc80      	pop	{r7}
 80113de:	4770      	bx	lr
 80113e0:	20000ce0 	.word	0x20000ce0

080113e4 <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 80113e4:	b480      	push	{r7}
 80113e6:	b083      	sub	sp, #12
 80113e8:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 80113ea:	4b18      	ldr	r3, [pc, #96]	; (801144c <ResetFCnts+0x68>)
 80113ec:	681b      	ldr	r3, [r3, #0]
 80113ee:	2200      	movs	r2, #0
 80113f0:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 80113f2:	4b16      	ldr	r3, [pc, #88]	; (801144c <ResetFCnts+0x68>)
 80113f4:	681b      	ldr	r3, [r3, #0]
 80113f6:	f04f 32ff 	mov.w	r2, #4294967295
 80113fa:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 80113fc:	4b13      	ldr	r3, [pc, #76]	; (801144c <ResetFCnts+0x68>)
 80113fe:	681b      	ldr	r3, [r3, #0]
 8011400:	f04f 32ff 	mov.w	r2, #4294967295
 8011404:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 8011406:	4b11      	ldr	r3, [pc, #68]	; (801144c <ResetFCnts+0x68>)
 8011408:	681b      	ldr	r3, [r3, #0]
 801140a:	f04f 32ff 	mov.w	r2, #4294967295
 801140e:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 8011410:	4b0e      	ldr	r3, [pc, #56]	; (801144c <ResetFCnts+0x68>)
 8011412:	681a      	ldr	r2, [r3, #0]
 8011414:	4b0d      	ldr	r3, [pc, #52]	; (801144c <ResetFCnts+0x68>)
 8011416:	681b      	ldr	r3, [r3, #0]
 8011418:	6992      	ldr	r2, [r2, #24]
 801141a:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 801141c:	2300      	movs	r3, #0
 801141e:	607b      	str	r3, [r7, #4]
 8011420:	e00b      	b.n	801143a <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
 8011422:	4b0a      	ldr	r3, [pc, #40]	; (801144c <ResetFCnts+0x68>)
 8011424:	681a      	ldr	r2, [r3, #0]
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	3306      	adds	r3, #6
 801142a:	009b      	lsls	r3, r3, #2
 801142c:	4413      	add	r3, r2
 801142e:	f04f 32ff 	mov.w	r2, #4294967295
 8011432:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	3301      	adds	r3, #1
 8011438:	607b      	str	r3, [r7, #4]
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	2b00      	cmp	r3, #0
 801143e:	ddf0      	ble.n	8011422 <ResetFCnts+0x3e>
    }
}
 8011440:	bf00      	nop
 8011442:	bf00      	nop
 8011444:	370c      	adds	r7, #12
 8011446:	46bd      	mov	sp, r7
 8011448:	bc80      	pop	{r7}
 801144a:	4770      	bx	lr
 801144c:	20000ce0 	.word	0x20000ce0

08011450 <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 8011450:	b580      	push	{r7, lr}
 8011452:	b082      	sub	sp, #8
 8011454:	af00      	add	r7, sp, #0
 8011456:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	2b00      	cmp	r3, #0
 801145c:	d101      	bne.n	8011462 <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 801145e:	2309      	movs	r3, #9
 8011460:	e01c      	b.n	801149c <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 8011462:	4a10      	ldr	r2, [pc, #64]	; (80114a4 <LoRaMacCryptoInit+0x54>)
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 8011468:	4b0e      	ldr	r3, [pc, #56]	; (80114a4 <LoRaMacCryptoInit+0x54>)
 801146a:	681b      	ldr	r3, [r3, #0]
 801146c:	2228      	movs	r2, #40	; 0x28
 801146e:	2100      	movs	r1, #0
 8011470:	4618      	mov	r0, r3
 8011472:	f003 f9c5 	bl	8014800 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 8011476:	4b0b      	ldr	r3, [pc, #44]	; (80114a4 <LoRaMacCryptoInit+0x54>)
 8011478:	681b      	ldr	r3, [r3, #0]
 801147a:	2201      	movs	r2, #1
 801147c:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 801147e:	4b09      	ldr	r3, [pc, #36]	; (80114a4 <LoRaMacCryptoInit+0x54>)
 8011480:	681b      	ldr	r3, [r3, #0]
 8011482:	2201      	movs	r2, #1
 8011484:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 8011486:	4b07      	ldr	r3, [pc, #28]	; (80114a4 <LoRaMacCryptoInit+0x54>)
 8011488:	681b      	ldr	r3, [r3, #0]
 801148a:	2201      	movs	r2, #1
 801148c:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 801148e:	4b05      	ldr	r3, [pc, #20]	; (80114a4 <LoRaMacCryptoInit+0x54>)
 8011490:	681b      	ldr	r3, [r3, #0]
 8011492:	2200      	movs	r2, #0
 8011494:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 8011496:	f7ff ffa5 	bl	80113e4 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 801149a:	2300      	movs	r3, #0
}
 801149c:	4618      	mov	r0, r3
 801149e:	3708      	adds	r7, #8
 80114a0:	46bd      	mov	sp, r7
 80114a2:	bd80      	pop	{r7, pc}
 80114a4:	20000ce0 	.word	0x20000ce0

080114a8 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 80114a8:	b480      	push	{r7}
 80114aa:	b083      	sub	sp, #12
 80114ac:	af00      	add	r7, sp, #0
 80114ae:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 80114b0:	4b04      	ldr	r3, [pc, #16]	; (80114c4 <LoRaMacCryptoSetLrWanVersion+0x1c>)
 80114b2:	681b      	ldr	r3, [r3, #0]
 80114b4:	687a      	ldr	r2, [r7, #4]
 80114b6:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 80114b8:	2300      	movs	r3, #0
}
 80114ba:	4618      	mov	r0, r3
 80114bc:	370c      	adds	r7, #12
 80114be:	46bd      	mov	sp, r7
 80114c0:	bc80      	pop	{r7}
 80114c2:	4770      	bx	lr
 80114c4:	20000ce0 	.word	0x20000ce0

080114c8 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 80114c8:	b480      	push	{r7}
 80114ca:	b083      	sub	sp, #12
 80114cc:	af00      	add	r7, sp, #0
 80114ce:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	d101      	bne.n	80114da <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80114d6:	230a      	movs	r3, #10
 80114d8:	e006      	b.n	80114e8 <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 80114da:	4b06      	ldr	r3, [pc, #24]	; (80114f4 <LoRaMacCryptoGetFCntUp+0x2c>)
 80114dc:	681b      	ldr	r3, [r3, #0]
 80114de:	68db      	ldr	r3, [r3, #12]
 80114e0:	1c5a      	adds	r2, r3, #1
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 80114e6:	2300      	movs	r3, #0
}
 80114e8:	4618      	mov	r0, r3
 80114ea:	370c      	adds	r7, #12
 80114ec:	46bd      	mov	sp, r7
 80114ee:	bc80      	pop	{r7}
 80114f0:	4770      	bx	lr
 80114f2:	bf00      	nop
 80114f4:	20000ce0 	.word	0x20000ce0

080114f8 <LoRaMacCryptoGetFCntDown>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint16_t maxFCntGap, uint32_t frameFcnt, uint32_t* currentDown )
{
 80114f8:	b5b0      	push	{r4, r5, r7, lr}
 80114fa:	b088      	sub	sp, #32
 80114fc:	af00      	add	r7, sp, #0
 80114fe:	60ba      	str	r2, [r7, #8]
 8011500:	607b      	str	r3, [r7, #4]
 8011502:	4603      	mov	r3, r0
 8011504:	73fb      	strb	r3, [r7, #15]
 8011506:	460b      	mov	r3, r1
 8011508:	81bb      	strh	r3, [r7, #12]
    uint32_t lastDown = 0;
 801150a:	2300      	movs	r3, #0
 801150c:	617b      	str	r3, [r7, #20]
    int32_t fCntDiff = 0;
 801150e:	2300      	movs	r3, #0
 8011510:	61fb      	str	r3, [r7, #28]
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 8011512:	2313      	movs	r3, #19
 8011514:	76fb      	strb	r3, [r7, #27]

    if( currentDown == NULL )
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	2b00      	cmp	r3, #0
 801151a:	d101      	bne.n	8011520 <LoRaMacCryptoGetFCntDown+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801151c:	230a      	movs	r3, #10
 801151e:	e04f      	b.n	80115c0 <LoRaMacCryptoGetFCntDown+0xc8>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 8011520:	f107 0214 	add.w	r2, r7, #20
 8011524:	7bfb      	ldrb	r3, [r7, #15]
 8011526:	4611      	mov	r1, r2
 8011528:	4618      	mov	r0, r3
 801152a:	f7ff feb7 	bl	801129c <GetLastFcntDown>
 801152e:	4603      	mov	r3, r0
 8011530:	76fb      	strb	r3, [r7, #27]
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8011532:	7efb      	ldrb	r3, [r7, #27]
 8011534:	2b00      	cmp	r3, #0
 8011536:	d001      	beq.n	801153c <LoRaMacCryptoGetFCntDown+0x44>
    {
        return cryptoStatus;
 8011538:	7efb      	ldrb	r3, [r7, #27]
 801153a:	e041      	b.n	80115c0 <LoRaMacCryptoGetFCntDown+0xc8>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 801153c:	697b      	ldr	r3, [r7, #20]
 801153e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011542:	d103      	bne.n	801154c <LoRaMacCryptoGetFCntDown+0x54>
    {
        *currentDown = frameFcnt;
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	68ba      	ldr	r2, [r7, #8]
 8011548:	601a      	str	r2, [r3, #0]
 801154a:	e01e      	b.n	801158a <LoRaMacCryptoGetFCntDown+0x92>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 801154c:	697b      	ldr	r3, [r7, #20]
 801154e:	b29b      	uxth	r3, r3
 8011550:	68ba      	ldr	r2, [r7, #8]
 8011552:	1ad3      	subs	r3, r2, r3
 8011554:	61fb      	str	r3, [r7, #28]

        if( fCntDiff > 0 )
 8011556:	69fb      	ldr	r3, [r7, #28]
 8011558:	2b00      	cmp	r3, #0
 801155a:	dd05      	ble.n	8011568 <LoRaMacCryptoGetFCntDown+0x70>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 801155c:	697a      	ldr	r2, [r7, #20]
 801155e:	69fb      	ldr	r3, [r7, #28]
 8011560:	441a      	add	r2, r3
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	601a      	str	r2, [r3, #0]
 8011566:	e010      	b.n	801158a <LoRaMacCryptoGetFCntDown+0x92>
        }
        else if( fCntDiff == 0 )
 8011568:	69fb      	ldr	r3, [r7, #28]
 801156a:	2b00      	cmp	r3, #0
 801156c:	d104      	bne.n	8011578 <LoRaMacCryptoGetFCntDown+0x80>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 801156e:	697a      	ldr	r2, [r7, #20]
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 8011574:	2307      	movs	r3, #7
 8011576:	e023      	b.n	80115c0 <LoRaMacCryptoGetFCntDown+0xc8>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 8011578:	697b      	ldr	r3, [r7, #20]
 801157a:	0c1b      	lsrs	r3, r3, #16
 801157c:	041b      	lsls	r3, r3, #16
 801157e:	68ba      	ldr	r2, [r7, #8]
 8011580:	4413      	add	r3, r2
 8011582:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	601a      	str	r2, [r3, #0]
        }
    }

    // For LoRaWAN 1.0.X only, check maxFCntGap
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 801158a:	4b0f      	ldr	r3, [pc, #60]	; (80115c8 <LoRaMacCryptoGetFCntDown+0xd0>)
 801158c:	681b      	ldr	r3, [r3, #0]
 801158e:	789b      	ldrb	r3, [r3, #2]
 8011590:	2b00      	cmp	r3, #0
 8011592:	d114      	bne.n	80115be <LoRaMacCryptoGetFCntDown+0xc6>
    {
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	681b      	ldr	r3, [r3, #0]
 8011598:	4618      	mov	r0, r3
 801159a:	f04f 0100 	mov.w	r1, #0
 801159e:	697b      	ldr	r3, [r7, #20]
 80115a0:	461a      	mov	r2, r3
 80115a2:	f04f 0300 	mov.w	r3, #0
 80115a6:	1a84      	subs	r4, r0, r2
 80115a8:	eb61 0503 	sbc.w	r5, r1, r3
 80115ac:	89ba      	ldrh	r2, [r7, #12]
 80115ae:	f04f 0300 	mov.w	r3, #0
 80115b2:	4294      	cmp	r4, r2
 80115b4:	eb75 0303 	sbcs.w	r3, r5, r3
 80115b8:	db01      	blt.n	80115be <LoRaMacCryptoGetFCntDown+0xc6>
        {
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 80115ba:	2308      	movs	r3, #8
 80115bc:	e000      	b.n	80115c0 <LoRaMacCryptoGetFCntDown+0xc8>
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80115be:	2300      	movs	r3, #0
}
 80115c0:	4618      	mov	r0, r3
 80115c2:	3720      	adds	r7, #32
 80115c4:	46bd      	mov	sp, r7
 80115c6:	bdb0      	pop	{r4, r5, r7, pc}
 80115c8:	20000ce0 	.word	0x20000ce0

080115cc <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 80115cc:	b480      	push	{r7}
 80115ce:	b085      	sub	sp, #20
 80115d0:	af00      	add	r7, sp, #0
 80115d2:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	d101      	bne.n	80115de <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80115da:	230a      	movs	r3, #10
 80115dc:	e017      	b.n	801160e <LoRaMacCryptoSetMulticastReference+0x42>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80115de:	2300      	movs	r3, #0
 80115e0:	60fb      	str	r3, [r7, #12]
 80115e2:	e010      	b.n	8011606 <LoRaMacCryptoSetMulticastReference+0x3a>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 80115e4:	4b0c      	ldr	r3, [pc, #48]	; (8011618 <LoRaMacCryptoSetMulticastReference+0x4c>)
 80115e6:	6819      	ldr	r1, [r3, #0]
 80115e8:	68fb      	ldr	r3, [r7, #12]
 80115ea:	222c      	movs	r2, #44	; 0x2c
 80115ec:	fb02 f303 	mul.w	r3, r2, r3
 80115f0:	687a      	ldr	r2, [r7, #4]
 80115f2:	4413      	add	r3, r2
 80115f4:	68fa      	ldr	r2, [r7, #12]
 80115f6:	3206      	adds	r2, #6
 80115f8:	0092      	lsls	r2, r2, #2
 80115fa:	440a      	add	r2, r1
 80115fc:	3204      	adds	r2, #4
 80115fe:	621a      	str	r2, [r3, #32]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8011600:	68fb      	ldr	r3, [r7, #12]
 8011602:	3301      	adds	r3, #1
 8011604:	60fb      	str	r3, [r7, #12]
 8011606:	68fb      	ldr	r3, [r7, #12]
 8011608:	2b00      	cmp	r3, #0
 801160a:	ddeb      	ble.n	80115e4 <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 801160c:	2300      	movs	r3, #0
}
 801160e:	4618      	mov	r0, r3
 8011610:	3714      	adds	r7, #20
 8011612:	46bd      	mov	sp, r7
 8011614:	bc80      	pop	{r7}
 8011616:	4770      	bx	lr
 8011618:	20000ce0 	.word	0x20000ce0

0801161c <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 801161c:	b580      	push	{r7, lr}
 801161e:	b082      	sub	sp, #8
 8011620:	af00      	add	r7, sp, #0
 8011622:	4603      	mov	r3, r0
 8011624:	6039      	str	r1, [r7, #0]
 8011626:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 8011628:	79fb      	ldrb	r3, [r7, #7]
 801162a:	6839      	ldr	r1, [r7, #0]
 801162c:	4618      	mov	r0, r3
 801162e:	f7f8 fdc5 	bl	800a1bc <SecureElementSetKey>
 8011632:	4603      	mov	r3, r0
 8011634:	2b00      	cmp	r3, #0
 8011636:	d001      	beq.n	801163c <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8011638:	230f      	movs	r3, #15
 801163a:	e018      	b.n	801166e <LoRaMacCryptoSetKey+0x52>
    }
    if( keyID == APP_KEY )
 801163c:	79fb      	ldrb	r3, [r7, #7]
 801163e:	2b00      	cmp	r3, #0
 8011640:	d114      	bne.n	801166c <LoRaMacCryptoSetKey+0x50>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveMcRootKey( CryptoNvm->LrWanVersion.Fields.Minor, keyID ) != LORAMAC_CRYPTO_SUCCESS )
 8011642:	4b0d      	ldr	r3, [pc, #52]	; (8011678 <LoRaMacCryptoSetKey+0x5c>)
 8011644:	681b      	ldr	r3, [r3, #0]
 8011646:	789b      	ldrb	r3, [r3, #2]
 8011648:	79fa      	ldrb	r2, [r7, #7]
 801164a:	4611      	mov	r1, r2
 801164c:	4618      	mov	r0, r3
 801164e:	f000 fa3f 	bl	8011ad0 <LoRaMacCryptoDeriveMcRootKey>
 8011652:	4603      	mov	r3, r0
 8011654:	2b00      	cmp	r3, #0
 8011656:	d001      	beq.n	801165c <LoRaMacCryptoSetKey+0x40>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8011658:	230f      	movs	r3, #15
 801165a:	e008      	b.n	801166e <LoRaMacCryptoSetKey+0x52>
        }
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 801165c:	2004      	movs	r0, #4
 801165e:	f000 fa62 	bl	8011b26 <LoRaMacCryptoDeriveMcKEKey>
 8011662:	4603      	mov	r3, r0
 8011664:	2b00      	cmp	r3, #0
 8011666:	d001      	beq.n	801166c <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8011668:	230f      	movs	r3, #15
 801166a:	e000      	b.n	801166e <LoRaMacCryptoSetKey+0x52>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 801166c:	2300      	movs	r3, #0
}
 801166e:	4618      	mov	r0, r3
 8011670:	3708      	adds	r7, #8
 8011672:	46bd      	mov	sp, r7
 8011674:	bd80      	pop	{r7, pc}
 8011676:	bf00      	nop
 8011678:	20000ce0 	.word	0x20000ce0

0801167c <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 801167c:	b580      	push	{r7, lr}
 801167e:	b086      	sub	sp, #24
 8011680:	af02      	add	r7, sp, #8
 8011682:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	2b00      	cmp	r3, #0
 8011688:	d101      	bne.n	801168e <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801168a:	230a      	movs	r3, #10
 801168c:	e033      	b.n	80116f6 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 801168e:	2301      	movs	r3, #1
 8011690:	73fb      	strb	r3, [r7, #15]

    // Add device nonce
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
 8011692:	2300      	movs	r3, #0
 8011694:	60bb      	str	r3, [r7, #8]
    SecureElementRandomNumber( &devNonce );
 8011696:	f107 0308 	add.w	r3, r7, #8
 801169a:	4618      	mov	r0, r3
 801169c:	f7f8 ff54 	bl	800a548 <SecureElementRandomNumber>
    CryptoNvm->DevNonce = devNonce;
 80116a0:	68ba      	ldr	r2, [r7, #8]
 80116a2:	4b17      	ldr	r3, [pc, #92]	; (8011700 <LoRaMacCryptoPrepareJoinRequest+0x84>)
 80116a4:	681b      	ldr	r3, [r3, #0]
 80116a6:	b292      	uxth	r2, r2
 80116a8:	809a      	strh	r2, [r3, #4]
#else
    CryptoNvm->DevNonce++;
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 80116aa:	4b15      	ldr	r3, [pc, #84]	; (8011700 <LoRaMacCryptoPrepareJoinRequest+0x84>)
 80116ac:	681b      	ldr	r3, [r3, #0]
 80116ae:	889a      	ldrh	r2, [r3, #4]
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80116b4:	6878      	ldr	r0, [r7, #4]
 80116b6:	f000 fc18 	bl	8011eea <LoRaMacSerializerJoinRequest>
 80116ba:	4603      	mov	r3, r0
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d001      	beq.n	80116c4 <LoRaMacCryptoPrepareJoinRequest+0x48>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80116c0:	2311      	movs	r3, #17
 80116c2:	e018      	b.n	80116f6 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	6819      	ldr	r1, [r3, #0]
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	3318      	adds	r3, #24
 80116cc:	7bfa      	ldrb	r2, [r7, #15]
 80116ce:	9300      	str	r3, [sp, #0]
 80116d0:	4613      	mov	r3, r2
 80116d2:	2213      	movs	r2, #19
 80116d4:	2000      	movs	r0, #0
 80116d6:	f7f8 fdcf 	bl	800a278 <SecureElementComputeAesCmac>
 80116da:	4603      	mov	r3, r0
 80116dc:	2b00      	cmp	r3, #0
 80116de:	d001      	beq.n	80116e4 <LoRaMacCryptoPrepareJoinRequest+0x68>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80116e0:	230f      	movs	r3, #15
 80116e2:	e008      	b.n	80116f6 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80116e4:	6878      	ldr	r0, [r7, #4]
 80116e6:	f000 fc00 	bl	8011eea <LoRaMacSerializerJoinRequest>
 80116ea:	4603      	mov	r3, r0
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d001      	beq.n	80116f4 <LoRaMacCryptoPrepareJoinRequest+0x78>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80116f0:	2311      	movs	r3, #17
 80116f2:	e000      	b.n	80116f6 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80116f4:	2300      	movs	r3, #0
}
 80116f6:	4618      	mov	r0, r3
 80116f8:	3710      	adds	r7, #16
 80116fa:	46bd      	mov	sp, r7
 80116fc:	bd80      	pop	{r7, pc}
 80116fe:	bf00      	nop
 8011700:	20000ce0 	.word	0x20000ce0

08011704 <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 8011704:	b590      	push	{r4, r7, lr}
 8011706:	b097      	sub	sp, #92	; 0x5c
 8011708:	af04      	add	r7, sp, #16
 801170a:	4603      	mov	r3, r0
 801170c:	60b9      	str	r1, [r7, #8]
 801170e:	607a      	str	r2, [r7, #4]
 8011710:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	2b00      	cmp	r3, #0
 8011716:	d002      	beq.n	801171e <LoRaMacCryptoHandleJoinAccept+0x1a>
 8011718:	68bb      	ldr	r3, [r7, #8]
 801171a:	2b00      	cmp	r3, #0
 801171c:	d101      	bne.n	8011722 <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801171e:	230a      	movs	r3, #10
 8011720:	e0bd      	b.n	801189e <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8011722:	2313      	movs	r3, #19
 8011724:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 8011728:	2300      	movs	r3, #0
 801172a:	61bb      	str	r3, [r7, #24]
 801172c:	f107 031c 	add.w	r3, r7, #28
 8011730:	221d      	movs	r2, #29
 8011732:	2100      	movs	r1, #0
 8011734:	4618      	mov	r0, r3
 8011736:	f007 fd43 	bl	80191c0 <memset>
    uint8_t versionMinor         = 0;
 801173a:	2300      	movs	r3, #0
 801173c:	75fb      	strb	r3, [r7, #23]
    uint16_t nonce               = CryptoNvm->DevNonce;
 801173e:	4b5a      	ldr	r3, [pc, #360]	; (80118a8 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8011740:	681b      	ldr	r3, [r3, #0]
 8011742:	889b      	ldrh	r3, [r3, #4]
 8011744:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	681c      	ldr	r4, [r3, #0]
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	791b      	ldrb	r3, [r3, #4]
 8011750:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 8011754:	7bf8      	ldrb	r0, [r7, #15]
 8011756:	f107 0217 	add.w	r2, r7, #23
 801175a:	9202      	str	r2, [sp, #8]
 801175c:	f107 0218 	add.w	r2, r7, #24
 8011760:	9201      	str	r2, [sp, #4]
 8011762:	9300      	str	r3, [sp, #0]
 8011764:	4623      	mov	r3, r4
 8011766:	460a      	mov	r2, r1
 8011768:	68b9      	ldr	r1, [r7, #8]
 801176a:	f7f8 fe70 	bl	800a44e <SecureElementProcessJoinAccept>
 801176e:	4603      	mov	r3, r0
 8011770:	2b00      	cmp	r3, #0
 8011772:	d001      	beq.n	8011778 <LoRaMacCryptoHandleJoinAccept+0x74>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8011774:	230f      	movs	r3, #15
 8011776:	e092      	b.n	801189e <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	6818      	ldr	r0, [r3, #0]
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	791b      	ldrb	r3, [r3, #4]
 8011780:	b29a      	uxth	r2, r3
 8011782:	f107 0318 	add.w	r3, r7, #24
 8011786:	4619      	mov	r1, r3
 8011788:	f002 ffff 	bl	801478a <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 801178c:	6878      	ldr	r0, [r7, #4]
 801178e:	f000 f9ed 	bl	8011b6c <LoRaMacParserJoinAccept>
 8011792:	4603      	mov	r3, r0
 8011794:	2b00      	cmp	r3, #0
 8011796:	d001      	beq.n	801179c <LoRaMacCryptoHandleJoinAccept+0x98>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8011798:	2310      	movs	r3, #16
 801179a:	e080      	b.n	801189e <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    uint32_t currentJoinNonce;

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	799b      	ldrb	r3, [r3, #6]
 80117a0:	643b      	str	r3, [r7, #64]	; 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	79db      	ldrb	r3, [r3, #7]
 80117a6:	021b      	lsls	r3, r3, #8
 80117a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80117aa:	4313      	orrs	r3, r2
 80117ac:	643b      	str	r3, [r7, #64]	; 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	7a1b      	ldrb	r3, [r3, #8]
 80117b2:	041b      	lsls	r3, r3, #16
 80117b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80117b6:	4313      	orrs	r3, r2
 80117b8:	643b      	str	r3, [r7, #64]	; 0x40
#if( USE_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    if( currentJoinNonce > CryptoNvm->JoinNonce )
#else
    // Check if the JoinNonce is different from the previous one
    if( currentJoinNonce != CryptoNvm->JoinNonce )
 80117ba:	4b3b      	ldr	r3, [pc, #236]	; (80118a8 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80117bc:	681b      	ldr	r3, [r3, #0]
 80117be:	689b      	ldr	r3, [r3, #8]
 80117c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80117c2:	429a      	cmp	r2, r3
 80117c4:	d010      	beq.n	80117e8 <LoRaMacCryptoHandleJoinAccept+0xe4>
#endif /* USE_JOIN_NONCE_COUNTER_CHECK */
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 80117c6:	4b38      	ldr	r3, [pc, #224]	; (80118a8 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80117c8:	681b      	ldr	r3, [r3, #0]
 80117ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80117cc:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
 80117ce:	7dfb      	ldrb	r3, [r7, #23]
 80117d0:	2100      	movs	r1, #0
 80117d2:	4618      	mov	r0, r3
 80117d4:	f000 f97c 	bl	8011ad0 <LoRaMacCryptoDeriveMcRootKey>
 80117d8:	4603      	mov	r3, r0
 80117da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80117de:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80117e2:	2b00      	cmp	r3, #0
 80117e4:	d005      	beq.n	80117f2 <LoRaMacCryptoHandleJoinAccept+0xee>
 80117e6:	e001      	b.n	80117ec <LoRaMacCryptoHandleJoinAccept+0xe8>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 80117e8:	2303      	movs	r3, #3
 80117ea:	e058      	b.n	801189e <LoRaMacCryptoHandleJoinAccept+0x19a>
    {
        return retval;
 80117ec:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80117f0:	e055      	b.n	801189e <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    retval = LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY );
 80117f2:	2004      	movs	r0, #4
 80117f4:	f000 f997 	bl	8011b26 <LoRaMacCryptoDeriveMcKEKey>
 80117f8:	4603      	mov	r3, r0
 80117fa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80117fe:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8011802:	2b00      	cmp	r3, #0
 8011804:	d002      	beq.n	801180c <LoRaMacCryptoHandleJoinAccept+0x108>
    {
        return retval;
 8011806:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801180a:	e048      	b.n	801189e <LoRaMacCryptoHandleJoinAccept+0x19a>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	7a5b      	ldrb	r3, [r3, #9]
 8011810:	63fb      	str	r3, [r7, #60]	; 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	7a9b      	ldrb	r3, [r3, #10]
 8011816:	021b      	lsls	r3, r3, #8
 8011818:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801181a:	4313      	orrs	r3, r2
 801181c:	63fb      	str	r3, [r7, #60]	; 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	7adb      	ldrb	r3, [r3, #11]
 8011822:	041b      	lsls	r3, r3, #16
 8011824:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011826:	4313      	orrs	r3, r2
 8011828:	63fb      	str	r3, [r7, #60]	; 0x3c

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 801182a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801182e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011830:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011832:	2003      	movs	r0, #3
 8011834:	f7ff fce2 	bl	80111fc <DeriveSessionKey10x>
 8011838:	4603      	mov	r3, r0
 801183a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 801183e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8011842:	2b00      	cmp	r3, #0
 8011844:	d002      	beq.n	801184c <LoRaMacCryptoHandleJoinAccept+0x148>
        {
            return retval;
 8011846:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801184a:	e028      	b.n	801189e <LoRaMacCryptoHandleJoinAccept+0x19a>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 801184c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8011850:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011852:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011854:	2002      	movs	r0, #2
 8011856:	f7ff fcd1 	bl	80111fc <DeriveSessionKey10x>
 801185a:	4603      	mov	r3, r0
 801185c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8011860:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8011864:	2b00      	cmp	r3, #0
 8011866:	d002      	beq.n	801186e <LoRaMacCryptoHandleJoinAccept+0x16a>
        {
            return retval;
 8011868:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801186c:	e017      	b.n	801189e <LoRaMacCryptoHandleJoinAccept+0x19a>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 801186e:	4b0e      	ldr	r3, [pc, #56]	; (80118a8 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8011870:	681b      	ldr	r3, [r3, #0]
 8011872:	7dfa      	ldrb	r2, [r7, #23]
 8011874:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    RJcount0 = 0;
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    CryptoNvm->FCntList.FCntUp = 0;
 8011876:	4b0c      	ldr	r3, [pc, #48]	; (80118a8 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8011878:	681b      	ldr	r3, [r3, #0]
 801187a:	2200      	movs	r2, #0
 801187c:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 801187e:	4b0a      	ldr	r3, [pc, #40]	; (80118a8 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8011880:	681b      	ldr	r3, [r3, #0]
 8011882:	f04f 32ff 	mov.w	r2, #4294967295
 8011886:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8011888:	4b07      	ldr	r3, [pc, #28]	; (80118a8 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 801188a:	681b      	ldr	r3, [r3, #0]
 801188c:	f04f 32ff 	mov.w	r2, #4294967295
 8011890:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 8011892:	4b05      	ldr	r3, [pc, #20]	; (80118a8 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8011894:	681b      	ldr	r3, [r3, #0]
 8011896:	f04f 32ff 	mov.w	r2, #4294967295
 801189a:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 801189c:	2300      	movs	r3, #0
}
 801189e:	4618      	mov	r0, r3
 80118a0:	374c      	adds	r7, #76	; 0x4c
 80118a2:	46bd      	mov	sp, r7
 80118a4:	bd90      	pop	{r4, r7, pc}
 80118a6:	bf00      	nop
 80118a8:	20000ce0 	.word	0x20000ce0

080118ac <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 80118ac:	b590      	push	{r4, r7, lr}
 80118ae:	b08b      	sub	sp, #44	; 0x2c
 80118b0:	af04      	add	r7, sp, #16
 80118b2:	60f8      	str	r0, [r7, #12]
 80118b4:	607b      	str	r3, [r7, #4]
 80118b6:	460b      	mov	r3, r1
 80118b8:	72fb      	strb	r3, [r7, #11]
 80118ba:	4613      	mov	r3, r2
 80118bc:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 80118be:	2313      	movs	r3, #19
 80118c0:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 80118c2:	2303      	movs	r3, #3
 80118c4:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	2b00      	cmp	r3, #0
 80118ca:	d101      	bne.n	80118d0 <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80118cc:	230a      	movs	r3, #10
 80118ce:	e05f      	b.n	8011990 <LoRaMacCryptoSecureMessage+0xe4>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 80118d0:	4b31      	ldr	r3, [pc, #196]	; (8011998 <LoRaMacCryptoSecureMessage+0xec>)
 80118d2:	681b      	ldr	r3, [r3, #0]
 80118d4:	68db      	ldr	r3, [r3, #12]
 80118d6:	68fa      	ldr	r2, [r7, #12]
 80118d8:	429a      	cmp	r2, r3
 80118da:	d201      	bcs.n	80118e0 <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 80118dc:	2306      	movs	r3, #6
 80118de:	e057      	b.n	8011990 <LoRaMacCryptoSecureMessage+0xe4>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	d101      	bne.n	80118ee <LoRaMacCryptoSecureMessage+0x42>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 80118ea:	2302      	movs	r3, #2
 80118ec:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 80118ee:	4b2a      	ldr	r3, [pc, #168]	; (8011998 <LoRaMacCryptoSecureMessage+0xec>)
 80118f0:	681b      	ldr	r3, [r3, #0]
 80118f2:	68db      	ldr	r3, [r3, #12]
 80118f4:	68fa      	ldr	r2, [r7, #12]
 80118f6:	429a      	cmp	r2, r3
 80118f8:	d916      	bls.n	8011928 <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011904:	b219      	sxth	r1, r3
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	689c      	ldr	r4, [r3, #8]
 801190a:	7dfa      	ldrb	r2, [r7, #23]
 801190c:	68fb      	ldr	r3, [r7, #12]
 801190e:	9301      	str	r3, [sp, #4]
 8011910:	2300      	movs	r3, #0
 8011912:	9300      	str	r3, [sp, #0]
 8011914:	4623      	mov	r3, r4
 8011916:	f7ff faa3 	bl	8010e60 <PayloadEncrypt>
 801191a:	4603      	mov	r3, r0
 801191c:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 801191e:	7dbb      	ldrb	r3, [r7, #22]
 8011920:	2b00      	cmp	r3, #0
 8011922:	d001      	beq.n	8011928 <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 8011924:	7dbb      	ldrb	r3, [r7, #22]
 8011926:	e033      	b.n	8011990 <LoRaMacCryptoSecureMessage+0xe4>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8011928:	6878      	ldr	r0, [r7, #4]
 801192a:	f000 fb60 	bl	8011fee <LoRaMacSerializerData>
 801192e:	4603      	mov	r3, r0
 8011930:	2b00      	cmp	r3, #0
 8011932:	d001      	beq.n	8011938 <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8011934:	2311      	movs	r3, #17
 8011936:	e02b      	b.n	8011990 <LoRaMacCryptoSecureMessage+0xe4>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8011938:	2302      	movs	r3, #2
 801193a:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	6818      	ldr	r0, [r3, #0]
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	791b      	ldrb	r3, [r3, #4]
 8011944:	b29b      	uxth	r3, r3
 8011946:	3b04      	subs	r3, #4
 8011948:	b299      	uxth	r1, r3
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	689b      	ldr	r3, [r3, #8]
 801194e:	687a      	ldr	r2, [r7, #4]
 8011950:	322c      	adds	r2, #44	; 0x2c
 8011952:	7dfc      	ldrb	r4, [r7, #23]
 8011954:	9203      	str	r2, [sp, #12]
 8011956:	68fa      	ldr	r2, [r7, #12]
 8011958:	9202      	str	r2, [sp, #8]
 801195a:	9301      	str	r3, [sp, #4]
 801195c:	2300      	movs	r3, #0
 801195e:	9300      	str	r3, [sp, #0]
 8011960:	2300      	movs	r3, #0
 8011962:	4622      	mov	r2, r4
 8011964:	f7ff fb7e 	bl	8011064 <ComputeCmacB0>
 8011968:	4603      	mov	r3, r0
 801196a:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 801196c:	7dbb      	ldrb	r3, [r7, #22]
 801196e:	2b00      	cmp	r3, #0
 8011970:	d001      	beq.n	8011976 <LoRaMacCryptoSecureMessage+0xca>
        {
            return retval;
 8011972:	7dbb      	ldrb	r3, [r7, #22]
 8011974:	e00c      	b.n	8011990 <LoRaMacCryptoSecureMessage+0xe4>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8011976:	6878      	ldr	r0, [r7, #4]
 8011978:	f000 fb39 	bl	8011fee <LoRaMacSerializerData>
 801197c:	4603      	mov	r3, r0
 801197e:	2b00      	cmp	r3, #0
 8011980:	d001      	beq.n	8011986 <LoRaMacCryptoSecureMessage+0xda>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8011982:	2311      	movs	r3, #17
 8011984:	e004      	b.n	8011990 <LoRaMacCryptoSecureMessage+0xe4>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 8011986:	4b04      	ldr	r3, [pc, #16]	; (8011998 <LoRaMacCryptoSecureMessage+0xec>)
 8011988:	681b      	ldr	r3, [r3, #0]
 801198a:	68fa      	ldr	r2, [r7, #12]
 801198c:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 801198e:	2300      	movs	r3, #0
}
 8011990:	4618      	mov	r0, r3
 8011992:	371c      	adds	r7, #28
 8011994:	46bd      	mov	sp, r7
 8011996:	bd90      	pop	{r4, r7, pc}
 8011998:	20000ce0 	.word	0x20000ce0

0801199c <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 801199c:	b590      	push	{r4, r7, lr}
 801199e:	b08b      	sub	sp, #44	; 0x2c
 80119a0:	af04      	add	r7, sp, #16
 80119a2:	60b9      	str	r1, [r7, #8]
 80119a4:	607b      	str	r3, [r7, #4]
 80119a6:	4603      	mov	r3, r0
 80119a8:	73fb      	strb	r3, [r7, #15]
 80119aa:	4613      	mov	r3, r2
 80119ac:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 80119ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	d101      	bne.n	80119b8 <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80119b4:	230a      	movs	r3, #10
 80119b6:	e084      	b.n	8011ac2 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 80119b8:	7bbb      	ldrb	r3, [r7, #14]
 80119ba:	6879      	ldr	r1, [r7, #4]
 80119bc:	4618      	mov	r0, r3
 80119be:	f7ff fcbb 	bl	8011338 <CheckFCntDown>
 80119c2:	4603      	mov	r3, r0
 80119c4:	f083 0301 	eor.w	r3, r3, #1
 80119c8:	b2db      	uxtb	r3, r3
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	d001      	beq.n	80119d2 <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 80119ce:	2306      	movs	r3, #6
 80119d0:	e077      	b.n	8011ac2 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 80119d2:	2313      	movs	r3, #19
 80119d4:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 80119d6:	2303      	movs	r3, #3
 80119d8:	75fb      	strb	r3, [r7, #23]
    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 80119da:	2302      	movs	r3, #2
 80119dc:	753b      	strb	r3, [r7, #20]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    /* ST_WORKAROUND_END */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 80119de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80119e0:	f000 f98f 	bl	8011d02 <LoRaMacParserData>
 80119e4:	4603      	mov	r3, r0
 80119e6:	2b00      	cmp	r3, #0
 80119e8:	d001      	beq.n	80119ee <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 80119ea:	2310      	movs	r3, #16
 80119ec:	e069      	b.n	8011ac2 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 80119ee:	f107 0210 	add.w	r2, r7, #16
 80119f2:	7bfb      	ldrb	r3, [r7, #15]
 80119f4:	4611      	mov	r1, r2
 80119f6:	4618      	mov	r0, r3
 80119f8:	f7ff fbda 	bl	80111b0 <GetKeyAddrItem>
 80119fc:	4603      	mov	r3, r0
 80119fe:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8011a00:	7d7b      	ldrb	r3, [r7, #21]
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	d001      	beq.n	8011a0a <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 8011a06:	7d7b      	ldrb	r3, [r7, #21]
 8011a08:	e05b      	b.n	8011ac2 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 8011a0a:	693b      	ldr	r3, [r7, #16]
 8011a0c:	785b      	ldrb	r3, [r3, #1]
 8011a0e:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 8011a10:	693b      	ldr	r3, [r7, #16]
 8011a12:	789b      	ldrb	r3, [r3, #2]
 8011a14:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 8011a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a18:	689b      	ldr	r3, [r3, #8]
 8011a1a:	68ba      	ldr	r2, [r7, #8]
 8011a1c:	429a      	cmp	r2, r3
 8011a1e:	d001      	beq.n	8011a24 <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 8011a20:	2302      	movs	r3, #2
 8011a22:	e04e      	b.n	8011ac2 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 8011a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a26:	7b1b      	ldrb	r3, [r3, #12]
 8011a28:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8011a2c:	b2db      	uxtb	r3, r3
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	bf14      	ite	ne
 8011a32:	2301      	movne	r3, #1
 8011a34:	2300      	moveq	r3, #0
 8011a36:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8011a38:	4b24      	ldr	r3, [pc, #144]	; (8011acc <LoRaMacCryptoUnsecureMessage+0x130>)
 8011a3a:	681b      	ldr	r3, [r3, #0]
 8011a3c:	789b      	ldrb	r3, [r3, #2]
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	d101      	bne.n	8011a46 <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 8011a42:	2300      	movs	r3, #0
 8011a44:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 8011a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a48:	6818      	ldr	r0, [r3, #0]
 8011a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a4c:	791b      	ldrb	r3, [r3, #4]
 8011a4e:	b29b      	uxth	r3, r3
 8011a50:	3b04      	subs	r3, #4
 8011a52:	b299      	uxth	r1, r3
 8011a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a58:	7dbc      	ldrb	r4, [r7, #22]
 8011a5a:	7d3a      	ldrb	r2, [r7, #20]
 8011a5c:	9303      	str	r3, [sp, #12]
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	9302      	str	r3, [sp, #8]
 8011a62:	68bb      	ldr	r3, [r7, #8]
 8011a64:	9301      	str	r3, [sp, #4]
 8011a66:	2301      	movs	r3, #1
 8011a68:	9300      	str	r3, [sp, #0]
 8011a6a:	4623      	mov	r3, r4
 8011a6c:	f7ff fb38 	bl	80110e0 <VerifyCmacB0>
 8011a70:	4603      	mov	r3, r0
 8011a72:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8011a74:	7d7b      	ldrb	r3, [r7, #21]
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	d001      	beq.n	8011a7e <LoRaMacCryptoUnsecureMessage+0xe2>
    {
        return retval;
 8011a7a:	7d7b      	ldrb	r3, [r7, #21]
 8011a7c:	e021      	b.n	8011ac2 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 8011a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d101      	bne.n	8011a8c <LoRaMacCryptoUnsecureMessage+0xf0>
        // Use network session encryption key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8011a88:	2302      	movs	r3, #2
 8011a8a:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 8011a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a8e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8011a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011a96:	b219      	sxth	r1, r3
 8011a98:	7dfa      	ldrb	r2, [r7, #23]
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	9301      	str	r3, [sp, #4]
 8011a9e:	2301      	movs	r3, #1
 8011aa0:	9300      	str	r3, [sp, #0]
 8011aa2:	68bb      	ldr	r3, [r7, #8]
 8011aa4:	f7ff f9dc 	bl	8010e60 <PayloadEncrypt>
 8011aa8:	4603      	mov	r3, r0
 8011aaa:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8011aac:	7d7b      	ldrb	r3, [r7, #21]
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	d001      	beq.n	8011ab6 <LoRaMacCryptoUnsecureMessage+0x11a>
    {
        return retval;
 8011ab2:	7d7b      	ldrb	r3, [r7, #21]
 8011ab4:	e005      	b.n	8011ac2 <LoRaMacCryptoUnsecureMessage+0x126>
            }
        } 
    }
#endif

    UpdateFCntDown( fCntID, fCntDown );
 8011ab6:	7bbb      	ldrb	r3, [r7, #14]
 8011ab8:	6879      	ldr	r1, [r7, #4]
 8011aba:	4618      	mov	r0, r3
 8011abc:	f7ff fc60 	bl	8011380 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 8011ac0:	2300      	movs	r3, #0
}
 8011ac2:	4618      	mov	r0, r3
 8011ac4:	371c      	adds	r7, #28
 8011ac6:	46bd      	mov	sp, r7
 8011ac8:	bd90      	pop	{r4, r7, pc}
 8011aca:	bf00      	nop
 8011acc:	20000ce0 	.word	0x20000ce0

08011ad0 <LoRaMacCryptoDeriveMcRootKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcRootKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 8011ad0:	b580      	push	{r7, lr}
 8011ad2:	b086      	sub	sp, #24
 8011ad4:	af00      	add	r7, sp, #0
 8011ad6:	4603      	mov	r3, r0
 8011ad8:	460a      	mov	r2, r1
 8011ada:	71fb      	strb	r3, [r7, #7]
 8011adc:	4613      	mov	r3, r2
 8011ade:	71bb      	strb	r3, [r7, #6]
    // Prevent other keys than AppKey
    if( keyID != APP_KEY )
 8011ae0:	79bb      	ldrb	r3, [r7, #6]
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	d001      	beq.n	8011aea <LoRaMacCryptoDeriveMcRootKey+0x1a>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8011ae6:	230b      	movs	r3, #11
 8011ae8:	e019      	b.n	8011b1e <LoRaMacCryptoDeriveMcRootKey+0x4e>
    }
    uint8_t compBase[16] = { 0 };
 8011aea:	2300      	movs	r3, #0
 8011aec:	60bb      	str	r3, [r7, #8]
 8011aee:	f107 030c 	add.w	r3, r7, #12
 8011af2:	2200      	movs	r2, #0
 8011af4:	601a      	str	r2, [r3, #0]
 8011af6:	605a      	str	r2, [r3, #4]
 8011af8:	609a      	str	r2, [r3, #8]

    if( versionMinor == 1 )
 8011afa:	79fb      	ldrb	r3, [r7, #7]
 8011afc:	2b01      	cmp	r3, #1
 8011afe:	d101      	bne.n	8011b04 <LoRaMacCryptoDeriveMcRootKey+0x34>
    {
        compBase[0] = 0x20;
 8011b00:	2320      	movs	r3, #32
 8011b02:	723b      	strb	r3, [r7, #8]
    }
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 8011b04:	79b9      	ldrb	r1, [r7, #6]
 8011b06:	f107 0308 	add.w	r3, r7, #8
 8011b0a:	2204      	movs	r2, #4
 8011b0c:	4618      	mov	r0, r3
 8011b0e:	f7f8 fc5e 	bl	800a3ce <SecureElementDeriveAndStoreKey>
 8011b12:	4603      	mov	r3, r0
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	d001      	beq.n	8011b1c <LoRaMacCryptoDeriveMcRootKey+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8011b18:	230f      	movs	r3, #15
 8011b1a:	e000      	b.n	8011b1e <LoRaMacCryptoDeriveMcRootKey+0x4e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8011b1c:	2300      	movs	r3, #0
}
 8011b1e:	4618      	mov	r0, r3
 8011b20:	3718      	adds	r7, #24
 8011b22:	46bd      	mov	sp, r7
 8011b24:	bd80      	pop	{r7, pc}

08011b26 <LoRaMacCryptoDeriveMcKEKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
 8011b26:	b580      	push	{r7, lr}
 8011b28:	b086      	sub	sp, #24
 8011b2a:	af00      	add	r7, sp, #0
 8011b2c:	4603      	mov	r3, r0
 8011b2e:	71fb      	strb	r3, [r7, #7]
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
 8011b30:	79fb      	ldrb	r3, [r7, #7]
 8011b32:	2b04      	cmp	r3, #4
 8011b34:	d001      	beq.n	8011b3a <LoRaMacCryptoDeriveMcKEKey+0x14>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8011b36:	230b      	movs	r3, #11
 8011b38:	e014      	b.n	8011b64 <LoRaMacCryptoDeriveMcKEKey+0x3e>
    }
    uint8_t compBase[16] = { 0 };
 8011b3a:	2300      	movs	r3, #0
 8011b3c:	60bb      	str	r3, [r7, #8]
 8011b3e:	f107 030c 	add.w	r3, r7, #12
 8011b42:	2200      	movs	r2, #0
 8011b44:	601a      	str	r2, [r3, #0]
 8011b46:	605a      	str	r2, [r3, #4]
 8011b48:	609a      	str	r2, [r3, #8]

    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 8011b4a:	79f9      	ldrb	r1, [r7, #7]
 8011b4c:	f107 0308 	add.w	r3, r7, #8
 8011b50:	227f      	movs	r2, #127	; 0x7f
 8011b52:	4618      	mov	r0, r3
 8011b54:	f7f8 fc3b 	bl	800a3ce <SecureElementDeriveAndStoreKey>
 8011b58:	4603      	mov	r3, r0
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	d001      	beq.n	8011b62 <LoRaMacCryptoDeriveMcKEKey+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8011b5e:	230f      	movs	r3, #15
 8011b60:	e000      	b.n	8011b64 <LoRaMacCryptoDeriveMcKEKey+0x3e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8011b62:	2300      	movs	r3, #0
}
 8011b64:	4618      	mov	r0, r3
 8011b66:	3718      	adds	r7, #24
 8011b68:	46bd      	mov	sp, r7
 8011b6a:	bd80      	pop	{r7, pc}

08011b6c <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 8011b6c:	b580      	push	{r7, lr}
 8011b6e:	b084      	sub	sp, #16
 8011b70:	af00      	add	r7, sp, #0
 8011b72:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	d003      	beq.n	8011b82 <LoRaMacParserJoinAccept+0x16>
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	681b      	ldr	r3, [r3, #0]
 8011b7e:	2b00      	cmp	r3, #0
 8011b80:	d101      	bne.n	8011b86 <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8011b82:	2302      	movs	r3, #2
 8011b84:	e0b9      	b.n	8011cfa <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 8011b86:	2300      	movs	r3, #0
 8011b88:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	681a      	ldr	r2, [r3, #0]
 8011b8e:	89fb      	ldrh	r3, [r7, #14]
 8011b90:	1c59      	adds	r1, r3, #1
 8011b92:	81f9      	strh	r1, [r7, #14]
 8011b94:	4413      	add	r3, r2
 8011b96:	781a      	ldrb	r2, [r3, #0]
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	1d98      	adds	r0, r3, #6
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	681a      	ldr	r2, [r3, #0]
 8011ba4:	89fb      	ldrh	r3, [r7, #14]
 8011ba6:	4413      	add	r3, r2
 8011ba8:	2203      	movs	r2, #3
 8011baa:	4619      	mov	r1, r3
 8011bac:	f002 fded 	bl	801478a <memcpy1>
    bufItr = bufItr + 3;
 8011bb0:	89fb      	ldrh	r3, [r7, #14]
 8011bb2:	3303      	adds	r3, #3
 8011bb4:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	f103 0009 	add.w	r0, r3, #9
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	681a      	ldr	r2, [r3, #0]
 8011bc0:	89fb      	ldrh	r3, [r7, #14]
 8011bc2:	4413      	add	r3, r2
 8011bc4:	2203      	movs	r2, #3
 8011bc6:	4619      	mov	r1, r3
 8011bc8:	f002 fddf 	bl	801478a <memcpy1>
    bufItr = bufItr + 3;
 8011bcc:	89fb      	ldrh	r3, [r7, #14]
 8011bce:	3303      	adds	r3, #3
 8011bd0:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	681a      	ldr	r2, [r3, #0]
 8011bd6:	89fb      	ldrh	r3, [r7, #14]
 8011bd8:	1c59      	adds	r1, r3, #1
 8011bda:	81f9      	strh	r1, [r7, #14]
 8011bdc:	4413      	add	r3, r2
 8011bde:	781b      	ldrb	r3, [r3, #0]
 8011be0:	461a      	mov	r2, r3
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	681a      	ldr	r2, [r3, #0]
 8011bea:	89fb      	ldrh	r3, [r7, #14]
 8011bec:	1c59      	adds	r1, r3, #1
 8011bee:	81f9      	strh	r1, [r7, #14]
 8011bf0:	4413      	add	r3, r2
 8011bf2:	781b      	ldrb	r3, [r3, #0]
 8011bf4:	021a      	lsls	r2, r3, #8
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	68db      	ldr	r3, [r3, #12]
 8011bfa:	431a      	orrs	r2, r3
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	681a      	ldr	r2, [r3, #0]
 8011c04:	89fb      	ldrh	r3, [r7, #14]
 8011c06:	1c59      	adds	r1, r3, #1
 8011c08:	81f9      	strh	r1, [r7, #14]
 8011c0a:	4413      	add	r3, r2
 8011c0c:	781b      	ldrb	r3, [r3, #0]
 8011c0e:	041a      	lsls	r2, r3, #16
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	68db      	ldr	r3, [r3, #12]
 8011c14:	431a      	orrs	r2, r3
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	681a      	ldr	r2, [r3, #0]
 8011c1e:	89fb      	ldrh	r3, [r7, #14]
 8011c20:	1c59      	adds	r1, r3, #1
 8011c22:	81f9      	strh	r1, [r7, #14]
 8011c24:	4413      	add	r3, r2
 8011c26:	781b      	ldrb	r3, [r3, #0]
 8011c28:	061a      	lsls	r2, r3, #24
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	68db      	ldr	r3, [r3, #12]
 8011c2e:	431a      	orrs	r2, r3
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	681a      	ldr	r2, [r3, #0]
 8011c38:	89fb      	ldrh	r3, [r7, #14]
 8011c3a:	1c59      	adds	r1, r3, #1
 8011c3c:	81f9      	strh	r1, [r7, #14]
 8011c3e:	4413      	add	r3, r2
 8011c40:	781a      	ldrb	r2, [r3, #0]
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	681a      	ldr	r2, [r3, #0]
 8011c4a:	89fb      	ldrh	r3, [r7, #14]
 8011c4c:	1c59      	adds	r1, r3, #1
 8011c4e:	81f9      	strh	r1, [r7, #14]
 8011c50:	4413      	add	r3, r2
 8011c52:	781a      	ldrb	r2, [r3, #0]
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	791b      	ldrb	r3, [r3, #4]
 8011c5c:	1f1a      	subs	r2, r3, #4
 8011c5e:	89fb      	ldrh	r3, [r7, #14]
 8011c60:	1ad3      	subs	r3, r2, r3
 8011c62:	2b10      	cmp	r3, #16
 8011c64:	d10e      	bne.n	8011c84 <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	f103 0012 	add.w	r0, r3, #18
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	681a      	ldr	r2, [r3, #0]
 8011c70:	89fb      	ldrh	r3, [r7, #14]
 8011c72:	4413      	add	r3, r2
 8011c74:	2210      	movs	r2, #16
 8011c76:	4619      	mov	r1, r3
 8011c78:	f002 fd87 	bl	801478a <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 8011c7c:	89fb      	ldrh	r3, [r7, #14]
 8011c7e:	3310      	adds	r3, #16
 8011c80:	81fb      	strh	r3, [r7, #14]
 8011c82:	e008      	b.n	8011c96 <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	791b      	ldrb	r3, [r3, #4]
 8011c88:	1f1a      	subs	r2, r3, #4
 8011c8a:	89fb      	ldrh	r3, [r7, #14]
 8011c8c:	1ad3      	subs	r3, r2, r3
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	dd01      	ble.n	8011c96 <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 8011c92:	2301      	movs	r3, #1
 8011c94:	e031      	b.n	8011cfa <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	681a      	ldr	r2, [r3, #0]
 8011c9a:	89fb      	ldrh	r3, [r7, #14]
 8011c9c:	1c59      	adds	r1, r3, #1
 8011c9e:	81f9      	strh	r1, [r7, #14]
 8011ca0:	4413      	add	r3, r2
 8011ca2:	781b      	ldrb	r3, [r3, #0]
 8011ca4:	461a      	mov	r2, r3
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	681a      	ldr	r2, [r3, #0]
 8011cae:	89fb      	ldrh	r3, [r7, #14]
 8011cb0:	1c59      	adds	r1, r3, #1
 8011cb2:	81f9      	strh	r1, [r7, #14]
 8011cb4:	4413      	add	r3, r2
 8011cb6:	781b      	ldrb	r3, [r3, #0]
 8011cb8:	021a      	lsls	r2, r3, #8
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011cbe:	431a      	orrs	r2, r3
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	681a      	ldr	r2, [r3, #0]
 8011cc8:	89fb      	ldrh	r3, [r7, #14]
 8011cca:	1c59      	adds	r1, r3, #1
 8011ccc:	81f9      	strh	r1, [r7, #14]
 8011cce:	4413      	add	r3, r2
 8011cd0:	781b      	ldrb	r3, [r3, #0]
 8011cd2:	041a      	lsls	r2, r3, #16
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011cd8:	431a      	orrs	r2, r3
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	681a      	ldr	r2, [r3, #0]
 8011ce2:	89fb      	ldrh	r3, [r7, #14]
 8011ce4:	1c59      	adds	r1, r3, #1
 8011ce6:	81f9      	strh	r1, [r7, #14]
 8011ce8:	4413      	add	r3, r2
 8011cea:	781b      	ldrb	r3, [r3, #0]
 8011cec:	061a      	lsls	r2, r3, #24
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011cf2:	431a      	orrs	r2, r3
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	625a      	str	r2, [r3, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 8011cf8:	2300      	movs	r3, #0
}
 8011cfa:	4618      	mov	r0, r3
 8011cfc:	3710      	adds	r7, #16
 8011cfe:	46bd      	mov	sp, r7
 8011d00:	bd80      	pop	{r7, pc}

08011d02 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 8011d02:	b580      	push	{r7, lr}
 8011d04:	b084      	sub	sp, #16
 8011d06:	af00      	add	r7, sp, #0
 8011d08:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	2b00      	cmp	r3, #0
 8011d0e:	d003      	beq.n	8011d18 <LoRaMacParserData+0x16>
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	681b      	ldr	r3, [r3, #0]
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	d101      	bne.n	8011d1c <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8011d18:	2302      	movs	r3, #2
 8011d1a:	e0e2      	b.n	8011ee2 <LoRaMacParserData+0x1e0>
    }

    uint16_t bufItr = 0;
 8011d1c:	2300      	movs	r3, #0
 8011d1e:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	681a      	ldr	r2, [r3, #0]
 8011d24:	89fb      	ldrh	r3, [r7, #14]
 8011d26:	1c59      	adds	r1, r3, #1
 8011d28:	81f9      	strh	r1, [r7, #14]
 8011d2a:	4413      	add	r3, r2
 8011d2c:	781a      	ldrb	r2, [r3, #0]
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	681a      	ldr	r2, [r3, #0]
 8011d36:	89fb      	ldrh	r3, [r7, #14]
 8011d38:	1c59      	adds	r1, r3, #1
 8011d3a:	81f9      	strh	r1, [r7, #14]
 8011d3c:	4413      	add	r3, r2
 8011d3e:	781b      	ldrb	r3, [r3, #0]
 8011d40:	461a      	mov	r2, r3
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	681a      	ldr	r2, [r3, #0]
 8011d4a:	89fb      	ldrh	r3, [r7, #14]
 8011d4c:	1c59      	adds	r1, r3, #1
 8011d4e:	81f9      	strh	r1, [r7, #14]
 8011d50:	4413      	add	r3, r2
 8011d52:	781b      	ldrb	r3, [r3, #0]
 8011d54:	021a      	lsls	r2, r3, #8
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	689b      	ldr	r3, [r3, #8]
 8011d5a:	431a      	orrs	r2, r3
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	681a      	ldr	r2, [r3, #0]
 8011d64:	89fb      	ldrh	r3, [r7, #14]
 8011d66:	1c59      	adds	r1, r3, #1
 8011d68:	81f9      	strh	r1, [r7, #14]
 8011d6a:	4413      	add	r3, r2
 8011d6c:	781b      	ldrb	r3, [r3, #0]
 8011d6e:	041a      	lsls	r2, r3, #16
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	689b      	ldr	r3, [r3, #8]
 8011d74:	431a      	orrs	r2, r3
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	681a      	ldr	r2, [r3, #0]
 8011d7e:	89fb      	ldrh	r3, [r7, #14]
 8011d80:	1c59      	adds	r1, r3, #1
 8011d82:	81f9      	strh	r1, [r7, #14]
 8011d84:	4413      	add	r3, r2
 8011d86:	781b      	ldrb	r3, [r3, #0]
 8011d88:	061a      	lsls	r2, r3, #24
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	689b      	ldr	r3, [r3, #8]
 8011d8e:	431a      	orrs	r2, r3
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	681a      	ldr	r2, [r3, #0]
 8011d98:	89fb      	ldrh	r3, [r7, #14]
 8011d9a:	1c59      	adds	r1, r3, #1
 8011d9c:	81f9      	strh	r1, [r7, #14]
 8011d9e:	4413      	add	r3, r2
 8011da0:	781a      	ldrb	r2, [r3, #0]
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	681a      	ldr	r2, [r3, #0]
 8011daa:	89fb      	ldrh	r3, [r7, #14]
 8011dac:	1c59      	adds	r1, r3, #1
 8011dae:	81f9      	strh	r1, [r7, #14]
 8011db0:	4413      	add	r3, r2
 8011db2:	781b      	ldrb	r3, [r3, #0]
 8011db4:	b29a      	uxth	r2, r3
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	681a      	ldr	r2, [r3, #0]
 8011dbe:	89fb      	ldrh	r3, [r7, #14]
 8011dc0:	1c59      	adds	r1, r3, #1
 8011dc2:	81f9      	strh	r1, [r7, #14]
 8011dc4:	4413      	add	r3, r2
 8011dc6:	781b      	ldrb	r3, [r3, #0]
 8011dc8:	0219      	lsls	r1, r3, #8
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	89db      	ldrh	r3, [r3, #14]
 8011dce:	b21a      	sxth	r2, r3
 8011dd0:	b20b      	sxth	r3, r1
 8011dd2:	4313      	orrs	r3, r2
 8011dd4:	b21b      	sxth	r3, r3
 8011dd6:	b29a      	uxth	r2, r3
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	81da      	strh	r2, [r3, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	f103 0010 	add.w	r0, r3, #16
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	681a      	ldr	r2, [r3, #0]
 8011de6:	89fb      	ldrh	r3, [r7, #14]
 8011de8:	18d1      	adds	r1, r2, r3
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	7b1b      	ldrb	r3, [r3, #12]
 8011dee:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8011df2:	b2db      	uxtb	r3, r3
 8011df4:	b29b      	uxth	r3, r3
 8011df6:	461a      	mov	r2, r3
 8011df8:	f002 fcc7 	bl	801478a <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	7b1b      	ldrb	r3, [r3, #12]
 8011e00:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8011e04:	b2db      	uxtb	r3, r3
 8011e06:	b29a      	uxth	r2, r3
 8011e08:	89fb      	ldrh	r3, [r7, #14]
 8011e0a:	4413      	add	r3, r2
 8011e0c:	81fb      	strh	r3, [r7, #14]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	2200      	movs	r2, #0
 8011e12:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	2200      	movs	r2, #0
 8011e1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	791b      	ldrb	r3, [r3, #4]
 8011e22:	461a      	mov	r2, r3
 8011e24:	89fb      	ldrh	r3, [r7, #14]
 8011e26:	1ad3      	subs	r3, r2, r3
 8011e28:	2b04      	cmp	r3, #4
 8011e2a:	dd28      	ble.n	8011e7e <LoRaMacParserData+0x17c>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	681a      	ldr	r2, [r3, #0]
 8011e30:	89fb      	ldrh	r3, [r7, #14]
 8011e32:	1c59      	adds	r1, r3, #1
 8011e34:	81f9      	strh	r1, [r7, #14]
 8011e36:	4413      	add	r3, r2
 8011e38:	781a      	ldrb	r2, [r3, #0]
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	791a      	ldrb	r2, [r3, #4]
 8011e44:	89fb      	ldrh	r3, [r7, #14]
 8011e46:	b2db      	uxtb	r3, r3
 8011e48:	1ad3      	subs	r3, r2, r3
 8011e4a:	b2db      	uxtb	r3, r3
 8011e4c:	3b04      	subs	r3, #4
 8011e4e:	b2da      	uxtb	r2, r3
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	681a      	ldr	r2, [r3, #0]
 8011e5e:	89fb      	ldrh	r3, [r7, #14]
 8011e60:	18d1      	adds	r1, r2, r3
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011e68:	b29b      	uxth	r3, r3
 8011e6a:	461a      	mov	r2, r3
 8011e6c:	f002 fc8d 	bl	801478a <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011e76:	b29a      	uxth	r2, r3
 8011e78:	89fb      	ldrh	r3, [r7, #14]
 8011e7a:	4413      	add	r3, r2
 8011e7c:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	681a      	ldr	r2, [r3, #0]
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	791b      	ldrb	r3, [r3, #4]
 8011e86:	3b04      	subs	r3, #4
 8011e88:	4413      	add	r3, r2
 8011e8a:	781b      	ldrb	r3, [r3, #0]
 8011e8c:	461a      	mov	r2, r3
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	6819      	ldr	r1, [r3, #0]
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	791b      	ldrb	r3, [r3, #4]
 8011e9e:	3b03      	subs	r3, #3
 8011ea0:	440b      	add	r3, r1
 8011ea2:	781b      	ldrb	r3, [r3, #0]
 8011ea4:	021b      	lsls	r3, r3, #8
 8011ea6:	431a      	orrs	r2, r3
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	6819      	ldr	r1, [r3, #0]
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	791b      	ldrb	r3, [r3, #4]
 8011eb8:	3b02      	subs	r3, #2
 8011eba:	440b      	add	r3, r1
 8011ebc:	781b      	ldrb	r3, [r3, #0]
 8011ebe:	041b      	lsls	r3, r3, #16
 8011ec0:	431a      	orrs	r2, r3
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	6819      	ldr	r1, [r3, #0]
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	791b      	ldrb	r3, [r3, #4]
 8011ed2:	3b01      	subs	r3, #1
 8011ed4:	440b      	add	r3, r1
 8011ed6:	781b      	ldrb	r3, [r3, #0]
 8011ed8:	061b      	lsls	r3, r3, #24
 8011eda:	431a      	orrs	r2, r3
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	62da      	str	r2, [r3, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 8011ee0:	2300      	movs	r3, #0
}
 8011ee2:	4618      	mov	r0, r3
 8011ee4:	3710      	adds	r7, #16
 8011ee6:	46bd      	mov	sp, r7
 8011ee8:	bd80      	pop	{r7, pc}

08011eea <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8011eea:	b580      	push	{r7, lr}
 8011eec:	b084      	sub	sp, #16
 8011eee:	af00      	add	r7, sp, #0
 8011ef0:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	2b00      	cmp	r3, #0
 8011ef6:	d003      	beq.n	8011f00 <LoRaMacSerializerJoinRequest+0x16>
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	681b      	ldr	r3, [r3, #0]
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	d101      	bne.n	8011f04 <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8011f00:	2301      	movs	r3, #1
 8011f02:	e070      	b.n	8011fe6 <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 8011f04:	2300      	movs	r3, #0
 8011f06:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	791b      	ldrb	r3, [r3, #4]
 8011f0c:	2b16      	cmp	r3, #22
 8011f0e:	d801      	bhi.n	8011f14 <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8011f10:	2302      	movs	r3, #2
 8011f12:	e068      	b.n	8011fe6 <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	681a      	ldr	r2, [r3, #0]
 8011f18:	89fb      	ldrh	r3, [r7, #14]
 8011f1a:	1c59      	adds	r1, r3, #1
 8011f1c:	81f9      	strh	r1, [r7, #14]
 8011f1e:	4413      	add	r3, r2
 8011f20:	687a      	ldr	r2, [r7, #4]
 8011f22:	7952      	ldrb	r2, [r2, #5]
 8011f24:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	681a      	ldr	r2, [r3, #0]
 8011f2a:	89fb      	ldrh	r3, [r7, #14]
 8011f2c:	18d0      	adds	r0, r2, r3
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	3306      	adds	r3, #6
 8011f32:	2208      	movs	r2, #8
 8011f34:	4619      	mov	r1, r3
 8011f36:	f002 fc43 	bl	80147c0 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 8011f3a:	89fb      	ldrh	r3, [r7, #14]
 8011f3c:	3308      	adds	r3, #8
 8011f3e:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	681a      	ldr	r2, [r3, #0]
 8011f44:	89fb      	ldrh	r3, [r7, #14]
 8011f46:	18d0      	adds	r0, r2, r3
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	330e      	adds	r3, #14
 8011f4c:	2208      	movs	r2, #8
 8011f4e:	4619      	mov	r1, r3
 8011f50:	f002 fc36 	bl	80147c0 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 8011f54:	89fb      	ldrh	r3, [r7, #14]
 8011f56:	3308      	adds	r3, #8
 8011f58:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	8ad9      	ldrh	r1, [r3, #22]
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	681a      	ldr	r2, [r3, #0]
 8011f62:	89fb      	ldrh	r3, [r7, #14]
 8011f64:	1c58      	adds	r0, r3, #1
 8011f66:	81f8      	strh	r0, [r7, #14]
 8011f68:	4413      	add	r3, r2
 8011f6a:	b2ca      	uxtb	r2, r1
 8011f6c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	8adb      	ldrh	r3, [r3, #22]
 8011f72:	0a1b      	lsrs	r3, r3, #8
 8011f74:	b299      	uxth	r1, r3
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	681a      	ldr	r2, [r3, #0]
 8011f7a:	89fb      	ldrh	r3, [r7, #14]
 8011f7c:	1c58      	adds	r0, r3, #1
 8011f7e:	81f8      	strh	r0, [r7, #14]
 8011f80:	4413      	add	r3, r2
 8011f82:	b2ca      	uxtb	r2, r1
 8011f84:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	6999      	ldr	r1, [r3, #24]
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	681a      	ldr	r2, [r3, #0]
 8011f8e:	89fb      	ldrh	r3, [r7, #14]
 8011f90:	1c58      	adds	r0, r3, #1
 8011f92:	81f8      	strh	r0, [r7, #14]
 8011f94:	4413      	add	r3, r2
 8011f96:	b2ca      	uxtb	r2, r1
 8011f98:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	699b      	ldr	r3, [r3, #24]
 8011f9e:	0a19      	lsrs	r1, r3, #8
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	681a      	ldr	r2, [r3, #0]
 8011fa4:	89fb      	ldrh	r3, [r7, #14]
 8011fa6:	1c58      	adds	r0, r3, #1
 8011fa8:	81f8      	strh	r0, [r7, #14]
 8011faa:	4413      	add	r3, r2
 8011fac:	b2ca      	uxtb	r2, r1
 8011fae:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	699b      	ldr	r3, [r3, #24]
 8011fb4:	0c19      	lsrs	r1, r3, #16
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	681a      	ldr	r2, [r3, #0]
 8011fba:	89fb      	ldrh	r3, [r7, #14]
 8011fbc:	1c58      	adds	r0, r3, #1
 8011fbe:	81f8      	strh	r0, [r7, #14]
 8011fc0:	4413      	add	r3, r2
 8011fc2:	b2ca      	uxtb	r2, r1
 8011fc4:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	699b      	ldr	r3, [r3, #24]
 8011fca:	0e19      	lsrs	r1, r3, #24
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	681a      	ldr	r2, [r3, #0]
 8011fd0:	89fb      	ldrh	r3, [r7, #14]
 8011fd2:	1c58      	adds	r0, r3, #1
 8011fd4:	81f8      	strh	r0, [r7, #14]
 8011fd6:	4413      	add	r3, r2
 8011fd8:	b2ca      	uxtb	r2, r1
 8011fda:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8011fdc:	89fb      	ldrh	r3, [r7, #14]
 8011fde:	b2da      	uxtb	r2, r3
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8011fe4:	2300      	movs	r3, #0
}
 8011fe6:	4618      	mov	r0, r3
 8011fe8:	3710      	adds	r7, #16
 8011fea:	46bd      	mov	sp, r7
 8011fec:	bd80      	pop	{r7, pc}

08011fee <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 8011fee:	b580      	push	{r7, lr}
 8011ff0:	b084      	sub	sp, #16
 8011ff2:	af00      	add	r7, sp, #0
 8011ff4:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	2b00      	cmp	r3, #0
 8011ffa:	d003      	beq.n	8012004 <LoRaMacSerializerData+0x16>
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	681b      	ldr	r3, [r3, #0]
 8012000:	2b00      	cmp	r3, #0
 8012002:	d101      	bne.n	8012008 <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8012004:	2301      	movs	r3, #1
 8012006:	e0e5      	b.n	80121d4 <LoRaMacSerializerData+0x1e6>
    }

    uint16_t bufItr = 0;
 8012008:	2300      	movs	r3, #0
 801200a:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 801200c:	2308      	movs	r3, #8
 801200e:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	7b1b      	ldrb	r3, [r3, #12]
 8012014:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8012018:	b2db      	uxtb	r3, r3
 801201a:	b29a      	uxth	r2, r3
 801201c:	89bb      	ldrh	r3, [r7, #12]
 801201e:	4413      	add	r3, r2
 8012020:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012028:	2b00      	cmp	r3, #0
 801202a:	d002      	beq.n	8012032 <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 801202c:	89bb      	ldrh	r3, [r7, #12]
 801202e:	3301      	adds	r3, #1
 8012030:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012038:	b29a      	uxth	r2, r3
 801203a:	89bb      	ldrh	r3, [r7, #12]
 801203c:	4413      	add	r3, r2
 801203e:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 8012040:	89bb      	ldrh	r3, [r7, #12]
 8012042:	3304      	adds	r3, #4
 8012044:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	791b      	ldrb	r3, [r3, #4]
 801204a:	b29b      	uxth	r3, r3
 801204c:	89ba      	ldrh	r2, [r7, #12]
 801204e:	429a      	cmp	r2, r3
 8012050:	d901      	bls.n	8012056 <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8012052:	2302      	movs	r3, #2
 8012054:	e0be      	b.n	80121d4 <LoRaMacSerializerData+0x1e6>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	681a      	ldr	r2, [r3, #0]
 801205a:	89fb      	ldrh	r3, [r7, #14]
 801205c:	1c59      	adds	r1, r3, #1
 801205e:	81f9      	strh	r1, [r7, #14]
 8012060:	4413      	add	r3, r2
 8012062:	687a      	ldr	r2, [r7, #4]
 8012064:	7952      	ldrb	r2, [r2, #5]
 8012066:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	6899      	ldr	r1, [r3, #8]
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	681a      	ldr	r2, [r3, #0]
 8012070:	89fb      	ldrh	r3, [r7, #14]
 8012072:	1c58      	adds	r0, r3, #1
 8012074:	81f8      	strh	r0, [r7, #14]
 8012076:	4413      	add	r3, r2
 8012078:	b2ca      	uxtb	r2, r1
 801207a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	689b      	ldr	r3, [r3, #8]
 8012080:	0a19      	lsrs	r1, r3, #8
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	681a      	ldr	r2, [r3, #0]
 8012086:	89fb      	ldrh	r3, [r7, #14]
 8012088:	1c58      	adds	r0, r3, #1
 801208a:	81f8      	strh	r0, [r7, #14]
 801208c:	4413      	add	r3, r2
 801208e:	b2ca      	uxtb	r2, r1
 8012090:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	689b      	ldr	r3, [r3, #8]
 8012096:	0c19      	lsrs	r1, r3, #16
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	681a      	ldr	r2, [r3, #0]
 801209c:	89fb      	ldrh	r3, [r7, #14]
 801209e:	1c58      	adds	r0, r3, #1
 80120a0:	81f8      	strh	r0, [r7, #14]
 80120a2:	4413      	add	r3, r2
 80120a4:	b2ca      	uxtb	r2, r1
 80120a6:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	689b      	ldr	r3, [r3, #8]
 80120ac:	0e19      	lsrs	r1, r3, #24
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	681a      	ldr	r2, [r3, #0]
 80120b2:	89fb      	ldrh	r3, [r7, #14]
 80120b4:	1c58      	adds	r0, r3, #1
 80120b6:	81f8      	strh	r0, [r7, #14]
 80120b8:	4413      	add	r3, r2
 80120ba:	b2ca      	uxtb	r2, r1
 80120bc:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	681a      	ldr	r2, [r3, #0]
 80120c2:	89fb      	ldrh	r3, [r7, #14]
 80120c4:	1c59      	adds	r1, r3, #1
 80120c6:	81f9      	strh	r1, [r7, #14]
 80120c8:	4413      	add	r3, r2
 80120ca:	687a      	ldr	r2, [r7, #4]
 80120cc:	7b12      	ldrb	r2, [r2, #12]
 80120ce:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	89d9      	ldrh	r1, [r3, #14]
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	681a      	ldr	r2, [r3, #0]
 80120d8:	89fb      	ldrh	r3, [r7, #14]
 80120da:	1c58      	adds	r0, r3, #1
 80120dc:	81f8      	strh	r0, [r7, #14]
 80120de:	4413      	add	r3, r2
 80120e0:	b2ca      	uxtb	r2, r1
 80120e2:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	89db      	ldrh	r3, [r3, #14]
 80120e8:	0a1b      	lsrs	r3, r3, #8
 80120ea:	b299      	uxth	r1, r3
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	681a      	ldr	r2, [r3, #0]
 80120f0:	89fb      	ldrh	r3, [r7, #14]
 80120f2:	1c58      	adds	r0, r3, #1
 80120f4:	81f8      	strh	r0, [r7, #14]
 80120f6:	4413      	add	r3, r2
 80120f8:	b2ca      	uxtb	r2, r1
 80120fa:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	681a      	ldr	r2, [r3, #0]
 8012100:	89fb      	ldrh	r3, [r7, #14]
 8012102:	18d0      	adds	r0, r2, r3
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	f103 0110 	add.w	r1, r3, #16
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	7b1b      	ldrb	r3, [r3, #12]
 801210e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8012112:	b2db      	uxtb	r3, r3
 8012114:	b29b      	uxth	r3, r3
 8012116:	461a      	mov	r2, r3
 8012118:	f002 fb37 	bl	801478a <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	7b1b      	ldrb	r3, [r3, #12]
 8012120:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8012124:	b2db      	uxtb	r3, r3
 8012126:	b29a      	uxth	r2, r3
 8012128:	89fb      	ldrh	r3, [r7, #14]
 801212a:	4413      	add	r3, r2
 801212c:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012134:	2b00      	cmp	r3, #0
 8012136:	d009      	beq.n	801214c <LoRaMacSerializerData+0x15e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	681a      	ldr	r2, [r3, #0]
 801213c:	89fb      	ldrh	r3, [r7, #14]
 801213e:	1c59      	adds	r1, r3, #1
 8012140:	81f9      	strh	r1, [r7, #14]
 8012142:	4413      	add	r3, r2
 8012144:	687a      	ldr	r2, [r7, #4]
 8012146:	f892 2020 	ldrb.w	r2, [r2, #32]
 801214a:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	681a      	ldr	r2, [r3, #0]
 8012150:	89fb      	ldrh	r3, [r7, #14]
 8012152:	18d0      	adds	r0, r2, r3
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801215e:	b29b      	uxth	r3, r3
 8012160:	461a      	mov	r2, r3
 8012162:	f002 fb12 	bl	801478a <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801216c:	b29a      	uxth	r2, r3
 801216e:	89fb      	ldrh	r3, [r7, #14]
 8012170:	4413      	add	r3, r2
 8012172:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	681a      	ldr	r2, [r3, #0]
 801217c:	89fb      	ldrh	r3, [r7, #14]
 801217e:	1c58      	adds	r0, r3, #1
 8012180:	81f8      	strh	r0, [r7, #14]
 8012182:	4413      	add	r3, r2
 8012184:	b2ca      	uxtb	r2, r1
 8012186:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801218c:	0a19      	lsrs	r1, r3, #8
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	681a      	ldr	r2, [r3, #0]
 8012192:	89fb      	ldrh	r3, [r7, #14]
 8012194:	1c58      	adds	r0, r3, #1
 8012196:	81f8      	strh	r0, [r7, #14]
 8012198:	4413      	add	r3, r2
 801219a:	b2ca      	uxtb	r2, r1
 801219c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80121a2:	0c19      	lsrs	r1, r3, #16
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	681a      	ldr	r2, [r3, #0]
 80121a8:	89fb      	ldrh	r3, [r7, #14]
 80121aa:	1c58      	adds	r0, r3, #1
 80121ac:	81f8      	strh	r0, [r7, #14]
 80121ae:	4413      	add	r3, r2
 80121b0:	b2ca      	uxtb	r2, r1
 80121b2:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80121b8:	0e19      	lsrs	r1, r3, #24
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	681a      	ldr	r2, [r3, #0]
 80121be:	89fb      	ldrh	r3, [r7, #14]
 80121c0:	1c58      	adds	r0, r3, #1
 80121c2:	81f8      	strh	r0, [r7, #14]
 80121c4:	4413      	add	r3, r2
 80121c6:	b2ca      	uxtb	r2, r1
 80121c8:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 80121ca:	89fb      	ldrh	r3, [r7, #14]
 80121cc:	b2da      	uxtb	r2, r3
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 80121d2:	2300      	movs	r3, #0
}
 80121d4:	4618      	mov	r0, r3
 80121d6:	3710      	adds	r7, #16
 80121d8:	46bd      	mov	sp, r7
 80121da:	bd80      	pop	{r7, pc}

080121dc <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 80121dc:	b480      	push	{r7}
 80121de:	b083      	sub	sp, #12
 80121e0:	af00      	add	r7, sp, #0
 80121e2:	4603      	mov	r3, r0
 80121e4:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80121e6:	79fb      	ldrb	r3, [r7, #7]
 80121e8:	2b07      	cmp	r3, #7
 80121ea:	d101      	bne.n	80121f0 <RegionIsActive+0x14>
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
        KR920_IS_ACTIVE( );
        IN865_IS_ACTIVE( );
 80121ec:	2301      	movs	r3, #1
 80121ee:	e000      	b.n	80121f2 <RegionIsActive+0x16>
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 80121f0:	2300      	movs	r3, #0
        }
    }
}
 80121f2:	4618      	mov	r0, r3
 80121f4:	370c      	adds	r7, #12
 80121f6:	46bd      	mov	sp, r7
 80121f8:	bc80      	pop	{r7}
 80121fa:	4770      	bx	lr

080121fc <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 80121fc:	b580      	push	{r7, lr}
 80121fe:	b084      	sub	sp, #16
 8012200:	af00      	add	r7, sp, #0
 8012202:	4603      	mov	r3, r0
 8012204:	6039      	str	r1, [r7, #0]
 8012206:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 8012208:	2300      	movs	r3, #0
 801220a:	60bb      	str	r3, [r7, #8]
    switch( region )
 801220c:	79fb      	ldrb	r3, [r7, #7]
 801220e:	2b07      	cmp	r3, #7
 8012210:	d105      	bne.n	801221e <RegionGetPhyParam+0x22>
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
        KR920_GET_PHY_PARAM( );
        IN865_GET_PHY_PARAM( );
 8012212:	6838      	ldr	r0, [r7, #0]
 8012214:	f001 f942 	bl	801349c <RegionIN865GetPhyParam>
 8012218:	4603      	mov	r3, r0
 801221a:	60fb      	str	r3, [r7, #12]
 801221c:	e001      	b.n	8012222 <RegionGetPhyParam+0x26>
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 801221e:	68bb      	ldr	r3, [r7, #8]
 8012220:	60fb      	str	r3, [r7, #12]
 8012222:	2300      	movs	r3, #0
 8012224:	68fb      	ldr	r3, [r7, #12]
        }
    }
}
 8012226:	4618      	mov	r0, r3
 8012228:	3710      	adds	r7, #16
 801222a:	46bd      	mov	sp, r7
 801222c:	bd80      	pop	{r7, pc}

0801222e <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 801222e:	b580      	push	{r7, lr}
 8012230:	b082      	sub	sp, #8
 8012232:	af00      	add	r7, sp, #0
 8012234:	4603      	mov	r3, r0
 8012236:	6039      	str	r1, [r7, #0]
 8012238:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801223a:	79fb      	ldrb	r3, [r7, #7]
 801223c:	2b07      	cmp	r3, #7
 801223e:	d103      	bne.n	8012248 <RegionSetBandTxDone+0x1a>
        CN470_SET_BAND_TX_DONE( );
        CN779_SET_BAND_TX_DONE( );
        EU433_SET_BAND_TX_DONE( );
        EU868_SET_BAND_TX_DONE( );
        KR920_SET_BAND_TX_DONE( );
        IN865_SET_BAND_TX_DONE( );
 8012240:	6838      	ldr	r0, [r7, #0]
 8012242:	f001 fa77 	bl	8013734 <RegionIN865SetBandTxDone>
 8012246:	e000      	b.n	801224a <RegionSetBandTxDone+0x1c>
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 8012248:	bf00      	nop
        }
    }
}
 801224a:	3708      	adds	r7, #8
 801224c:	46bd      	mov	sp, r7
 801224e:	bd80      	pop	{r7, pc}

08012250 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 8012250:	b580      	push	{r7, lr}
 8012252:	b082      	sub	sp, #8
 8012254:	af00      	add	r7, sp, #0
 8012256:	4603      	mov	r3, r0
 8012258:	6039      	str	r1, [r7, #0]
 801225a:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801225c:	79fb      	ldrb	r3, [r7, #7]
 801225e:	2b07      	cmp	r3, #7
 8012260:	d103      	bne.n	801226a <RegionInitDefaults+0x1a>
        CN470_INIT_DEFAULTS( );
        CN779_INIT_DEFAULTS( );
        EU433_INIT_DEFAULTS( );
        EU868_INIT_DEFAULTS( );
        KR920_INIT_DEFAULTS( );
        IN865_INIT_DEFAULTS( );
 8012262:	6838      	ldr	r0, [r7, #0]
 8012264:	f001 fa92 	bl	801378c <RegionIN865InitDefaults>
 8012268:	e000      	b.n	801226c <RegionInitDefaults+0x1c>
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 801226a:	bf00      	nop
        }
    }
}
 801226c:	bf00      	nop
 801226e:	3708      	adds	r7, #8
 8012270:	46bd      	mov	sp, r7
 8012272:	bd80      	pop	{r7, pc}

08012274 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8012274:	b580      	push	{r7, lr}
 8012276:	b082      	sub	sp, #8
 8012278:	af00      	add	r7, sp, #0
 801227a:	4603      	mov	r3, r0
 801227c:	6039      	str	r1, [r7, #0]
 801227e:	71fb      	strb	r3, [r7, #7]
 8012280:	4613      	mov	r3, r2
 8012282:	71bb      	strb	r3, [r7, #6]
    switch( region )
 8012284:	79fb      	ldrb	r3, [r7, #7]
 8012286:	2b07      	cmp	r3, #7
 8012288:	d106      	bne.n	8012298 <RegionVerify+0x24>
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
        KR920_VERIFY( );
        IN865_VERIFY( );
 801228a:	79bb      	ldrb	r3, [r7, #6]
 801228c:	4619      	mov	r1, r3
 801228e:	6838      	ldr	r0, [r7, #0]
 8012290:	f001 fb0e 	bl	80138b0 <RegionIN865Verify>
 8012294:	4603      	mov	r3, r0
 8012296:	e000      	b.n	801229a <RegionVerify+0x26>
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 8012298:	2300      	movs	r3, #0
        }
    }
}
 801229a:	4618      	mov	r0, r3
 801229c:	3708      	adds	r7, #8
 801229e:	46bd      	mov	sp, r7
 80122a0:	bd80      	pop	{r7, pc}

080122a2 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 80122a2:	b580      	push	{r7, lr}
 80122a4:	b082      	sub	sp, #8
 80122a6:	af00      	add	r7, sp, #0
 80122a8:	4603      	mov	r3, r0
 80122aa:	6039      	str	r1, [r7, #0]
 80122ac:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80122ae:	79fb      	ldrb	r3, [r7, #7]
 80122b0:	2b07      	cmp	r3, #7
 80122b2:	d103      	bne.n	80122bc <RegionApplyCFList+0x1a>
        CN470_APPLY_CF_LIST( );
        CN779_APPLY_CF_LIST( );
        EU433_APPLY_CF_LIST( );
        EU868_APPLY_CF_LIST( );
        KR920_APPLY_CF_LIST( );
        IN865_APPLY_CF_LIST( );
 80122b4:	6838      	ldr	r0, [r7, #0]
 80122b6:	f001 fb7f 	bl	80139b8 <RegionIN865ApplyCFList>
 80122ba:	e000      	b.n	80122be <RegionApplyCFList+0x1c>
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 80122bc:	bf00      	nop
        }
    }
}
 80122be:	bf00      	nop
 80122c0:	3708      	adds	r7, #8
 80122c2:	46bd      	mov	sp, r7
 80122c4:	bd80      	pop	{r7, pc}

080122c6 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 80122c6:	b580      	push	{r7, lr}
 80122c8:	b082      	sub	sp, #8
 80122ca:	af00      	add	r7, sp, #0
 80122cc:	4603      	mov	r3, r0
 80122ce:	6039      	str	r1, [r7, #0]
 80122d0:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80122d2:	79fb      	ldrb	r3, [r7, #7]
 80122d4:	2b07      	cmp	r3, #7
 80122d6:	d104      	bne.n	80122e2 <RegionChanMaskSet+0x1c>
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
        KR920_CHAN_MASK_SET( );
        IN865_CHAN_MASK_SET( );
 80122d8:	6838      	ldr	r0, [r7, #0]
 80122da:	f001 fbe1 	bl	8013aa0 <RegionIN865ChanMaskSet>
 80122de:	4603      	mov	r3, r0
 80122e0:	e000      	b.n	80122e4 <RegionChanMaskSet+0x1e>
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 80122e2:	2300      	movs	r3, #0
        }
    }
}
 80122e4:	4618      	mov	r0, r3
 80122e6:	3708      	adds	r7, #8
 80122e8:	46bd      	mov	sp, r7
 80122ea:	bd80      	pop	{r7, pc}

080122ec <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 80122ec:	b580      	push	{r7, lr}
 80122ee:	b082      	sub	sp, #8
 80122f0:	af00      	add	r7, sp, #0
 80122f2:	603b      	str	r3, [r7, #0]
 80122f4:	4603      	mov	r3, r0
 80122f6:	71fb      	strb	r3, [r7, #7]
 80122f8:	460b      	mov	r3, r1
 80122fa:	71bb      	strb	r3, [r7, #6]
 80122fc:	4613      	mov	r3, r2
 80122fe:	717b      	strb	r3, [r7, #5]
    switch( region )
 8012300:	79fb      	ldrb	r3, [r7, #7]
 8012302:	2b07      	cmp	r3, #7
 8012304:	d107      	bne.n	8012316 <RegionComputeRxWindowParameters+0x2a>
        CN470_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
        KR920_COMPUTE_RX_WINDOW_PARAMETERS( );
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
 8012306:	7979      	ldrb	r1, [r7, #5]
 8012308:	f997 0006 	ldrsb.w	r0, [r7, #6]
 801230c:	693b      	ldr	r3, [r7, #16]
 801230e:	683a      	ldr	r2, [r7, #0]
 8012310:	f001 fbf0 	bl	8013af4 <RegionIN865ComputeRxWindowParameters>
 8012314:	e000      	b.n	8012318 <RegionComputeRxWindowParameters+0x2c>
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 8012316:	bf00      	nop
        }
    }
}
 8012318:	bf00      	nop
 801231a:	3708      	adds	r7, #8
 801231c:	46bd      	mov	sp, r7
 801231e:	bd80      	pop	{r7, pc}

08012320 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8012320:	b580      	push	{r7, lr}
 8012322:	b084      	sub	sp, #16
 8012324:	af00      	add	r7, sp, #0
 8012326:	4603      	mov	r3, r0
 8012328:	60b9      	str	r1, [r7, #8]
 801232a:	607a      	str	r2, [r7, #4]
 801232c:	73fb      	strb	r3, [r7, #15]
    switch( region )
 801232e:	7bfb      	ldrb	r3, [r7, #15]
 8012330:	2b07      	cmp	r3, #7
 8012332:	d105      	bne.n	8012340 <RegionRxConfig+0x20>
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
        KR920_RX_CONFIG( );
        IN865_RX_CONFIG( );
 8012334:	6879      	ldr	r1, [r7, #4]
 8012336:	68b8      	ldr	r0, [r7, #8]
 8012338:	f001 fc36 	bl	8013ba8 <RegionIN865RxConfig>
 801233c:	4603      	mov	r3, r0
 801233e:	e000      	b.n	8012342 <RegionRxConfig+0x22>
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 8012340:	2300      	movs	r3, #0
        }
    }
}
 8012342:	4618      	mov	r0, r3
 8012344:	3710      	adds	r7, #16
 8012346:	46bd      	mov	sp, r7
 8012348:	bd80      	pop	{r7, pc}

0801234a <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 801234a:	b580      	push	{r7, lr}
 801234c:	b084      	sub	sp, #16
 801234e:	af00      	add	r7, sp, #0
 8012350:	60b9      	str	r1, [r7, #8]
 8012352:	607a      	str	r2, [r7, #4]
 8012354:	603b      	str	r3, [r7, #0]
 8012356:	4603      	mov	r3, r0
 8012358:	73fb      	strb	r3, [r7, #15]
    switch( region )
 801235a:	7bfb      	ldrb	r3, [r7, #15]
 801235c:	2b07      	cmp	r3, #7
 801235e:	d106      	bne.n	801236e <RegionTxConfig+0x24>
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
        KR920_TX_CONFIG( );
        IN865_TX_CONFIG( );
 8012360:	683a      	ldr	r2, [r7, #0]
 8012362:	6879      	ldr	r1, [r7, #4]
 8012364:	68b8      	ldr	r0, [r7, #8]
 8012366:	f001 fcef 	bl	8013d48 <RegionIN865TxConfig>
 801236a:	4603      	mov	r3, r0
 801236c:	e000      	b.n	8012370 <RegionTxConfig+0x26>
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 801236e:	2300      	movs	r3, #0
        }
    }
}
 8012370:	4618      	mov	r0, r3
 8012372:	3710      	adds	r7, #16
 8012374:	46bd      	mov	sp, r7
 8012376:	bd80      	pop	{r7, pc}

08012378 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8012378:	b580      	push	{r7, lr}
 801237a:	b086      	sub	sp, #24
 801237c:	af02      	add	r7, sp, #8
 801237e:	60b9      	str	r1, [r7, #8]
 8012380:	607a      	str	r2, [r7, #4]
 8012382:	603b      	str	r3, [r7, #0]
 8012384:	4603      	mov	r3, r0
 8012386:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8012388:	7bfb      	ldrb	r3, [r7, #15]
 801238a:	2b07      	cmp	r3, #7
 801238c:	d109      	bne.n	80123a2 <RegionLinkAdrReq+0x2a>
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
        KR920_LINK_ADR_REQ( );
        IN865_LINK_ADR_REQ( );
 801238e:	69fb      	ldr	r3, [r7, #28]
 8012390:	9300      	str	r3, [sp, #0]
 8012392:	69bb      	ldr	r3, [r7, #24]
 8012394:	683a      	ldr	r2, [r7, #0]
 8012396:	6879      	ldr	r1, [r7, #4]
 8012398:	68b8      	ldr	r0, [r7, #8]
 801239a:	f001 fda5 	bl	8013ee8 <RegionIN865LinkAdrReq>
 801239e:	4603      	mov	r3, r0
 80123a0:	e000      	b.n	80123a4 <RegionLinkAdrReq+0x2c>
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 80123a2:	2300      	movs	r3, #0
        }
    }
}
 80123a4:	4618      	mov	r0, r3
 80123a6:	3710      	adds	r7, #16
 80123a8:	46bd      	mov	sp, r7
 80123aa:	bd80      	pop	{r7, pc}

080123ac <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 80123ac:	b580      	push	{r7, lr}
 80123ae:	b082      	sub	sp, #8
 80123b0:	af00      	add	r7, sp, #0
 80123b2:	4603      	mov	r3, r0
 80123b4:	6039      	str	r1, [r7, #0]
 80123b6:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80123b8:	79fb      	ldrb	r3, [r7, #7]
 80123ba:	2b07      	cmp	r3, #7
 80123bc:	d104      	bne.n	80123c8 <RegionRxParamSetupReq+0x1c>
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
        KR920_RX_PARAM_SETUP_REQ( );
        IN865_RX_PARAM_SETUP_REQ( );
 80123be:	6838      	ldr	r0, [r7, #0]
 80123c0:	f001 febe 	bl	8014140 <RegionIN865RxParamSetupReq>
 80123c4:	4603      	mov	r3, r0
 80123c6:	e000      	b.n	80123ca <RegionRxParamSetupReq+0x1e>
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 80123c8:	2300      	movs	r3, #0
        }
    }
}
 80123ca:	4618      	mov	r0, r3
 80123cc:	3708      	adds	r7, #8
 80123ce:	46bd      	mov	sp, r7
 80123d0:	bd80      	pop	{r7, pc}

080123d2 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 80123d2:	b580      	push	{r7, lr}
 80123d4:	b082      	sub	sp, #8
 80123d6:	af00      	add	r7, sp, #0
 80123d8:	4603      	mov	r3, r0
 80123da:	6039      	str	r1, [r7, #0]
 80123dc:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80123de:	79fb      	ldrb	r3, [r7, #7]
 80123e0:	2b07      	cmp	r3, #7
 80123e2:	d104      	bne.n	80123ee <RegionNewChannelReq+0x1c>
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
        KR920_NEW_CHANNEL_REQ( );
        IN865_NEW_CHANNEL_REQ( );
 80123e4:	6838      	ldr	r0, [r7, #0]
 80123e6:	f001 fee9 	bl	80141bc <RegionIN865NewChannelReq>
 80123ea:	4603      	mov	r3, r0
 80123ec:	e000      	b.n	80123f0 <RegionNewChannelReq+0x1e>
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 80123ee:	2300      	movs	r3, #0
        }
    }
}
 80123f0:	4618      	mov	r0, r3
 80123f2:	3708      	adds	r7, #8
 80123f4:	46bd      	mov	sp, r7
 80123f6:	bd80      	pop	{r7, pc}

080123f8 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 80123f8:	b580      	push	{r7, lr}
 80123fa:	b082      	sub	sp, #8
 80123fc:	af00      	add	r7, sp, #0
 80123fe:	4603      	mov	r3, r0
 8012400:	6039      	str	r1, [r7, #0]
 8012402:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8012404:	79fb      	ldrb	r3, [r7, #7]
 8012406:	2b07      	cmp	r3, #7
 8012408:	d104      	bne.n	8012414 <RegionTxParamSetupReq+0x1c>
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
        KR920_TX_PARAM_SETUP_REQ( );
        IN865_TX_PARAM_SETUP_REQ( );
 801240a:	6838      	ldr	r0, [r7, #0]
 801240c:	f001 ff34 	bl	8014278 <RegionIN865TxParamSetupReq>
 8012410:	4603      	mov	r3, r0
 8012412:	e000      	b.n	8012416 <RegionTxParamSetupReq+0x1e>
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8012414:	2300      	movs	r3, #0
        }
    }
}
 8012416:	4618      	mov	r0, r3
 8012418:	3708      	adds	r7, #8
 801241a:	46bd      	mov	sp, r7
 801241c:	bd80      	pop	{r7, pc}

0801241e <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 801241e:	b580      	push	{r7, lr}
 8012420:	b082      	sub	sp, #8
 8012422:	af00      	add	r7, sp, #0
 8012424:	4603      	mov	r3, r0
 8012426:	6039      	str	r1, [r7, #0]
 8012428:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801242a:	79fb      	ldrb	r3, [r7, #7]
 801242c:	2b07      	cmp	r3, #7
 801242e:	d104      	bne.n	801243a <RegionDlChannelReq+0x1c>
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
        KR920_DL_CHANNEL_REQ( );
        IN865_DL_CHANNEL_REQ( );
 8012430:	6838      	ldr	r0, [r7, #0]
 8012432:	f001 ff2d 	bl	8014290 <RegionIN865DlChannelReq>
 8012436:	4603      	mov	r3, r0
 8012438:	e000      	b.n	801243c <RegionDlChannelReq+0x1e>
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 801243a:	2300      	movs	r3, #0
        }
    }
}
 801243c:	4618      	mov	r0, r3
 801243e:	3708      	adds	r7, #8
 8012440:	46bd      	mov	sp, r7
 8012442:	bd80      	pop	{r7, pc}

08012444 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 8012444:	b580      	push	{r7, lr}
 8012446:	b082      	sub	sp, #8
 8012448:	af00      	add	r7, sp, #0
 801244a:	4603      	mov	r3, r0
 801244c:	71fb      	strb	r3, [r7, #7]
 801244e:	460b      	mov	r3, r1
 8012450:	71bb      	strb	r3, [r7, #6]
 8012452:	4613      	mov	r3, r2
 8012454:	717b      	strb	r3, [r7, #5]
    switch( region )
 8012456:	79fb      	ldrb	r3, [r7, #7]
 8012458:	2b07      	cmp	r3, #7
 801245a:	d108      	bne.n	801246e <RegionAlternateDr+0x2a>
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
        KR920_ALTERNATE_DR( );
        IN865_ALTERNATE_DR( );
 801245c:	797a      	ldrb	r2, [r7, #5]
 801245e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8012462:	4611      	mov	r1, r2
 8012464:	4618      	mov	r0, r3
 8012466:	f001 ff53 	bl	8014310 <RegionIN865AlternateDr>
 801246a:	4603      	mov	r3, r0
 801246c:	e000      	b.n	8012470 <RegionAlternateDr+0x2c>
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 801246e:	2300      	movs	r3, #0
        }
    }
}
 8012470:	4618      	mov	r0, r3
 8012472:	3708      	adds	r7, #8
 8012474:	46bd      	mov	sp, r7
 8012476:	bd80      	pop	{r7, pc}

08012478 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8012478:	b580      	push	{r7, lr}
 801247a:	b084      	sub	sp, #16
 801247c:	af00      	add	r7, sp, #0
 801247e:	60b9      	str	r1, [r7, #8]
 8012480:	607a      	str	r2, [r7, #4]
 8012482:	603b      	str	r3, [r7, #0]
 8012484:	4603      	mov	r3, r0
 8012486:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8012488:	7bfb      	ldrb	r3, [r7, #15]
 801248a:	2b07      	cmp	r3, #7
 801248c:	d107      	bne.n	801249e <RegionNextChannel+0x26>
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
        KR920_NEXT_CHANNEL( );
        IN865_NEXT_CHANNEL( );
 801248e:	69bb      	ldr	r3, [r7, #24]
 8012490:	683a      	ldr	r2, [r7, #0]
 8012492:	6879      	ldr	r1, [r7, #4]
 8012494:	68b8      	ldr	r0, [r7, #8]
 8012496:	f001 ff4b 	bl	8014330 <RegionIN865NextChannel>
 801249a:	4603      	mov	r3, r0
 801249c:	e000      	b.n	80124a0 <RegionNextChannel+0x28>
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 801249e:	2309      	movs	r3, #9
        }
    }
}
 80124a0:	4618      	mov	r0, r3
 80124a2:	3710      	adds	r7, #16
 80124a4:	46bd      	mov	sp, r7
 80124a6:	bd80      	pop	{r7, pc}

080124a8 <RegionSetContinuousWave>:
        }
    }
}

void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 80124a8:	b580      	push	{r7, lr}
 80124aa:	b082      	sub	sp, #8
 80124ac:	af00      	add	r7, sp, #0
 80124ae:	4603      	mov	r3, r0
 80124b0:	6039      	str	r1, [r7, #0]
 80124b2:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80124b4:	79fb      	ldrb	r3, [r7, #7]
 80124b6:	2b07      	cmp	r3, #7
 80124b8:	d103      	bne.n	80124c2 <RegionSetContinuousWave+0x1a>
        CN470_SET_CONTINUOUS_WAVE( );
        CN779_SET_CONTINUOUS_WAVE( );
        EU433_SET_CONTINUOUS_WAVE( );
        EU868_SET_CONTINUOUS_WAVE( );
        KR920_SET_CONTINUOUS_WAVE( );
        IN865_SET_CONTINUOUS_WAVE( );
 80124ba:	6838      	ldr	r0, [r7, #0]
 80124bc:	f002 f8aa 	bl	8014614 <RegionIN865SetContinuousWave>
 80124c0:	e000      	b.n	80124c4 <RegionSetContinuousWave+0x1c>
        US915_SET_CONTINUOUS_WAVE( );
        RU864_SET_CONTINUOUS_WAVE( );
        default:
        {
            break;
 80124c2:	bf00      	nop
        }
    }
}
 80124c4:	bf00      	nop
 80124c6:	3708      	adds	r7, #8
 80124c8:	46bd      	mov	sp, r7
 80124ca:	bd80      	pop	{r7, pc}

080124cc <RegionApplyDrOffset>:

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 80124cc:	b590      	push	{r4, r7, lr}
 80124ce:	b083      	sub	sp, #12
 80124d0:	af00      	add	r7, sp, #0
 80124d2:	4604      	mov	r4, r0
 80124d4:	4608      	mov	r0, r1
 80124d6:	4611      	mov	r1, r2
 80124d8:	461a      	mov	r2, r3
 80124da:	4623      	mov	r3, r4
 80124dc:	71fb      	strb	r3, [r7, #7]
 80124de:	4603      	mov	r3, r0
 80124e0:	71bb      	strb	r3, [r7, #6]
 80124e2:	460b      	mov	r3, r1
 80124e4:	717b      	strb	r3, [r7, #5]
 80124e6:	4613      	mov	r3, r2
 80124e8:	713b      	strb	r3, [r7, #4]
    switch( region )
 80124ea:	79fb      	ldrb	r3, [r7, #7]
 80124ec:	2b07      	cmp	r3, #7
 80124ee:	d109      	bne.n	8012504 <RegionApplyDrOffset+0x38>
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
        KR920_APPLY_DR_OFFSET( );
        IN865_APPLY_DR_OFFSET( );
 80124f0:	f997 2004 	ldrsb.w	r2, [r7, #4]
 80124f4:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80124f8:	79bb      	ldrb	r3, [r7, #6]
 80124fa:	4618      	mov	r0, r3
 80124fc:	f002 f8d8 	bl	80146b0 <RegionIN865ApplyDrOffset>
 8012500:	4603      	mov	r3, r0
 8012502:	e000      	b.n	8012506 <RegionApplyDrOffset+0x3a>
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 8012504:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 8012506:	4618      	mov	r0, r3
 8012508:	370c      	adds	r7, #12
 801250a:	46bd      	mov	sp, r7
 801250c:	bd90      	pop	{r4, r7, pc}
	...

08012510 <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 8012510:	b480      	push	{r7}
 8012512:	b083      	sub	sp, #12
 8012514:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 8012516:	4b04      	ldr	r3, [pc, #16]	; (8012528 <RegionGetVersion+0x18>)
 8012518:	607b      	str	r3, [r7, #4]

    return version;
 801251a:	687b      	ldr	r3, [r7, #4]
}
 801251c:	4618      	mov	r0, r3
 801251e:	370c      	adds	r7, #12
 8012520:	46bd      	mov	sp, r7
 8012522:	bc80      	pop	{r7}
 8012524:	4770      	bx	lr
 8012526:	bf00      	nop
 8012528:	01000300 	.word	0x01000300

0801252c <GetDutyCycle>:
        ( ( ( N ) + ( D ) - 1 ) / ( D ) ) :                                    \
        ( ( N ) / ( D ) )                                                      \
    )

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 801252c:	b480      	push	{r7}
 801252e:	b087      	sub	sp, #28
 8012530:	af00      	add	r7, sp, #0
 8012532:	60f8      	str	r0, [r7, #12]
 8012534:	4608      	mov	r0, r1
 8012536:	4639      	mov	r1, r7
 8012538:	e881 000c 	stmia.w	r1, {r2, r3}
 801253c:	4603      	mov	r3, r0
 801253e:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8012540:	68fb      	ldr	r3, [r7, #12]
 8012542:	881b      	ldrh	r3, [r3, #0]
 8012544:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 8012546:	7afb      	ldrb	r3, [r7, #11]
 8012548:	f083 0301 	eor.w	r3, r3, #1
 801254c:	b2db      	uxtb	r3, r3
 801254e:	2b00      	cmp	r3, #0
 8012550:	d01b      	beq.n	801258a <GetDutyCycle+0x5e>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;
 8012552:	f242 7310 	movw	r3, #10000	; 0x2710
 8012556:	82bb      	strh	r3, [r7, #20]

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 8012558:	683b      	ldr	r3, [r7, #0]
 801255a:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 801255e:	d202      	bcs.n	8012566 <GetDutyCycle+0x3a>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 8012560:	2364      	movs	r3, #100	; 0x64
 8012562:	82bb      	strh	r3, [r7, #20]
 8012564:	e00b      	b.n	801257e <GetDutyCycle+0x52>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 8012566:	683b      	ldr	r3, [r7, #0]
 8012568:	f649 22af 	movw	r2, #39599	; 0x9aaf
 801256c:	4293      	cmp	r3, r2
 801256e:	d803      	bhi.n	8012578 <GetDutyCycle+0x4c>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 8012570:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8012574:	82bb      	strh	r3, [r7, #20]
 8012576:	e002      	b.n	801257e <GetDutyCycle+0x52>
        }
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 8012578:	f242 7310 	movw	r3, #10000	; 0x2710
 801257c:	82bb      	strh	r3, [r7, #20]
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 801257e:	8aba      	ldrh	r2, [r7, #20]
 8012580:	8afb      	ldrh	r3, [r7, #22]
 8012582:	4293      	cmp	r3, r2
 8012584:	bf38      	it	cc
 8012586:	4613      	movcc	r3, r2
 8012588:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 801258a:	8afb      	ldrh	r3, [r7, #22]
 801258c:	2b00      	cmp	r3, #0
 801258e:	d101      	bne.n	8012594 <GetDutyCycle+0x68>
    {
        dutyCycle = 1;
 8012590:	2301      	movs	r3, #1
 8012592:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 8012594:	8afb      	ldrh	r3, [r7, #22]
}
 8012596:	4618      	mov	r0, r3
 8012598:	371c      	adds	r7, #28
 801259a:	46bd      	mov	sp, r7
 801259c:	bc80      	pop	{r7}
 801259e:	4770      	bx	lr

080125a0 <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 80125a0:	b580      	push	{r7, lr}
 80125a2:	b08e      	sub	sp, #56	; 0x38
 80125a4:	af02      	add	r7, sp, #8
 80125a6:	60f8      	str	r0, [r7, #12]
 80125a8:	4608      	mov	r0, r1
 80125aa:	4639      	mov	r1, r7
 80125ac:	e881 000c 	stmia.w	r1, {r2, r3}
 80125b0:	4603      	mov	r3, r0
 80125b2:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 80125b4:	68fb      	ldr	r3, [r7, #12]
 80125b6:	881b      	ldrh	r3, [r3, #0]
 80125b8:	857b      	strh	r3, [r7, #42]	; 0x2a
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 80125ba:	4b4b      	ldr	r3, [pc, #300]	; (80126e8 <SetMaxTimeCredits+0x148>)
 80125bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 80125be:	463b      	mov	r3, r7
 80125c0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80125c4:	f005 fbd6 	bl	8017d74 <SysTimeToMs>
 80125c8:	6278      	str	r0, [r7, #36]	; 0x24
    SysTime_t timeDiff = { 0 };
 80125ca:	f107 0314 	add.w	r3, r7, #20
 80125ce:	2200      	movs	r2, #0
 80125d0:	601a      	str	r2, [r3, #0]
 80125d2:	605a      	str	r2, [r3, #4]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 80125d4:	7af9      	ldrb	r1, [r7, #11]
 80125d6:	463b      	mov	r3, r7
 80125d8:	cb0c      	ldmia	r3, {r2, r3}
 80125da:	68f8      	ldr	r0, [r7, #12]
 80125dc:	f7ff ffa6 	bl	801252c <GetDutyCycle>
 80125e0:	4603      	mov	r3, r0
 80125e2:	857b      	strh	r3, [r7, #42]	; 0x2a

    if( joined == false )
 80125e4:	7afb      	ldrb	r3, [r7, #11]
 80125e6:	f083 0301 	eor.w	r3, r3, #1
 80125ea:	b2db      	uxtb	r3, r3
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	d062      	beq.n	80126b6 <SetMaxTimeCredits+0x116>
    {
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 80125f0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80125f2:	2b64      	cmp	r3, #100	; 0x64
 80125f4:	d105      	bne.n	8012602 <SetMaxTimeCredits+0x62>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 80125f6:	4b3c      	ldr	r3, [pc, #240]	; (80126e8 <SetMaxTimeCredits+0x148>)
 80125f8:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 80125fa:	68fb      	ldr	r3, [r7, #12]
 80125fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80125fe:	609a      	str	r2, [r3, #8]
 8012600:	e00b      	b.n	801261a <SetMaxTimeCredits+0x7a>
        }
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8012602:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012604:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8012608:	d105      	bne.n	8012616 <SetMaxTimeCredits+0x76>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 801260a:	4b38      	ldr	r3, [pc, #224]	; (80126ec <SetMaxTimeCredits+0x14c>)
 801260c:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 801260e:	68fb      	ldr	r3, [r7, #12]
 8012610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012612:	609a      	str	r2, [r3, #8]
 8012614:	e001      	b.n	801261a <SetMaxTimeCredits+0x7a>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 8012616:	4b36      	ldr	r3, [pc, #216]	; (80126f0 <SetMaxTimeCredits+0x150>)
 8012618:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 801261a:	68fb      	ldr	r3, [r7, #12]
 801261c:	689a      	ldr	r2, [r3, #8]
 801261e:	f107 031c 	add.w	r3, r7, #28
 8012622:	4611      	mov	r1, r2
 8012624:	4618      	mov	r0, r3
 8012626:	f005 fbcd 	bl	8017dc4 <SysTimeFromMs>
 801262a:	f107 0014 	add.w	r0, r7, #20
 801262e:	6a3b      	ldr	r3, [r7, #32]
 8012630:	9300      	str	r3, [sp, #0]
 8012632:	69fb      	ldr	r3, [r7, #28]
 8012634:	463a      	mov	r2, r7
 8012636:	ca06      	ldmia	r2, {r1, r2}
 8012638:	f005 fadd 	bl	8017bf6 <SysTimeSub>

        // Verify if we have to assign the maximum credits in cases
        // of the preconditions have changed.
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 801263c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8012640:	f083 0301 	eor.w	r3, r3, #1
 8012644:	b2db      	uxtb	r3, r3
 8012646:	2b00      	cmp	r3, #0
 8012648:	d006      	beq.n	8012658 <SetMaxTimeCredits+0xb8>
 801264a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801264e:	f083 0301 	eor.w	r3, r3, #1
 8012652:	b2db      	uxtb	r3, r3
 8012654:	2b00      	cmp	r3, #0
 8012656:	d108      	bne.n	801266a <SetMaxTimeCredits+0xca>
            ( band->MaxTimeCredits != maxCredits ) ||
 8012658:	68fb      	ldr	r3, [r7, #12]
 801265a:	691b      	ldr	r3, [r3, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 801265c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801265e:	429a      	cmp	r2, r3
 8012660:	d103      	bne.n	801266a <SetMaxTimeCredits+0xca>
            ( timeDiff.Seconds >= BACKOFF_24_HOURS_IN_S ) )
 8012662:	697b      	ldr	r3, [r7, #20]
            ( band->MaxTimeCredits != maxCredits ) ||
 8012664:	4a23      	ldr	r2, [pc, #140]	; (80126f4 <SetMaxTimeCredits+0x154>)
 8012666:	4293      	cmp	r3, r2
 8012668:	d92f      	bls.n	80126ca <SetMaxTimeCredits+0x12a>
        {
            band->TimeCredits = maxCredits;
 801266a:	68fb      	ldr	r3, [r7, #12]
 801266c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801266e:	60da      	str	r2, [r3, #12]

            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8012670:	683b      	ldr	r3, [r7, #0]
 8012672:	4a21      	ldr	r2, [pc, #132]	; (80126f8 <SetMaxTimeCredits+0x158>)
 8012674:	4293      	cmp	r3, r2
 8012676:	d928      	bls.n	80126ca <SetMaxTimeCredits+0x12a>
            {
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 8012678:	683b      	ldr	r3, [r7, #0]
 801267a:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 801267e:	3b30      	subs	r3, #48	; 0x30
 8012680:	4a1e      	ldr	r2, [pc, #120]	; (80126fc <SetMaxTimeCredits+0x15c>)
 8012682:	fba2 2303 	umull	r2, r3, r2, r3
 8012686:	0c1b      	lsrs	r3, r3, #16
 8012688:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 801268a:	697b      	ldr	r3, [r7, #20]
 801268c:	4a1c      	ldr	r2, [pc, #112]	; (8012700 <SetMaxTimeCredits+0x160>)
 801268e:	fb02 f303 	mul.w	r3, r2, r3
 8012692:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8012694:	697b      	ldr	r3, [r7, #20]
 8012696:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 801269a:	3330      	adds	r3, #48	; 0x30
 801269c:	617b      	str	r3, [r7, #20]
                timeDiff.SubSeconds = 0;
 801269e:	2300      	movs	r3, #0
 80126a0:	833b      	strh	r3, [r7, #24]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 80126a2:	f107 0314 	add.w	r3, r7, #20
 80126a6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80126aa:	f005 fb63 	bl	8017d74 <SysTimeToMs>
 80126ae:	4602      	mov	r2, r0
 80126b0:	68fb      	ldr	r3, [r7, #12]
 80126b2:	609a      	str	r2, [r3, #8]
 80126b4:	e009      	b.n	80126ca <SetMaxTimeCredits+0x12a>
            }
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 80126b6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80126ba:	f083 0301 	eor.w	r3, r3, #1
 80126be:	b2db      	uxtb	r3, r3
 80126c0:	2b00      	cmp	r3, #0
 80126c2:	d002      	beq.n	80126ca <SetMaxTimeCredits+0x12a>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 80126c4:	68fb      	ldr	r3, [r7, #12]
 80126c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80126c8:	60da      	str	r2, [r3, #12]
        }
    }

    // Assign the max credits if its the first time
    if( band->LastBandUpdateTime == 0 )
 80126ca:	68fb      	ldr	r3, [r7, #12]
 80126cc:	685b      	ldr	r3, [r3, #4]
 80126ce:	2b00      	cmp	r3, #0
 80126d0:	d102      	bne.n	80126d8 <SetMaxTimeCredits+0x138>
    {
        band->TimeCredits = maxCredits;
 80126d2:	68fb      	ldr	r3, [r7, #12]
 80126d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80126d6:	60da      	str	r2, [r3, #12]
    }

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 80126d8:	68fb      	ldr	r3, [r7, #12]
 80126da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80126dc:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 80126de:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
}
 80126e0:	4618      	mov	r0, r3
 80126e2:	3730      	adds	r7, #48	; 0x30
 80126e4:	46bd      	mov	sp, r7
 80126e6:	bd80      	pop	{r7, pc}
 80126e8:	001b7740 	.word	0x001b7740
 80126ec:	0112a880 	.word	0x0112a880
 80126f0:	02932e00 	.word	0x02932e00
 80126f4:	0001517f 	.word	0x0001517f
 80126f8:	0001ec2f 	.word	0x0001ec2f
 80126fc:	c22e4507 	.word	0xc22e4507
 8012700:	00015180 	.word	0x00015180

08012704 <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 8012704:	b580      	push	{r7, lr}
 8012706:	b086      	sub	sp, #24
 8012708:	af02      	add	r7, sp, #8
 801270a:	6078      	str	r0, [r7, #4]
 801270c:	4608      	mov	r0, r1
 801270e:	4611      	mov	r1, r2
 8012710:	461a      	mov	r2, r3
 8012712:	4603      	mov	r3, r0
 8012714:	70fb      	strb	r3, [r7, #3]
 8012716:	460b      	mov	r3, r1
 8012718:	70bb      	strb	r3, [r7, #2]
 801271a:	4613      	mov	r3, r2
 801271c:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 801271e:	78f9      	ldrb	r1, [r7, #3]
 8012720:	787b      	ldrb	r3, [r7, #1]
 8012722:	9301      	str	r3, [sp, #4]
 8012724:	78bb      	ldrb	r3, [r7, #2]
 8012726:	9300      	str	r3, [sp, #0]
 8012728:	f107 0318 	add.w	r3, r7, #24
 801272c:	cb0c      	ldmia	r3, {r2, r3}
 801272e:	6878      	ldr	r0, [r7, #4]
 8012730:	f7ff ff36 	bl	80125a0 <SetMaxTimeCredits>
 8012734:	4603      	mov	r3, r0
 8012736:	81fb      	strh	r3, [r7, #14]
                                            dutyCycleEnabled, lastTxIsJoinRequest );

    if( joined == true )
 8012738:	78fb      	ldrb	r3, [r7, #3]
 801273a:	2b00      	cmp	r3, #0
 801273c:	d00a      	beq.n	8012754 <UpdateTimeCredits+0x50>
    {
        // Apply a sliding window for the duty cycle with collection and speding
        // credits.
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	685b      	ldr	r3, [r3, #4]
 8012742:	4618      	mov	r0, r3
 8012744:	f006 f93e 	bl	80189c4 <UTIL_TIMER_GetElapsedTime>
 8012748:	4602      	mov	r2, r0
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	68db      	ldr	r3, [r3, #12]
 801274e:	441a      	add	r2, r3
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	60da      	str	r2, [r3, #12]
    }

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	68da      	ldr	r2, [r3, #12]
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	691b      	ldr	r3, [r3, #16]
 801275c:	429a      	cmp	r2, r3
 801275e:	d903      	bls.n	8012768 <UpdateTimeCredits+0x64>
    {
        band->TimeCredits = band->MaxTimeCredits;
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	691a      	ldr	r2, [r3, #16]
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	60da      	str	r2, [r3, #12]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	6a3a      	ldr	r2, [r7, #32]
 801276c:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 801276e:	89fb      	ldrh	r3, [r7, #14]
}
 8012770:	4618      	mov	r0, r3
 8012772:	3710      	adds	r7, #16
 8012774:	46bd      	mov	sp, r7
 8012776:	bd80      	pop	{r7, pc}

08012778 <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 8012778:	b480      	push	{r7}
 801277a:	b085      	sub	sp, #20
 801277c:	af00      	add	r7, sp, #0
 801277e:	4603      	mov	r3, r0
 8012780:	460a      	mov	r2, r1
 8012782:	80fb      	strh	r3, [r7, #6]
 8012784:	4613      	mov	r3, r2
 8012786:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 8012788:	2300      	movs	r3, #0
 801278a:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 801278c:	2300      	movs	r3, #0
 801278e:	73bb      	strb	r3, [r7, #14]
 8012790:	e011      	b.n	80127b6 <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 8012792:	88fa      	ldrh	r2, [r7, #6]
 8012794:	7bbb      	ldrb	r3, [r7, #14]
 8012796:	2101      	movs	r1, #1
 8012798:	fa01 f303 	lsl.w	r3, r1, r3
 801279c:	401a      	ands	r2, r3
 801279e:	7bbb      	ldrb	r3, [r7, #14]
 80127a0:	2101      	movs	r1, #1
 80127a2:	fa01 f303 	lsl.w	r3, r1, r3
 80127a6:	429a      	cmp	r2, r3
 80127a8:	d102      	bne.n	80127b0 <CountChannels+0x38>
        {
            nbActiveBits++;
 80127aa:	7bfb      	ldrb	r3, [r7, #15]
 80127ac:	3301      	adds	r3, #1
 80127ae:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 80127b0:	7bbb      	ldrb	r3, [r7, #14]
 80127b2:	3301      	adds	r3, #1
 80127b4:	73bb      	strb	r3, [r7, #14]
 80127b6:	7bba      	ldrb	r2, [r7, #14]
 80127b8:	797b      	ldrb	r3, [r7, #5]
 80127ba:	429a      	cmp	r2, r3
 80127bc:	d3e9      	bcc.n	8012792 <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 80127be:	7bfb      	ldrb	r3, [r7, #15]
}
 80127c0:	4618      	mov	r0, r3
 80127c2:	3714      	adds	r7, #20
 80127c4:	46bd      	mov	sp, r7
 80127c6:	bc80      	pop	{r7}
 80127c8:	4770      	bx	lr

080127ca <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 80127ca:	b580      	push	{r7, lr}
 80127cc:	b084      	sub	sp, #16
 80127ce:	af00      	add	r7, sp, #0
 80127d0:	6039      	str	r1, [r7, #0]
 80127d2:	4611      	mov	r1, r2
 80127d4:	461a      	mov	r2, r3
 80127d6:	4603      	mov	r3, r0
 80127d8:	71fb      	strb	r3, [r7, #7]
 80127da:	460b      	mov	r3, r1
 80127dc:	71bb      	strb	r3, [r7, #6]
 80127de:	4613      	mov	r3, r2
 80127e0:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 80127e2:	f997 2018 	ldrsb.w	r2, [r7, #24]
 80127e6:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80127ea:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80127ee:	4618      	mov	r0, r3
 80127f0:	f000 f85d 	bl	80128ae <RegionCommonValueInRange>
 80127f4:	4603      	mov	r3, r0
 80127f6:	2b00      	cmp	r3, #0
 80127f8:	d101      	bne.n	80127fe <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 80127fa:	2300      	movs	r3, #0
 80127fc:	e053      	b.n	80128a6 <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 80127fe:	2300      	movs	r3, #0
 8012800:	73fb      	strb	r3, [r7, #15]
 8012802:	2300      	movs	r3, #0
 8012804:	73bb      	strb	r3, [r7, #14]
 8012806:	e049      	b.n	801289c <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8012808:	2300      	movs	r3, #0
 801280a:	737b      	strb	r3, [r7, #13]
 801280c:	e03d      	b.n	801288a <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 801280e:	7bbb      	ldrb	r3, [r7, #14]
 8012810:	005b      	lsls	r3, r3, #1
 8012812:	683a      	ldr	r2, [r7, #0]
 8012814:	4413      	add	r3, r2
 8012816:	881b      	ldrh	r3, [r3, #0]
 8012818:	461a      	mov	r2, r3
 801281a:	7b7b      	ldrb	r3, [r7, #13]
 801281c:	fa42 f303 	asr.w	r3, r2, r3
 8012820:	f003 0301 	and.w	r3, r3, #1
 8012824:	2b00      	cmp	r3, #0
 8012826:	d02d      	beq.n	8012884 <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8012828:	7bfa      	ldrb	r2, [r7, #15]
 801282a:	7b7b      	ldrb	r3, [r7, #13]
 801282c:	4413      	add	r3, r2
 801282e:	461a      	mov	r2, r3
 8012830:	4613      	mov	r3, r2
 8012832:	005b      	lsls	r3, r3, #1
 8012834:	4413      	add	r3, r2
 8012836:	009b      	lsls	r3, r3, #2
 8012838:	461a      	mov	r2, r3
 801283a:	69fb      	ldr	r3, [r7, #28]
 801283c:	4413      	add	r3, r2
 801283e:	7a1b      	ldrb	r3, [r3, #8]
 8012840:	f343 0303 	sbfx	r3, r3, #0, #4
 8012844:	b25b      	sxtb	r3, r3
 8012846:	f003 030f 	and.w	r3, r3, #15
 801284a:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 801284c:	7bfa      	ldrb	r2, [r7, #15]
 801284e:	7b7b      	ldrb	r3, [r7, #13]
 8012850:	4413      	add	r3, r2
 8012852:	461a      	mov	r2, r3
 8012854:	4613      	mov	r3, r2
 8012856:	005b      	lsls	r3, r3, #1
 8012858:	4413      	add	r3, r2
 801285a:	009b      	lsls	r3, r3, #2
 801285c:	461a      	mov	r2, r3
 801285e:	69fb      	ldr	r3, [r7, #28]
 8012860:	4413      	add	r3, r2
 8012862:	7a1b      	ldrb	r3, [r3, #8]
 8012864:	f343 1303 	sbfx	r3, r3, #4, #4
 8012868:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 801286a:	f003 030f 	and.w	r3, r3, #15
 801286e:	b25a      	sxtb	r2, r3
 8012870:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8012874:	4618      	mov	r0, r3
 8012876:	f000 f81a 	bl	80128ae <RegionCommonValueInRange>
 801287a:	4603      	mov	r3, r0
 801287c:	2b01      	cmp	r3, #1
 801287e:	d101      	bne.n	8012884 <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 8012880:	2301      	movs	r3, #1
 8012882:	e010      	b.n	80128a6 <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 8012884:	7b7b      	ldrb	r3, [r7, #13]
 8012886:	3301      	adds	r3, #1
 8012888:	737b      	strb	r3, [r7, #13]
 801288a:	7b7b      	ldrb	r3, [r7, #13]
 801288c:	2b0f      	cmp	r3, #15
 801288e:	d9be      	bls.n	801280e <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8012890:	7bfb      	ldrb	r3, [r7, #15]
 8012892:	3310      	adds	r3, #16
 8012894:	73fb      	strb	r3, [r7, #15]
 8012896:	7bbb      	ldrb	r3, [r7, #14]
 8012898:	3301      	adds	r3, #1
 801289a:	73bb      	strb	r3, [r7, #14]
 801289c:	7bfa      	ldrb	r2, [r7, #15]
 801289e:	79fb      	ldrb	r3, [r7, #7]
 80128a0:	429a      	cmp	r2, r3
 80128a2:	d3b1      	bcc.n	8012808 <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 80128a4:	2300      	movs	r3, #0
}
 80128a6:	4618      	mov	r0, r3
 80128a8:	3710      	adds	r7, #16
 80128aa:	46bd      	mov	sp, r7
 80128ac:	bd80      	pop	{r7, pc}

080128ae <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 80128ae:	b480      	push	{r7}
 80128b0:	b083      	sub	sp, #12
 80128b2:	af00      	add	r7, sp, #0
 80128b4:	4603      	mov	r3, r0
 80128b6:	71fb      	strb	r3, [r7, #7]
 80128b8:	460b      	mov	r3, r1
 80128ba:	71bb      	strb	r3, [r7, #6]
 80128bc:	4613      	mov	r3, r2
 80128be:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 80128c0:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80128c4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80128c8:	429a      	cmp	r2, r3
 80128ca:	db07      	blt.n	80128dc <RegionCommonValueInRange+0x2e>
 80128cc:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80128d0:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80128d4:	429a      	cmp	r2, r3
 80128d6:	dc01      	bgt.n	80128dc <RegionCommonValueInRange+0x2e>
    {
        return 1;
 80128d8:	2301      	movs	r3, #1
 80128da:	e000      	b.n	80128de <RegionCommonValueInRange+0x30>
    }
    return 0;
 80128dc:	2300      	movs	r3, #0
}
 80128de:	4618      	mov	r0, r3
 80128e0:	370c      	adds	r7, #12
 80128e2:	46bd      	mov	sp, r7
 80128e4:	bc80      	pop	{r7}
 80128e6:	4770      	bx	lr

080128e8 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 80128e8:	b480      	push	{r7}
 80128ea:	b085      	sub	sp, #20
 80128ec:	af00      	add	r7, sp, #0
 80128ee:	6078      	str	r0, [r7, #4]
 80128f0:	460b      	mov	r3, r1
 80128f2:	70fb      	strb	r3, [r7, #3]
 80128f4:	4613      	mov	r3, r2
 80128f6:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 80128f8:	78fb      	ldrb	r3, [r7, #3]
 80128fa:	091b      	lsrs	r3, r3, #4
 80128fc:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 80128fe:	78bb      	ldrb	r3, [r7, #2]
 8012900:	091b      	lsrs	r3, r3, #4
 8012902:	b2db      	uxtb	r3, r3
 8012904:	7bfa      	ldrb	r2, [r7, #15]
 8012906:	429a      	cmp	r2, r3
 8012908:	d803      	bhi.n	8012912 <RegionCommonChanDisable+0x2a>
 801290a:	78fa      	ldrb	r2, [r7, #3]
 801290c:	78bb      	ldrb	r3, [r7, #2]
 801290e:	429a      	cmp	r2, r3
 8012910:	d301      	bcc.n	8012916 <RegionCommonChanDisable+0x2e>
    {
        return false;
 8012912:	2300      	movs	r3, #0
 8012914:	e017      	b.n	8012946 <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 8012916:	7bfb      	ldrb	r3, [r7, #15]
 8012918:	005b      	lsls	r3, r3, #1
 801291a:	687a      	ldr	r2, [r7, #4]
 801291c:	4413      	add	r3, r2
 801291e:	881b      	ldrh	r3, [r3, #0]
 8012920:	b21a      	sxth	r2, r3
 8012922:	78fb      	ldrb	r3, [r7, #3]
 8012924:	f003 030f 	and.w	r3, r3, #15
 8012928:	2101      	movs	r1, #1
 801292a:	fa01 f303 	lsl.w	r3, r1, r3
 801292e:	b21b      	sxth	r3, r3
 8012930:	43db      	mvns	r3, r3
 8012932:	b21b      	sxth	r3, r3
 8012934:	4013      	ands	r3, r2
 8012936:	b219      	sxth	r1, r3
 8012938:	7bfb      	ldrb	r3, [r7, #15]
 801293a:	005b      	lsls	r3, r3, #1
 801293c:	687a      	ldr	r2, [r7, #4]
 801293e:	4413      	add	r3, r2
 8012940:	b28a      	uxth	r2, r1
 8012942:	801a      	strh	r2, [r3, #0]

    return true;
 8012944:	2301      	movs	r3, #1
}
 8012946:	4618      	mov	r0, r3
 8012948:	3714      	adds	r7, #20
 801294a:	46bd      	mov	sp, r7
 801294c:	bc80      	pop	{r7}
 801294e:	4770      	bx	lr

08012950 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 8012950:	b580      	push	{r7, lr}
 8012952:	b084      	sub	sp, #16
 8012954:	af00      	add	r7, sp, #0
 8012956:	6078      	str	r0, [r7, #4]
 8012958:	460b      	mov	r3, r1
 801295a:	70fb      	strb	r3, [r7, #3]
 801295c:	4613      	mov	r3, r2
 801295e:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 8012960:	2300      	movs	r3, #0
 8012962:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	2b00      	cmp	r3, #0
 8012968:	d101      	bne.n	801296e <RegionCommonCountChannels+0x1e>
    {
        return 0;
 801296a:	2300      	movs	r3, #0
 801296c:	e018      	b.n	80129a0 <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 801296e:	78fb      	ldrb	r3, [r7, #3]
 8012970:	73bb      	strb	r3, [r7, #14]
 8012972:	e010      	b.n	8012996 <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 8012974:	7bbb      	ldrb	r3, [r7, #14]
 8012976:	005b      	lsls	r3, r3, #1
 8012978:	687a      	ldr	r2, [r7, #4]
 801297a:	4413      	add	r3, r2
 801297c:	881b      	ldrh	r3, [r3, #0]
 801297e:	2110      	movs	r1, #16
 8012980:	4618      	mov	r0, r3
 8012982:	f7ff fef9 	bl	8012778 <CountChannels>
 8012986:	4603      	mov	r3, r0
 8012988:	461a      	mov	r2, r3
 801298a:	7bfb      	ldrb	r3, [r7, #15]
 801298c:	4413      	add	r3, r2
 801298e:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8012990:	7bbb      	ldrb	r3, [r7, #14]
 8012992:	3301      	adds	r3, #1
 8012994:	73bb      	strb	r3, [r7, #14]
 8012996:	7bba      	ldrb	r2, [r7, #14]
 8012998:	78bb      	ldrb	r3, [r7, #2]
 801299a:	429a      	cmp	r2, r3
 801299c:	d3ea      	bcc.n	8012974 <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 801299e:	7bfb      	ldrb	r3, [r7, #15]
}
 80129a0:	4618      	mov	r0, r3
 80129a2:	3710      	adds	r7, #16
 80129a4:	46bd      	mov	sp, r7
 80129a6:	bd80      	pop	{r7, pc}

080129a8 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 80129a8:	b480      	push	{r7}
 80129aa:	b087      	sub	sp, #28
 80129ac:	af00      	add	r7, sp, #0
 80129ae:	60f8      	str	r0, [r7, #12]
 80129b0:	60b9      	str	r1, [r7, #8]
 80129b2:	4613      	mov	r3, r2
 80129b4:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 80129b6:	68fb      	ldr	r3, [r7, #12]
 80129b8:	2b00      	cmp	r3, #0
 80129ba:	d016      	beq.n	80129ea <RegionCommonChanMaskCopy+0x42>
 80129bc:	68bb      	ldr	r3, [r7, #8]
 80129be:	2b00      	cmp	r3, #0
 80129c0:	d013      	beq.n	80129ea <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 80129c2:	2300      	movs	r3, #0
 80129c4:	75fb      	strb	r3, [r7, #23]
 80129c6:	e00c      	b.n	80129e2 <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 80129c8:	7dfb      	ldrb	r3, [r7, #23]
 80129ca:	005b      	lsls	r3, r3, #1
 80129cc:	68ba      	ldr	r2, [r7, #8]
 80129ce:	441a      	add	r2, r3
 80129d0:	7dfb      	ldrb	r3, [r7, #23]
 80129d2:	005b      	lsls	r3, r3, #1
 80129d4:	68f9      	ldr	r1, [r7, #12]
 80129d6:	440b      	add	r3, r1
 80129d8:	8812      	ldrh	r2, [r2, #0]
 80129da:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 80129dc:	7dfb      	ldrb	r3, [r7, #23]
 80129de:	3301      	adds	r3, #1
 80129e0:	75fb      	strb	r3, [r7, #23]
 80129e2:	7dfa      	ldrb	r2, [r7, #23]
 80129e4:	79fb      	ldrb	r3, [r7, #7]
 80129e6:	429a      	cmp	r2, r3
 80129e8:	d3ee      	bcc.n	80129c8 <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 80129ea:	bf00      	nop
 80129ec:	371c      	adds	r7, #28
 80129ee:	46bd      	mov	sp, r7
 80129f0:	bc80      	pop	{r7}
 80129f2:	4770      	bx	lr

080129f4 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 80129f4:	b082      	sub	sp, #8
 80129f6:	b580      	push	{r7, lr}
 80129f8:	b086      	sub	sp, #24
 80129fa:	af00      	add	r7, sp, #0
 80129fc:	60f8      	str	r0, [r7, #12]
 80129fe:	60b9      	str	r1, [r7, #8]
 8012a00:	627b      	str	r3, [r7, #36]	; 0x24
 8012a02:	4613      	mov	r3, r2
 8012a04:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8012a06:	79f9      	ldrb	r1, [r7, #7]
 8012a08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012a0c:	cb0c      	ldmia	r3, {r2, r3}
 8012a0e:	68f8      	ldr	r0, [r7, #12]
 8012a10:	f7ff fd8c 	bl	801252c <GetDutyCycle>
 8012a14:	4603      	mov	r3, r0
 8012a16:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 8012a18:	68fb      	ldr	r3, [r7, #12]
 8012a1a:	68da      	ldr	r2, [r3, #12]
 8012a1c:	8afb      	ldrh	r3, [r7, #22]
 8012a1e:	68b9      	ldr	r1, [r7, #8]
 8012a20:	fb01 f303 	mul.w	r3, r1, r3
 8012a24:	429a      	cmp	r2, r3
 8012a26:	d909      	bls.n	8012a3c <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 8012a28:	68fb      	ldr	r3, [r7, #12]
 8012a2a:	68da      	ldr	r2, [r3, #12]
 8012a2c:	8afb      	ldrh	r3, [r7, #22]
 8012a2e:	68b9      	ldr	r1, [r7, #8]
 8012a30:	fb01 f303 	mul.w	r3, r1, r3
 8012a34:	1ad2      	subs	r2, r2, r3
 8012a36:	68fb      	ldr	r3, [r7, #12]
 8012a38:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 8012a3a:	e002      	b.n	8012a42 <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 8012a3c:	68fb      	ldr	r3, [r7, #12]
 8012a3e:	2200      	movs	r2, #0
 8012a40:	60da      	str	r2, [r3, #12]
}
 8012a42:	bf00      	nop
 8012a44:	3718      	adds	r7, #24
 8012a46:	46bd      	mov	sp, r7
 8012a48:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012a4c:	b002      	add	sp, #8
 8012a4e:	4770      	bx	lr

08012a50 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 8012a50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012a52:	b08f      	sub	sp, #60	; 0x3c
 8012a54:	af04      	add	r7, sp, #16
 8012a56:	6039      	str	r1, [r7, #0]
 8012a58:	4611      	mov	r1, r2
 8012a5a:	461a      	mov	r2, r3
 8012a5c:	4603      	mov	r3, r0
 8012a5e:	71fb      	strb	r3, [r7, #7]
 8012a60:	460b      	mov	r3, r1
 8012a62:	71bb      	strb	r3, [r7, #6]
 8012a64:	4613      	mov	r3, r2
 8012a66:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 8012a68:	f04f 33ff 	mov.w	r3, #4294967295
 8012a6c:	627b      	str	r3, [r7, #36]	; 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 8012a6e:	f005 ff97 	bl	80189a0 <UTIL_TIMER_GetCurrentTime>
 8012a72:	61f8      	str	r0, [r7, #28]
    TimerTime_t creditCosts = 0;
 8012a74:	2300      	movs	r3, #0
 8012a76:	61bb      	str	r3, [r7, #24]
    uint16_t dutyCycle = 1;
 8012a78:	2301      	movs	r3, #1
 8012a7a:	82fb      	strh	r3, [r7, #22]
    uint8_t validBands = 0;
 8012a7c:	2300      	movs	r3, #0
 8012a7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 8012a82:	2300      	movs	r3, #0
 8012a84:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8012a88:	e0ba      	b.n	8012c00 <RegionCommonUpdateBandTimeOff+0x1b0>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 8012a8a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8012a8e:	4613      	mov	r3, r2
 8012a90:	005b      	lsls	r3, r3, #1
 8012a92:	4413      	add	r3, r2
 8012a94:	00db      	lsls	r3, r3, #3
 8012a96:	461a      	mov	r2, r3
 8012a98:	683b      	ldr	r3, [r7, #0]
 8012a9a:	189c      	adds	r4, r3, r2
 8012a9c:	f897 6040 	ldrb.w	r6, [r7, #64]	; 0x40
 8012aa0:	797a      	ldrb	r2, [r7, #5]
 8012aa2:	79fd      	ldrb	r5, [r7, #7]
 8012aa4:	69fb      	ldr	r3, [r7, #28]
 8012aa6:	9302      	str	r3, [sp, #8]
 8012aa8:	46ec      	mov	ip, sp
 8012aaa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8012aae:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012ab2:	e88c 0003 	stmia.w	ip, {r0, r1}
 8012ab6:	4633      	mov	r3, r6
 8012ab8:	4629      	mov	r1, r5
 8012aba:	4620      	mov	r0, r4
 8012abc:	f7ff fe22 	bl	8012704 <UpdateTimeCredits>
 8012ac0:	4603      	mov	r3, r0
 8012ac2:	82fb      	strh	r3, [r7, #22]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 8012ac4:	8afa      	ldrh	r2, [r7, #22]
 8012ac6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012ac8:	fb02 f303 	mul.w	r3, r2, r3
 8012acc:	61bb      	str	r3, [r7, #24]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8012ace:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8012ad2:	4613      	mov	r3, r2
 8012ad4:	005b      	lsls	r3, r3, #1
 8012ad6:	4413      	add	r3, r2
 8012ad8:	00db      	lsls	r3, r3, #3
 8012ada:	461a      	mov	r2, r3
 8012adc:	683b      	ldr	r3, [r7, #0]
 8012ade:	4413      	add	r3, r2
 8012ae0:	68db      	ldr	r3, [r3, #12]
 8012ae2:	69ba      	ldr	r2, [r7, #24]
 8012ae4:	429a      	cmp	r2, r3
 8012ae6:	d308      	bcc.n	8012afa <RegionCommonUpdateBandTimeOff+0xaa>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8012ae8:	797b      	ldrb	r3, [r7, #5]
 8012aea:	f083 0301 	eor.w	r3, r3, #1
 8012aee:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8012af0:	2b00      	cmp	r3, #0
 8012af2:	d013      	beq.n	8012b1c <RegionCommonUpdateBandTimeOff+0xcc>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8012af4:	79fb      	ldrb	r3, [r7, #7]
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	d010      	beq.n	8012b1c <RegionCommonUpdateBandTimeOff+0xcc>
        {
            bands[i].ReadyForTransmission = true;
 8012afa:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8012afe:	4613      	mov	r3, r2
 8012b00:	005b      	lsls	r3, r3, #1
 8012b02:	4413      	add	r3, r2
 8012b04:	00db      	lsls	r3, r3, #3
 8012b06:	461a      	mov	r2, r3
 8012b08:	683b      	ldr	r3, [r7, #0]
 8012b0a:	4413      	add	r3, r2
 8012b0c:	2201      	movs	r2, #1
 8012b0e:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 8012b10:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012b14:	3301      	adds	r3, #1
 8012b16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8012b1a:	e06c      	b.n	8012bf6 <RegionCommonUpdateBandTimeOff+0x1a6>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 8012b1c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8012b20:	4613      	mov	r3, r2
 8012b22:	005b      	lsls	r3, r3, #1
 8012b24:	4413      	add	r3, r2
 8012b26:	00db      	lsls	r3, r3, #3
 8012b28:	461a      	mov	r2, r3
 8012b2a:	683b      	ldr	r3, [r7, #0]
 8012b2c:	4413      	add	r3, r2
 8012b2e:	2200      	movs	r2, #0
 8012b30:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits > creditCosts )
 8012b32:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8012b36:	4613      	mov	r3, r2
 8012b38:	005b      	lsls	r3, r3, #1
 8012b3a:	4413      	add	r3, r2
 8012b3c:	00db      	lsls	r3, r3, #3
 8012b3e:	461a      	mov	r2, r3
 8012b40:	683b      	ldr	r3, [r7, #0]
 8012b42:	4413      	add	r3, r2
 8012b44:	691b      	ldr	r3, [r3, #16]
 8012b46:	69ba      	ldr	r2, [r7, #24]
 8012b48:	429a      	cmp	r2, r3
 8012b4a:	d215      	bcs.n	8012b78 <RegionCommonUpdateBandTimeOff+0x128>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 8012b4c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8012b50:	4613      	mov	r3, r2
 8012b52:	005b      	lsls	r3, r3, #1
 8012b54:	4413      	add	r3, r2
 8012b56:	00db      	lsls	r3, r3, #3
 8012b58:	461a      	mov	r2, r3
 8012b5a:	683b      	ldr	r3, [r7, #0]
 8012b5c:	4413      	add	r3, r2
 8012b5e:	68db      	ldr	r3, [r3, #12]
 8012b60:	69ba      	ldr	r2, [r7, #24]
 8012b62:	1ad3      	subs	r3, r2, r3
 8012b64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012b66:	4293      	cmp	r3, r2
 8012b68:	bf28      	it	cs
 8012b6a:	4613      	movcs	r3, r2
 8012b6c:	627b      	str	r3, [r7, #36]	; 0x24
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 8012b6e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012b72:	3301      	adds	r3, #1
 8012b74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 8012b78:	79fb      	ldrb	r3, [r7, #7]
 8012b7a:	f083 0301 	eor.w	r3, r3, #1
 8012b7e:	b2db      	uxtb	r3, r3
 8012b80:	2b00      	cmp	r3, #0
 8012b82:	d038      	beq.n	8012bf6 <RegionCommonUpdateBandTimeOff+0x1a6>
            {
                SysTime_t backoffTimeRange = {
 8012b84:	2300      	movs	r3, #0
 8012b86:	60fb      	str	r3, [r7, #12]
 8012b88:	2300      	movs	r3, #0
 8012b8a:	823b      	strh	r3, [r7, #16]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 8012b8c:	8afb      	ldrh	r3, [r7, #22]
 8012b8e:	2b64      	cmp	r3, #100	; 0x64
 8012b90:	d103      	bne.n	8012b9a <RegionCommonUpdateBandTimeOff+0x14a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 8012b92:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8012b96:	60fb      	str	r3, [r7, #12]
 8012b98:	e009      	b.n	8012bae <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8012b9a:	8afb      	ldrh	r3, [r7, #22]
 8012b9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8012ba0:	d103      	bne.n	8012baa <RegionCommonUpdateBandTimeOff+0x15a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 8012ba2:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 8012ba6:	60fb      	str	r3, [r7, #12]
 8012ba8:	e001      	b.n	8012bae <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8012baa:	4b1e      	ldr	r3, [pc, #120]	; (8012c24 <RegionCommonUpdateBandTimeOff+0x1d4>)
 8012bac:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8012bae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012bb0:	4a1c      	ldr	r2, [pc, #112]	; (8012c24 <RegionCommonUpdateBandTimeOff+0x1d4>)
 8012bb2:	4293      	cmp	r3, r2
 8012bb4:	d90e      	bls.n	8012bd4 <RegionCommonUpdateBandTimeOff+0x184>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 8012bb6:	68fa      	ldr	r2, [r7, #12]
 8012bb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012bba:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 8012bbe:	3b30      	subs	r3, #48	; 0x30
 8012bc0:	4919      	ldr	r1, [pc, #100]	; (8012c28 <RegionCommonUpdateBandTimeOff+0x1d8>)
 8012bc2:	fba1 1303 	umull	r1, r3, r1, r3
 8012bc6:	0c1b      	lsrs	r3, r3, #16
 8012bc8:	3301      	adds	r3, #1
 8012bca:	4918      	ldr	r1, [pc, #96]	; (8012c2c <RegionCommonUpdateBandTimeOff+0x1dc>)
 8012bcc:	fb01 f303 	mul.w	r3, r1, r3
 8012bd0:	4413      	add	r3, r2
 8012bd2:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 8012bd4:	f107 000c 	add.w	r0, r7, #12
 8012bd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012bda:	9300      	str	r3, [sp, #0]
 8012bdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012bde:	f107 020c 	add.w	r2, r7, #12
 8012be2:	ca06      	ldmia	r2, {r1, r2}
 8012be4:	f005 f807 	bl	8017bf6 <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 8012be8:	f107 030c 	add.w	r3, r7, #12
 8012bec:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012bf0:	f005 f8c0 	bl	8017d74 <SysTimeToMs>
 8012bf4:	6278      	str	r0, [r7, #36]	; 0x24
    for( uint8_t i = 0; i < nbBands; i++ )
 8012bf6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012bfa:	3301      	adds	r3, #1
 8012bfc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8012c00:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8012c04:	79bb      	ldrb	r3, [r7, #6]
 8012c06:	429a      	cmp	r2, r3
 8012c08:	f4ff af3f 	bcc.w	8012a8a <RegionCommonUpdateBandTimeOff+0x3a>
            }
        }
    }


    if( validBands == 0 )
 8012c0c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012c10:	2b00      	cmp	r3, #0
 8012c12:	d102      	bne.n	8012c1a <RegionCommonUpdateBandTimeOff+0x1ca>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 8012c14:	f04f 33ff 	mov.w	r3, #4294967295
 8012c18:	e000      	b.n	8012c1c <RegionCommonUpdateBandTimeOff+0x1cc>
    }
    return minTimeToWait;
 8012c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012c1c:	4618      	mov	r0, r3
 8012c1e:	372c      	adds	r7, #44	; 0x2c
 8012c20:	46bd      	mov	sp, r7
 8012c22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012c24:	0001ec30 	.word	0x0001ec30
 8012c28:	c22e4507 	.word	0xc22e4507
 8012c2c:	00015180 	.word	0x00015180

08012c30 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 8012c30:	b480      	push	{r7}
 8012c32:	b085      	sub	sp, #20
 8012c34:	af00      	add	r7, sp, #0
 8012c36:	6078      	str	r0, [r7, #4]
 8012c38:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 8012c3a:	2300      	movs	r3, #0
 8012c3c:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	781b      	ldrb	r3, [r3, #0]
 8012c42:	2b03      	cmp	r3, #3
 8012c44:	d13f      	bne.n	8012cc6 <RegionCommonParseLinkAdrReq+0x96>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	3301      	adds	r3, #1
 8012c4a:	781b      	ldrb	r3, [r3, #0]
 8012c4c:	b25a      	sxtb	r2, r3
 8012c4e:	683b      	ldr	r3, [r7, #0]
 8012c50:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 8012c52:	683b      	ldr	r3, [r7, #0]
 8012c54:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8012c58:	f003 030f 	and.w	r3, r3, #15
 8012c5c:	b25a      	sxtb	r2, r3
 8012c5e:	683b      	ldr	r3, [r7, #0]
 8012c60:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 8012c62:	683b      	ldr	r3, [r7, #0]
 8012c64:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8012c68:	b2db      	uxtb	r3, r3
 8012c6a:	091b      	lsrs	r3, r3, #4
 8012c6c:	b2db      	uxtb	r3, r3
 8012c6e:	b25a      	sxtb	r2, r3
 8012c70:	683b      	ldr	r3, [r7, #0]
 8012c72:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	3302      	adds	r3, #2
 8012c78:	781b      	ldrb	r3, [r3, #0]
 8012c7a:	b29a      	uxth	r2, r3
 8012c7c:	683b      	ldr	r3, [r7, #0]
 8012c7e:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 8012c80:	683b      	ldr	r3, [r7, #0]
 8012c82:	889b      	ldrh	r3, [r3, #4]
 8012c84:	b21a      	sxth	r2, r3
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	3303      	adds	r3, #3
 8012c8a:	781b      	ldrb	r3, [r3, #0]
 8012c8c:	021b      	lsls	r3, r3, #8
 8012c8e:	b21b      	sxth	r3, r3
 8012c90:	4313      	orrs	r3, r2
 8012c92:	b21b      	sxth	r3, r3
 8012c94:	b29a      	uxth	r2, r3
 8012c96:	683b      	ldr	r3, [r7, #0]
 8012c98:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	791a      	ldrb	r2, [r3, #4]
 8012c9e:	683b      	ldr	r3, [r7, #0]
 8012ca0:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 8012ca2:	683b      	ldr	r3, [r7, #0]
 8012ca4:	781b      	ldrb	r3, [r3, #0]
 8012ca6:	091b      	lsrs	r3, r3, #4
 8012ca8:	b2db      	uxtb	r3, r3
 8012caa:	f003 0307 	and.w	r3, r3, #7
 8012cae:	b2da      	uxtb	r2, r3
 8012cb0:	683b      	ldr	r3, [r7, #0]
 8012cb2:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 8012cb4:	683b      	ldr	r3, [r7, #0]
 8012cb6:	781b      	ldrb	r3, [r3, #0]
 8012cb8:	f003 030f 	and.w	r3, r3, #15
 8012cbc:	b2da      	uxtb	r2, r3
 8012cbe:	683b      	ldr	r3, [r7, #0]
 8012cc0:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 8012cc2:	2305      	movs	r3, #5
 8012cc4:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 8012cc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8012cc8:	4618      	mov	r0, r3
 8012cca:	3714      	adds	r7, #20
 8012ccc:	46bd      	mov	sp, r7
 8012cce:	bc80      	pop	{r7}
 8012cd0:	4770      	bx	lr

08012cd2 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 8012cd2:	b5b0      	push	{r4, r5, r7, lr}
 8012cd4:	b088      	sub	sp, #32
 8012cd6:	af02      	add	r7, sp, #8
 8012cd8:	60f8      	str	r0, [r7, #12]
 8012cda:	60b9      	str	r1, [r7, #8]
 8012cdc:	607a      	str	r2, [r7, #4]
 8012cde:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 8012ce0:	68fb      	ldr	r3, [r7, #12]
 8012ce2:	791b      	ldrb	r3, [r3, #4]
 8012ce4:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 8012ce6:	68fb      	ldr	r3, [r7, #12]
 8012ce8:	799b      	ldrb	r3, [r3, #6]
 8012cea:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 8012cec:	68fb      	ldr	r3, [r7, #12]
 8012cee:	79db      	ldrb	r3, [r3, #7]
 8012cf0:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 8012cf2:	68fb      	ldr	r3, [r7, #12]
 8012cf4:	7a1b      	ldrb	r3, [r3, #8]
 8012cf6:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 8012cf8:	68fb      	ldr	r3, [r7, #12]
 8012cfa:	795b      	ldrb	r3, [r3, #5]
 8012cfc:	f083 0301 	eor.w	r3, r3, #1
 8012d00:	b2db      	uxtb	r3, r3
 8012d02:	2b00      	cmp	r3, #0
 8012d04:	d008      	beq.n	8012d18 <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 8012d06:	68fb      	ldr	r3, [r7, #12]
 8012d08:	7adb      	ldrb	r3, [r3, #11]
 8012d0a:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 8012d0c:	68fb      	ldr	r3, [r7, #12]
 8012d0e:	7a5b      	ldrb	r3, [r3, #9]
 8012d10:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 8012d12:	68fb      	ldr	r3, [r7, #12]
 8012d14:	7a9b      	ldrb	r3, [r3, #10]
 8012d16:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 8012d18:	7dfb      	ldrb	r3, [r7, #23]
 8012d1a:	2b00      	cmp	r3, #0
 8012d1c:	d03a      	beq.n	8012d94 <RegionCommonLinkAdrReqVerifyParams+0xc2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8012d1e:	68fb      	ldr	r3, [r7, #12]
 8012d20:	7b18      	ldrb	r0, [r3, #12]
 8012d22:	68fb      	ldr	r3, [r7, #12]
 8012d24:	6919      	ldr	r1, [r3, #16]
 8012d26:	68fb      	ldr	r3, [r7, #12]
 8012d28:	f993 5014 	ldrsb.w	r5, [r3, #20]
 8012d2c:	68fb      	ldr	r3, [r7, #12]
 8012d2e:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8012d32:	68fa      	ldr	r2, [r7, #12]
 8012d34:	6992      	ldr	r2, [r2, #24]
 8012d36:	f997 4016 	ldrsb.w	r4, [r7, #22]
 8012d3a:	9201      	str	r2, [sp, #4]
 8012d3c:	9300      	str	r3, [sp, #0]
 8012d3e:	462b      	mov	r3, r5
 8012d40:	4622      	mov	r2, r4
 8012d42:	f7ff fd42 	bl	80127ca <RegionCommonChanVerifyDr>
 8012d46:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 8012d48:	f083 0301 	eor.w	r3, r3, #1
 8012d4c:	b2db      	uxtb	r3, r3
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8012d4e:	2b00      	cmp	r3, #0
 8012d50:	d003      	beq.n	8012d5a <RegionCommonLinkAdrReqVerifyParams+0x88>
        {
            status &= 0xFD; // Datarate KO
 8012d52:	7dfb      	ldrb	r3, [r7, #23]
 8012d54:	f023 0302 	bic.w	r3, r3, #2
 8012d58:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 8012d5a:	68fb      	ldr	r3, [r7, #12]
 8012d5c:	f993 101d 	ldrsb.w	r1, [r3, #29]
 8012d60:	68fb      	ldr	r3, [r7, #12]
 8012d62:	f993 201c 	ldrsb.w	r2, [r3, #28]
 8012d66:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8012d6a:	4618      	mov	r0, r3
 8012d6c:	f7ff fd9f 	bl	80128ae <RegionCommonValueInRange>
 8012d70:	4603      	mov	r3, r0
 8012d72:	2b00      	cmp	r3, #0
 8012d74:	d10e      	bne.n	8012d94 <RegionCommonLinkAdrReqVerifyParams+0xc2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 8012d76:	68fb      	ldr	r3, [r7, #12]
 8012d78:	f993 301d 	ldrsb.w	r3, [r3, #29]
 8012d7c:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8012d80:	429a      	cmp	r2, r3
 8012d82:	da03      	bge.n	8012d8c <RegionCommonLinkAdrReqVerifyParams+0xba>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 8012d84:	68fb      	ldr	r3, [r7, #12]
 8012d86:	7f5b      	ldrb	r3, [r3, #29]
 8012d88:	757b      	strb	r3, [r7, #21]
 8012d8a:	e003      	b.n	8012d94 <RegionCommonLinkAdrReqVerifyParams+0xc2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 8012d8c:	7dfb      	ldrb	r3, [r7, #23]
 8012d8e:	f023 0304 	bic.w	r3, r3, #4
 8012d92:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 8012d94:	7dfb      	ldrb	r3, [r7, #23]
 8012d96:	2b07      	cmp	r3, #7
 8012d98:	d105      	bne.n	8012da6 <RegionCommonLinkAdrReqVerifyParams+0xd4>
    {
        if( nbRepetitions == 0 )
 8012d9a:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8012d9e:	2b00      	cmp	r3, #0
 8012da0:	d101      	bne.n	8012da6 <RegionCommonLinkAdrReqVerifyParams+0xd4>
        { // Restore the default value according to the LoRaWAN specification
            nbRepetitions = 1;
 8012da2:	2301      	movs	r3, #1
 8012da4:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 8012da6:	68bb      	ldr	r3, [r7, #8]
 8012da8:	7dba      	ldrb	r2, [r7, #22]
 8012daa:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	7d7a      	ldrb	r2, [r7, #21]
 8012db0:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 8012db2:	7d3a      	ldrb	r2, [r7, #20]
 8012db4:	683b      	ldr	r3, [r7, #0]
 8012db6:	701a      	strb	r2, [r3, #0]

    return status;
 8012db8:	7dfb      	ldrb	r3, [r7, #23]
}
 8012dba:	4618      	mov	r0, r3
 8012dbc:	3718      	adds	r7, #24
 8012dbe:	46bd      	mov	sp, r7
 8012dc0:	bdb0      	pop	{r4, r5, r7, pc}
	...

08012dc4 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 8012dc4:	b480      	push	{r7}
 8012dc6:	b083      	sub	sp, #12
 8012dc8:	af00      	add	r7, sp, #0
 8012dca:	4603      	mov	r3, r0
 8012dcc:	6039      	str	r1, [r7, #0]
 8012dce:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 8012dd0:	79fb      	ldrb	r3, [r7, #7]
 8012dd2:	4a06      	ldr	r2, [pc, #24]	; (8012dec <RegionCommonComputeSymbolTimeLoRa+0x28>)
 8012dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8012dd8:	461a      	mov	r2, r3
 8012dda:	683b      	ldr	r3, [r7, #0]
 8012ddc:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8012de0:	4618      	mov	r0, r3
 8012de2:	370c      	adds	r7, #12
 8012de4:	46bd      	mov	sp, r7
 8012de6:	bc80      	pop	{r7}
 8012de8:	4770      	bx	lr
 8012dea:	bf00      	nop
 8012dec:	000f4240 	.word	0x000f4240

08012df0 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 8012df0:	b480      	push	{r7}
 8012df2:	b083      	sub	sp, #12
 8012df4:	af00      	add	r7, sp, #0
 8012df6:	4603      	mov	r3, r0
 8012df8:	71fb      	strb	r3, [r7, #7]
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 8012dfa:	79fb      	ldrb	r3, [r7, #7]
 8012dfc:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8012e00:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8012e04:	4618      	mov	r0, r3
 8012e06:	370c      	adds	r7, #12
 8012e08:	46bd      	mov	sp, r7
 8012e0a:	bc80      	pop	{r7}
 8012e0c:	4770      	bx	lr
	...

08012e10 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 8012e10:	b480      	push	{r7}
 8012e12:	b085      	sub	sp, #20
 8012e14:	af00      	add	r7, sp, #0
 8012e16:	60f8      	str	r0, [r7, #12]
 8012e18:	607a      	str	r2, [r7, #4]
 8012e1a:	603b      	str	r3, [r7, #0]
 8012e1c:	460b      	mov	r3, r1
 8012e1e:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 8012e20:	7afa      	ldrb	r2, [r7, #11]
 8012e22:	7afb      	ldrb	r3, [r7, #11]
 8012e24:	3b04      	subs	r3, #4
 8012e26:	4619      	mov	r1, r3
 8012e28:	68fb      	ldr	r3, [r7, #12]
 8012e2a:	fb03 f101 	mul.w	r1, r3, r1
 8012e2e:	687b      	ldr	r3, [r7, #4]
 8012e30:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8012e34:	fb00 f303 	mul.w	r3, r0, r3
 8012e38:	440b      	add	r3, r1
 8012e3a:	005b      	lsls	r3, r3, #1
 8012e3c:	2b00      	cmp	r3, #0
 8012e3e:	d013      	beq.n	8012e68 <RegionCommonComputeRxWindowParameters+0x58>
 8012e40:	7afb      	ldrb	r3, [r7, #11]
 8012e42:	3b04      	subs	r3, #4
 8012e44:	4619      	mov	r1, r3
 8012e46:	68fb      	ldr	r3, [r7, #12]
 8012e48:	fb03 f101 	mul.w	r1, r3, r1
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8012e52:	fb00 f303 	mul.w	r3, r0, r3
 8012e56:	440b      	add	r3, r1
 8012e58:	0059      	lsls	r1, r3, #1
 8012e5a:	68fb      	ldr	r3, [r7, #12]
 8012e5c:	440b      	add	r3, r1
 8012e5e:	1e59      	subs	r1, r3, #1
 8012e60:	68fb      	ldr	r3, [r7, #12]
 8012e62:	fbb1 f3f3 	udiv	r3, r1, r3
 8012e66:	e00f      	b.n	8012e88 <RegionCommonComputeRxWindowParameters+0x78>
 8012e68:	7afb      	ldrb	r3, [r7, #11]
 8012e6a:	3b04      	subs	r3, #4
 8012e6c:	4619      	mov	r1, r3
 8012e6e:	68fb      	ldr	r3, [r7, #12]
 8012e70:	fb03 f101 	mul.w	r1, r3, r1
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8012e7a:	fb00 f303 	mul.w	r3, r0, r3
 8012e7e:	440b      	add	r3, r1
 8012e80:	0059      	lsls	r1, r3, #1
 8012e82:	68fb      	ldr	r3, [r7, #12]
 8012e84:	fbb1 f3f3 	udiv	r3, r1, r3
 8012e88:	429a      	cmp	r2, r3
 8012e8a:	bf38      	it	cc
 8012e8c:	461a      	movcc	r2, r3
 8012e8e:	69bb      	ldr	r3, [r7, #24]
 8012e90:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 8012e92:	68fb      	ldr	r3, [r7, #12]
 8012e94:	009b      	lsls	r3, r3, #2
 8012e96:	4619      	mov	r1, r3
 8012e98:	69bb      	ldr	r3, [r7, #24]
 8012e9a:	681b      	ldr	r3, [r3, #0]
 8012e9c:	68fa      	ldr	r2, [r7, #12]
 8012e9e:	fb02 f303 	mul.w	r3, r2, r3
 8012ea2:	2b00      	cmp	r3, #0
 8012ea4:	d007      	beq.n	8012eb6 <RegionCommonComputeRxWindowParameters+0xa6>
 8012ea6:	69bb      	ldr	r3, [r7, #24]
 8012ea8:	681b      	ldr	r3, [r3, #0]
 8012eaa:	68fa      	ldr	r2, [r7, #12]
 8012eac:	fb02 f303 	mul.w	r3, r2, r3
 8012eb0:	3301      	adds	r3, #1
 8012eb2:	085b      	lsrs	r3, r3, #1
 8012eb4:	e005      	b.n	8012ec2 <RegionCommonComputeRxWindowParameters+0xb2>
 8012eb6:	69bb      	ldr	r3, [r7, #24]
 8012eb8:	681b      	ldr	r3, [r3, #0]
 8012eba:	68fa      	ldr	r2, [r7, #12]
 8012ebc:	fb02 f303 	mul.w	r3, r2, r3
 8012ec0:	085b      	lsrs	r3, r3, #1
 8012ec2:	1acb      	subs	r3, r1, r3
 8012ec4:	683a      	ldr	r2, [r7, #0]
 8012ec6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8012eca:	fb01 f202 	mul.w	r2, r1, r2
 8012ece:	1a9b      	subs	r3, r3, r2
 8012ed0:	2b00      	cmp	r3, #0
 8012ed2:	dd27      	ble.n	8012f24 <RegionCommonComputeRxWindowParameters+0x114>
 8012ed4:	68fb      	ldr	r3, [r7, #12]
 8012ed6:	009b      	lsls	r3, r3, #2
 8012ed8:	4619      	mov	r1, r3
 8012eda:	69bb      	ldr	r3, [r7, #24]
 8012edc:	681b      	ldr	r3, [r3, #0]
 8012ede:	68fa      	ldr	r2, [r7, #12]
 8012ee0:	fb02 f303 	mul.w	r3, r2, r3
 8012ee4:	2b00      	cmp	r3, #0
 8012ee6:	d007      	beq.n	8012ef8 <RegionCommonComputeRxWindowParameters+0xe8>
 8012ee8:	69bb      	ldr	r3, [r7, #24]
 8012eea:	681b      	ldr	r3, [r3, #0]
 8012eec:	68fa      	ldr	r2, [r7, #12]
 8012eee:	fb02 f303 	mul.w	r3, r2, r3
 8012ef2:	3301      	adds	r3, #1
 8012ef4:	085b      	lsrs	r3, r3, #1
 8012ef6:	e005      	b.n	8012f04 <RegionCommonComputeRxWindowParameters+0xf4>
 8012ef8:	69bb      	ldr	r3, [r7, #24]
 8012efa:	681b      	ldr	r3, [r3, #0]
 8012efc:	68fa      	ldr	r2, [r7, #12]
 8012efe:	fb02 f303 	mul.w	r3, r2, r3
 8012f02:	085b      	lsrs	r3, r3, #1
 8012f04:	1acb      	subs	r3, r1, r3
 8012f06:	683a      	ldr	r2, [r7, #0]
 8012f08:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8012f0c:	fb01 f202 	mul.w	r2, r1, r2
 8012f10:	1a9b      	subs	r3, r3, r2
 8012f12:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 8012f16:	4a19      	ldr	r2, [pc, #100]	; (8012f7c <RegionCommonComputeRxWindowParameters+0x16c>)
 8012f18:	fb82 1203 	smull	r1, r2, r2, r3
 8012f1c:	1192      	asrs	r2, r2, #6
 8012f1e:	17db      	asrs	r3, r3, #31
 8012f20:	1ad3      	subs	r3, r2, r3
 8012f22:	e024      	b.n	8012f6e <RegionCommonComputeRxWindowParameters+0x15e>
 8012f24:	68fb      	ldr	r3, [r7, #12]
 8012f26:	009b      	lsls	r3, r3, #2
 8012f28:	4619      	mov	r1, r3
 8012f2a:	69bb      	ldr	r3, [r7, #24]
 8012f2c:	681b      	ldr	r3, [r3, #0]
 8012f2e:	68fa      	ldr	r2, [r7, #12]
 8012f30:	fb02 f303 	mul.w	r3, r2, r3
 8012f34:	2b00      	cmp	r3, #0
 8012f36:	d007      	beq.n	8012f48 <RegionCommonComputeRxWindowParameters+0x138>
 8012f38:	69bb      	ldr	r3, [r7, #24]
 8012f3a:	681b      	ldr	r3, [r3, #0]
 8012f3c:	68fa      	ldr	r2, [r7, #12]
 8012f3e:	fb02 f303 	mul.w	r3, r2, r3
 8012f42:	3301      	adds	r3, #1
 8012f44:	085b      	lsrs	r3, r3, #1
 8012f46:	e005      	b.n	8012f54 <RegionCommonComputeRxWindowParameters+0x144>
 8012f48:	69bb      	ldr	r3, [r7, #24]
 8012f4a:	681b      	ldr	r3, [r3, #0]
 8012f4c:	68fa      	ldr	r2, [r7, #12]
 8012f4e:	fb02 f303 	mul.w	r3, r2, r3
 8012f52:	085b      	lsrs	r3, r3, #1
 8012f54:	1acb      	subs	r3, r1, r3
 8012f56:	683a      	ldr	r2, [r7, #0]
 8012f58:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8012f5c:	fb01 f202 	mul.w	r2, r1, r2
 8012f60:	1a9b      	subs	r3, r3, r2
 8012f62:	4a06      	ldr	r2, [pc, #24]	; (8012f7c <RegionCommonComputeRxWindowParameters+0x16c>)
 8012f64:	fb82 1203 	smull	r1, r2, r2, r3
 8012f68:	1192      	asrs	r2, r2, #6
 8012f6a:	17db      	asrs	r3, r3, #31
 8012f6c:	1ad3      	subs	r3, r2, r3
 8012f6e:	69fa      	ldr	r2, [r7, #28]
 8012f70:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 8012f72:	bf00      	nop
 8012f74:	3714      	adds	r7, #20
 8012f76:	46bd      	mov	sp, r7
 8012f78:	bc80      	pop	{r7}
 8012f7a:	4770      	bx	lr
 8012f7c:	10624dd3 	.word	0x10624dd3

08012f80 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 8012f80:	b580      	push	{r7, lr}
 8012f82:	b086      	sub	sp, #24
 8012f84:	af00      	add	r7, sp, #0
 8012f86:	4603      	mov	r3, r0
 8012f88:	60b9      	str	r1, [r7, #8]
 8012f8a:	607a      	str	r2, [r7, #4]
 8012f8c:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8012f8e:	2300      	movs	r3, #0
 8012f90:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 8012f92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012f96:	005b      	lsls	r3, r3, #1
 8012f98:	4618      	mov	r0, r3
 8012f9a:	f7ed fc17 	bl	80007cc <__aeabi_ui2f>
 8012f9e:	4603      	mov	r3, r0
 8012fa0:	4619      	mov	r1, r3
 8012fa2:	68b8      	ldr	r0, [r7, #8]
 8012fa4:	f7ed fb60 	bl	8000668 <__aeabi_fsub>
 8012fa8:	4603      	mov	r3, r0
 8012faa:	6879      	ldr	r1, [r7, #4]
 8012fac:	4618      	mov	r0, r3
 8012fae:	f7ed fb5b 	bl	8000668 <__aeabi_fsub>
 8012fb2:	4603      	mov	r3, r0
 8012fb4:	4618      	mov	r0, r3
 8012fb6:	f7ed fa4b 	bl	8000450 <__aeabi_f2d>
 8012fba:	4602      	mov	r2, r0
 8012fbc:	460b      	mov	r3, r1
 8012fbe:	4610      	mov	r0, r2
 8012fc0:	4619      	mov	r1, r3
 8012fc2:	f006 f859 	bl	8019078 <floor>
 8012fc6:	4602      	mov	r2, r0
 8012fc8:	460b      	mov	r3, r1
 8012fca:	4610      	mov	r0, r2
 8012fcc:	4619      	mov	r1, r3
 8012fce:	f7ed fb1f 	bl	8000610 <__aeabi_d2iz>
 8012fd2:	4603      	mov	r3, r0
 8012fd4:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 8012fd6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012fda:	4618      	mov	r0, r3
 8012fdc:	3718      	adds	r7, #24
 8012fde:	46bd      	mov	sp, r7
 8012fe0:	bd80      	pop	{r7, pc}

08012fe2 <RegionCommonCountNbOfEnabledChannels>:
    /* ST_WORKAROUND_END */
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 8012fe2:	b590      	push	{r4, r7, lr}
 8012fe4:	b087      	sub	sp, #28
 8012fe6:	af00      	add	r7, sp, #0
 8012fe8:	60f8      	str	r0, [r7, #12]
 8012fea:	60b9      	str	r1, [r7, #8]
 8012fec:	607a      	str	r2, [r7, #4]
 8012fee:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 8012ff0:	2300      	movs	r3, #0
 8012ff2:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 8012ff4:	2300      	movs	r3, #0
 8012ff6:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8012ff8:	2300      	movs	r3, #0
 8012ffa:	757b      	strb	r3, [r7, #21]
 8012ffc:	2300      	movs	r3, #0
 8012ffe:	753b      	strb	r3, [r7, #20]
 8013000:	e09c      	b.n	801313c <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8013002:	2300      	movs	r3, #0
 8013004:	74fb      	strb	r3, [r7, #19]
 8013006:	e08f      	b.n	8013128 <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 8013008:	68fb      	ldr	r3, [r7, #12]
 801300a:	685a      	ldr	r2, [r3, #4]
 801300c:	7d3b      	ldrb	r3, [r7, #20]
 801300e:	005b      	lsls	r3, r3, #1
 8013010:	4413      	add	r3, r2
 8013012:	881b      	ldrh	r3, [r3, #0]
 8013014:	461a      	mov	r2, r3
 8013016:	7cfb      	ldrb	r3, [r7, #19]
 8013018:	fa42 f303 	asr.w	r3, r2, r3
 801301c:	f003 0301 	and.w	r3, r3, #1
 8013020:	2b00      	cmp	r3, #0
 8013022:	d07e      	beq.n	8013122 <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 8013024:	68fb      	ldr	r3, [r7, #12]
 8013026:	689a      	ldr	r2, [r3, #8]
 8013028:	7d79      	ldrb	r1, [r7, #21]
 801302a:	7cfb      	ldrb	r3, [r7, #19]
 801302c:	440b      	add	r3, r1
 801302e:	4619      	mov	r1, r3
 8013030:	460b      	mov	r3, r1
 8013032:	005b      	lsls	r3, r3, #1
 8013034:	440b      	add	r3, r1
 8013036:	009b      	lsls	r3, r3, #2
 8013038:	4413      	add	r3, r2
 801303a:	681b      	ldr	r3, [r3, #0]
 801303c:	2b00      	cmp	r3, #0
 801303e:	d06b      	beq.n	8013118 <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8013040:	68fb      	ldr	r3, [r7, #12]
 8013042:	781b      	ldrb	r3, [r3, #0]
 8013044:	f083 0301 	eor.w	r3, r3, #1
 8013048:	b2db      	uxtb	r3, r3
 801304a:	2b00      	cmp	r3, #0
 801304c:	d011      	beq.n	8013072 <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 801304e:	68fb      	ldr	r3, [r7, #12]
 8013050:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8013052:	2b00      	cmp	r3, #0
 8013054:	d00d      	beq.n	8013072 <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 8013056:	68fb      	ldr	r3, [r7, #12]
 8013058:	695a      	ldr	r2, [r3, #20]
 801305a:	7d3b      	ldrb	r3, [r7, #20]
 801305c:	005b      	lsls	r3, r3, #1
 801305e:	4413      	add	r3, r2
 8013060:	881b      	ldrh	r3, [r3, #0]
 8013062:	461a      	mov	r2, r3
 8013064:	7cfb      	ldrb	r3, [r7, #19]
 8013066:	fa42 f303 	asr.w	r3, r2, r3
 801306a:	f003 0301 	and.w	r3, r3, #1
 801306e:	2b00      	cmp	r3, #0
 8013070:	d054      	beq.n	801311c <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8013072:	68fb      	ldr	r3, [r7, #12]
 8013074:	785b      	ldrb	r3, [r3, #1]
 8013076:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 8013078:	68fb      	ldr	r3, [r7, #12]
 801307a:	689a      	ldr	r2, [r3, #8]
 801307c:	7d79      	ldrb	r1, [r7, #21]
 801307e:	7cfb      	ldrb	r3, [r7, #19]
 8013080:	440b      	add	r3, r1
 8013082:	4619      	mov	r1, r3
 8013084:	460b      	mov	r3, r1
 8013086:	005b      	lsls	r3, r3, #1
 8013088:	440b      	add	r3, r1
 801308a:	009b      	lsls	r3, r3, #2
 801308c:	4413      	add	r3, r2
 801308e:	7a1b      	ldrb	r3, [r3, #8]
 8013090:	f343 0303 	sbfx	r3, r3, #0, #4
 8013094:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8013096:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 8013098:	68fb      	ldr	r3, [r7, #12]
 801309a:	689a      	ldr	r2, [r3, #8]
 801309c:	7d79      	ldrb	r1, [r7, #21]
 801309e:	7cfb      	ldrb	r3, [r7, #19]
 80130a0:	440b      	add	r3, r1
 80130a2:	4619      	mov	r1, r3
 80130a4:	460b      	mov	r3, r1
 80130a6:	005b      	lsls	r3, r3, #1
 80130a8:	440b      	add	r3, r1
 80130aa:	009b      	lsls	r3, r3, #2
 80130ac:	4413      	add	r3, r2
 80130ae:	7a1b      	ldrb	r3, [r3, #8]
 80130b0:	f343 1303 	sbfx	r3, r3, #4, #4
 80130b4:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 80130b6:	461a      	mov	r2, r3
 80130b8:	4621      	mov	r1, r4
 80130ba:	f7ff fbf8 	bl	80128ae <RegionCommonValueInRange>
 80130be:	4603      	mov	r3, r0
 80130c0:	2b00      	cmp	r3, #0
 80130c2:	d02d      	beq.n	8013120 <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 80130c4:	68fb      	ldr	r3, [r7, #12]
 80130c6:	68da      	ldr	r2, [r3, #12]
 80130c8:	68fb      	ldr	r3, [r7, #12]
 80130ca:	6899      	ldr	r1, [r3, #8]
 80130cc:	7d78      	ldrb	r0, [r7, #21]
 80130ce:	7cfb      	ldrb	r3, [r7, #19]
 80130d0:	4403      	add	r3, r0
 80130d2:	4618      	mov	r0, r3
 80130d4:	4603      	mov	r3, r0
 80130d6:	005b      	lsls	r3, r3, #1
 80130d8:	4403      	add	r3, r0
 80130da:	009b      	lsls	r3, r3, #2
 80130dc:	440b      	add	r3, r1
 80130de:	7a5b      	ldrb	r3, [r3, #9]
 80130e0:	4619      	mov	r1, r3
 80130e2:	460b      	mov	r3, r1
 80130e4:	005b      	lsls	r3, r3, #1
 80130e6:	440b      	add	r3, r1
 80130e8:	00db      	lsls	r3, r3, #3
 80130ea:	4413      	add	r3, r2
 80130ec:	7d1b      	ldrb	r3, [r3, #20]
 80130ee:	f083 0301 	eor.w	r3, r3, #1
 80130f2:	b2db      	uxtb	r3, r3
 80130f4:	2b00      	cmp	r3, #0
 80130f6:	d003      	beq.n	8013100 <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 80130f8:	7dbb      	ldrb	r3, [r7, #22]
 80130fa:	3301      	adds	r3, #1
 80130fc:	75bb      	strb	r3, [r7, #22]
                    continue;
 80130fe:	e010      	b.n	8013122 <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 8013100:	7dfb      	ldrb	r3, [r7, #23]
 8013102:	1c5a      	adds	r2, r3, #1
 8013104:	75fa      	strb	r2, [r7, #23]
 8013106:	461a      	mov	r2, r3
 8013108:	68bb      	ldr	r3, [r7, #8]
 801310a:	4413      	add	r3, r2
 801310c:	7d79      	ldrb	r1, [r7, #21]
 801310e:	7cfa      	ldrb	r2, [r7, #19]
 8013110:	440a      	add	r2, r1
 8013112:	b2d2      	uxtb	r2, r2
 8013114:	701a      	strb	r2, [r3, #0]
 8013116:	e004      	b.n	8013122 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8013118:	bf00      	nop
 801311a:	e002      	b.n	8013122 <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 801311c:	bf00      	nop
 801311e:	e000      	b.n	8013122 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8013120:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 8013122:	7cfb      	ldrb	r3, [r7, #19]
 8013124:	3301      	adds	r3, #1
 8013126:	74fb      	strb	r3, [r7, #19]
 8013128:	7cfb      	ldrb	r3, [r7, #19]
 801312a:	2b0f      	cmp	r3, #15
 801312c:	f67f af6c 	bls.w	8013008 <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8013130:	7d7b      	ldrb	r3, [r7, #21]
 8013132:	3310      	adds	r3, #16
 8013134:	757b      	strb	r3, [r7, #21]
 8013136:	7d3b      	ldrb	r3, [r7, #20]
 8013138:	3301      	adds	r3, #1
 801313a:	753b      	strb	r3, [r7, #20]
 801313c:	7d7b      	ldrb	r3, [r7, #21]
 801313e:	b29a      	uxth	r2, r3
 8013140:	68fb      	ldr	r3, [r7, #12]
 8013142:	8a1b      	ldrh	r3, [r3, #16]
 8013144:	429a      	cmp	r2, r3
 8013146:	f4ff af5c 	bcc.w	8013002 <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	7dfa      	ldrb	r2, [r7, #23]
 801314e:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 8013150:	683b      	ldr	r3, [r7, #0]
 8013152:	7dba      	ldrb	r2, [r7, #22]
 8013154:	701a      	strb	r2, [r3, #0]
}
 8013156:	bf00      	nop
 8013158:	371c      	adds	r7, #28
 801315a:	46bd      	mov	sp, r7
 801315c:	bd90      	pop	{r4, r7, pc}

0801315e <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 801315e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013160:	b08b      	sub	sp, #44	; 0x2c
 8013162:	af04      	add	r7, sp, #16
 8013164:	60f8      	str	r0, [r7, #12]
 8013166:	60b9      	str	r1, [r7, #8]
 8013168:	607a      	str	r2, [r7, #4]
 801316a:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 801316c:	68fb      	ldr	r3, [r7, #12]
 801316e:	685b      	ldr	r3, [r3, #4]
 8013170:	4618      	mov	r0, r3
 8013172:	f005 fc27 	bl	80189c4 <UTIL_TIMER_GetElapsedTime>
 8013176:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 8013178:	68fb      	ldr	r3, [r7, #12]
 801317a:	681a      	ldr	r2, [r3, #0]
 801317c:	697b      	ldr	r3, [r7, #20]
 801317e:	1ad2      	subs	r2, r2, r3
 8013180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013182:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 8013184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013186:	2201      	movs	r2, #1
 8013188:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 801318a:	683b      	ldr	r3, [r7, #0]
 801318c:	2200      	movs	r2, #0
 801318e:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8013190:	68fb      	ldr	r3, [r7, #12]
 8013192:	685b      	ldr	r3, [r3, #4]
 8013194:	2b00      	cmp	r3, #0
 8013196:	d004      	beq.n	80131a2 <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 8013198:	68fb      	ldr	r3, [r7, #12]
 801319a:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 801319c:	697a      	ldr	r2, [r7, #20]
 801319e:	429a      	cmp	r2, r3
 80131a0:	d32b      	bcc.n	80131fa <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 80131a2:	68bb      	ldr	r3, [r7, #8]
 80131a4:	2200      	movs	r2, #0
 80131a6:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 80131a8:	68fb      	ldr	r3, [r7, #12]
 80131aa:	69db      	ldr	r3, [r3, #28]
 80131ac:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 80131ae:	68fb      	ldr	r3, [r7, #12]
 80131b0:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 80131b2:	68dd      	ldr	r5, [r3, #12]
 80131b4:	68fb      	ldr	r3, [r7, #12]
 80131b6:	7a5e      	ldrb	r6, [r3, #9]
 80131b8:	68fb      	ldr	r3, [r7, #12]
 80131ba:	f893 c008 	ldrb.w	ip, [r3, #8]
 80131be:	68fb      	ldr	r3, [r7, #12]
 80131c0:	7d1b      	ldrb	r3, [r3, #20]
 80131c2:	68fa      	ldr	r2, [r7, #12]
 80131c4:	6992      	ldr	r2, [r2, #24]
 80131c6:	9203      	str	r2, [sp, #12]
 80131c8:	68fa      	ldr	r2, [r7, #12]
 80131ca:	f10d 0e04 	add.w	lr, sp, #4
 80131ce:	320c      	adds	r2, #12
 80131d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80131d4:	e88e 0003 	stmia.w	lr, {r0, r1}
 80131d8:	9300      	str	r3, [sp, #0]
 80131da:	4663      	mov	r3, ip
 80131dc:	4632      	mov	r2, r6
 80131de:	4629      	mov	r1, r5
 80131e0:	4620      	mov	r0, r4
 80131e2:	f7ff fc35 	bl	8012a50 <RegionCommonUpdateBandTimeOff>
 80131e6:	4602      	mov	r2, r0
 80131e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80131ea:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 80131ec:	68fb      	ldr	r3, [r7, #12]
 80131ee:	69d8      	ldr	r0, [r3, #28]
 80131f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131f2:	683a      	ldr	r2, [r7, #0]
 80131f4:	6879      	ldr	r1, [r7, #4]
 80131f6:	f7ff fef4 	bl	8012fe2 <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 80131fa:	683b      	ldr	r3, [r7, #0]
 80131fc:	781b      	ldrb	r3, [r3, #0]
 80131fe:	2b00      	cmp	r3, #0
 8013200:	d004      	beq.n	801320c <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 8013202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013204:	2200      	movs	r2, #0
 8013206:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8013208:	2300      	movs	r3, #0
 801320a:	e006      	b.n	801321a <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 801320c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801320e:	781b      	ldrb	r3, [r3, #0]
 8013210:	2b00      	cmp	r3, #0
 8013212:	d001      	beq.n	8013218 <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 8013214:	230b      	movs	r3, #11
 8013216:	e000      	b.n	801321a <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8013218:	230c      	movs	r3, #12
    }
}
 801321a:	4618      	mov	r0, r3
 801321c:	371c      	adds	r7, #28
 801321e:	46bd      	mov	sp, r7
 8013220:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013222 <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 8013222:	b5b0      	push	{r4, r5, r7, lr}
 8013224:	b086      	sub	sp, #24
 8013226:	af02      	add	r7, sp, #8
 8013228:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	781b      	ldrb	r3, [r3, #0]
 801322e:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	f993 2000 	ldrsb.w	r2, [r3]
 8013236:	687b      	ldr	r3, [r7, #4]
 8013238:	f993 3002 	ldrsb.w	r3, [r3, #2]
 801323c:	429a      	cmp	r2, r3
 801323e:	d103      	bne.n	8013248 <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8013246:	e026      	b.n	8013296 <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 8013248:	7bfb      	ldrb	r3, [r7, #15]
 801324a:	3b01      	subs	r3, #1
 801324c:	b2db      	uxtb	r3, r3
 801324e:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 8013250:	687b      	ldr	r3, [r7, #4]
 8013252:	f993 3002 	ldrsb.w	r3, [r3, #2]
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 8013256:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801325a:	429a      	cmp	r2, r3
 801325c:	d019      	beq.n	8013292 <RegionCommonGetNextLowerTxDr+0x70>
 801325e:	687b      	ldr	r3, [r7, #4]
 8013260:	78d8      	ldrb	r0, [r3, #3]
 8013262:	687b      	ldr	r3, [r7, #4]
 8013264:	6859      	ldr	r1, [r3, #4]
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	f993 5002 	ldrsb.w	r5, [r3, #2]
 801326c:	687b      	ldr	r3, [r7, #4]
 801326e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8013272:	687a      	ldr	r2, [r7, #4]
 8013274:	6892      	ldr	r2, [r2, #8]
 8013276:	f997 400f 	ldrsb.w	r4, [r7, #15]
 801327a:	9201      	str	r2, [sp, #4]
 801327c:	9300      	str	r3, [sp, #0]
 801327e:	462b      	mov	r3, r5
 8013280:	4622      	mov	r2, r4
 8013282:	f7ff faa2 	bl	80127ca <RegionCommonChanVerifyDr>
 8013286:	4603      	mov	r3, r0
 8013288:	f083 0301 	eor.w	r3, r3, #1
 801328c:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 801328e:	2b00      	cmp	r3, #0
 8013290:	d1da      	bne.n	8013248 <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 8013292:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 8013296:	4618      	mov	r0, r3
 8013298:	3710      	adds	r7, #16
 801329a:	46bd      	mov	sp, r7
 801329c:	bdb0      	pop	{r4, r5, r7, pc}

0801329e <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 801329e:	b480      	push	{r7}
 80132a0:	b083      	sub	sp, #12
 80132a2:	af00      	add	r7, sp, #0
 80132a4:	4603      	mov	r3, r0
 80132a6:	460a      	mov	r2, r1
 80132a8:	71fb      	strb	r3, [r7, #7]
 80132aa:	4613      	mov	r3, r2
 80132ac:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 80132ae:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80132b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80132b6:	4293      	cmp	r3, r2
 80132b8:	bfb8      	it	lt
 80132ba:	4613      	movlt	r3, r2
 80132bc:	b25b      	sxtb	r3, r3
}
 80132be:	4618      	mov	r0, r3
 80132c0:	370c      	adds	r7, #12
 80132c2:	46bd      	mov	sp, r7
 80132c4:	bc80      	pop	{r7}
 80132c6:	4770      	bx	lr

080132c8 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 80132c8:	b480      	push	{r7}
 80132ca:	b083      	sub	sp, #12
 80132cc:	af00      	add	r7, sp, #0
 80132ce:	6078      	str	r0, [r7, #4]
 80132d0:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	009b      	lsls	r3, r3, #2
 80132d6:	683a      	ldr	r2, [r7, #0]
 80132d8:	4413      	add	r3, r2
 80132da:	681b      	ldr	r3, [r3, #0]
 80132dc:	4a07      	ldr	r2, [pc, #28]	; (80132fc <RegionCommonGetBandwidth+0x34>)
 80132de:	4293      	cmp	r3, r2
 80132e0:	d004      	beq.n	80132ec <RegionCommonGetBandwidth+0x24>
 80132e2:	4a07      	ldr	r2, [pc, #28]	; (8013300 <RegionCommonGetBandwidth+0x38>)
 80132e4:	4293      	cmp	r3, r2
 80132e6:	d003      	beq.n	80132f0 <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 80132e8:	2300      	movs	r3, #0
 80132ea:	e002      	b.n	80132f2 <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 80132ec:	2301      	movs	r3, #1
 80132ee:	e000      	b.n	80132f2 <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 80132f0:	2302      	movs	r3, #2
    }
}
 80132f2:	4618      	mov	r0, r3
 80132f4:	370c      	adds	r7, #12
 80132f6:	46bd      	mov	sp, r7
 80132f8:	bc80      	pop	{r7}
 80132fa:	4770      	bx	lr
 80132fc:	0003d090 	.word	0x0003d090
 8013300:	0007a120 	.word	0x0007a120

08013304 <RegionCommonRxConfigPrint>:

/* ST_WORKAROUND_BEGIN: Print Tx/Rx config */
void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 8013304:	b5b0      	push	{r4, r5, r7, lr}
 8013306:	b08c      	sub	sp, #48	; 0x30
 8013308:	af04      	add	r7, sp, #16
 801330a:	4603      	mov	r3, r0
 801330c:	6039      	str	r1, [r7, #0]
 801330e:	71fb      	strb	r3, [r7, #7]
 8013310:	4613      	mov	r3, r2
 8013312:	71bb      	strb	r3, [r7, #6]
    const char *slotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
 8013314:	4b17      	ldr	r3, [pc, #92]	; (8013374 <RegionCommonRxConfigPrint+0x70>)
 8013316:	f107 0408 	add.w	r4, r7, #8
 801331a:	461d      	mov	r5, r3
 801331c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801331e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013320:	e895 0003 	ldmia.w	r5, {r0, r1}
 8013324:	e884 0003 	stmia.w	r4, {r0, r1}

    if ( rxSlot < RX_SLOT_NONE )
 8013328:	79fb      	ldrb	r3, [r7, #7]
 801332a:	2b05      	cmp	r3, #5
 801332c:	d813      	bhi.n	8013356 <RegionCommonRxConfigPrint+0x52>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", slotStrings[rxSlot], frequency, dr );
 801332e:	79fb      	ldrb	r3, [r7, #7]
 8013330:	009b      	lsls	r3, r3, #2
 8013332:	f107 0220 	add.w	r2, r7, #32
 8013336:	4413      	add	r3, r2
 8013338:	f853 3c18 	ldr.w	r3, [r3, #-24]
 801333c:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8013340:	9202      	str	r2, [sp, #8]
 8013342:	683a      	ldr	r2, [r7, #0]
 8013344:	9201      	str	r2, [sp, #4]
 8013346:	9300      	str	r3, [sp, #0]
 8013348:	4b0b      	ldr	r3, [pc, #44]	; (8013378 <RegionCommonRxConfigPrint+0x74>)
 801334a:	2201      	movs	r2, #1
 801334c:	2100      	movs	r1, #0
 801334e:	2002      	movs	r0, #2
 8013350:	f005 fc16 	bl	8018b80 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 8013354:	e00a      	b.n	801336c <RegionCommonRxConfigPrint+0x68>
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 8013356:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801335a:	9301      	str	r3, [sp, #4]
 801335c:	683b      	ldr	r3, [r7, #0]
 801335e:	9300      	str	r3, [sp, #0]
 8013360:	4b06      	ldr	r3, [pc, #24]	; (801337c <RegionCommonRxConfigPrint+0x78>)
 8013362:	2201      	movs	r2, #1
 8013364:	2100      	movs	r1, #0
 8013366:	2002      	movs	r0, #2
 8013368:	f005 fc0a 	bl	8018b80 <UTIL_ADV_TRACE_COND_FSend>
}
 801336c:	bf00      	nop
 801336e:	3720      	adds	r7, #32
 8013370:	46bd      	mov	sp, r7
 8013372:	bdb0      	pop	{r4, r5, r7, pc}
 8013374:	080196bc 	.word	0x080196bc
 8013378:	08019680 	.word	0x08019680
 801337c:	080196a0 	.word	0x080196a0

08013380 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 8013380:	b580      	push	{r7, lr}
 8013382:	b084      	sub	sp, #16
 8013384:	af02      	add	r7, sp, #8
 8013386:	6078      	str	r0, [r7, #4]
 8013388:	460b      	mov	r3, r1
 801338a:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 801338c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013390:	9301      	str	r3, [sp, #4]
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	9300      	str	r3, [sp, #0]
 8013396:	4b05      	ldr	r3, [pc, #20]	; (80133ac <RegionCommonTxConfigPrint+0x2c>)
 8013398:	2201      	movs	r2, #1
 801339a:	2100      	movs	r1, #0
 801339c:	2002      	movs	r0, #2
 801339e:	f005 fbef 	bl	8018b80 <UTIL_ADV_TRACE_COND_FSend>
}
 80133a2:	bf00      	nop
 80133a4:	3708      	adds	r7, #8
 80133a6:	46bd      	mov	sp, r7
 80133a8:	bd80      	pop	{r7, pc}
 80133aa:	bf00      	nop
 80133ac:	080196d4 	.word	0x080196d4

080133b0 <VerifyRfFreq>:
static RegionNvmDataGroup1_t* RegionNvmGroup1;
static RegionNvmDataGroup2_t* RegionNvmGroup2;


static bool VerifyRfFreq( uint32_t freq )
{
 80133b0:	b580      	push	{r7, lr}
 80133b2:	b082      	sub	sp, #8
 80133b4:	af00      	add	r7, sp, #0
 80133b6:	6078      	str	r0, [r7, #4]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 80133b8:	4b0d      	ldr	r3, [pc, #52]	; (80133f0 <VerifyRfFreq+0x40>)
 80133ba:	6a1b      	ldr	r3, [r3, #32]
 80133bc:	6878      	ldr	r0, [r7, #4]
 80133be:	4798      	blx	r3
 80133c0:	4603      	mov	r3, r0
 80133c2:	f083 0301 	eor.w	r3, r3, #1
 80133c6:	b2db      	uxtb	r3, r3
 80133c8:	2b00      	cmp	r3, #0
 80133ca:	d001      	beq.n	80133d0 <VerifyRfFreq+0x20>
    {
        return false;
 80133cc:	2300      	movs	r3, #0
 80133ce:	e00a      	b.n	80133e6 <VerifyRfFreq+0x36>
    }

    if( ( freq < 865000000 ) || ( freq > 867000000 ) )
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	4a08      	ldr	r2, [pc, #32]	; (80133f4 <VerifyRfFreq+0x44>)
 80133d4:	4293      	cmp	r3, r2
 80133d6:	d903      	bls.n	80133e0 <VerifyRfFreq+0x30>
 80133d8:	687b      	ldr	r3, [r7, #4]
 80133da:	4a07      	ldr	r2, [pc, #28]	; (80133f8 <VerifyRfFreq+0x48>)
 80133dc:	4293      	cmp	r3, r2
 80133de:	d901      	bls.n	80133e4 <VerifyRfFreq+0x34>
    {
        return false;
 80133e0:	2300      	movs	r3, #0
 80133e2:	e000      	b.n	80133e6 <VerifyRfFreq+0x36>
    }
    return true;
 80133e4:	2301      	movs	r3, #1
}
 80133e6:	4618      	mov	r0, r3
 80133e8:	3708      	adds	r7, #8
 80133ea:	46bd      	mov	sp, r7
 80133ec:	bd80      	pop	{r7, pc}
 80133ee:	bf00      	nop
 80133f0:	08019c7c 	.word	0x08019c7c
 80133f4:	338eda3f 	.word	0x338eda3f
 80133f8:	33ad5ec0 	.word	0x33ad5ec0

080133fc <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 80133fc:	b590      	push	{r4, r7, lr}
 80133fe:	b08b      	sub	sp, #44	; 0x2c
 8013400:	af04      	add	r7, sp, #16
 8013402:	4603      	mov	r3, r0
 8013404:	460a      	mov	r2, r1
 8013406:	71fb      	strb	r3, [r7, #7]
 8013408:	4613      	mov	r3, r2
 801340a:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesIN865[datarate];
 801340c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013410:	4a1f      	ldr	r2, [pc, #124]	; (8013490 <GetTimeOnAir+0x94>)
 8013412:	5cd3      	ldrb	r3, [r2, r3]
 8013414:	74fb      	strb	r3, [r7, #19]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsIN865 );
 8013416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801341a:	491e      	ldr	r1, [pc, #120]	; (8013494 <GetTimeOnAir+0x98>)
 801341c:	4618      	mov	r0, r3
 801341e:	f7ff ff53 	bl	80132c8 <RegionCommonGetBandwidth>
 8013422:	60f8      	str	r0, [r7, #12]
    TimerTime_t timeOnAir = 0;
 8013424:	2300      	movs	r3, #0
 8013426:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 8013428:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801342c:	2b07      	cmp	r3, #7
 801342e:	d118      	bne.n	8013462 <GetTimeOnAir+0x66>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 8013430:	4b19      	ldr	r3, [pc, #100]	; (8013498 <GetTimeOnAir+0x9c>)
 8013432:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8013434:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013438:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801343c:	fb02 f303 	mul.w	r3, r2, r3
 8013440:	4619      	mov	r1, r3
 8013442:	88bb      	ldrh	r3, [r7, #4]
 8013444:	b2db      	uxtb	r3, r3
 8013446:	2201      	movs	r2, #1
 8013448:	9203      	str	r2, [sp, #12]
 801344a:	9302      	str	r3, [sp, #8]
 801344c:	2300      	movs	r3, #0
 801344e:	9301      	str	r3, [sp, #4]
 8013450:	2305      	movs	r3, #5
 8013452:	9300      	str	r3, [sp, #0]
 8013454:	2300      	movs	r3, #0
 8013456:	460a      	mov	r2, r1
 8013458:	68f9      	ldr	r1, [r7, #12]
 801345a:	2000      	movs	r0, #0
 801345c:	47a0      	blx	r4
 801345e:	6178      	str	r0, [r7, #20]
 8013460:	e011      	b.n	8013486 <GetTimeOnAir+0x8a>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8013462:	4b0d      	ldr	r3, [pc, #52]	; (8013498 <GetTimeOnAir+0x9c>)
 8013464:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8013466:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801346a:	88bb      	ldrh	r3, [r7, #4]
 801346c:	b2db      	uxtb	r3, r3
 801346e:	2101      	movs	r1, #1
 8013470:	9103      	str	r1, [sp, #12]
 8013472:	9302      	str	r3, [sp, #8]
 8013474:	2300      	movs	r3, #0
 8013476:	9301      	str	r3, [sp, #4]
 8013478:	2308      	movs	r3, #8
 801347a:	9300      	str	r3, [sp, #0]
 801347c:	2301      	movs	r3, #1
 801347e:	68f9      	ldr	r1, [r7, #12]
 8013480:	2001      	movs	r0, #1
 8013482:	47a0      	blx	r4
 8013484:	6178      	str	r0, [r7, #20]
    }
    return timeOnAir;
 8013486:	697b      	ldr	r3, [r7, #20]
}
 8013488:	4618      	mov	r0, r3
 801348a:	371c      	adds	r7, #28
 801348c:	46bd      	mov	sp, r7
 801348e:	bd90      	pop	{r4, r7, pc}
 8013490:	08019c3c 	.word	0x08019c3c
 8013494:	08019c44 	.word	0x08019c44
 8013498:	08019c7c 	.word	0x08019c7c

0801349c <RegionIN865GetPhyParam>:
#endif /* REGION_IN865 */

PhyParam_t RegionIN865GetPhyParam( GetPhyParams_t* getPhy )
{
 801349c:	b580      	push	{r7, lr}
 801349e:	b088      	sub	sp, #32
 80134a0:	af00      	add	r7, sp, #0
 80134a2:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 80134a4:	2300      	movs	r3, #0
 80134a6:	61bb      	str	r3, [r7, #24]

#if defined( REGION_IN865 )
    switch( getPhy->Attribute )
 80134a8:	687b      	ldr	r3, [r7, #4]
 80134aa:	781b      	ldrb	r3, [r3, #0]
 80134ac:	3b01      	subs	r3, #1
 80134ae:	2b38      	cmp	r3, #56	; 0x38
 80134b0:	f200 8124 	bhi.w	80136fc <RegionIN865GetPhyParam+0x260>
 80134b4:	a201      	add	r2, pc, #4	; (adr r2, 80134bc <RegionIN865GetPhyParam+0x20>)
 80134b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80134ba:	bf00      	nop
 80134bc:	080135a1 	.word	0x080135a1
 80134c0:	080135a7 	.word	0x080135a7
 80134c4:	080136fd 	.word	0x080136fd
 80134c8:	080136fd 	.word	0x080136fd
 80134cc:	080136fd 	.word	0x080136fd
 80134d0:	080135ad 	.word	0x080135ad
 80134d4:	080136fd 	.word	0x080136fd
 80134d8:	080135e5 	.word	0x080135e5
 80134dc:	080136fd 	.word	0x080136fd
 80134e0:	080135eb 	.word	0x080135eb
 80134e4:	080135f1 	.word	0x080135f1
 80134e8:	080135f7 	.word	0x080135f7
 80134ec:	080135fd 	.word	0x080135fd
 80134f0:	0801360d 	.word	0x0801360d
 80134f4:	0801361d 	.word	0x0801361d
 80134f8:	08013623 	.word	0x08013623
 80134fc:	0801362b 	.word	0x0801362b
 8013500:	08013633 	.word	0x08013633
 8013504:	0801363b 	.word	0x0801363b
 8013508:	08013643 	.word	0x08013643
 801350c:	0801364b 	.word	0x0801364b
 8013510:	08013653 	.word	0x08013653
 8013514:	08013667 	.word	0x08013667
 8013518:	0801366d 	.word	0x0801366d
 801351c:	08013673 	.word	0x08013673
 8013520:	08013679 	.word	0x08013679
 8013524:	08013683 	.word	0x08013683
 8013528:	0801368d 	.word	0x0801368d
 801352c:	08013693 	.word	0x08013693
 8013530:	0801369b 	.word	0x0801369b
 8013534:	080136a1 	.word	0x080136a1
 8013538:	080136a7 	.word	0x080136a7
 801353c:	080136ad 	.word	0x080136ad
 8013540:	080135b3 	.word	0x080135b3
 8013544:	080136fd 	.word	0x080136fd
 8013548:	080136fd 	.word	0x080136fd
 801354c:	080136fd 	.word	0x080136fd
 8013550:	080136fd 	.word	0x080136fd
 8013554:	080136fd 	.word	0x080136fd
 8013558:	080136fd 	.word	0x080136fd
 801355c:	080136fd 	.word	0x080136fd
 8013560:	080136fd 	.word	0x080136fd
 8013564:	080136fd 	.word	0x080136fd
 8013568:	080136fd 	.word	0x080136fd
 801356c:	080136fd 	.word	0x080136fd
 8013570:	080136fd 	.word	0x080136fd
 8013574:	080136fd 	.word	0x080136fd
 8013578:	080136b3 	.word	0x080136b3
 801357c:	080136b9 	.word	0x080136b9
 8013580:	080136c7 	.word	0x080136c7
 8013584:	080136fd 	.word	0x080136fd
 8013588:	080136fd 	.word	0x080136fd
 801358c:	080136cd 	.word	0x080136cd
 8013590:	080136d3 	.word	0x080136d3
 8013594:	080136fd 	.word	0x080136fd
 8013598:	080136d9 	.word	0x080136d9
 801359c:	080136e9 	.word	0x080136e9
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = IN865_RX_MIN_DATARATE;
 80135a0:	2300      	movs	r3, #0
 80135a2:	61bb      	str	r3, [r7, #24]
            break;
 80135a4:	e0ab      	b.n	80136fe <RegionIN865GetPhyParam+0x262>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = IN865_TX_MIN_DATARATE;
 80135a6:	2300      	movs	r3, #0
 80135a8:	61bb      	str	r3, [r7, #24]
            break;
 80135aa:	e0a8      	b.n	80136fe <RegionIN865GetPhyParam+0x262>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = IN865_DEFAULT_DATARATE;
 80135ac:	2300      	movs	r3, #0
 80135ae:	61bb      	str	r3, [r7, #24]
            break;
 80135b0:	e0a5      	b.n	80136fe <RegionIN865GetPhyParam+0x262>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80135b8:	733b      	strb	r3, [r7, #12]
 80135ba:	2307      	movs	r3, #7
 80135bc:	737b      	strb	r3, [r7, #13]
 80135be:	2300      	movs	r3, #0
 80135c0:	73bb      	strb	r3, [r7, #14]
 80135c2:	2310      	movs	r3, #16
 80135c4:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )IN865_TX_MAX_DATARATE,
                .MinDr = ( int8_t )IN865_TX_MIN_DATARATE,
                .NbChannels = IN865_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 80135c6:	4b52      	ldr	r3, [pc, #328]	; (8013710 <RegionIN865GetPhyParam+0x274>)
 80135c8:	681b      	ldr	r3, [r3, #0]
 80135ca:	33c0      	adds	r3, #192	; 0xc0
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80135cc:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 80135ce:	4b50      	ldr	r3, [pc, #320]	; (8013710 <RegionIN865GetPhyParam+0x274>)
 80135d0:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80135d2:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 80135d4:	f107 030c 	add.w	r3, r7, #12
 80135d8:	4618      	mov	r0, r3
 80135da:	f7ff fe22 	bl	8013222 <RegionCommonGetNextLowerTxDr>
 80135de:	4603      	mov	r3, r0
 80135e0:	61bb      	str	r3, [r7, #24]
            break;
 80135e2:	e08c      	b.n	80136fe <RegionIN865GetPhyParam+0x262>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = IN865_MAX_TX_POWER;
 80135e4:	2300      	movs	r3, #0
 80135e6:	61bb      	str	r3, [r7, #24]
            break;
 80135e8:	e089      	b.n	80136fe <RegionIN865GetPhyParam+0x262>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = IN865_DEFAULT_TX_POWER;
 80135ea:	2300      	movs	r3, #0
 80135ec:	61bb      	str	r3, [r7, #24]
            break;
 80135ee:	e086      	b.n	80136fe <RegionIN865GetPhyParam+0x262>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 80135f0:	2340      	movs	r3, #64	; 0x40
 80135f2:	61bb      	str	r3, [r7, #24]
            break;
 80135f4:	e083      	b.n	80136fe <RegionIN865GetPhyParam+0x262>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 80135f6:	2320      	movs	r3, #32
 80135f8:	61bb      	str	r3, [r7, #24]
            break;
 80135fa:	e080      	b.n	80136fe <RegionIN865GetPhyParam+0x262>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateIN865[getPhy->Datarate];
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8013602:	461a      	mov	r2, r3
 8013604:	4b43      	ldr	r3, [pc, #268]	; (8013714 <RegionIN865GetPhyParam+0x278>)
 8013606:	5c9b      	ldrb	r3, [r3, r2]
 8013608:	61bb      	str	r3, [r7, #24]
            break;
 801360a:	e078      	b.n	80136fe <RegionIN865GetPhyParam+0x262>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterIN865[getPhy->Datarate];
 801360c:	687b      	ldr	r3, [r7, #4]
 801360e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8013612:	461a      	mov	r2, r3
 8013614:	4b40      	ldr	r3, [pc, #256]	; (8013718 <RegionIN865GetPhyParam+0x27c>)
 8013616:	5c9b      	ldrb	r3, [r3, r2]
 8013618:	61bb      	str	r3, [r7, #24]
            break;
 801361a:	e070      	b.n	80136fe <RegionIN865GetPhyParam+0x262>
        }
        /* ST_WORKAROUND_END */
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = IN865_DUTY_CYCLE_ENABLED;
 801361c:	2300      	movs	r3, #0
 801361e:	61bb      	str	r3, [r7, #24]
            break;
 8013620:	e06d      	b.n	80136fe <RegionIN865GetPhyParam+0x262>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = IN865_MAX_RX_WINDOW;
 8013622:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8013626:	61bb      	str	r3, [r7, #24]
            break;
 8013628:	e069      	b.n	80136fe <RegionIN865GetPhyParam+0x262>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 801362a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801362e:	61bb      	str	r3, [r7, #24]
            break;
 8013630:	e065      	b.n	80136fe <RegionIN865GetPhyParam+0x262>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8013632:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8013636:	61bb      	str	r3, [r7, #24]
            break;
 8013638:	e061      	b.n	80136fe <RegionIN865GetPhyParam+0x262>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 801363a:	f241 3388 	movw	r3, #5000	; 0x1388
 801363e:	61bb      	str	r3, [r7, #24]
            break;
 8013640:	e05d      	b.n	80136fe <RegionIN865GetPhyParam+0x262>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8013642:	f241 7370 	movw	r3, #6000	; 0x1770
 8013646:	61bb      	str	r3, [r7, #24]
            break;
 8013648:	e059      	b.n	80136fe <RegionIN865GetPhyParam+0x262>
        }
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 801364a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801364e:	61bb      	str	r3, [r7, #24]
            break;
 8013650:	e055      	b.n	80136fe <RegionIN865GetPhyParam+0x262>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 8013652:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8013656:	4831      	ldr	r0, [pc, #196]	; (801371c <RegionIN865GetPhyParam+0x280>)
 8013658:	f001 f880 	bl	801475c <randr>
 801365c:	4603      	mov	r3, r0
 801365e:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8013662:	61bb      	str	r3, [r7, #24]
            break;
 8013664:	e04b      	b.n	80136fe <RegionIN865GetPhyParam+0x262>
        }
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 8013666:	2300      	movs	r3, #0
 8013668:	61bb      	str	r3, [r7, #24]
            break;
 801366a:	e048      	b.n	80136fe <RegionIN865GetPhyParam+0x262>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = IN865_RX_WND_2_FREQ;
 801366c:	4b2c      	ldr	r3, [pc, #176]	; (8013720 <RegionIN865GetPhyParam+0x284>)
 801366e:	61bb      	str	r3, [r7, #24]
            break;
 8013670:	e045      	b.n	80136fe <RegionIN865GetPhyParam+0x262>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = IN865_RX_WND_2_DR;
 8013672:	2302      	movs	r3, #2
 8013674:	61bb      	str	r3, [r7, #24]
            break;
 8013676:	e042      	b.n	80136fe <RegionIN865GetPhyParam+0x262>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8013678:	4b25      	ldr	r3, [pc, #148]	; (8013710 <RegionIN865GetPhyParam+0x274>)
 801367a:	681b      	ldr	r3, [r3, #0]
 801367c:	33c0      	adds	r3, #192	; 0xc0
 801367e:	61bb      	str	r3, [r7, #24]
            break;
 8013680:	e03d      	b.n	80136fe <RegionIN865GetPhyParam+0x262>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8013682:	4b23      	ldr	r3, [pc, #140]	; (8013710 <RegionIN865GetPhyParam+0x274>)
 8013684:	681b      	ldr	r3, [r3, #0]
 8013686:	33c2      	adds	r3, #194	; 0xc2
 8013688:	61bb      	str	r3, [r7, #24]
            break;
 801368a:	e038      	b.n	80136fe <RegionIN865GetPhyParam+0x262>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = IN865_MAX_NB_CHANNELS;
 801368c:	2310      	movs	r3, #16
 801368e:	61bb      	str	r3, [r7, #24]
            break;
 8013690:	e035      	b.n	80136fe <RegionIN865GetPhyParam+0x262>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 8013692:	4b1f      	ldr	r3, [pc, #124]	; (8013710 <RegionIN865GetPhyParam+0x274>)
 8013694:	681b      	ldr	r3, [r3, #0]
 8013696:	61bb      	str	r3, [r7, #24]
            break;
 8013698:	e031      	b.n	80136fe <RegionIN865GetPhyParam+0x262>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = IN865_DEFAULT_UPLINK_DWELL_TIME;
 801369a:	2300      	movs	r3, #0
 801369c:	61bb      	str	r3, [r7, #24]
            break;
 801369e:	e02e      	b.n	80136fe <RegionIN865GetPhyParam+0x262>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 80136a0:	2300      	movs	r3, #0
 80136a2:	61bb      	str	r3, [r7, #24]
            break;
 80136a4:	e02b      	b.n	80136fe <RegionIN865GetPhyParam+0x262>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = IN865_DEFAULT_MAX_EIRP;
 80136a6:	4b1f      	ldr	r3, [pc, #124]	; (8013724 <RegionIN865GetPhyParam+0x288>)
 80136a8:	61bb      	str	r3, [r7, #24]
            break;
 80136aa:	e028      	b.n	80136fe <RegionIN865GetPhyParam+0x262>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = IN865_DEFAULT_ANTENNA_GAIN;
 80136ac:	4b1e      	ldr	r3, [pc, #120]	; (8013728 <RegionIN865GetPhyParam+0x28c>)
 80136ae:	61bb      	str	r3, [r7, #24]
            break;
 80136b0:	e025      	b.n	80136fe <RegionIN865GetPhyParam+0x262>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = IN865_BEACON_CHANNEL_FREQ;
 80136b2:	4b1b      	ldr	r3, [pc, #108]	; (8013720 <RegionIN865GetPhyParam+0x284>)
 80136b4:	61bb      	str	r3, [r7, #24]
            break;
 80136b6:	e022      	b.n	80136fe <RegionIN865GetPhyParam+0x262>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = IN865_BEACON_SIZE;
 80136b8:	2313      	movs	r3, #19
 80136ba:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = IN865_RFU1_SIZE;
 80136bc:	2301      	movs	r3, #1
 80136be:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = IN865_RFU2_SIZE;
 80136c0:	2303      	movs	r3, #3
 80136c2:	76bb      	strb	r3, [r7, #26]
            break;
 80136c4:	e01b      	b.n	80136fe <RegionIN865GetPhyParam+0x262>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = IN865_BEACON_CHANNEL_DR;
 80136c6:	2304      	movs	r3, #4
 80136c8:	61bb      	str	r3, [r7, #24]
            break;
 80136ca:	e018      	b.n	80136fe <RegionIN865GetPhyParam+0x262>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = IN865_PING_SLOT_CHANNEL_FREQ;
 80136cc:	4b14      	ldr	r3, [pc, #80]	; (8013720 <RegionIN865GetPhyParam+0x284>)
 80136ce:	61bb      	str	r3, [r7, #24]
            break;
 80136d0:	e015      	b.n	80136fe <RegionIN865GetPhyParam+0x262>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = IN865_PING_SLOT_CHANNEL_DR;
 80136d2:	2304      	movs	r3, #4
 80136d4:	61bb      	str	r3, [r7, #24]
            break;
 80136d6:	e012      	b.n	80136fe <RegionIN865GetPhyParam+0x262>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesIN865[getPhy->Datarate];
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80136de:	461a      	mov	r2, r3
 80136e0:	4b12      	ldr	r3, [pc, #72]	; (801372c <RegionIN865GetPhyParam+0x290>)
 80136e2:	5c9b      	ldrb	r3, [r3, r2]
 80136e4:	61bb      	str	r3, [r7, #24]
            break;
 80136e6:	e00a      	b.n	80136fe <RegionIN865GetPhyParam+0x262>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsIN865 );
 80136e8:	687b      	ldr	r3, [r7, #4]
 80136ea:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80136ee:	4910      	ldr	r1, [pc, #64]	; (8013730 <RegionIN865GetPhyParam+0x294>)
 80136f0:	4618      	mov	r0, r3
 80136f2:	f7ff fde9 	bl	80132c8 <RegionCommonGetBandwidth>
 80136f6:	4603      	mov	r3, r0
 80136f8:	61bb      	str	r3, [r7, #24]
            break;
 80136fa:	e000      	b.n	80136fe <RegionIN865GetPhyParam+0x262>
        }
        default:
        {
            break;
 80136fc:	bf00      	nop
        }
    }

#endif /* REGION_IN865 */
    return phyParam;
 80136fe:	69bb      	ldr	r3, [r7, #24]
 8013700:	61fb      	str	r3, [r7, #28]
 8013702:	2300      	movs	r3, #0
 8013704:	69fb      	ldr	r3, [r7, #28]
}
 8013706:	4618      	mov	r0, r3
 8013708:	3720      	adds	r7, #32
 801370a:	46bd      	mov	sp, r7
 801370c:	bd80      	pop	{r7, pc}
 801370e:	bf00      	nop
 8013710:	20000ce8 	.word	0x20000ce8
 8013714:	08019c64 	.word	0x08019c64
 8013718:	08019c6c 	.word	0x08019c6c
 801371c:	fffffc18 	.word	0xfffffc18
 8013720:	33a680f0 	.word	0x33a680f0
 8013724:	41f00000 	.word	0x41f00000
 8013728:	4009999a 	.word	0x4009999a
 801372c:	08019c3c 	.word	0x08019c3c
 8013730:	08019c44 	.word	0x08019c44

08013734 <RegionIN865SetBandTxDone>:

void RegionIN865SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8013734:	b590      	push	{r4, r7, lr}
 8013736:	b085      	sub	sp, #20
 8013738:	af02      	add	r7, sp, #8
 801373a:	6078      	str	r0, [r7, #4]
#if defined( REGION_IN865 )
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 801373c:	4b11      	ldr	r3, [pc, #68]	; (8013784 <RegionIN865SetBandTxDone+0x50>)
 801373e:	681a      	ldr	r2, [r3, #0]
 8013740:	4b11      	ldr	r3, [pc, #68]	; (8013788 <RegionIN865SetBandTxDone+0x54>)
 8013742:	6819      	ldr	r1, [r3, #0]
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	781b      	ldrb	r3, [r3, #0]
 8013748:	4618      	mov	r0, r3
 801374a:	4603      	mov	r3, r0
 801374c:	005b      	lsls	r3, r3, #1
 801374e:	4403      	add	r3, r0
 8013750:	009b      	lsls	r3, r3, #2
 8013752:	440b      	add	r3, r1
 8013754:	3309      	adds	r3, #9
 8013756:	781b      	ldrb	r3, [r3, #0]
 8013758:	4619      	mov	r1, r3
 801375a:	460b      	mov	r3, r1
 801375c:	005b      	lsls	r3, r3, #1
 801375e:	440b      	add	r3, r1
 8013760:	00db      	lsls	r3, r3, #3
 8013762:	18d0      	adds	r0, r2, r3
 8013764:	687b      	ldr	r3, [r7, #4]
 8013766:	6899      	ldr	r1, [r3, #8]
 8013768:	687b      	ldr	r3, [r7, #4]
 801376a:	785c      	ldrb	r4, [r3, #1]
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	691a      	ldr	r2, [r3, #16]
 8013770:	9200      	str	r2, [sp, #0]
 8013772:	68db      	ldr	r3, [r3, #12]
 8013774:	4622      	mov	r2, r4
 8013776:	f7ff f93d 	bl	80129f4 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_IN865 */
}
 801377a:	bf00      	nop
 801377c:	370c      	adds	r7, #12
 801377e:	46bd      	mov	sp, r7
 8013780:	bd90      	pop	{r4, r7, pc}
 8013782:	bf00      	nop
 8013784:	20000ce4 	.word	0x20000ce4
 8013788:	20000ce8 	.word	0x20000ce8

0801378c <RegionIN865InitDefaults>:

void RegionIN865InitDefaults( InitDefaultsParams_t* params )
{
 801378c:	b580      	push	{r7, lr}
 801378e:	b092      	sub	sp, #72	; 0x48
 8013790:	af00      	add	r7, sp, #0
 8013792:	6078      	str	r0, [r7, #4]
#if defined( REGION_IN865 )
    Band_t bands[IN865_MAX_NB_BANDS] =
 8013794:	2301      	movs	r3, #1
 8013796:	863b      	strh	r3, [r7, #48]	; 0x30
 8013798:	2300      	movs	r3, #0
 801379a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 801379e:	2300      	movs	r3, #0
 80137a0:	637b      	str	r3, [r7, #52]	; 0x34
 80137a2:	2300      	movs	r3, #0
 80137a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80137a6:	2300      	movs	r3, #0
 80137a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80137aa:	2300      	movs	r3, #0
 80137ac:	643b      	str	r3, [r7, #64]	; 0x40
 80137ae:	2300      	movs	r3, #0
 80137b0:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
    {
        IN865_BAND0
    };

    switch( params->Type )
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	7a1b      	ldrb	r3, [r3, #8]
 80137b8:	2b02      	cmp	r3, #2
 80137ba:	d05c      	beq.n	8013876 <RegionIN865InitDefaults+0xea>
 80137bc:	2b02      	cmp	r3, #2
 80137be:	dc69      	bgt.n	8013894 <RegionIN865InitDefaults+0x108>
 80137c0:	2b00      	cmp	r3, #0
 80137c2:	d002      	beq.n	80137ca <RegionIN865InitDefaults+0x3e>
 80137c4:	2b01      	cmp	r3, #1
 80137c6:	d03e      	beq.n	8013846 <RegionIN865InitDefaults+0xba>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 80137c8:	e064      	b.n	8013894 <RegionIN865InitDefaults+0x108>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 80137ca:	687b      	ldr	r3, [r7, #4]
 80137cc:	681b      	ldr	r3, [r3, #0]
 80137ce:	2b00      	cmp	r3, #0
 80137d0:	d061      	beq.n	8013896 <RegionIN865InitDefaults+0x10a>
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	685b      	ldr	r3, [r3, #4]
 80137d6:	2b00      	cmp	r3, #0
 80137d8:	d05d      	beq.n	8013896 <RegionIN865InitDefaults+0x10a>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 80137da:	687b      	ldr	r3, [r7, #4]
 80137dc:	681b      	ldr	r3, [r3, #0]
 80137de:	4a2f      	ldr	r2, [pc, #188]	; (801389c <RegionIN865InitDefaults+0x110>)
 80137e0:	6013      	str	r3, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	685b      	ldr	r3, [r3, #4]
 80137e6:	4a2e      	ldr	r2, [pc, #184]	; (80138a0 <RegionIN865InitDefaults+0x114>)
 80137e8:	6013      	str	r3, [r2, #0]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * IN865_MAX_NB_BANDS );
 80137ea:	4b2c      	ldr	r3, [pc, #176]	; (801389c <RegionIN865InitDefaults+0x110>)
 80137ec:	681b      	ldr	r3, [r3, #0]
 80137ee:	4618      	mov	r0, r3
 80137f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80137f4:	2218      	movs	r2, #24
 80137f6:	4619      	mov	r1, r3
 80137f8:	f000 ffc7 	bl	801478a <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) IN865_LC1;
 80137fc:	4b28      	ldr	r3, [pc, #160]	; (80138a0 <RegionIN865InitDefaults+0x114>)
 80137fe:	681b      	ldr	r3, [r3, #0]
 8013800:	4a28      	ldr	r2, [pc, #160]	; (80138a4 <RegionIN865InitDefaults+0x118>)
 8013802:	ca07      	ldmia	r2, {r0, r1, r2}
 8013804:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) IN865_LC2;
 8013808:	4b25      	ldr	r3, [pc, #148]	; (80138a0 <RegionIN865InitDefaults+0x114>)
 801380a:	681b      	ldr	r3, [r3, #0]
 801380c:	4a26      	ldr	r2, [pc, #152]	; (80138a8 <RegionIN865InitDefaults+0x11c>)
 801380e:	330c      	adds	r3, #12
 8013810:	ca07      	ldmia	r2, {r0, r1, r2}
 8013812:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) IN865_LC3;
 8013816:	4b22      	ldr	r3, [pc, #136]	; (80138a0 <RegionIN865InitDefaults+0x114>)
 8013818:	681b      	ldr	r3, [r3, #0]
 801381a:	4a24      	ldr	r2, [pc, #144]	; (80138ac <RegionIN865InitDefaults+0x120>)
 801381c:	3318      	adds	r3, #24
 801381e:	ca07      	ldmia	r2, {r0, r1, r2}
 8013820:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 8013824:	4b1e      	ldr	r3, [pc, #120]	; (80138a0 <RegionIN865InitDefaults+0x114>)
 8013826:	681b      	ldr	r3, [r3, #0]
 8013828:	2207      	movs	r2, #7
 801382a:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 801382e:	4b1c      	ldr	r3, [pc, #112]	; (80138a0 <RegionIN865InitDefaults+0x114>)
 8013830:	681b      	ldr	r3, [r3, #0]
 8013832:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
 8013836:	4b1a      	ldr	r3, [pc, #104]	; (80138a0 <RegionIN865InitDefaults+0x114>)
 8013838:	681b      	ldr	r3, [r3, #0]
 801383a:	33c2      	adds	r3, #194	; 0xc2
 801383c:	2201      	movs	r2, #1
 801383e:	4619      	mov	r1, r3
 8013840:	f7ff f8b2 	bl	80129a8 <RegionCommonChanMaskCopy>
 8013844:	e027      	b.n	8013896 <RegionIN865InitDefaults+0x10a>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 8013846:	4b16      	ldr	r3, [pc, #88]	; (80138a0 <RegionIN865InitDefaults+0x114>)
 8013848:	681b      	ldr	r3, [r3, #0]
 801384a:	2200      	movs	r2, #0
 801384c:	605a      	str	r2, [r3, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 801384e:	4b14      	ldr	r3, [pc, #80]	; (80138a0 <RegionIN865InitDefaults+0x114>)
 8013850:	681b      	ldr	r3, [r3, #0]
 8013852:	2200      	movs	r2, #0
 8013854:	611a      	str	r2, [r3, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 8013856:	4b12      	ldr	r3, [pc, #72]	; (80138a0 <RegionIN865InitDefaults+0x114>)
 8013858:	681b      	ldr	r3, [r3, #0]
 801385a:	2200      	movs	r2, #0
 801385c:	61da      	str	r2, [r3, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 801385e:	4b10      	ldr	r3, [pc, #64]	; (80138a0 <RegionIN865InitDefaults+0x114>)
 8013860:	681b      	ldr	r3, [r3, #0]
 8013862:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
 8013866:	4b0e      	ldr	r3, [pc, #56]	; (80138a0 <RegionIN865InitDefaults+0x114>)
 8013868:	681b      	ldr	r3, [r3, #0]
 801386a:	33c2      	adds	r3, #194	; 0xc2
 801386c:	2201      	movs	r2, #1
 801386e:	4619      	mov	r1, r3
 8013870:	f7ff f89a 	bl	80129a8 <RegionCommonChanMaskCopy>
            break;
 8013874:	e00f      	b.n	8013896 <RegionIN865InitDefaults+0x10a>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 8013876:	4b0a      	ldr	r3, [pc, #40]	; (80138a0 <RegionIN865InitDefaults+0x114>)
 8013878:	681b      	ldr	r3, [r3, #0]
 801387a:	f8b3 10c0 	ldrh.w	r1, [r3, #192]	; 0xc0
 801387e:	4b08      	ldr	r3, [pc, #32]	; (80138a0 <RegionIN865InitDefaults+0x114>)
 8013880:	681b      	ldr	r3, [r3, #0]
 8013882:	f8b3 20c2 	ldrh.w	r2, [r3, #194]	; 0xc2
 8013886:	4b06      	ldr	r3, [pc, #24]	; (80138a0 <RegionIN865InitDefaults+0x114>)
 8013888:	681b      	ldr	r3, [r3, #0]
 801388a:	430a      	orrs	r2, r1
 801388c:	b292      	uxth	r2, r2
 801388e:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
            break;
 8013892:	e000      	b.n	8013896 <RegionIN865InitDefaults+0x10a>
            break;
 8013894:	bf00      	nop
        }
    }
#endif /* REGION_IN865 */
}
 8013896:	3748      	adds	r7, #72	; 0x48
 8013898:	46bd      	mov	sp, r7
 801389a:	bd80      	pop	{r7, pc}
 801389c:	20000ce4 	.word	0x20000ce4
 80138a0:	20000ce8 	.word	0x20000ce8
 80138a4:	080196f0 	.word	0x080196f0
 80138a8:	080196fc 	.word	0x080196fc
 80138ac:	08019708 	.word	0x08019708

080138b0 <RegionIN865Verify>:

bool RegionIN865Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 80138b0:	b580      	push	{r7, lr}
 80138b2:	b082      	sub	sp, #8
 80138b4:	af00      	add	r7, sp, #0
 80138b6:	6078      	str	r0, [r7, #4]
 80138b8:	460b      	mov	r3, r1
 80138ba:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_IN865 )
    switch( phyAttribute )
 80138bc:	78fb      	ldrb	r3, [r7, #3]
 80138be:	2b0f      	cmp	r3, #15
 80138c0:	d875      	bhi.n	80139ae <RegionIN865Verify+0xfe>
 80138c2:	a201      	add	r2, pc, #4	; (adr r2, 80138c8 <RegionIN865Verify+0x18>)
 80138c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80138c8:	08013909 	.word	0x08013909
 80138cc:	080139af 	.word	0x080139af
 80138d0:	080139af 	.word	0x080139af
 80138d4:	080139af 	.word	0x080139af
 80138d8:	080139af 	.word	0x080139af
 80138dc:	08013917 	.word	0x08013917
 80138e0:	08013943 	.word	0x08013943
 80138e4:	08013961 	.word	0x08013961
 80138e8:	080139af 	.word	0x080139af
 80138ec:	0801398d 	.word	0x0801398d
 80138f0:	0801398d 	.word	0x0801398d
 80138f4:	080139af 	.word	0x080139af
 80138f8:	080139af 	.word	0x080139af
 80138fc:	080139af 	.word	0x080139af
 8013900:	080139af 	.word	0x080139af
 8013904:	080139ab 	.word	0x080139ab
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	681b      	ldr	r3, [r3, #0]
 801390c:	4618      	mov	r0, r3
 801390e:	f7ff fd4f 	bl	80133b0 <VerifyRfFreq>
 8013912:	4603      	mov	r3, r0
 8013914:	e04c      	b.n	80139b0 <RegionIN865Verify+0x100>
        }
        case PHY_TX_DR:
        {
            if( verify->DatarateParams.Datarate == DR_6 )
 8013916:	687b      	ldr	r3, [r7, #4]
 8013918:	f993 3000 	ldrsb.w	r3, [r3]
 801391c:	2b06      	cmp	r3, #6
 801391e:	d101      	bne.n	8013924 <RegionIN865Verify+0x74>
            {// DR_6 is not supported by this region
                return false;
 8013920:	2300      	movs	r3, #0
 8013922:	e045      	b.n	80139b0 <RegionIN865Verify+0x100>
            }
            else
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, IN865_TX_MIN_DATARATE, IN865_TX_MAX_DATARATE );
 8013924:	687b      	ldr	r3, [r7, #4]
 8013926:	f993 3000 	ldrsb.w	r3, [r3]
 801392a:	2207      	movs	r2, #7
 801392c:	2100      	movs	r1, #0
 801392e:	4618      	mov	r0, r3
 8013930:	f7fe ffbd 	bl	80128ae <RegionCommonValueInRange>
 8013934:	4603      	mov	r3, r0
 8013936:	2b00      	cmp	r3, #0
 8013938:	bf14      	ite	ne
 801393a:	2301      	movne	r3, #1
 801393c:	2300      	moveq	r3, #0
 801393e:	b2db      	uxtb	r3, r3
 8013940:	e036      	b.n	80139b0 <RegionIN865Verify+0x100>
            }
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8013942:	687b      	ldr	r3, [r7, #4]
 8013944:	f993 3000 	ldrsb.w	r3, [r3]
 8013948:	2205      	movs	r2, #5
 801394a:	2100      	movs	r1, #0
 801394c:	4618      	mov	r0, r3
 801394e:	f7fe ffae 	bl	80128ae <RegionCommonValueInRange>
 8013952:	4603      	mov	r3, r0
 8013954:	2b00      	cmp	r3, #0
 8013956:	bf14      	ite	ne
 8013958:	2301      	movne	r3, #1
 801395a:	2300      	moveq	r3, #0
 801395c:	b2db      	uxtb	r3, r3
 801395e:	e027      	b.n	80139b0 <RegionIN865Verify+0x100>
        }
        case PHY_RX_DR:
        {
            if( verify->DatarateParams.Datarate == DR_6 )
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	f993 3000 	ldrsb.w	r3, [r3]
 8013966:	2b06      	cmp	r3, #6
 8013968:	d101      	bne.n	801396e <RegionIN865Verify+0xbe>
            {// DR_6 is not supported by this region
                return false;
 801396a:	2300      	movs	r3, #0
 801396c:	e020      	b.n	80139b0 <RegionIN865Verify+0x100>
            }
            else
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, IN865_RX_MIN_DATARATE, IN865_RX_MAX_DATARATE );
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	f993 3000 	ldrsb.w	r3, [r3]
 8013974:	2207      	movs	r2, #7
 8013976:	2100      	movs	r1, #0
 8013978:	4618      	mov	r0, r3
 801397a:	f7fe ff98 	bl	80128ae <RegionCommonValueInRange>
 801397e:	4603      	mov	r3, r0
 8013980:	2b00      	cmp	r3, #0
 8013982:	bf14      	ite	ne
 8013984:	2301      	movne	r3, #1
 8013986:	2300      	moveq	r3, #0
 8013988:	b2db      	uxtb	r3, r3
 801398a:	e011      	b.n	80139b0 <RegionIN865Verify+0x100>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, IN865_MAX_TX_POWER, IN865_MIN_TX_POWER );
 801398c:	687b      	ldr	r3, [r7, #4]
 801398e:	f993 3000 	ldrsb.w	r3, [r3]
 8013992:	220a      	movs	r2, #10
 8013994:	2100      	movs	r1, #0
 8013996:	4618      	mov	r0, r3
 8013998:	f7fe ff89 	bl	80128ae <RegionCommonValueInRange>
 801399c:	4603      	mov	r3, r0
 801399e:	2b00      	cmp	r3, #0
 80139a0:	bf14      	ite	ne
 80139a2:	2301      	movne	r3, #1
 80139a4:	2300      	moveq	r3, #0
 80139a6:	b2db      	uxtb	r3, r3
 80139a8:	e002      	b.n	80139b0 <RegionIN865Verify+0x100>
        }
        case PHY_DUTY_CYCLE:
        {
            return IN865_DUTY_CYCLE_ENABLED;
 80139aa:	2300      	movs	r3, #0
 80139ac:	e000      	b.n	80139b0 <RegionIN865Verify+0x100>
        }
        default:
            return false;
 80139ae:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_IN865 */
}
 80139b0:	4618      	mov	r0, r3
 80139b2:	3708      	adds	r7, #8
 80139b4:	46bd      	mov	sp, r7
 80139b6:	bd80      	pop	{r7, pc}

080139b8 <RegionIN865ApplyCFList>:

void RegionIN865ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 80139b8:	b580      	push	{r7, lr}
 80139ba:	b08a      	sub	sp, #40	; 0x28
 80139bc:	af00      	add	r7, sp, #0
 80139be:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 80139c0:	2350      	movs	r3, #80	; 0x50
 80139c2:	f887 3020 	strb.w	r3, [r7, #32]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	791b      	ldrb	r3, [r3, #4]
 80139ca:	2b10      	cmp	r3, #16
 80139cc:	d162      	bne.n	8013a94 <RegionIN865ApplyCFList+0xdc>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	681b      	ldr	r3, [r3, #0]
 80139d2:	330f      	adds	r3, #15
 80139d4:	781b      	ldrb	r3, [r3, #0]
 80139d6:	2b00      	cmp	r3, #0
 80139d8:	d15e      	bne.n	8013a98 <RegionIN865ApplyCFList+0xe0>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = IN865_NUMB_DEFAULT_CHANNELS; chanIdx < IN865_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 80139da:	2300      	movs	r3, #0
 80139dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80139e0:	2303      	movs	r3, #3
 80139e2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80139e6:	e050      	b.n	8013a8a <RegionIN865ApplyCFList+0xd2>
    {
        if( chanIdx < ( IN865_NUMB_CHANNELS_CF_LIST + IN865_NUMB_DEFAULT_CHANNELS ) )
 80139e8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80139ec:	2b07      	cmp	r3, #7
 80139ee:	d824      	bhi.n	8013a3a <RegionIN865ApplyCFList+0x82>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	681a      	ldr	r2, [r3, #0]
 80139f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80139f8:	4413      	add	r3, r2
 80139fa:	781b      	ldrb	r3, [r3, #0]
 80139fc:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 80139fe:	69ba      	ldr	r2, [r7, #24]
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	6819      	ldr	r1, [r3, #0]
 8013a04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013a08:	3301      	adds	r3, #1
 8013a0a:	440b      	add	r3, r1
 8013a0c:	781b      	ldrb	r3, [r3, #0]
 8013a0e:	021b      	lsls	r3, r3, #8
 8013a10:	4313      	orrs	r3, r2
 8013a12:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 8013a14:	69ba      	ldr	r2, [r7, #24]
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	6819      	ldr	r1, [r3, #0]
 8013a1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013a1e:	3302      	adds	r3, #2
 8013a20:	440b      	add	r3, r1
 8013a22:	781b      	ldrb	r3, [r3, #0]
 8013a24:	041b      	lsls	r3, r3, #16
 8013a26:	4313      	orrs	r3, r2
 8013a28:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency *= 100;
 8013a2a:	69bb      	ldr	r3, [r7, #24]
 8013a2c:	2264      	movs	r2, #100	; 0x64
 8013a2e:	fb02 f303 	mul.w	r3, r2, r3
 8013a32:	61bb      	str	r3, [r7, #24]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 8013a34:	2300      	movs	r3, #0
 8013a36:	61fb      	str	r3, [r7, #28]
 8013a38:	e006      	b.n	8013a48 <RegionIN865ApplyCFList+0x90>
        }
        else
        {
            newChannel.Frequency = 0;
 8013a3a:	2300      	movs	r3, #0
 8013a3c:	61bb      	str	r3, [r7, #24]
            newChannel.DrRange.Value = 0;
 8013a3e:	2300      	movs	r3, #0
 8013a40:	f887 3020 	strb.w	r3, [r7, #32]
            newChannel.Rx1Frequency = 0;
 8013a44:	2300      	movs	r3, #0
 8013a46:	61fb      	str	r3, [r7, #28]
        }

        if( newChannel.Frequency != 0 )
 8013a48:	69bb      	ldr	r3, [r7, #24]
 8013a4a:	2b00      	cmp	r3, #0
 8013a4c:	d00b      	beq.n	8013a66 <RegionIN865ApplyCFList+0xae>
        {
            channelAdd.NewChannel = &newChannel;
 8013a4e:	f107 0318 	add.w	r3, r7, #24
 8013a52:	613b      	str	r3, [r7, #16]
            channelAdd.ChannelId = chanIdx;
 8013a54:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013a58:	753b      	strb	r3, [r7, #20]

            // Try to add all channels
            RegionIN865ChannelAdd( &channelAdd );
 8013a5a:	f107 0310 	add.w	r3, r7, #16
 8013a5e:	4618      	mov	r0, r3
 8013a60:	f000 fd14 	bl	801448c <RegionIN865ChannelAdd>
 8013a64:	e007      	b.n	8013a76 <RegionIN865ApplyCFList+0xbe>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 8013a66:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013a6a:	733b      	strb	r3, [r7, #12]

            RegionIN865ChannelsRemove( &channelRemove );
 8013a6c:	f107 030c 	add.w	r3, r7, #12
 8013a70:	4618      	mov	r0, r3
 8013a72:	f000 fda7 	bl	80145c4 <RegionIN865ChannelsRemove>
    for( uint8_t i = 0, chanIdx = IN865_NUMB_DEFAULT_CHANNELS; chanIdx < IN865_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8013a76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013a7a:	3303      	adds	r3, #3
 8013a7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013a80:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013a84:	3301      	adds	r3, #1
 8013a86:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8013a8a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013a8e:	2b0f      	cmp	r3, #15
 8013a90:	d9aa      	bls.n	80139e8 <RegionIN865ApplyCFList+0x30>
 8013a92:	e002      	b.n	8013a9a <RegionIN865ApplyCFList+0xe2>
        return;
 8013a94:	bf00      	nop
 8013a96:	e000      	b.n	8013a9a <RegionIN865ApplyCFList+0xe2>
        return;
 8013a98:	bf00      	nop
        }
    }
#endif /* REGION_IN865 */
}
 8013a9a:	3728      	adds	r7, #40	; 0x28
 8013a9c:	46bd      	mov	sp, r7
 8013a9e:	bd80      	pop	{r7, pc}

08013aa0 <RegionIN865ChanMaskSet>:

bool RegionIN865ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8013aa0:	b580      	push	{r7, lr}
 8013aa2:	b082      	sub	sp, #8
 8013aa4:	af00      	add	r7, sp, #0
 8013aa6:	6078      	str	r0, [r7, #4]
#if defined( REGION_IN865 )
    switch( chanMaskSet->ChannelsMaskType )
 8013aa8:	687b      	ldr	r3, [r7, #4]
 8013aaa:	791b      	ldrb	r3, [r3, #4]
 8013aac:	2b00      	cmp	r3, #0
 8013aae:	d002      	beq.n	8013ab6 <RegionIN865ChanMaskSet+0x16>
 8013ab0:	2b01      	cmp	r3, #1
 8013ab2:	d00b      	beq.n	8013acc <RegionIN865ChanMaskSet+0x2c>
 8013ab4:	e015      	b.n	8013ae2 <RegionIN865ChanMaskSet+0x42>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, 1 );
 8013ab6:	4b0e      	ldr	r3, [pc, #56]	; (8013af0 <RegionIN865ChanMaskSet+0x50>)
 8013ab8:	681b      	ldr	r3, [r3, #0]
 8013aba:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
 8013abe:	687b      	ldr	r3, [r7, #4]
 8013ac0:	681b      	ldr	r3, [r3, #0]
 8013ac2:	2201      	movs	r2, #1
 8013ac4:	4619      	mov	r1, r3
 8013ac6:	f7fe ff6f 	bl	80129a8 <RegionCommonChanMaskCopy>
            break;
 8013aca:	e00c      	b.n	8013ae6 <RegionIN865ChanMaskSet+0x46>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 1 );
 8013acc:	4b08      	ldr	r3, [pc, #32]	; (8013af0 <RegionIN865ChanMaskSet+0x50>)
 8013ace:	681b      	ldr	r3, [r3, #0]
 8013ad0:	f103 00c2 	add.w	r0, r3, #194	; 0xc2
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	681b      	ldr	r3, [r3, #0]
 8013ad8:	2201      	movs	r2, #1
 8013ada:	4619      	mov	r1, r3
 8013adc:	f7fe ff64 	bl	80129a8 <RegionCommonChanMaskCopy>
            break;
 8013ae0:	e001      	b.n	8013ae6 <RegionIN865ChanMaskSet+0x46>
        }
        default:
            return false;
 8013ae2:	2300      	movs	r3, #0
 8013ae4:	e000      	b.n	8013ae8 <RegionIN865ChanMaskSet+0x48>
    }
    return true;
 8013ae6:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_IN865 */
}
 8013ae8:	4618      	mov	r0, r3
 8013aea:	3708      	adds	r7, #8
 8013aec:	46bd      	mov	sp, r7
 8013aee:	bd80      	pop	{r7, pc}
 8013af0:	20000ce8 	.word	0x20000ce8

08013af4 <RegionIN865ComputeRxWindowParameters>:

void RegionIN865ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8013af4:	b580      	push	{r7, lr}
 8013af6:	b088      	sub	sp, #32
 8013af8:	af02      	add	r7, sp, #8
 8013afa:	60ba      	str	r2, [r7, #8]
 8013afc:	607b      	str	r3, [r7, #4]
 8013afe:	4603      	mov	r3, r0
 8013b00:	73fb      	strb	r3, [r7, #15]
 8013b02:	460b      	mov	r3, r1
 8013b04:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_IN865 )
    uint32_t tSymbolInUs = 0;
 8013b06:	2300      	movs	r3, #0
 8013b08:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, IN865_RX_MAX_DATARATE );
 8013b0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013b0e:	2b07      	cmp	r3, #7
 8013b10:	bfa8      	it	ge
 8013b12:	2307      	movge	r3, #7
 8013b14:	b25a      	sxtb	r2, r3
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsIN865 );
 8013b1a:	687b      	ldr	r3, [r7, #4]
 8013b1c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8013b20:	491e      	ldr	r1, [pc, #120]	; (8013b9c <RegionIN865ComputeRxWindowParameters+0xa8>)
 8013b22:	4618      	mov	r0, r3
 8013b24:	f7ff fbd0 	bl	80132c8 <RegionCommonGetBandwidth>
 8013b28:	4603      	mov	r3, r0
 8013b2a:	b2da      	uxtb	r2, r3
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 8013b30:	687b      	ldr	r3, [r7, #4]
 8013b32:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8013b36:	2b07      	cmp	r3, #7
 8013b38:	d10a      	bne.n	8013b50 <RegionIN865ComputeRxWindowParameters+0x5c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesIN865[rxConfigParams->Datarate] );
 8013b3a:	687b      	ldr	r3, [r7, #4]
 8013b3c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8013b40:	461a      	mov	r2, r3
 8013b42:	4b17      	ldr	r3, [pc, #92]	; (8013ba0 <RegionIN865ComputeRxWindowParameters+0xac>)
 8013b44:	5c9b      	ldrb	r3, [r3, r2]
 8013b46:	4618      	mov	r0, r3
 8013b48:	f7ff f952 	bl	8012df0 <RegionCommonComputeSymbolTimeFsk>
 8013b4c:	6178      	str	r0, [r7, #20]
 8013b4e:	e011      	b.n	8013b74 <RegionIN865ComputeRxWindowParameters+0x80>
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesIN865[rxConfigParams->Datarate], BandwidthsIN865[rxConfigParams->Datarate] );
 8013b50:	687b      	ldr	r3, [r7, #4]
 8013b52:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8013b56:	461a      	mov	r2, r3
 8013b58:	4b11      	ldr	r3, [pc, #68]	; (8013ba0 <RegionIN865ComputeRxWindowParameters+0xac>)
 8013b5a:	5c9a      	ldrb	r2, [r3, r2]
 8013b5c:	687b      	ldr	r3, [r7, #4]
 8013b5e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8013b62:	4619      	mov	r1, r3
 8013b64:	4b0d      	ldr	r3, [pc, #52]	; (8013b9c <RegionIN865ComputeRxWindowParameters+0xa8>)
 8013b66:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013b6a:	4619      	mov	r1, r3
 8013b6c:	4610      	mov	r0, r2
 8013b6e:	f7ff f929 	bl	8012dc4 <RegionCommonComputeSymbolTimeLoRa>
 8013b72:	6178      	str	r0, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8013b74:	4b0b      	ldr	r3, [pc, #44]	; (8013ba4 <RegionIN865ComputeRxWindowParameters+0xb0>)
 8013b76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013b78:	4798      	blx	r3
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	3308      	adds	r3, #8
 8013b7e:	687a      	ldr	r2, [r7, #4]
 8013b80:	320c      	adds	r2, #12
 8013b82:	7bb9      	ldrb	r1, [r7, #14]
 8013b84:	9201      	str	r2, [sp, #4]
 8013b86:	9300      	str	r3, [sp, #0]
 8013b88:	4603      	mov	r3, r0
 8013b8a:	68ba      	ldr	r2, [r7, #8]
 8013b8c:	6978      	ldr	r0, [r7, #20]
 8013b8e:	f7ff f93f 	bl	8012e10 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_IN865 */
}
 8013b92:	bf00      	nop
 8013b94:	3718      	adds	r7, #24
 8013b96:	46bd      	mov	sp, r7
 8013b98:	bd80      	pop	{r7, pc}
 8013b9a:	bf00      	nop
 8013b9c:	08019c44 	.word	0x08019c44
 8013ba0:	08019c3c 	.word	0x08019c3c
 8013ba4:	08019c7c 	.word	0x08019c7c

08013ba8 <RegionIN865RxConfig>:

bool RegionIN865RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8013ba8:	b5b0      	push	{r4, r5, r7, lr}
 8013baa:	b090      	sub	sp, #64	; 0x40
 8013bac:	af0a      	add	r7, sp, #40	; 0x28
 8013bae:	6078      	str	r0, [r7, #4]
 8013bb0:	6039      	str	r1, [r7, #0]
#if defined( REGION_IN865 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 8013bb2:	687b      	ldr	r3, [r7, #4]
 8013bb4:	785b      	ldrb	r3, [r3, #1]
 8013bb6:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 8013bb8:	2300      	movs	r3, #0
 8013bba:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 8013bbc:	2300      	movs	r3, #0
 8013bbe:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	685b      	ldr	r3, [r3, #4]
 8013bc4:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 8013bc6:	4b5a      	ldr	r3, [pc, #360]	; (8013d30 <RegionIN865RxConfig+0x188>)
 8013bc8:	685b      	ldr	r3, [r3, #4]
 8013bca:	4798      	blx	r3
 8013bcc:	4603      	mov	r3, r0
 8013bce:	2b00      	cmp	r3, #0
 8013bd0:	d001      	beq.n	8013bd6 <RegionIN865RxConfig+0x2e>
    {
        return false;
 8013bd2:	2300      	movs	r3, #0
 8013bd4:	e0a8      	b.n	8013d28 <RegionIN865RxConfig+0x180>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8013bd6:	687b      	ldr	r3, [r7, #4]
 8013bd8:	7cdb      	ldrb	r3, [r3, #19]
 8013bda:	2b00      	cmp	r3, #0
 8013bdc:	d126      	bne.n	8013c2c <RegionIN865RxConfig+0x84>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 8013bde:	4b55      	ldr	r3, [pc, #340]	; (8013d34 <RegionIN865RxConfig+0x18c>)
 8013be0:	681a      	ldr	r2, [r3, #0]
 8013be2:	687b      	ldr	r3, [r7, #4]
 8013be4:	781b      	ldrb	r3, [r3, #0]
 8013be6:	4619      	mov	r1, r3
 8013be8:	460b      	mov	r3, r1
 8013bea:	005b      	lsls	r3, r3, #1
 8013bec:	440b      	add	r3, r1
 8013bee:	009b      	lsls	r3, r3, #2
 8013bf0:	4413      	add	r3, r2
 8013bf2:	681b      	ldr	r3, [r3, #0]
 8013bf4:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 8013bf6:	4b4f      	ldr	r3, [pc, #316]	; (8013d34 <RegionIN865RxConfig+0x18c>)
 8013bf8:	681a      	ldr	r2, [r3, #0]
 8013bfa:	687b      	ldr	r3, [r7, #4]
 8013bfc:	781b      	ldrb	r3, [r3, #0]
 8013bfe:	4619      	mov	r1, r3
 8013c00:	460b      	mov	r3, r1
 8013c02:	005b      	lsls	r3, r3, #1
 8013c04:	440b      	add	r3, r1
 8013c06:	009b      	lsls	r3, r3, #2
 8013c08:	4413      	add	r3, r2
 8013c0a:	3304      	adds	r3, #4
 8013c0c:	681b      	ldr	r3, [r3, #0]
 8013c0e:	2b00      	cmp	r3, #0
 8013c10:	d00c      	beq.n	8013c2c <RegionIN865RxConfig+0x84>
        {
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
 8013c12:	4b48      	ldr	r3, [pc, #288]	; (8013d34 <RegionIN865RxConfig+0x18c>)
 8013c14:	681a      	ldr	r2, [r3, #0]
 8013c16:	687b      	ldr	r3, [r7, #4]
 8013c18:	781b      	ldrb	r3, [r3, #0]
 8013c1a:	4619      	mov	r1, r3
 8013c1c:	460b      	mov	r3, r1
 8013c1e:	005b      	lsls	r3, r3, #1
 8013c20:	440b      	add	r3, r1
 8013c22:	009b      	lsls	r3, r3, #2
 8013c24:	4413      	add	r3, r2
 8013c26:	3304      	adds	r3, #4
 8013c28:	681b      	ldr	r3, [r3, #0]
 8013c2a:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesIN865[dr];
 8013c2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013c30:	4a41      	ldr	r2, [pc, #260]	; (8013d38 <RegionIN865RxConfig+0x190>)
 8013c32:	5cd3      	ldrb	r3, [r2, r3]
 8013c34:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 8013c36:	4b3e      	ldr	r3, [pc, #248]	; (8013d30 <RegionIN865RxConfig+0x188>)
 8013c38:	68db      	ldr	r3, [r3, #12]
 8013c3a:	6938      	ldr	r0, [r7, #16]
 8013c3c:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 8013c3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013c42:	2b07      	cmp	r3, #7
 8013c44:	d128      	bne.n	8013c98 <RegionIN865RxConfig+0xf0>
    {
        modem = MODEM_FSK;
 8013c46:	2300      	movs	r3, #0
 8013c48:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 8013c4a:	4b39      	ldr	r3, [pc, #228]	; (8013d30 <RegionIN865RxConfig+0x188>)
 8013c4c:	699c      	ldr	r4, [r3, #24]
 8013c4e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013c52:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8013c56:	fb02 f303 	mul.w	r3, r2, r3
 8013c5a:	4619      	mov	r1, r3
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	689b      	ldr	r3, [r3, #8]
 8013c60:	b29b      	uxth	r3, r3
 8013c62:	687a      	ldr	r2, [r7, #4]
 8013c64:	7c92      	ldrb	r2, [r2, #18]
 8013c66:	7df8      	ldrb	r0, [r7, #23]
 8013c68:	9209      	str	r2, [sp, #36]	; 0x24
 8013c6a:	2200      	movs	r2, #0
 8013c6c:	9208      	str	r2, [sp, #32]
 8013c6e:	2200      	movs	r2, #0
 8013c70:	9207      	str	r2, [sp, #28]
 8013c72:	2200      	movs	r2, #0
 8013c74:	9206      	str	r2, [sp, #24]
 8013c76:	2201      	movs	r2, #1
 8013c78:	9205      	str	r2, [sp, #20]
 8013c7a:	2200      	movs	r2, #0
 8013c7c:	9204      	str	r2, [sp, #16]
 8013c7e:	2200      	movs	r2, #0
 8013c80:	9203      	str	r2, [sp, #12]
 8013c82:	9302      	str	r3, [sp, #8]
 8013c84:	2305      	movs	r3, #5
 8013c86:	9301      	str	r3, [sp, #4]
 8013c88:	4b2c      	ldr	r3, [pc, #176]	; (8013d3c <RegionIN865RxConfig+0x194>)
 8013c8a:	9300      	str	r3, [sp, #0]
 8013c8c:	2300      	movs	r3, #0
 8013c8e:	460a      	mov	r2, r1
 8013c90:	f24c 3150 	movw	r1, #50000	; 0xc350
 8013c94:	47a0      	blx	r4
 8013c96:	e024      	b.n	8013ce2 <RegionIN865RxConfig+0x13a>
    }
    else
    {
        modem = MODEM_LORA;
 8013c98:	2301      	movs	r3, #1
 8013c9a:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8013c9c:	4b24      	ldr	r3, [pc, #144]	; (8013d30 <RegionIN865RxConfig+0x188>)
 8013c9e:	699c      	ldr	r4, [r3, #24]
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	789b      	ldrb	r3, [r3, #2]
 8013ca4:	461d      	mov	r5, r3
 8013ca6:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8013caa:	687b      	ldr	r3, [r7, #4]
 8013cac:	689b      	ldr	r3, [r3, #8]
 8013cae:	b29b      	uxth	r3, r3
 8013cb0:	687a      	ldr	r2, [r7, #4]
 8013cb2:	7c92      	ldrb	r2, [r2, #18]
 8013cb4:	7df8      	ldrb	r0, [r7, #23]
 8013cb6:	9209      	str	r2, [sp, #36]	; 0x24
 8013cb8:	2201      	movs	r2, #1
 8013cba:	9208      	str	r2, [sp, #32]
 8013cbc:	2200      	movs	r2, #0
 8013cbe:	9207      	str	r2, [sp, #28]
 8013cc0:	2200      	movs	r2, #0
 8013cc2:	9206      	str	r2, [sp, #24]
 8013cc4:	2200      	movs	r2, #0
 8013cc6:	9205      	str	r2, [sp, #20]
 8013cc8:	2200      	movs	r2, #0
 8013cca:	9204      	str	r2, [sp, #16]
 8013ccc:	2200      	movs	r2, #0
 8013cce:	9203      	str	r2, [sp, #12]
 8013cd0:	9302      	str	r3, [sp, #8]
 8013cd2:	2308      	movs	r3, #8
 8013cd4:	9301      	str	r3, [sp, #4]
 8013cd6:	2300      	movs	r3, #0
 8013cd8:	9300      	str	r3, [sp, #0]
 8013cda:	2301      	movs	r3, #1
 8013cdc:	460a      	mov	r2, r1
 8013cde:	4629      	mov	r1, r5
 8013ce0:	47a0      	blx	r4
    }

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 8013ce2:	687b      	ldr	r3, [r7, #4]
 8013ce4:	7c5b      	ldrb	r3, [r3, #17]
 8013ce6:	2b00      	cmp	r3, #0
 8013ce8:	d005      	beq.n	8013cf6 <RegionIN865RxConfig+0x14e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterIN865[dr];
 8013cea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013cee:	4a14      	ldr	r2, [pc, #80]	; (8013d40 <RegionIN865RxConfig+0x198>)
 8013cf0:	5cd3      	ldrb	r3, [r2, r3]
 8013cf2:	75bb      	strb	r3, [r7, #22]
 8013cf4:	e004      	b.n	8013d00 <RegionIN865RxConfig+0x158>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateIN865[dr];
 8013cf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013cfa:	4a12      	ldr	r2, [pc, #72]	; (8013d44 <RegionIN865RxConfig+0x19c>)
 8013cfc:	5cd3      	ldrb	r3, [r2, r3]
 8013cfe:	75bb      	strb	r3, [r7, #22]
    }
    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8013d00:	4b0b      	ldr	r3, [pc, #44]	; (8013d30 <RegionIN865RxConfig+0x188>)
 8013d02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013d04:	7dba      	ldrb	r2, [r7, #22]
 8013d06:	320d      	adds	r2, #13
 8013d08:	b2d1      	uxtb	r1, r2
 8013d0a:	7dfa      	ldrb	r2, [r7, #23]
 8013d0c:	4610      	mov	r0, r2
 8013d0e:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8013d10:	687b      	ldr	r3, [r7, #4]
 8013d12:	7cdb      	ldrb	r3, [r3, #19]
 8013d14:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8013d18:	6939      	ldr	r1, [r7, #16]
 8013d1a:	4618      	mov	r0, r3
 8013d1c:	f7ff faf2 	bl	8013304 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 8013d20:	683b      	ldr	r3, [r7, #0]
 8013d22:	7bfa      	ldrb	r2, [r7, #15]
 8013d24:	701a      	strb	r2, [r3, #0]
    return true;
 8013d26:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_IN865 */
}
 8013d28:	4618      	mov	r0, r3
 8013d2a:	3718      	adds	r7, #24
 8013d2c:	46bd      	mov	sp, r7
 8013d2e:	bdb0      	pop	{r4, r5, r7, pc}
 8013d30:	08019c7c 	.word	0x08019c7c
 8013d34:	20000ce8 	.word	0x20000ce8
 8013d38:	08019c3c 	.word	0x08019c3c
 8013d3c:	00014585 	.word	0x00014585
 8013d40:	08019c6c 	.word	0x08019c6c
 8013d44:	08019c64 	.word	0x08019c64

08013d48 <RegionIN865TxConfig>:

bool RegionIN865TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8013d48:	b590      	push	{r4, r7, lr}
 8013d4a:	b093      	sub	sp, #76	; 0x4c
 8013d4c:	af0a      	add	r7, sp, #40	; 0x28
 8013d4e:	60f8      	str	r0, [r7, #12]
 8013d50:	60b9      	str	r1, [r7, #8]
 8013d52:	607a      	str	r2, [r7, #4]
#if defined( REGION_IN865 )
    RadioModems_t modem;
    int8_t phyDr = DataratesIN865[txConfig->Datarate];
 8013d54:	68fb      	ldr	r3, [r7, #12]
 8013d56:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8013d5a:	461a      	mov	r2, r3
 8013d5c:	4b5d      	ldr	r3, [pc, #372]	; (8013ed4 <RegionIN865TxConfig+0x18c>)
 8013d5e:	5c9b      	ldrb	r3, [r3, r2]
 8013d60:	77bb      	strb	r3, [r7, #30]
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 8013d62:	68fb      	ldr	r3, [r7, #12]
 8013d64:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8013d68:	4b5b      	ldr	r3, [pc, #364]	; (8013ed8 <RegionIN865TxConfig+0x190>)
 8013d6a:	681a      	ldr	r2, [r3, #0]
 8013d6c:	4b5b      	ldr	r3, [pc, #364]	; (8013edc <RegionIN865TxConfig+0x194>)
 8013d6e:	6819      	ldr	r1, [r3, #0]
 8013d70:	68fb      	ldr	r3, [r7, #12]
 8013d72:	781b      	ldrb	r3, [r3, #0]
 8013d74:	461c      	mov	r4, r3
 8013d76:	4623      	mov	r3, r4
 8013d78:	005b      	lsls	r3, r3, #1
 8013d7a:	4423      	add	r3, r4
 8013d7c:	009b      	lsls	r3, r3, #2
 8013d7e:	440b      	add	r3, r1
 8013d80:	3309      	adds	r3, #9
 8013d82:	781b      	ldrb	r3, [r3, #0]
 8013d84:	4619      	mov	r1, r3
 8013d86:	460b      	mov	r3, r1
 8013d88:	005b      	lsls	r3, r3, #1
 8013d8a:	440b      	add	r3, r1
 8013d8c:	00db      	lsls	r3, r3, #3
 8013d8e:	4413      	add	r3, r2
 8013d90:	3302      	adds	r3, #2
 8013d92:	f993 3000 	ldrsb.w	r3, [r3]
 8013d96:	4619      	mov	r1, r3
 8013d98:	f7ff fa81 	bl	801329e <RegionCommonLimitTxPower>
 8013d9c:	4603      	mov	r3, r0
 8013d9e:	777b      	strb	r3, [r7, #29]
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsIN865 );
 8013da0:	68fb      	ldr	r3, [r7, #12]
 8013da2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8013da6:	494e      	ldr	r1, [pc, #312]	; (8013ee0 <RegionIN865TxConfig+0x198>)
 8013da8:	4618      	mov	r0, r3
 8013daa:	f7ff fa8d 	bl	80132c8 <RegionCommonGetBandwidth>
 8013dae:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 8013db0:	2300      	movs	r3, #0
 8013db2:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8013db4:	68fb      	ldr	r3, [r7, #12]
 8013db6:	6859      	ldr	r1, [r3, #4]
 8013db8:	68fb      	ldr	r3, [r7, #12]
 8013dba:	689a      	ldr	r2, [r3, #8]
 8013dbc:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8013dc0:	4618      	mov	r0, r3
 8013dc2:	f7ff f8dd 	bl	8012f80 <RegionCommonComputeTxPower>
 8013dc6:	4603      	mov	r3, r0
 8013dc8:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8013dca:	4b46      	ldr	r3, [pc, #280]	; (8013ee4 <RegionIN865TxConfig+0x19c>)
 8013dcc:	68da      	ldr	r2, [r3, #12]
 8013dce:	4b43      	ldr	r3, [pc, #268]	; (8013edc <RegionIN865TxConfig+0x194>)
 8013dd0:	6819      	ldr	r1, [r3, #0]
 8013dd2:	68fb      	ldr	r3, [r7, #12]
 8013dd4:	781b      	ldrb	r3, [r3, #0]
 8013dd6:	4618      	mov	r0, r3
 8013dd8:	4603      	mov	r3, r0
 8013dda:	005b      	lsls	r3, r3, #1
 8013ddc:	4403      	add	r3, r0
 8013dde:	009b      	lsls	r3, r3, #2
 8013de0:	440b      	add	r3, r1
 8013de2:	681b      	ldr	r3, [r3, #0]
 8013de4:	4618      	mov	r0, r3
 8013de6:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 8013de8:	68fb      	ldr	r3, [r7, #12]
 8013dea:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8013dee:	2b07      	cmp	r3, #7
 8013df0:	d124      	bne.n	8013e3c <RegionIN865TxConfig+0xf4>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 8013df2:	2300      	movs	r3, #0
 8013df4:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 8013df6:	4b3b      	ldr	r3, [pc, #236]	; (8013ee4 <RegionIN865TxConfig+0x19c>)
 8013df8:	69dc      	ldr	r4, [r3, #28]
 8013dfa:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8013dfe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8013e02:	fb02 f303 	mul.w	r3, r2, r3
 8013e06:	461a      	mov	r2, r3
 8013e08:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8013e0c:	7ff8      	ldrb	r0, [r7, #31]
 8013e0e:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8013e12:	9308      	str	r3, [sp, #32]
 8013e14:	2300      	movs	r3, #0
 8013e16:	9307      	str	r3, [sp, #28]
 8013e18:	2300      	movs	r3, #0
 8013e1a:	9306      	str	r3, [sp, #24]
 8013e1c:	2300      	movs	r3, #0
 8013e1e:	9305      	str	r3, [sp, #20]
 8013e20:	2301      	movs	r3, #1
 8013e22:	9304      	str	r3, [sp, #16]
 8013e24:	2300      	movs	r3, #0
 8013e26:	9303      	str	r3, [sp, #12]
 8013e28:	2305      	movs	r3, #5
 8013e2a:	9302      	str	r3, [sp, #8]
 8013e2c:	2300      	movs	r3, #0
 8013e2e:	9301      	str	r3, [sp, #4]
 8013e30:	9200      	str	r2, [sp, #0]
 8013e32:	69bb      	ldr	r3, [r7, #24]
 8013e34:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8013e38:	47a0      	blx	r4
 8013e3a:	e01d      	b.n	8013e78 <RegionIN865TxConfig+0x130>
    }
    else
    {
        modem = MODEM_LORA;
 8013e3c:	2301      	movs	r3, #1
 8013e3e:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8013e40:	4b28      	ldr	r3, [pc, #160]	; (8013ee4 <RegionIN865TxConfig+0x19c>)
 8013e42:	69dc      	ldr	r4, [r3, #28]
 8013e44:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8013e48:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8013e4c:	7ff8      	ldrb	r0, [r7, #31]
 8013e4e:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8013e52:	9208      	str	r2, [sp, #32]
 8013e54:	2200      	movs	r2, #0
 8013e56:	9207      	str	r2, [sp, #28]
 8013e58:	2200      	movs	r2, #0
 8013e5a:	9206      	str	r2, [sp, #24]
 8013e5c:	2200      	movs	r2, #0
 8013e5e:	9205      	str	r2, [sp, #20]
 8013e60:	2201      	movs	r2, #1
 8013e62:	9204      	str	r2, [sp, #16]
 8013e64:	2200      	movs	r2, #0
 8013e66:	9203      	str	r2, [sp, #12]
 8013e68:	2208      	movs	r2, #8
 8013e6a:	9202      	str	r2, [sp, #8]
 8013e6c:	2201      	movs	r2, #1
 8013e6e:	9201      	str	r2, [sp, #4]
 8013e70:	9300      	str	r3, [sp, #0]
 8013e72:	69bb      	ldr	r3, [r7, #24]
 8013e74:	2200      	movs	r2, #0
 8013e76:	47a0      	blx	r4
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 8013e78:	4b18      	ldr	r3, [pc, #96]	; (8013edc <RegionIN865TxConfig+0x194>)
 8013e7a:	681a      	ldr	r2, [r3, #0]
 8013e7c:	68fb      	ldr	r3, [r7, #12]
 8013e7e:	781b      	ldrb	r3, [r3, #0]
 8013e80:	4619      	mov	r1, r3
 8013e82:	460b      	mov	r3, r1
 8013e84:	005b      	lsls	r3, r3, #1
 8013e86:	440b      	add	r3, r1
 8013e88:	009b      	lsls	r3, r3, #2
 8013e8a:	4413      	add	r3, r2
 8013e8c:	681a      	ldr	r2, [r3, #0]
 8013e8e:	68fb      	ldr	r3, [r7, #12]
 8013e90:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8013e94:	4619      	mov	r1, r3
 8013e96:	4610      	mov	r0, r2
 8013e98:	f7ff fa72 	bl	8013380 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8013e9c:	68fb      	ldr	r3, [r7, #12]
 8013e9e:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8013ea2:	68fb      	ldr	r3, [r7, #12]
 8013ea4:	899b      	ldrh	r3, [r3, #12]
 8013ea6:	4619      	mov	r1, r3
 8013ea8:	4610      	mov	r0, r2
 8013eaa:	f7ff faa7 	bl	80133fc <GetTimeOnAir>
 8013eae:	4602      	mov	r2, r0
 8013eb0:	687b      	ldr	r3, [r7, #4]
 8013eb2:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 8013eb4:	4b0b      	ldr	r3, [pc, #44]	; (8013ee4 <RegionIN865TxConfig+0x19c>)
 8013eb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013eb8:	68fa      	ldr	r2, [r7, #12]
 8013eba:	8992      	ldrh	r2, [r2, #12]
 8013ebc:	b2d1      	uxtb	r1, r2
 8013ebe:	7ffa      	ldrb	r2, [r7, #31]
 8013ec0:	4610      	mov	r0, r2
 8013ec2:	4798      	blx	r3

    *txPower = txPowerLimited;
 8013ec4:	68bb      	ldr	r3, [r7, #8]
 8013ec6:	7f7a      	ldrb	r2, [r7, #29]
 8013ec8:	701a      	strb	r2, [r3, #0]
    return true;
 8013eca:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_IN865 */
}
 8013ecc:	4618      	mov	r0, r3
 8013ece:	3724      	adds	r7, #36	; 0x24
 8013ed0:	46bd      	mov	sp, r7
 8013ed2:	bd90      	pop	{r4, r7, pc}
 8013ed4:	08019c3c 	.word	0x08019c3c
 8013ed8:	20000ce4 	.word	0x20000ce4
 8013edc:	20000ce8 	.word	0x20000ce8
 8013ee0:	08019c44 	.word	0x08019c44
 8013ee4:	08019c7c 	.word	0x08019c7c

08013ee8 <RegionIN865LinkAdrReq>:

uint8_t RegionIN865LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8013ee8:	b590      	push	{r4, r7, lr}
 8013eea:	b093      	sub	sp, #76	; 0x4c
 8013eec:	af00      	add	r7, sp, #0
 8013eee:	60f8      	str	r0, [r7, #12]
 8013ef0:	60b9      	str	r1, [r7, #8]
 8013ef2:	607a      	str	r2, [r7, #4]
 8013ef4:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 8013ef6:	2307      	movs	r3, #7
 8013ef8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#if defined( REGION_IN865 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8013efc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8013f00:	2200      	movs	r2, #0
 8013f02:	601a      	str	r2, [r3, #0]
 8013f04:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 8013f06:	2300      	movs	r3, #0
 8013f08:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
    uint8_t bytesProcessed = 0;
 8013f0c:	2300      	movs	r3, #0
 8013f0e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    uint16_t chMask = 0;
 8013f12:	2300      	movs	r3, #0
 8013f14:	877b      	strh	r3, [r7, #58]	; 0x3a
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8013f16:	e085      	b.n	8014024 <RegionIN865LinkAdrReq+0x13c>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8013f18:	68fb      	ldr	r3, [r7, #12]
 8013f1a:	685a      	ldr	r2, [r3, #4]
 8013f1c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8013f20:	4413      	add	r3, r2
 8013f22:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8013f26:	4611      	mov	r1, r2
 8013f28:	4618      	mov	r0, r3
 8013f2a:	f7fe fe81 	bl	8012c30 <RegionCommonParseLinkAdrReq>
 8013f2e:	4603      	mov	r3, r0
 8013f30:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

        if( nextIndex == 0 )
 8013f34:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8013f38:	2b00      	cmp	r3, #0
 8013f3a:	d07b      	beq.n	8014034 <RegionIN865LinkAdrReq+0x14c>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 8013f3c:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8013f40:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8013f44:	4413      	add	r3, r2
 8013f46:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 8013f4a:	2307      	movs	r3, #7
 8013f4c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 8013f50:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8013f54:	877b      	strh	r3, [r7, #58]	; 0x3a

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 8013f56:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013f5a:	2b00      	cmp	r3, #0
 8013f5c:	d109      	bne.n	8013f72 <RegionIN865LinkAdrReq+0x8a>
 8013f5e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013f60:	2b00      	cmp	r3, #0
 8013f62:	d106      	bne.n	8013f72 <RegionIN865LinkAdrReq+0x8a>
        {
            status &= 0xFE; // Channel mask KO
 8013f64:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8013f68:	f023 0301 	bic.w	r3, r3, #1
 8013f6c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8013f70:	e058      	b.n	8014024 <RegionIN865LinkAdrReq+0x13c>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8013f72:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013f76:	2b00      	cmp	r3, #0
 8013f78:	d003      	beq.n	8013f82 <RegionIN865LinkAdrReq+0x9a>
 8013f7a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013f7e:	2b05      	cmp	r3, #5
 8013f80:	d903      	bls.n	8013f8a <RegionIN865LinkAdrReq+0xa2>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 8013f82:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8013f86:	2b06      	cmp	r3, #6
 8013f88:	d906      	bls.n	8013f98 <RegionIN865LinkAdrReq+0xb0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 8013f8a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8013f8e:	f023 0301 	bic.w	r3, r3, #1
 8013f92:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8013f96:	e045      	b.n	8014024 <RegionIN865LinkAdrReq+0x13c>
        }
        else
        {
            for( uint8_t i = 0; i < IN865_MAX_NB_CHANNELS; i++ )
 8013f98:	2300      	movs	r3, #0
 8013f9a:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8013f9e:	e03d      	b.n	801401c <RegionIN865LinkAdrReq+0x134>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 8013fa0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013fa4:	2b06      	cmp	r3, #6
 8013fa6:	d118      	bne.n	8013fda <RegionIN865LinkAdrReq+0xf2>
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 8013fa8:	4b64      	ldr	r3, [pc, #400]	; (801413c <RegionIN865LinkAdrReq+0x254>)
 8013faa:	6819      	ldr	r1, [r3, #0]
 8013fac:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8013fb0:	4613      	mov	r3, r2
 8013fb2:	005b      	lsls	r3, r3, #1
 8013fb4:	4413      	add	r3, r2
 8013fb6:	009b      	lsls	r3, r3, #2
 8013fb8:	440b      	add	r3, r1
 8013fba:	681b      	ldr	r3, [r3, #0]
 8013fbc:	2b00      	cmp	r3, #0
 8013fbe:	d028      	beq.n	8014012 <RegionIN865LinkAdrReq+0x12a>
                    {
                        chMask |= 1 << i;
 8013fc0:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8013fc4:	2201      	movs	r2, #1
 8013fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8013fca:	b21a      	sxth	r2, r3
 8013fcc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013fce:	b21b      	sxth	r3, r3
 8013fd0:	4313      	orrs	r3, r2
 8013fd2:	b21b      	sxth	r3, r3
 8013fd4:	b29b      	uxth	r3, r3
 8013fd6:	877b      	strh	r3, [r7, #58]	; 0x3a
 8013fd8:	e01b      	b.n	8014012 <RegionIN865LinkAdrReq+0x12a>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8013fda:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013fdc:	461a      	mov	r2, r3
 8013fde:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8013fe2:	fa42 f303 	asr.w	r3, r2, r3
 8013fe6:	f003 0301 	and.w	r3, r3, #1
 8013fea:	2b00      	cmp	r3, #0
 8013fec:	d011      	beq.n	8014012 <RegionIN865LinkAdrReq+0x12a>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 8013fee:	4b53      	ldr	r3, [pc, #332]	; (801413c <RegionIN865LinkAdrReq+0x254>)
 8013ff0:	6819      	ldr	r1, [r3, #0]
 8013ff2:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8013ff6:	4613      	mov	r3, r2
 8013ff8:	005b      	lsls	r3, r3, #1
 8013ffa:	4413      	add	r3, r2
 8013ffc:	009b      	lsls	r3, r3, #2
 8013ffe:	440b      	add	r3, r1
 8014000:	681b      	ldr	r3, [r3, #0]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8014002:	2b00      	cmp	r3, #0
 8014004:	d105      	bne.n	8014012 <RegionIN865LinkAdrReq+0x12a>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 8014006:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801400a:	f023 0301 	bic.w	r3, r3, #1
 801400e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            for( uint8_t i = 0; i < IN865_MAX_NB_CHANNELS; i++ )
 8014012:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8014016:	3301      	adds	r3, #1
 8014018:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 801401c:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8014020:	2b0f      	cmp	r3, #15
 8014022:	d9bd      	bls.n	8013fa0 <RegionIN865LinkAdrReq+0xb8>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8014024:	68fb      	ldr	r3, [r7, #12]
 8014026:	7a1b      	ldrb	r3, [r3, #8]
 8014028:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 801402c:	429a      	cmp	r2, r3
 801402e:	f4ff af73 	bcc.w	8013f18 <RegionIN865LinkAdrReq+0x30>
 8014032:	e000      	b.n	8014036 <RegionIN865LinkAdrReq+0x14e>
            break; // break loop, since no more request has been found
 8014034:	bf00      	nop
                }
            }
        }
    }

    if( linkAdrParams.Datarate != DR_6 )
 8014036:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d
 801403a:	2b06      	cmp	r3, #6
 801403c:	d051      	beq.n	80140e2 <RegionIN865LinkAdrReq+0x1fa>
    {
        // Get the minimum possible datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 801403e:	2302      	movs	r3, #2
 8014040:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8014044:	68fb      	ldr	r3, [r7, #12]
 8014046:	7a5b      	ldrb	r3, [r3, #9]
 8014048:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        phyParam = RegionIN865GetPhyParam( &getPhy );
 801404c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8014050:	4618      	mov	r0, r3
 8014052:	f7ff fa23 	bl	801349c <RegionIN865GetPhyParam>
 8014056:	4603      	mov	r3, r0
 8014058:	633b      	str	r3, [r7, #48]	; 0x30

        linkAdrVerifyParams.Status = status;
 801405a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801405e:	753b      	strb	r3, [r7, #20]
        linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8014060:	68fb      	ldr	r3, [r7, #12]
 8014062:	7a9b      	ldrb	r3, [r3, #10]
 8014064:	757b      	strb	r3, [r7, #21]
        linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8014066:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d
 801406a:	75bb      	strb	r3, [r7, #22]
        linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 801406c:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 8014070:	75fb      	strb	r3, [r7, #23]
        linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8014072:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8014076:	763b      	strb	r3, [r7, #24]
        linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8014078:	68fb      	ldr	r3, [r7, #12]
 801407a:	f993 300b 	ldrsb.w	r3, [r3, #11]
 801407e:	767b      	strb	r3, [r7, #25]
        linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8014080:	68fb      	ldr	r3, [r7, #12]
 8014082:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8014086:	76bb      	strb	r3, [r7, #26]
        linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8014088:	68fb      	ldr	r3, [r7, #12]
 801408a:	7b5b      	ldrb	r3, [r3, #13]
 801408c:	b25b      	sxtb	r3, r3
 801408e:	76fb      	strb	r3, [r7, #27]
        linkAdrVerifyParams.NbChannels = IN865_MAX_NB_CHANNELS;
 8014090:	2310      	movs	r3, #16
 8014092:	773b      	strb	r3, [r7, #28]
        linkAdrVerifyParams.ChannelsMask = &chMask;
 8014094:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 8014098:	623b      	str	r3, [r7, #32]
        linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 801409a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801409c:	b25b      	sxtb	r3, r3
 801409e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        linkAdrVerifyParams.MaxDatarate = IN865_TX_MAX_DATARATE;
 80140a2:	2307      	movs	r3, #7
 80140a4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 80140a8:	4b24      	ldr	r3, [pc, #144]	; (801413c <RegionIN865LinkAdrReq+0x254>)
 80140aa:	681b      	ldr	r3, [r3, #0]
 80140ac:	62bb      	str	r3, [r7, #40]	; 0x28
        linkAdrVerifyParams.MinTxPower = IN865_MIN_TX_POWER;
 80140ae:	230a      	movs	r3, #10
 80140b0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        linkAdrVerifyParams.MaxTxPower = IN865_MAX_TX_POWER;
 80140b4:	2300      	movs	r3, #0
 80140b6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
        linkAdrVerifyParams.Version = linkAdrReq->Version;
 80140ba:	68fb      	ldr	r3, [r7, #12]
 80140bc:	681b      	ldr	r3, [r3, #0]
 80140be:	613b      	str	r3, [r7, #16]

        // Verify the parameters and update, if necessary
        status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 80140c0:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80140c4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80140c8:	1c9a      	adds	r2, r3, #2
 80140ca:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80140ce:	1c59      	adds	r1, r3, #1
 80140d0:	f107 0010 	add.w	r0, r7, #16
 80140d4:	4623      	mov	r3, r4
 80140d6:	f7fe fdfc 	bl	8012cd2 <RegionCommonLinkAdrReqVerifyParams>
 80140da:	4603      	mov	r3, r0
 80140dc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80140e0:	e005      	b.n	80140ee <RegionIN865LinkAdrReq+0x206>
    }
    else
    {// DR_6 is not supported by this region
        status &= 0xFD; // Datarate KO
 80140e2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80140e6:	f023 0302 	bic.w	r3, r3, #2
 80140ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 80140ee:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80140f2:	2b07      	cmp	r3, #7
 80140f4:	d10c      	bne.n	8014110 <RegionIN865LinkAdrReq+0x228>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 80140f6:	4b11      	ldr	r3, [pc, #68]	; (801413c <RegionIN865LinkAdrReq+0x254>)
 80140f8:	681b      	ldr	r3, [r3, #0]
 80140fa:	33c0      	adds	r3, #192	; 0xc0
 80140fc:	2202      	movs	r2, #2
 80140fe:	2100      	movs	r1, #0
 8014100:	4618      	mov	r0, r3
 8014102:	f000 fb7d 	bl	8014800 <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 8014106:	4b0d      	ldr	r3, [pc, #52]	; (801413c <RegionIN865LinkAdrReq+0x254>)
 8014108:	681b      	ldr	r3, [r3, #0]
 801410a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801410c:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8014110:	f997 203d 	ldrsb.w	r2, [r7, #61]	; 0x3d
 8014114:	68bb      	ldr	r3, [r7, #8]
 8014116:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8014118:	f997 203e 	ldrsb.w	r2, [r7, #62]	; 0x3e
 801411c:	687b      	ldr	r3, [r7, #4]
 801411e:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8014120:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8014124:	683b      	ldr	r3, [r7, #0]
 8014126:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8014128:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801412a:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 801412e:	701a      	strb	r2, [r3, #0]

#endif /* REGION_IN865 */
    return status;
 8014130:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8014134:	4618      	mov	r0, r3
 8014136:	374c      	adds	r7, #76	; 0x4c
 8014138:	46bd      	mov	sp, r7
 801413a:	bd90      	pop	{r4, r7, pc}
 801413c:	20000ce8 	.word	0x20000ce8

08014140 <RegionIN865RxParamSetupReq>:

uint8_t RegionIN865RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8014140:	b580      	push	{r7, lr}
 8014142:	b084      	sub	sp, #16
 8014144:	af00      	add	r7, sp, #0
 8014146:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8014148:	2307      	movs	r3, #7
 801414a:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_IN865 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	685b      	ldr	r3, [r3, #4]
 8014150:	4618      	mov	r0, r3
 8014152:	f7ff f92d 	bl	80133b0 <VerifyRfFreq>
 8014156:	4603      	mov	r3, r0
 8014158:	f083 0301 	eor.w	r3, r3, #1
 801415c:	b2db      	uxtb	r3, r3
 801415e:	2b00      	cmp	r3, #0
 8014160:	d003      	beq.n	801416a <RegionIN865RxParamSetupReq+0x2a>
    {
        status &= 0xFE; // Channel frequency KO
 8014162:	7bfb      	ldrb	r3, [r7, #15]
 8014164:	f023 0301 	bic.w	r3, r3, #1
 8014168:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, IN865_RX_MIN_DATARATE, IN865_RX_MAX_DATARATE ) == false ) ||
 801416a:	687b      	ldr	r3, [r7, #4]
 801416c:	f993 3000 	ldrsb.w	r3, [r3]
 8014170:	2207      	movs	r2, #7
 8014172:	2100      	movs	r1, #0
 8014174:	4618      	mov	r0, r3
 8014176:	f7fe fb9a 	bl	80128ae <RegionCommonValueInRange>
 801417a:	4603      	mov	r3, r0
 801417c:	2b00      	cmp	r3, #0
 801417e:	d004      	beq.n	801418a <RegionIN865RxParamSetupReq+0x4a>
        // DR_6 is not supported by this region
        ( rxParamSetupReq->Datarate == DR_6 ) )
 8014180:	687b      	ldr	r3, [r7, #4]
 8014182:	f993 3000 	ldrsb.w	r3, [r3]
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, IN865_RX_MIN_DATARATE, IN865_RX_MAX_DATARATE ) == false ) ||
 8014186:	2b06      	cmp	r3, #6
 8014188:	d103      	bne.n	8014192 <RegionIN865RxParamSetupReq+0x52>
    {
        status &= 0xFD; // Datarate KO
 801418a:	7bfb      	ldrb	r3, [r7, #15]
 801418c:	f023 0302 	bic.w	r3, r3, #2
 8014190:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, IN865_MIN_RX1_DR_OFFSET, IN865_MAX_RX1_DR_OFFSET ) == false )
 8014192:	687b      	ldr	r3, [r7, #4]
 8014194:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014198:	2207      	movs	r2, #7
 801419a:	2100      	movs	r1, #0
 801419c:	4618      	mov	r0, r3
 801419e:	f7fe fb86 	bl	80128ae <RegionCommonValueInRange>
 80141a2:	4603      	mov	r3, r0
 80141a4:	2b00      	cmp	r3, #0
 80141a6:	d103      	bne.n	80141b0 <RegionIN865RxParamSetupReq+0x70>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 80141a8:	7bfb      	ldrb	r3, [r7, #15]
 80141aa:	f023 0304 	bic.w	r3, r3, #4
 80141ae:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_IN865 */
    return status;
 80141b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80141b2:	4618      	mov	r0, r3
 80141b4:	3710      	adds	r7, #16
 80141b6:	46bd      	mov	sp, r7
 80141b8:	bd80      	pop	{r7, pc}
	...

080141bc <RegionIN865NewChannelReq>:

int8_t RegionIN865NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 80141bc:	b580      	push	{r7, lr}
 80141be:	b086      	sub	sp, #24
 80141c0:	af00      	add	r7, sp, #0
 80141c2:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 80141c4:	2303      	movs	r3, #3
 80141c6:	75fb      	strb	r3, [r7, #23]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 80141c8:	687b      	ldr	r3, [r7, #4]
 80141ca:	681b      	ldr	r3, [r3, #0]
 80141cc:	681b      	ldr	r3, [r3, #0]
 80141ce:	2b00      	cmp	r3, #0
 80141d0:	d114      	bne.n	80141fc <RegionIN865NewChannelReq+0x40>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 80141d2:	687b      	ldr	r3, [r7, #4]
 80141d4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80141d8:	b2db      	uxtb	r3, r3
 80141da:	723b      	strb	r3, [r7, #8]

        // Remove
        if( RegionIN865ChannelsRemove( &channelRemove ) == false )
 80141dc:	f107 0308 	add.w	r3, r7, #8
 80141e0:	4618      	mov	r0, r3
 80141e2:	f000 f9ef 	bl	80145c4 <RegionIN865ChannelsRemove>
 80141e6:	4603      	mov	r3, r0
 80141e8:	f083 0301 	eor.w	r3, r3, #1
 80141ec:	b2db      	uxtb	r3, r3
 80141ee:	2b00      	cmp	r3, #0
 80141f0:	d03b      	beq.n	801426a <RegionIN865NewChannelReq+0xae>
        {
            status &= 0xFC;
 80141f2:	7dfb      	ldrb	r3, [r7, #23]
 80141f4:	f023 0303 	bic.w	r3, r3, #3
 80141f8:	75fb      	strb	r3, [r7, #23]
 80141fa:	e036      	b.n	801426a <RegionIN865NewChannelReq+0xae>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 80141fc:	687b      	ldr	r3, [r7, #4]
 80141fe:	681b      	ldr	r3, [r3, #0]
 8014200:	60fb      	str	r3, [r7, #12]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8014208:	b2db      	uxtb	r3, r3
 801420a:	743b      	strb	r3, [r7, #16]

        switch( RegionIN865ChannelAdd( &channelAdd ) )
 801420c:	f107 030c 	add.w	r3, r7, #12
 8014210:	4618      	mov	r0, r3
 8014212:	f000 f93b 	bl	801448c <RegionIN865ChannelAdd>
 8014216:	4603      	mov	r3, r0
 8014218:	2b06      	cmp	r3, #6
 801421a:	d820      	bhi.n	801425e <RegionIN865NewChannelReq+0xa2>
 801421c:	a201      	add	r2, pc, #4	; (adr r2, 8014224 <RegionIN865NewChannelReq+0x68>)
 801421e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014222:	bf00      	nop
 8014224:	08014269 	.word	0x08014269
 8014228:	0801425f 	.word	0x0801425f
 801422c:	0801425f 	.word	0x0801425f
 8014230:	0801425f 	.word	0x0801425f
 8014234:	08014241 	.word	0x08014241
 8014238:	0801424b 	.word	0x0801424b
 801423c:	08014255 	.word	0x08014255
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 8014240:	7dfb      	ldrb	r3, [r7, #23]
 8014242:	f023 0301 	bic.w	r3, r3, #1
 8014246:	75fb      	strb	r3, [r7, #23]
                break;
 8014248:	e00f      	b.n	801426a <RegionIN865NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 801424a:	7dfb      	ldrb	r3, [r7, #23]
 801424c:	f023 0302 	bic.w	r3, r3, #2
 8014250:	75fb      	strb	r3, [r7, #23]
                break;
 8014252:	e00a      	b.n	801426a <RegionIN865NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 8014254:	7dfb      	ldrb	r3, [r7, #23]
 8014256:	f023 0303 	bic.w	r3, r3, #3
 801425a:	75fb      	strb	r3, [r7, #23]
                break;
 801425c:	e005      	b.n	801426a <RegionIN865NewChannelReq+0xae>
            }
            default:
            {
                status &= 0xFC;
 801425e:	7dfb      	ldrb	r3, [r7, #23]
 8014260:	f023 0303 	bic.w	r3, r3, #3
 8014264:	75fb      	strb	r3, [r7, #23]
                break;
 8014266:	e000      	b.n	801426a <RegionIN865NewChannelReq+0xae>
                break;
 8014268:	bf00      	nop
            }
        }
    }

    return status;
 801426a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801426e:	4618      	mov	r0, r3
 8014270:	3718      	adds	r7, #24
 8014272:	46bd      	mov	sp, r7
 8014274:	bd80      	pop	{r7, pc}
 8014276:	bf00      	nop

08014278 <RegionIN865TxParamSetupReq>:

int8_t RegionIN865TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8014278:	b480      	push	{r7}
 801427a:	b083      	sub	sp, #12
 801427c:	af00      	add	r7, sp, #0
 801427e:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8014280:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014284:	4618      	mov	r0, r3
 8014286:	370c      	adds	r7, #12
 8014288:	46bd      	mov	sp, r7
 801428a:	bc80      	pop	{r7}
 801428c:	4770      	bx	lr
	...

08014290 <RegionIN865DlChannelReq>:

int8_t RegionIN865DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8014290:	b580      	push	{r7, lr}
 8014292:	b084      	sub	sp, #16
 8014294:	af00      	add	r7, sp, #0
 8014296:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8014298:	2303      	movs	r3, #3
 801429a:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_IN865 )

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency ) == false )
 801429c:	687b      	ldr	r3, [r7, #4]
 801429e:	685b      	ldr	r3, [r3, #4]
 80142a0:	4618      	mov	r0, r3
 80142a2:	f7ff f885 	bl	80133b0 <VerifyRfFreq>
 80142a6:	4603      	mov	r3, r0
 80142a8:	f083 0301 	eor.w	r3, r3, #1
 80142ac:	b2db      	uxtb	r3, r3
 80142ae:	2b00      	cmp	r3, #0
 80142b0:	d003      	beq.n	80142ba <RegionIN865DlChannelReq+0x2a>
    {
        status &= 0xFE;
 80142b2:	7bfb      	ldrb	r3, [r7, #15]
 80142b4:	f023 0301 	bic.w	r3, r3, #1
 80142b8:	73fb      	strb	r3, [r7, #15]
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 80142ba:	4b14      	ldr	r3, [pc, #80]	; (801430c <RegionIN865DlChannelReq+0x7c>)
 80142bc:	681a      	ldr	r2, [r3, #0]
 80142be:	687b      	ldr	r3, [r7, #4]
 80142c0:	781b      	ldrb	r3, [r3, #0]
 80142c2:	4619      	mov	r1, r3
 80142c4:	460b      	mov	r3, r1
 80142c6:	005b      	lsls	r3, r3, #1
 80142c8:	440b      	add	r3, r1
 80142ca:	009b      	lsls	r3, r3, #2
 80142cc:	4413      	add	r3, r2
 80142ce:	681b      	ldr	r3, [r3, #0]
 80142d0:	2b00      	cmp	r3, #0
 80142d2:	d103      	bne.n	80142dc <RegionIN865DlChannelReq+0x4c>
    {
        status &= 0xFD;
 80142d4:	7bfb      	ldrb	r3, [r7, #15]
 80142d6:	f023 0302 	bic.w	r3, r3, #2
 80142da:	73fb      	strb	r3, [r7, #15]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 80142dc:	7bfb      	ldrb	r3, [r7, #15]
 80142de:	2b03      	cmp	r3, #3
 80142e0:	d10d      	bne.n	80142fe <RegionIN865DlChannelReq+0x6e>
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 80142e2:	4b0a      	ldr	r3, [pc, #40]	; (801430c <RegionIN865DlChannelReq+0x7c>)
 80142e4:	6819      	ldr	r1, [r3, #0]
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	781b      	ldrb	r3, [r3, #0]
 80142ea:	4618      	mov	r0, r3
 80142ec:	687b      	ldr	r3, [r7, #4]
 80142ee:	685a      	ldr	r2, [r3, #4]
 80142f0:	4603      	mov	r3, r0
 80142f2:	005b      	lsls	r3, r3, #1
 80142f4:	4403      	add	r3, r0
 80142f6:	009b      	lsls	r3, r3, #2
 80142f8:	440b      	add	r3, r1
 80142fa:	3304      	adds	r3, #4
 80142fc:	601a      	str	r2, [r3, #0]
    }

#endif /* REGION_IN865 */
    return status;
 80142fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014302:	4618      	mov	r0, r3
 8014304:	3710      	adds	r7, #16
 8014306:	46bd      	mov	sp, r7
 8014308:	bd80      	pop	{r7, pc}
 801430a:	bf00      	nop
 801430c:	20000ce8 	.word	0x20000ce8

08014310 <RegionIN865AlternateDr>:

int8_t RegionIN865AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8014310:	b480      	push	{r7}
 8014312:	b083      	sub	sp, #12
 8014314:	af00      	add	r7, sp, #0
 8014316:	4603      	mov	r3, r0
 8014318:	460a      	mov	r2, r1
 801431a:	71fb      	strb	r3, [r7, #7]
 801431c:	4613      	mov	r3, r2
 801431e:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_IN865 )
    return currentDr;
 8014320:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_IN865 */
}
 8014324:	4618      	mov	r0, r3
 8014326:	370c      	adds	r7, #12
 8014328:	46bd      	mov	sp, r7
 801432a:	bc80      	pop	{r7}
 801432c:	4770      	bx	lr
	...

08014330 <RegionIN865NextChannel>:

LoRaMacStatus_t RegionIN865NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8014330:	b580      	push	{r7, lr}
 8014332:	b09a      	sub	sp, #104	; 0x68
 8014334:	af02      	add	r7, sp, #8
 8014336:	60f8      	str	r0, [r7, #12]
 8014338:	60b9      	str	r1, [r7, #8]
 801433a:	607a      	str	r2, [r7, #4]
 801433c:	603b      	str	r3, [r7, #0]
#if defined( REGION_IN865 )
    uint8_t nbEnabledChannels = 0;
 801433e:	2300      	movs	r3, #0
 8014340:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    uint8_t nbRestrictedChannels = 0;
 8014344:	2300      	movs	r3, #0
 8014346:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
    uint8_t enabledChannels[IN865_MAX_NB_CHANNELS] = { 0 };
 801434a:	2300      	movs	r3, #0
 801434c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801434e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8014352:	2200      	movs	r2, #0
 8014354:	601a      	str	r2, [r3, #0]
 8014356:	605a      	str	r2, [r3, #4]
 8014358:	609a      	str	r2, [r3, #8]
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 801435a:	230c      	movs	r3, #12
 801435c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    uint16_t joinChannels = IN865_JOIN_CHANNELS;
 8014360:	2307      	movs	r3, #7
 8014362:	827b      	strh	r3, [r7, #18]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 8014364:	4b47      	ldr	r3, [pc, #284]	; (8014484 <RegionIN865NextChannel+0x154>)
 8014366:	681b      	ldr	r3, [r3, #0]
 8014368:	33c0      	adds	r3, #192	; 0xc0
 801436a:	2201      	movs	r2, #1
 801436c:	2100      	movs	r1, #0
 801436e:	4618      	mov	r0, r3
 8014370:	f7fe faee 	bl	8012950 <RegionCommonCountChannels>
 8014374:	4603      	mov	r3, r0
 8014376:	2b00      	cmp	r3, #0
 8014378:	d10a      	bne.n	8014390 <RegionIN865NextChannel+0x60>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 801437a:	4b42      	ldr	r3, [pc, #264]	; (8014484 <RegionIN865NextChannel+0x154>)
 801437c:	681b      	ldr	r3, [r3, #0]
 801437e:	f8b3 20c0 	ldrh.w	r2, [r3, #192]	; 0xc0
 8014382:	4b40      	ldr	r3, [pc, #256]	; (8014484 <RegionIN865NextChannel+0x154>)
 8014384:	681b      	ldr	r3, [r3, #0]
 8014386:	f042 0207 	orr.w	r2, r2, #7
 801438a:	b292      	uxth	r2, r2
 801438c:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 8014390:	68fb      	ldr	r3, [r7, #12]
 8014392:	7a5b      	ldrb	r3, [r3, #9]
 8014394:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8014396:	68fb      	ldr	r3, [r7, #12]
 8014398:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801439c:	b2db      	uxtb	r3, r3
 801439e:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 80143a0:	4b38      	ldr	r3, [pc, #224]	; (8014484 <RegionIN865NextChannel+0x154>)
 80143a2:	681b      	ldr	r3, [r3, #0]
 80143a4:	33c0      	adds	r3, #192	; 0xc0
 80143a6:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 80143a8:	4b36      	ldr	r3, [pc, #216]	; (8014484 <RegionIN865NextChannel+0x154>)
 80143aa:	681b      	ldr	r3, [r3, #0]
 80143ac:	61fb      	str	r3, [r7, #28]
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 80143ae:	4b36      	ldr	r3, [pc, #216]	; (8014488 <RegionIN865NextChannel+0x158>)
 80143b0:	681b      	ldr	r3, [r3, #0]
 80143b2:	623b      	str	r3, [r7, #32]
    countChannelsParams.MaxNbChannels = IN865_MAX_NB_CHANNELS;
 80143b4:	2310      	movs	r3, #16
 80143b6:	84bb      	strh	r3, [r7, #36]	; 0x24
    countChannelsParams.JoinChannels = &joinChannels;
 80143b8:	f107 0312 	add.w	r3, r7, #18
 80143bc:	62bb      	str	r3, [r7, #40]	; 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 80143be:	68fb      	ldr	r3, [r7, #12]
 80143c0:	681b      	ldr	r3, [r3, #0]
 80143c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 80143c4:	68fb      	ldr	r3, [r7, #12]
 80143c6:	685b      	ldr	r3, [r3, #4]
 80143c8:	633b      	str	r3, [r7, #48]	; 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 80143ca:	68fb      	ldr	r3, [r7, #12]
 80143cc:	7a9b      	ldrb	r3, [r3, #10]
 80143ce:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    identifyChannelsParam.MaxBands = IN865_MAX_NB_BANDS;
 80143d2:	2301      	movs	r3, #1
 80143d4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 80143d8:	68fa      	ldr	r2, [r7, #12]
 80143da:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80143de:	320c      	adds	r2, #12
 80143e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80143e4:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 80143e8:	68fb      	ldr	r3, [r7, #12]
 80143ea:	7d1b      	ldrb	r3, [r3, #20]
 80143ec:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 80143f0:	68fb      	ldr	r3, [r7, #12]
 80143f2:	f993 2008 	ldrsb.w	r2, [r3, #8]
 80143f6:	68fb      	ldr	r3, [r7, #12]
 80143f8:	8adb      	ldrh	r3, [r3, #22]
 80143fa:	4619      	mov	r1, r3
 80143fc:	4610      	mov	r0, r2
 80143fe:	f7fe fffd 	bl	80133fc <GetTimeOnAir>
 8014402:	4603      	mov	r3, r0
 8014404:	647b      	str	r3, [r7, #68]	; 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8014406:	f107 0314 	add.w	r3, r7, #20
 801440a:	64bb      	str	r3, [r7, #72]	; 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 801440c:	f107 015e 	add.w	r1, r7, #94	; 0x5e
 8014410:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8014414:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8014418:	687b      	ldr	r3, [r7, #4]
 801441a:	9301      	str	r3, [sp, #4]
 801441c:	f107 035d 	add.w	r3, r7, #93	; 0x5d
 8014420:	9300      	str	r3, [sp, #0]
 8014422:	460b      	mov	r3, r1
 8014424:	6839      	ldr	r1, [r7, #0]
 8014426:	f7fe fe9a 	bl	801315e <RegionCommonIdentifyChannels>
 801442a:	4603      	mov	r3, r0
 801442c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8014430:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014434:	2b00      	cmp	r3, #0
 8014436:	d10f      	bne.n	8014458 <RegionIN865NextChannel+0x128>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8014438:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 801443c:	3b01      	subs	r3, #1
 801443e:	4619      	mov	r1, r3
 8014440:	2000      	movs	r0, #0
 8014442:	f000 f98b 	bl	801475c <randr>
 8014446:	4603      	mov	r3, r0
 8014448:	f107 0260 	add.w	r2, r7, #96	; 0x60
 801444c:	4413      	add	r3, r2
 801444e:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8014452:	68bb      	ldr	r3, [r7, #8]
 8014454:	701a      	strb	r2, [r3, #0]
 8014456:	e00e      	b.n	8014476 <RegionIN865NextChannel+0x146>
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 8014458:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801445c:	2b0c      	cmp	r3, #12
 801445e:	d10a      	bne.n	8014476 <RegionIN865NextChannel+0x146>
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8014460:	4b08      	ldr	r3, [pc, #32]	; (8014484 <RegionIN865NextChannel+0x154>)
 8014462:	681b      	ldr	r3, [r3, #0]
 8014464:	f8b3 20c0 	ldrh.w	r2, [r3, #192]	; 0xc0
 8014468:	4b06      	ldr	r3, [pc, #24]	; (8014484 <RegionIN865NextChannel+0x154>)
 801446a:	681b      	ldr	r3, [r3, #0]
 801446c:	f042 0207 	orr.w	r2, r2, #7
 8014470:	b292      	uxth	r2, r2
 8014472:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
    }
    return status;
 8014476:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_IN865 */
}
 801447a:	4618      	mov	r0, r3
 801447c:	3760      	adds	r7, #96	; 0x60
 801447e:	46bd      	mov	sp, r7
 8014480:	bd80      	pop	{r7, pc}
 8014482:	bf00      	nop
 8014484:	20000ce8 	.word	0x20000ce8
 8014488:	20000ce4 	.word	0x20000ce4

0801448c <RegionIN865ChannelAdd>:

LoRaMacStatus_t RegionIN865ChannelAdd( ChannelAddParams_t* channelAdd )
{
 801448c:	b580      	push	{r7, lr}
 801448e:	b084      	sub	sp, #16
 8014490:	af00      	add	r7, sp, #0
 8014492:	6078      	str	r0, [r7, #4]
#if defined( REGION_IN865 )
    bool drInvalid = false;
 8014494:	2300      	movs	r3, #0
 8014496:	73fb      	strb	r3, [r7, #15]
    bool freqInvalid = false;
 8014498:	2300      	movs	r3, #0
 801449a:	73bb      	strb	r3, [r7, #14]
    uint8_t id = channelAdd->ChannelId;
 801449c:	687b      	ldr	r3, [r7, #4]
 801449e:	791b      	ldrb	r3, [r3, #4]
 80144a0:	737b      	strb	r3, [r7, #13]

    if( id < IN865_NUMB_DEFAULT_CHANNELS )
 80144a2:	7b7b      	ldrb	r3, [r7, #13]
 80144a4:	2b02      	cmp	r3, #2
 80144a6:	d801      	bhi.n	80144ac <RegionIN865ChannelAdd+0x20>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 80144a8:	2306      	movs	r3, #6
 80144aa:	e085      	b.n	80145b8 <RegionIN865ChannelAdd+0x12c>
    }

    if( id >= IN865_MAX_NB_CHANNELS )
 80144ac:	7b7b      	ldrb	r3, [r7, #13]
 80144ae:	2b0f      	cmp	r3, #15
 80144b0:	d901      	bls.n	80144b6 <RegionIN865ChannelAdd+0x2a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80144b2:	2303      	movs	r3, #3
 80144b4:	e080      	b.n	80145b8 <RegionIN865ChannelAdd+0x12c>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, IN865_TX_MIN_DATARATE, IN865_TX_MAX_DATARATE ) == false )
 80144b6:	687b      	ldr	r3, [r7, #4]
 80144b8:	681b      	ldr	r3, [r3, #0]
 80144ba:	7a1b      	ldrb	r3, [r3, #8]
 80144bc:	f343 0303 	sbfx	r3, r3, #0, #4
 80144c0:	b25b      	sxtb	r3, r3
 80144c2:	2207      	movs	r2, #7
 80144c4:	2100      	movs	r1, #0
 80144c6:	4618      	mov	r0, r3
 80144c8:	f7fe f9f1 	bl	80128ae <RegionCommonValueInRange>
 80144cc:	4603      	mov	r3, r0
 80144ce:	2b00      	cmp	r3, #0
 80144d0:	d101      	bne.n	80144d6 <RegionIN865ChannelAdd+0x4a>
    {
        drInvalid = true;
 80144d2:	2301      	movs	r3, #1
 80144d4:	73fb      	strb	r3, [r7, #15]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, IN865_TX_MIN_DATARATE, IN865_TX_MAX_DATARATE ) == false )
 80144d6:	687b      	ldr	r3, [r7, #4]
 80144d8:	681b      	ldr	r3, [r3, #0]
 80144da:	7a1b      	ldrb	r3, [r3, #8]
 80144dc:	f343 1303 	sbfx	r3, r3, #4, #4
 80144e0:	b25b      	sxtb	r3, r3
 80144e2:	2207      	movs	r2, #7
 80144e4:	2100      	movs	r1, #0
 80144e6:	4618      	mov	r0, r3
 80144e8:	f7fe f9e1 	bl	80128ae <RegionCommonValueInRange>
 80144ec:	4603      	mov	r3, r0
 80144ee:	2b00      	cmp	r3, #0
 80144f0:	d101      	bne.n	80144f6 <RegionIN865ChannelAdd+0x6a>
    {
        drInvalid = true;
 80144f2:	2301      	movs	r3, #1
 80144f4:	73fb      	strb	r3, [r7, #15]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 80144f6:	687b      	ldr	r3, [r7, #4]
 80144f8:	681b      	ldr	r3, [r3, #0]
 80144fa:	7a1b      	ldrb	r3, [r3, #8]
 80144fc:	f343 0303 	sbfx	r3, r3, #0, #4
 8014500:	b25a      	sxtb	r2, r3
 8014502:	687b      	ldr	r3, [r7, #4]
 8014504:	681b      	ldr	r3, [r3, #0]
 8014506:	7a1b      	ldrb	r3, [r3, #8]
 8014508:	f343 1303 	sbfx	r3, r3, #4, #4
 801450c:	b25b      	sxtb	r3, r3
 801450e:	429a      	cmp	r2, r3
 8014510:	dd01      	ble.n	8014516 <RegionIN865ChannelAdd+0x8a>
    {
        drInvalid = true;
 8014512:	2301      	movs	r3, #1
 8014514:	73fb      	strb	r3, [r7, #15]
    }

    // Check frequency
    if( freqInvalid == false )
 8014516:	7bbb      	ldrb	r3, [r7, #14]
 8014518:	f083 0301 	eor.w	r3, r3, #1
 801451c:	b2db      	uxtb	r3, r3
 801451e:	2b00      	cmp	r3, #0
 8014520:	d00d      	beq.n	801453e <RegionIN865ChannelAdd+0xb2>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency ) == false )
 8014522:	687b      	ldr	r3, [r7, #4]
 8014524:	681b      	ldr	r3, [r3, #0]
 8014526:	681b      	ldr	r3, [r3, #0]
 8014528:	4618      	mov	r0, r3
 801452a:	f7fe ff41 	bl	80133b0 <VerifyRfFreq>
 801452e:	4603      	mov	r3, r0
 8014530:	f083 0301 	eor.w	r3, r3, #1
 8014534:	b2db      	uxtb	r3, r3
 8014536:	2b00      	cmp	r3, #0
 8014538:	d001      	beq.n	801453e <RegionIN865ChannelAdd+0xb2>
        {
            freqInvalid = true;
 801453a:	2301      	movs	r3, #1
 801453c:	73bb      	strb	r3, [r7, #14]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 801453e:	7bfb      	ldrb	r3, [r7, #15]
 8014540:	2b00      	cmp	r3, #0
 8014542:	d004      	beq.n	801454e <RegionIN865ChannelAdd+0xc2>
 8014544:	7bbb      	ldrb	r3, [r7, #14]
 8014546:	2b00      	cmp	r3, #0
 8014548:	d001      	beq.n	801454e <RegionIN865ChannelAdd+0xc2>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 801454a:	2306      	movs	r3, #6
 801454c:	e034      	b.n	80145b8 <RegionIN865ChannelAdd+0x12c>
    }
    if( drInvalid == true )
 801454e:	7bfb      	ldrb	r3, [r7, #15]
 8014550:	2b00      	cmp	r3, #0
 8014552:	d001      	beq.n	8014558 <RegionIN865ChannelAdd+0xcc>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 8014554:	2305      	movs	r3, #5
 8014556:	e02f      	b.n	80145b8 <RegionIN865ChannelAdd+0x12c>
    }
    if( freqInvalid == true )
 8014558:	7bbb      	ldrb	r3, [r7, #14]
 801455a:	2b00      	cmp	r3, #0
 801455c:	d001      	beq.n	8014562 <RegionIN865ChannelAdd+0xd6>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 801455e:	2304      	movs	r3, #4
 8014560:	e02a      	b.n	80145b8 <RegionIN865ChannelAdd+0x12c>
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 8014562:	4b17      	ldr	r3, [pc, #92]	; (80145c0 <RegionIN865ChannelAdd+0x134>)
 8014564:	6819      	ldr	r1, [r3, #0]
 8014566:	7b7a      	ldrb	r2, [r7, #13]
 8014568:	4613      	mov	r3, r2
 801456a:	005b      	lsls	r3, r3, #1
 801456c:	4413      	add	r3, r2
 801456e:	009b      	lsls	r3, r3, #2
 8014570:	18c8      	adds	r0, r1, r3
 8014572:	687b      	ldr	r3, [r7, #4]
 8014574:	681b      	ldr	r3, [r3, #0]
 8014576:	220c      	movs	r2, #12
 8014578:	4619      	mov	r1, r3
 801457a:	f000 f906 	bl	801478a <memcpy1>
    RegionNvmGroup2->Channels[id].Band = 0;
 801457e:	4b10      	ldr	r3, [pc, #64]	; (80145c0 <RegionIN865ChannelAdd+0x134>)
 8014580:	6819      	ldr	r1, [r3, #0]
 8014582:	7b7a      	ldrb	r2, [r7, #13]
 8014584:	4613      	mov	r3, r2
 8014586:	005b      	lsls	r3, r3, #1
 8014588:	4413      	add	r3, r2
 801458a:	009b      	lsls	r3, r3, #2
 801458c:	440b      	add	r3, r1
 801458e:	3309      	adds	r3, #9
 8014590:	2200      	movs	r2, #0
 8014592:	701a      	strb	r2, [r3, #0]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 8014594:	4b0a      	ldr	r3, [pc, #40]	; (80145c0 <RegionIN865ChannelAdd+0x134>)
 8014596:	681b      	ldr	r3, [r3, #0]
 8014598:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 801459c:	b21a      	sxth	r2, r3
 801459e:	7b7b      	ldrb	r3, [r7, #13]
 80145a0:	2101      	movs	r1, #1
 80145a2:	fa01 f303 	lsl.w	r3, r1, r3
 80145a6:	b21b      	sxth	r3, r3
 80145a8:	4313      	orrs	r3, r2
 80145aa:	b21a      	sxth	r2, r3
 80145ac:	4b04      	ldr	r3, [pc, #16]	; (80145c0 <RegionIN865ChannelAdd+0x134>)
 80145ae:	681b      	ldr	r3, [r3, #0]
 80145b0:	b292      	uxth	r2, r2
 80145b2:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
    return LORAMAC_STATUS_OK;
 80145b6:	2300      	movs	r3, #0
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_IN865 */
}
 80145b8:	4618      	mov	r0, r3
 80145ba:	3710      	adds	r7, #16
 80145bc:	46bd      	mov	sp, r7
 80145be:	bd80      	pop	{r7, pc}
 80145c0:	20000ce8 	.word	0x20000ce8

080145c4 <RegionIN865ChannelsRemove>:

bool RegionIN865ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 80145c4:	b580      	push	{r7, lr}
 80145c6:	b086      	sub	sp, #24
 80145c8:	af00      	add	r7, sp, #0
 80145ca:	6078      	str	r0, [r7, #4]
#if defined( REGION_IN865 )
    uint8_t id = channelRemove->ChannelId;
 80145cc:	687b      	ldr	r3, [r7, #4]
 80145ce:	781b      	ldrb	r3, [r3, #0]
 80145d0:	75fb      	strb	r3, [r7, #23]

    if( id < IN865_NUMB_DEFAULT_CHANNELS )
 80145d2:	7dfb      	ldrb	r3, [r7, #23]
 80145d4:	2b02      	cmp	r3, #2
 80145d6:	d801      	bhi.n	80145dc <RegionIN865ChannelsRemove+0x18>
    {
        return false;
 80145d8:	2300      	movs	r3, #0
 80145da:	e015      	b.n	8014608 <RegionIN865ChannelsRemove+0x44>
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 80145dc:	4b0c      	ldr	r3, [pc, #48]	; (8014610 <RegionIN865ChannelsRemove+0x4c>)
 80145de:	6819      	ldr	r1, [r3, #0]
 80145e0:	7dfa      	ldrb	r2, [r7, #23]
 80145e2:	4613      	mov	r3, r2
 80145e4:	005b      	lsls	r3, r3, #1
 80145e6:	4413      	add	r3, r2
 80145e8:	009b      	lsls	r3, r3, #2
 80145ea:	440b      	add	r3, r1
 80145ec:	461a      	mov	r2, r3
 80145ee:	2300      	movs	r3, #0
 80145f0:	6013      	str	r3, [r2, #0]
 80145f2:	6053      	str	r3, [r2, #4]
 80145f4:	6093      	str	r3, [r2, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, IN865_MAX_NB_CHANNELS );
 80145f6:	4b06      	ldr	r3, [pc, #24]	; (8014610 <RegionIN865ChannelsRemove+0x4c>)
 80145f8:	681b      	ldr	r3, [r3, #0]
 80145fa:	33c0      	adds	r3, #192	; 0xc0
 80145fc:	7df9      	ldrb	r1, [r7, #23]
 80145fe:	2210      	movs	r2, #16
 8014600:	4618      	mov	r0, r3
 8014602:	f7fe f971 	bl	80128e8 <RegionCommonChanDisable>
 8014606:	4603      	mov	r3, r0
#else
    return false;
#endif /* REGION_IN865 */
}
 8014608:	4618      	mov	r0, r3
 801460a:	3718      	adds	r7, #24
 801460c:	46bd      	mov	sp, r7
 801460e:	bd80      	pop	{r7, pc}
 8014610:	20000ce8 	.word	0x20000ce8

08014614 <RegionIN865SetContinuousWave>:

void RegionIN865SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 8014614:	b590      	push	{r4, r7, lr}
 8014616:	b085      	sub	sp, #20
 8014618:	af00      	add	r7, sp, #0
 801461a:	6078      	str	r0, [r7, #4]
#if defined( REGION_IN865 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 801461c:	687b      	ldr	r3, [r7, #4]
 801461e:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8014622:	4b20      	ldr	r3, [pc, #128]	; (80146a4 <RegionIN865SetContinuousWave+0x90>)
 8014624:	681a      	ldr	r2, [r3, #0]
 8014626:	4b20      	ldr	r3, [pc, #128]	; (80146a8 <RegionIN865SetContinuousWave+0x94>)
 8014628:	6819      	ldr	r1, [r3, #0]
 801462a:	687b      	ldr	r3, [r7, #4]
 801462c:	781b      	ldrb	r3, [r3, #0]
 801462e:	461c      	mov	r4, r3
 8014630:	4623      	mov	r3, r4
 8014632:	005b      	lsls	r3, r3, #1
 8014634:	4423      	add	r3, r4
 8014636:	009b      	lsls	r3, r3, #2
 8014638:	440b      	add	r3, r1
 801463a:	3309      	adds	r3, #9
 801463c:	781b      	ldrb	r3, [r3, #0]
 801463e:	4619      	mov	r1, r3
 8014640:	460b      	mov	r3, r1
 8014642:	005b      	lsls	r3, r3, #1
 8014644:	440b      	add	r3, r1
 8014646:	00db      	lsls	r3, r3, #3
 8014648:	4413      	add	r3, r2
 801464a:	3302      	adds	r3, #2
 801464c:	f993 3000 	ldrsb.w	r3, [r3]
 8014650:	4619      	mov	r1, r3
 8014652:	f7fe fe24 	bl	801329e <RegionCommonLimitTxPower>
 8014656:	4603      	mov	r3, r0
 8014658:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 801465a:	2300      	movs	r3, #0
 801465c:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 801465e:	4b12      	ldr	r3, [pc, #72]	; (80146a8 <RegionIN865SetContinuousWave+0x94>)
 8014660:	681a      	ldr	r2, [r3, #0]
 8014662:	687b      	ldr	r3, [r7, #4]
 8014664:	781b      	ldrb	r3, [r3, #0]
 8014666:	4619      	mov	r1, r3
 8014668:	460b      	mov	r3, r1
 801466a:	005b      	lsls	r3, r3, #1
 801466c:	440b      	add	r3, r1
 801466e:	009b      	lsls	r3, r3, #2
 8014670:	4413      	add	r3, r2
 8014672:	681b      	ldr	r3, [r3, #0]
 8014674:	60bb      	str	r3, [r7, #8]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 8014676:	687b      	ldr	r3, [r7, #4]
 8014678:	6859      	ldr	r1, [r3, #4]
 801467a:	687b      	ldr	r3, [r7, #4]
 801467c:	689a      	ldr	r2, [r3, #8]
 801467e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014682:	4618      	mov	r0, r3
 8014684:	f7fe fc7c 	bl	8012f80 <RegionCommonComputeTxPower>
 8014688:	4603      	mov	r3, r0
 801468a:	73bb      	strb	r3, [r7, #14]

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 801468c:	4b07      	ldr	r3, [pc, #28]	; (80146ac <RegionIN865SetContinuousWave+0x98>)
 801468e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014690:	687a      	ldr	r2, [r7, #4]
 8014692:	8992      	ldrh	r2, [r2, #12]
 8014694:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8014698:	68b8      	ldr	r0, [r7, #8]
 801469a:	4798      	blx	r3
#endif /* REGION_IN865 */
}
 801469c:	bf00      	nop
 801469e:	3714      	adds	r7, #20
 80146a0:	46bd      	mov	sp, r7
 80146a2:	bd90      	pop	{r4, r7, pc}
 80146a4:	20000ce4 	.word	0x20000ce4
 80146a8:	20000ce8 	.word	0x20000ce8
 80146ac:	08019c7c 	.word	0x08019c7c

080146b0 <RegionIN865ApplyDrOffset>:

uint8_t RegionIN865ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 80146b0:	b480      	push	{r7}
 80146b2:	b083      	sub	sp, #12
 80146b4:	af00      	add	r7, sp, #0
 80146b6:	4603      	mov	r3, r0
 80146b8:	71fb      	strb	r3, [r7, #7]
 80146ba:	460b      	mov	r3, r1
 80146bc:	71bb      	strb	r3, [r7, #6]
 80146be:	4613      	mov	r3, r2
 80146c0:	717b      	strb	r3, [r7, #5]
#if defined( REGION_IN865 )
    // Apply offset formula
    return MIN( DR_5, MAX( DR_0, dr - EffectiveRx1DrOffsetIN865[drOffset] ) );
 80146c2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80146c6:	f997 2005 	ldrsb.w	r2, [r7, #5]
 80146ca:	490b      	ldr	r1, [pc, #44]	; (80146f8 <RegionIN865ApplyDrOffset+0x48>)
 80146cc:	568a      	ldrsb	r2, [r1, r2]
 80146ce:	1a9b      	subs	r3, r3, r2
 80146d0:	2b05      	cmp	r3, #5
 80146d2:	dc0a      	bgt.n	80146ea <RegionIN865ApplyDrOffset+0x3a>
 80146d4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80146d8:	f997 2005 	ldrsb.w	r2, [r7, #5]
 80146dc:	4906      	ldr	r1, [pc, #24]	; (80146f8 <RegionIN865ApplyDrOffset+0x48>)
 80146de:	568a      	ldrsb	r2, [r1, r2]
 80146e0:	1a9b      	subs	r3, r3, r2
 80146e2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80146e6:	b2db      	uxtb	r3, r3
 80146e8:	e000      	b.n	80146ec <RegionIN865ApplyDrOffset+0x3c>
 80146ea:	2305      	movs	r3, #5
#else
    return 0;
#endif /* REGION_IN865 */
}
 80146ec:	4618      	mov	r0, r3
 80146ee:	370c      	adds	r7, #12
 80146f0:	46bd      	mov	sp, r7
 80146f2:	bc80      	pop	{r7}
 80146f4:	4770      	bx	lr
 80146f6:	bf00      	nop
 80146f8:	08019c74 	.word	0x08019c74

080146fc <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 80146fc:	b480      	push	{r7}
 80146fe:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 8014700:	4b0d      	ldr	r3, [pc, #52]	; (8014738 <rand1+0x3c>)
 8014702:	681b      	ldr	r3, [r3, #0]
 8014704:	4a0d      	ldr	r2, [pc, #52]	; (801473c <rand1+0x40>)
 8014706:	fb02 f303 	mul.w	r3, r2, r3
 801470a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801470e:	3339      	adds	r3, #57	; 0x39
 8014710:	4a09      	ldr	r2, [pc, #36]	; (8014738 <rand1+0x3c>)
 8014712:	6013      	str	r3, [r2, #0]
 8014714:	4b08      	ldr	r3, [pc, #32]	; (8014738 <rand1+0x3c>)
 8014716:	681a      	ldr	r2, [r3, #0]
 8014718:	2303      	movs	r3, #3
 801471a:	fba3 1302 	umull	r1, r3, r3, r2
 801471e:	1ad1      	subs	r1, r2, r3
 8014720:	0849      	lsrs	r1, r1, #1
 8014722:	440b      	add	r3, r1
 8014724:	0f99      	lsrs	r1, r3, #30
 8014726:	460b      	mov	r3, r1
 8014728:	07db      	lsls	r3, r3, #31
 801472a:	1a5b      	subs	r3, r3, r1
 801472c:	1ad1      	subs	r1, r2, r3
 801472e:	460b      	mov	r3, r1
}
 8014730:	4618      	mov	r0, r3
 8014732:	46bd      	mov	sp, r7
 8014734:	bc80      	pop	{r7}
 8014736:	4770      	bx	lr
 8014738:	200000ec 	.word	0x200000ec
 801473c:	41c64e6d 	.word	0x41c64e6d

08014740 <srand1>:

void srand1( uint32_t seed )
{
 8014740:	b480      	push	{r7}
 8014742:	b083      	sub	sp, #12
 8014744:	af00      	add	r7, sp, #0
 8014746:	6078      	str	r0, [r7, #4]
    next = seed;
 8014748:	4a03      	ldr	r2, [pc, #12]	; (8014758 <srand1+0x18>)
 801474a:	687b      	ldr	r3, [r7, #4]
 801474c:	6013      	str	r3, [r2, #0]
}
 801474e:	bf00      	nop
 8014750:	370c      	adds	r7, #12
 8014752:	46bd      	mov	sp, r7
 8014754:	bc80      	pop	{r7}
 8014756:	4770      	bx	lr
 8014758:	200000ec 	.word	0x200000ec

0801475c <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 801475c:	b580      	push	{r7, lr}
 801475e:	b082      	sub	sp, #8
 8014760:	af00      	add	r7, sp, #0
 8014762:	6078      	str	r0, [r7, #4]
 8014764:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 8014766:	f7ff ffc9 	bl	80146fc <rand1>
 801476a:	4602      	mov	r2, r0
 801476c:	6839      	ldr	r1, [r7, #0]
 801476e:	687b      	ldr	r3, [r7, #4]
 8014770:	1acb      	subs	r3, r1, r3
 8014772:	3301      	adds	r3, #1
 8014774:	fb92 f1f3 	sdiv	r1, r2, r3
 8014778:	fb03 f301 	mul.w	r3, r3, r1
 801477c:	1ad2      	subs	r2, r2, r3
 801477e:	687b      	ldr	r3, [r7, #4]
 8014780:	4413      	add	r3, r2
}
 8014782:	4618      	mov	r0, r3
 8014784:	3708      	adds	r7, #8
 8014786:	46bd      	mov	sp, r7
 8014788:	bd80      	pop	{r7, pc}

0801478a <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 801478a:	b480      	push	{r7}
 801478c:	b085      	sub	sp, #20
 801478e:	af00      	add	r7, sp, #0
 8014790:	60f8      	str	r0, [r7, #12]
 8014792:	60b9      	str	r1, [r7, #8]
 8014794:	4613      	mov	r3, r2
 8014796:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 8014798:	e007      	b.n	80147aa <memcpy1+0x20>
    {
        *dst++ = *src++;
 801479a:	68ba      	ldr	r2, [r7, #8]
 801479c:	1c53      	adds	r3, r2, #1
 801479e:	60bb      	str	r3, [r7, #8]
 80147a0:	68fb      	ldr	r3, [r7, #12]
 80147a2:	1c59      	adds	r1, r3, #1
 80147a4:	60f9      	str	r1, [r7, #12]
 80147a6:	7812      	ldrb	r2, [r2, #0]
 80147a8:	701a      	strb	r2, [r3, #0]
    while( size-- )
 80147aa:	88fb      	ldrh	r3, [r7, #6]
 80147ac:	1e5a      	subs	r2, r3, #1
 80147ae:	80fa      	strh	r2, [r7, #6]
 80147b0:	2b00      	cmp	r3, #0
 80147b2:	d1f2      	bne.n	801479a <memcpy1+0x10>
    }
}
 80147b4:	bf00      	nop
 80147b6:	bf00      	nop
 80147b8:	3714      	adds	r7, #20
 80147ba:	46bd      	mov	sp, r7
 80147bc:	bc80      	pop	{r7}
 80147be:	4770      	bx	lr

080147c0 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 80147c0:	b480      	push	{r7}
 80147c2:	b085      	sub	sp, #20
 80147c4:	af00      	add	r7, sp, #0
 80147c6:	60f8      	str	r0, [r7, #12]
 80147c8:	60b9      	str	r1, [r7, #8]
 80147ca:	4613      	mov	r3, r2
 80147cc:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 80147ce:	88fb      	ldrh	r3, [r7, #6]
 80147d0:	3b01      	subs	r3, #1
 80147d2:	68fa      	ldr	r2, [r7, #12]
 80147d4:	4413      	add	r3, r2
 80147d6:	60fb      	str	r3, [r7, #12]
    while( size-- )
 80147d8:	e007      	b.n	80147ea <memcpyr+0x2a>
    {
        *dst-- = *src++;
 80147da:	68ba      	ldr	r2, [r7, #8]
 80147dc:	1c53      	adds	r3, r2, #1
 80147de:	60bb      	str	r3, [r7, #8]
 80147e0:	68fb      	ldr	r3, [r7, #12]
 80147e2:	1e59      	subs	r1, r3, #1
 80147e4:	60f9      	str	r1, [r7, #12]
 80147e6:	7812      	ldrb	r2, [r2, #0]
 80147e8:	701a      	strb	r2, [r3, #0]
    while( size-- )
 80147ea:	88fb      	ldrh	r3, [r7, #6]
 80147ec:	1e5a      	subs	r2, r3, #1
 80147ee:	80fa      	strh	r2, [r7, #6]
 80147f0:	2b00      	cmp	r3, #0
 80147f2:	d1f2      	bne.n	80147da <memcpyr+0x1a>
    }
}
 80147f4:	bf00      	nop
 80147f6:	bf00      	nop
 80147f8:	3714      	adds	r7, #20
 80147fa:	46bd      	mov	sp, r7
 80147fc:	bc80      	pop	{r7}
 80147fe:	4770      	bx	lr

08014800 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 8014800:	b480      	push	{r7}
 8014802:	b083      	sub	sp, #12
 8014804:	af00      	add	r7, sp, #0
 8014806:	6078      	str	r0, [r7, #4]
 8014808:	460b      	mov	r3, r1
 801480a:	70fb      	strb	r3, [r7, #3]
 801480c:	4613      	mov	r3, r2
 801480e:	803b      	strh	r3, [r7, #0]
    while( size-- )
 8014810:	e004      	b.n	801481c <memset1+0x1c>
    {
        *dst++ = value;
 8014812:	687b      	ldr	r3, [r7, #4]
 8014814:	1c5a      	adds	r2, r3, #1
 8014816:	607a      	str	r2, [r7, #4]
 8014818:	78fa      	ldrb	r2, [r7, #3]
 801481a:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801481c:	883b      	ldrh	r3, [r7, #0]
 801481e:	1e5a      	subs	r2, r3, #1
 8014820:	803a      	strh	r2, [r7, #0]
 8014822:	2b00      	cmp	r3, #0
 8014824:	d1f5      	bne.n	8014812 <memset1+0x12>
    }
}
 8014826:	bf00      	nop
 8014828:	bf00      	nop
 801482a:	370c      	adds	r7, #12
 801482c:	46bd      	mov	sp, r7
 801482e:	bc80      	pop	{r7}
 8014830:	4770      	bx	lr
	...

08014834 <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 8014834:	b480      	push	{r7}
 8014836:	b087      	sub	sp, #28
 8014838:	af00      	add	r7, sp, #0
 801483a:	6078      	str	r0, [r7, #4]
 801483c:	460b      	mov	r3, r1
 801483e:	807b      	strh	r3, [r7, #2]
    // The CRC calculation follows CCITT - 0x04C11DB7
    const uint32_t reversedPolynom = 0xEDB88320;
 8014840:	4b1a      	ldr	r3, [pc, #104]	; (80148ac <Crc32+0x78>)
 8014842:	60fb      	str	r3, [r7, #12]

    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 8014844:	f04f 33ff 	mov.w	r3, #4294967295
 8014848:	617b      	str	r3, [r7, #20]

    if( buffer == NULL )
 801484a:	687b      	ldr	r3, [r7, #4]
 801484c:	2b00      	cmp	r3, #0
 801484e:	d101      	bne.n	8014854 <Crc32+0x20>
    {
        return 0;
 8014850:	2300      	movs	r3, #0
 8014852:	e026      	b.n	80148a2 <Crc32+0x6e>
    }

    for( uint16_t i = 0; i < length; ++i )
 8014854:	2300      	movs	r3, #0
 8014856:	827b      	strh	r3, [r7, #18]
 8014858:	e01d      	b.n	8014896 <Crc32+0x62>
    {
        crc ^= ( uint32_t )buffer[i];
 801485a:	8a7b      	ldrh	r3, [r7, #18]
 801485c:	687a      	ldr	r2, [r7, #4]
 801485e:	4413      	add	r3, r2
 8014860:	781b      	ldrb	r3, [r3, #0]
 8014862:	461a      	mov	r2, r3
 8014864:	697b      	ldr	r3, [r7, #20]
 8014866:	4053      	eors	r3, r2
 8014868:	617b      	str	r3, [r7, #20]
        for( uint16_t i = 0; i < 8; i++ )
 801486a:	2300      	movs	r3, #0
 801486c:	823b      	strh	r3, [r7, #16]
 801486e:	e00c      	b.n	801488a <Crc32+0x56>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 8014870:	697b      	ldr	r3, [r7, #20]
 8014872:	085a      	lsrs	r2, r3, #1
 8014874:	697b      	ldr	r3, [r7, #20]
 8014876:	f003 0301 	and.w	r3, r3, #1
 801487a:	4259      	negs	r1, r3
 801487c:	68fb      	ldr	r3, [r7, #12]
 801487e:	400b      	ands	r3, r1
 8014880:	4053      	eors	r3, r2
 8014882:	617b      	str	r3, [r7, #20]
        for( uint16_t i = 0; i < 8; i++ )
 8014884:	8a3b      	ldrh	r3, [r7, #16]
 8014886:	3301      	adds	r3, #1
 8014888:	823b      	strh	r3, [r7, #16]
 801488a:	8a3b      	ldrh	r3, [r7, #16]
 801488c:	2b07      	cmp	r3, #7
 801488e:	d9ef      	bls.n	8014870 <Crc32+0x3c>
    for( uint16_t i = 0; i < length; ++i )
 8014890:	8a7b      	ldrh	r3, [r7, #18]
 8014892:	3301      	adds	r3, #1
 8014894:	827b      	strh	r3, [r7, #18]
 8014896:	8a7a      	ldrh	r2, [r7, #18]
 8014898:	887b      	ldrh	r3, [r7, #2]
 801489a:	429a      	cmp	r2, r3
 801489c:	d3dd      	bcc.n	801485a <Crc32+0x26>
        }
    }

    return ~crc;
 801489e:	697b      	ldr	r3, [r7, #20]
 80148a0:	43db      	mvns	r3, r3
}
 80148a2:	4618      	mov	r0, r3
 80148a4:	371c      	adds	r7, #28
 80148a6:	46bd      	mov	sp, r7
 80148a8:	bc80      	pop	{r7}
 80148aa:	4770      	bx	lr
 80148ac:	edb88320 	.word	0xedb88320

080148b0 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 80148b0:	b580      	push	{r7, lr}
 80148b2:	b084      	sub	sp, #16
 80148b4:	af02      	add	r7, sp, #8
 80148b6:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 80148b8:	4a21      	ldr	r2, [pc, #132]	; (8014940 <RadioInit+0x90>)
 80148ba:	687b      	ldr	r3, [r7, #4]
 80148bc:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 80148be:	4b21      	ldr	r3, [pc, #132]	; (8014944 <RadioInit+0x94>)
 80148c0:	2200      	movs	r2, #0
 80148c2:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 80148c4:	4b1f      	ldr	r3, [pc, #124]	; (8014944 <RadioInit+0x94>)
 80148c6:	2200      	movs	r2, #0
 80148c8:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 80148ca:	4b1e      	ldr	r3, [pc, #120]	; (8014944 <RadioInit+0x94>)
 80148cc:	2200      	movs	r2, #0
 80148ce:	609a      	str	r2, [r3, #8]

    SUBGRF_Init( RadioOnDioIrq );
 80148d0:	481d      	ldr	r0, [pc, #116]	; (8014948 <RadioInit+0x98>)
 80148d2:	f001 feb7 	bl	8016644 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    RadioSetPublicNetwork( false );
 80148d6:	2000      	movs	r0, #0
 80148d8:	f001 f81e 	bl	8015918 <RadioSetPublicNetwork>

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode(  );
 80148dc:	f002 f948 	bl	8016b70 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 80148e0:	2100      	movs	r1, #0
 80148e2:	2000      	movs	r0, #0
 80148e4:	f002 fc9e 	bl	8017224 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams(RFO_LP, 0, RADIO_RAMP_200_US);
 80148e8:	2204      	movs	r2, #4
 80148ea:	2100      	movs	r1, #0
 80148ec:	2001      	movs	r0, #1
 80148ee:	f002 fac9 	bl	8016e84 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80148f2:	2300      	movs	r3, #0
 80148f4:	2200      	movs	r2, #0
 80148f6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80148fa:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80148fe:	f002 f9fd 	bl	8016cfc <SUBGRF_SetDioIrqParams>

    /* ST_WORKAROUND_BEGIN: Sleep radio */
    RadioSleep();
 8014902:	f000 fe9b 	bl	801563c <RadioSleep>
    /* ST_WORKAROUND_END */
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8014906:	2300      	movs	r3, #0
 8014908:	9300      	str	r3, [sp, #0]
 801490a:	4b10      	ldr	r3, [pc, #64]	; (801494c <RadioInit+0x9c>)
 801490c:	2200      	movs	r2, #0
 801490e:	f04f 31ff 	mov.w	r1, #4294967295
 8014912:	480f      	ldr	r0, [pc, #60]	; (8014950 <RadioInit+0xa0>)
 8014914:	f003 fe86 	bl	8018624 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8014918:	2300      	movs	r3, #0
 801491a:	9300      	str	r3, [sp, #0]
 801491c:	4b0d      	ldr	r3, [pc, #52]	; (8014954 <RadioInit+0xa4>)
 801491e:	2200      	movs	r2, #0
 8014920:	f04f 31ff 	mov.w	r1, #4294967295
 8014924:	480c      	ldr	r0, [pc, #48]	; (8014958 <RadioInit+0xa8>)
 8014926:	f003 fe7d 	bl	8018624 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 801492a:	4809      	ldr	r0, [pc, #36]	; (8014950 <RadioInit+0xa0>)
 801492c:	f003 ff1e 	bl	801876c <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8014930:	4809      	ldr	r0, [pc, #36]	; (8014958 <RadioInit+0xa8>)
 8014932:	f003 ff1b 	bl	801876c <UTIL_TIMER_Stop>
}
 8014936:	bf00      	nop
 8014938:	3708      	adds	r7, #8
 801493a:	46bd      	mov	sp, r7
 801493c:	bd80      	pop	{r7, pc}
 801493e:	bf00      	nop
 8014940:	20000dec 	.word	0x20000dec
 8014944:	20001678 	.word	0x20001678
 8014948:	080159fd 	.word	0x080159fd
 801494c:	08015985 	.word	0x08015985
 8014950:	200016d0 	.word	0x200016d0
 8014954:	08015999 	.word	0x08015999
 8014958:	200016e8 	.word	0x200016e8

0801495c <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 801495c:	b580      	push	{r7, lr}
 801495e:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8014960:	f001 feb2 	bl	80166c8 <SUBGRF_GetOperatingMode>
 8014964:	4603      	mov	r3, r0
 8014966:	2b07      	cmp	r3, #7
 8014968:	d00a      	beq.n	8014980 <RadioGetStatus+0x24>
 801496a:	2b07      	cmp	r3, #7
 801496c:	dc0a      	bgt.n	8014984 <RadioGetStatus+0x28>
 801496e:	2b04      	cmp	r3, #4
 8014970:	d002      	beq.n	8014978 <RadioGetStatus+0x1c>
 8014972:	2b05      	cmp	r3, #5
 8014974:	d002      	beq.n	801497c <RadioGetStatus+0x20>
 8014976:	e005      	b.n	8014984 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 8014978:	2302      	movs	r3, #2
 801497a:	e004      	b.n	8014986 <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 801497c:	2301      	movs	r3, #1
 801497e:	e002      	b.n	8014986 <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 8014980:	2303      	movs	r3, #3
 8014982:	e000      	b.n	8014986 <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8014984:	2300      	movs	r3, #0
    }
}
 8014986:	4618      	mov	r0, r3
 8014988:	bd80      	pop	{r7, pc}
	...

0801498c <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 801498c:	b580      	push	{r7, lr}
 801498e:	b082      	sub	sp, #8
 8014990:	af00      	add	r7, sp, #0
 8014992:	4603      	mov	r3, r0
 8014994:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 8014996:	4a25      	ldr	r2, [pc, #148]	; (8014a2c <RadioSetModem+0xa0>)
 8014998:	79fb      	ldrb	r3, [r7, #7]
 801499a:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem(modem);
 801499c:	79fb      	ldrb	r3, [r7, #7]
 801499e:	4618      	mov	r0, r3
 80149a0:	f003 f805 	bl	80179ae <RFW_SetRadioModem>
    switch( modem )
 80149a4:	79fb      	ldrb	r3, [r7, #7]
 80149a6:	3b01      	subs	r3, #1
 80149a8:	2b03      	cmp	r3, #3
 80149aa:	d80b      	bhi.n	80149c4 <RadioSetModem+0x38>
 80149ac:	a201      	add	r2, pc, #4	; (adr r2, 80149b4 <RadioSetModem+0x28>)
 80149ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80149b2:	bf00      	nop
 80149b4:	080149d3 	.word	0x080149d3
 80149b8:	080149f9 	.word	0x080149f9
 80149bc:	08014a07 	.word	0x08014a07
 80149c0:	08014a15 	.word	0x08014a15
    {
    default:
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 80149c4:	2000      	movs	r0, #0
 80149c6:	f002 fa37 	bl	8016e38 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80149ca:	4b18      	ldr	r3, [pc, #96]	; (8014a2c <RadioSetModem+0xa0>)
 80149cc:	2200      	movs	r2, #0
 80149ce:	735a      	strb	r2, [r3, #13]
        break;
 80149d0:	e028      	b.n	8014a24 <RadioSetModem+0x98>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 80149d2:	2001      	movs	r0, #1
 80149d4:	f002 fa30 	bl	8016e38 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 80149d8:	4b14      	ldr	r3, [pc, #80]	; (8014a2c <RadioSetModem+0xa0>)
 80149da:	7b5a      	ldrb	r2, [r3, #13]
 80149dc:	4b13      	ldr	r3, [pc, #76]	; (8014a2c <RadioSetModem+0xa0>)
 80149de:	7b1b      	ldrb	r3, [r3, #12]
 80149e0:	429a      	cmp	r2, r3
 80149e2:	d01e      	beq.n	8014a22 <RadioSetModem+0x96>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 80149e4:	4b11      	ldr	r3, [pc, #68]	; (8014a2c <RadioSetModem+0xa0>)
 80149e6:	7b1a      	ldrb	r2, [r3, #12]
 80149e8:	4b10      	ldr	r3, [pc, #64]	; (8014a2c <RadioSetModem+0xa0>)
 80149ea:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 80149ec:	4b0f      	ldr	r3, [pc, #60]	; (8014a2c <RadioSetModem+0xa0>)
 80149ee:	7b5b      	ldrb	r3, [r3, #13]
 80149f0:	4618      	mov	r0, r3
 80149f2:	f000 ff91 	bl	8015918 <RadioSetPublicNetwork>
        }
        break;
 80149f6:	e014      	b.n	8014a22 <RadioSetModem+0x96>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 80149f8:	2002      	movs	r0, #2
 80149fa:	f002 fa1d 	bl	8016e38 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80149fe:	4b0b      	ldr	r3, [pc, #44]	; (8014a2c <RadioSetModem+0xa0>)
 8014a00:	2200      	movs	r2, #0
 8014a02:	735a      	strb	r2, [r3, #13]
        break;
 8014a04:	e00e      	b.n	8014a24 <RadioSetModem+0x98>
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8014a06:	2002      	movs	r0, #2
 8014a08:	f002 fa16 	bl	8016e38 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8014a0c:	4b07      	ldr	r3, [pc, #28]	; (8014a2c <RadioSetModem+0xa0>)
 8014a0e:	2200      	movs	r2, #0
 8014a10:	735a      	strb	r2, [r3, #13]
        break;
 8014a12:	e007      	b.n	8014a24 <RadioSetModem+0x98>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8014a14:	2000      	movs	r0, #0
 8014a16:	f002 fa0f 	bl	8016e38 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8014a1a:	4b04      	ldr	r3, [pc, #16]	; (8014a2c <RadioSetModem+0xa0>)
 8014a1c:	2200      	movs	r2, #0
 8014a1e:	735a      	strb	r2, [r3, #13]
        break;
 8014a20:	e000      	b.n	8014a24 <RadioSetModem+0x98>
        break;
 8014a22:	bf00      	nop
    }
}
 8014a24:	bf00      	nop
 8014a26:	3708      	adds	r7, #8
 8014a28:	46bd      	mov	sp, r7
 8014a2a:	bd80      	pop	{r7, pc}
 8014a2c:	20001678 	.word	0x20001678

08014a30 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 8014a30:	b580      	push	{r7, lr}
 8014a32:	b082      	sub	sp, #8
 8014a34:	af00      	add	r7, sp, #0
 8014a36:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 8014a38:	6878      	ldr	r0, [r7, #4]
 8014a3a:	f002 f9bb 	bl	8016db4 <SUBGRF_SetRfFrequency>
}
 8014a3e:	bf00      	nop
 8014a40:	3708      	adds	r7, #8
 8014a42:	46bd      	mov	sp, r7
 8014a44:	bd80      	pop	{r7, pc}

08014a46 <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 8014a46:	b580      	push	{r7, lr}
 8014a48:	b090      	sub	sp, #64	; 0x40
 8014a4a:	af0a      	add	r7, sp, #40	; 0x28
 8014a4c:	60f8      	str	r0, [r7, #12]
 8014a4e:	60b9      	str	r1, [r7, #8]
 8014a50:	603b      	str	r3, [r7, #0]
 8014a52:	4613      	mov	r3, r2
 8014a54:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 8014a56:	2301      	movs	r3, #1
 8014a58:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 8014a5a:	2300      	movs	r3, #0
 8014a5c:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 8014a5e:	2300      	movs	r3, #0
 8014a60:	613b      	str	r3, [r7, #16]

    /* ST_WORKAROUND_BEGIN: Prevent multiple sleeps with TXCO delay */
    RadioStandby( );
 8014a62:	f000 fdfe 	bl	8015662 <RadioStandby>
    /* ST_WORKAROUND_END */

    RadioSetModem( MODEM_FSK );
 8014a66:	2000      	movs	r0, #0
 8014a68:	f7ff ff90 	bl	801498c <RadioSetModem>

    RadioSetChannel( freq );
 8014a6c:	68f8      	ldr	r0, [r7, #12]
 8014a6e:	f7ff ffdf 	bl	8014a30 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8014a72:	2301      	movs	r3, #1
 8014a74:	9309      	str	r3, [sp, #36]	; 0x24
 8014a76:	2300      	movs	r3, #0
 8014a78:	9308      	str	r3, [sp, #32]
 8014a7a:	2300      	movs	r3, #0
 8014a7c:	9307      	str	r3, [sp, #28]
 8014a7e:	2300      	movs	r3, #0
 8014a80:	9306      	str	r3, [sp, #24]
 8014a82:	2300      	movs	r3, #0
 8014a84:	9305      	str	r3, [sp, #20]
 8014a86:	2300      	movs	r3, #0
 8014a88:	9304      	str	r3, [sp, #16]
 8014a8a:	2300      	movs	r3, #0
 8014a8c:	9303      	str	r3, [sp, #12]
 8014a8e:	2300      	movs	r3, #0
 8014a90:	9302      	str	r3, [sp, #8]
 8014a92:	2303      	movs	r3, #3
 8014a94:	9301      	str	r3, [sp, #4]
 8014a96:	68bb      	ldr	r3, [r7, #8]
 8014a98:	9300      	str	r3, [sp, #0]
 8014a9a:	2300      	movs	r3, #0
 8014a9c:	f44f 7216 	mov.w	r2, #600	; 0x258
 8014aa0:	68b9      	ldr	r1, [r7, #8]
 8014aa2:	2000      	movs	r0, #0
 8014aa4:	f000 f840 	bl	8014b28 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8014aa8:	2000      	movs	r0, #0
 8014aaa:	f000 fde1 	bl	8015670 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8014aae:	f000 ff61 	bl	8015974 <RadioGetWakeupTime>
 8014ab2:	4603      	mov	r3, r0
 8014ab4:	4618      	mov	r0, r3
 8014ab6:	f7ec fe22 	bl	80016fe <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 8014aba:	f003 ff71 	bl	80189a0 <UTIL_TIMER_GetCurrentTime>
 8014abe:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8014ac0:	e00d      	b.n	8014ade <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 8014ac2:	2000      	movs	r0, #0
 8014ac4:	f000 fea6 	bl	8015814 <RadioRssi>
 8014ac8:	4603      	mov	r3, r0
 8014aca:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 8014acc:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8014ad0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014ad4:	429a      	cmp	r2, r3
 8014ad6:	dd02      	ble.n	8014ade <RadioIsChannelFree+0x98>
        {
            status = false;
 8014ad8:	2300      	movs	r3, #0
 8014ada:	75fb      	strb	r3, [r7, #23]
            break;
 8014adc:	e006      	b.n	8014aec <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8014ade:	6938      	ldr	r0, [r7, #16]
 8014ae0:	f003 ff70 	bl	80189c4 <UTIL_TIMER_GetElapsedTime>
 8014ae4:	4602      	mov	r2, r0
 8014ae6:	683b      	ldr	r3, [r7, #0]
 8014ae8:	4293      	cmp	r3, r2
 8014aea:	d8ea      	bhi.n	8014ac2 <RadioIsChannelFree+0x7c>
        }
    }
    /* ST_WORKAROUND_BEGIN: Prevent multiple sleeps with TXCO delay */
    RadioStandby( );
 8014aec:	f000 fdb9 	bl	8015662 <RadioStandby>
    /* ST_WORKAROUND_END */
    return status;
 8014af0:	7dfb      	ldrb	r3, [r7, #23]
}
 8014af2:	4618      	mov	r0, r3
 8014af4:	3718      	adds	r7, #24
 8014af6:	46bd      	mov	sp, r7
 8014af8:	bd80      	pop	{r7, pc}

08014afa <RadioRandom>:

static uint32_t RadioRandom( void )
{
 8014afa:	b580      	push	{r7, lr}
 8014afc:	b082      	sub	sp, #8
 8014afe:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 8014b00:	2300      	movs	r3, #0
 8014b02:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Set LoRa modem ON
    RadioSetModem( MODEM_LORA );
 8014b04:	2001      	movs	r0, #1
 8014b06:	f7ff ff41 	bl	801498c <RadioSetModem>

    // Disable LoRa modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8014b0a:	2300      	movs	r3, #0
 8014b0c:	2200      	movs	r2, #0
 8014b0e:	2100      	movs	r1, #0
 8014b10:	2000      	movs	r0, #0
 8014b12:	f002 f8f3 	bl	8016cfc <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 8014b16:	f001 fea8 	bl	801686a <SUBGRF_GetRandom>
 8014b1a:	6078      	str	r0, [r7, #4]

    return rnd;
 8014b1c:	687b      	ldr	r3, [r7, #4]
}
 8014b1e:	4618      	mov	r0, r3
 8014b20:	3708      	adds	r7, #8
 8014b22:	46bd      	mov	sp, r7
 8014b24:	bd80      	pop	{r7, pc}
	...

08014b28 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 8014b28:	b580      	push	{r7, lr}
 8014b2a:	b08a      	sub	sp, #40	; 0x28
 8014b2c:	af00      	add	r7, sp, #0
 8014b2e:	60b9      	str	r1, [r7, #8]
 8014b30:	607a      	str	r2, [r7, #4]
 8014b32:	461a      	mov	r2, r3
 8014b34:	4603      	mov	r3, r0
 8014b36:	73fb      	strb	r3, [r7, #15]
 8014b38:	4613      	mov	r3, r2
 8014b3a:	73bb      	strb	r3, [r7, #14]

    uint8_t modReg;
    SubgRf.RxContinuous = rxContinuous;
 8014b3c:	4abd      	ldr	r2, [pc, #756]	; (8014e34 <RadioSetRxConfig+0x30c>)
 8014b3e:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8014b42:	7053      	strb	r3, [r2, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8014b44:	f002 fef1 	bl	801792a <RFW_DeInit>
    if( rxContinuous == true )
 8014b48:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8014b4c:	2b00      	cmp	r3, #0
 8014b4e:	d001      	beq.n	8014b54 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8014b50:	2300      	movs	r3, #0
 8014b52:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 8014b54:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8014b58:	2b00      	cmp	r3, #0
 8014b5a:	d004      	beq.n	8014b66 <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 8014b5c:	4ab6      	ldr	r2, [pc, #728]	; (8014e38 <RadioSetRxConfig+0x310>)
 8014b5e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8014b62:	7013      	strb	r3, [r2, #0]
 8014b64:	e002      	b.n	8014b6c <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 8014b66:	4bb4      	ldr	r3, [pc, #720]	; (8014e38 <RadioSetRxConfig+0x310>)
 8014b68:	22ff      	movs	r2, #255	; 0xff
 8014b6a:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8014b6c:	7bfb      	ldrb	r3, [r7, #15]
 8014b6e:	2b04      	cmp	r3, #4
 8014b70:	d009      	beq.n	8014b86 <RadioSetRxConfig+0x5e>
 8014b72:	2b04      	cmp	r3, #4
 8014b74:	f300 81da 	bgt.w	8014f2c <RadioSetRxConfig+0x404>
 8014b78:	2b00      	cmp	r3, #0
 8014b7a:	f000 80bf 	beq.w	8014cfc <RadioSetRxConfig+0x1d4>
 8014b7e:	2b01      	cmp	r3, #1
 8014b80:	f000 812c 	beq.w	8014ddc <RadioSetRxConfig+0x2b4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8014b84:	e1d2      	b.n	8014f2c <RadioSetRxConfig+0x404>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 8014b86:	2001      	movs	r0, #1
 8014b88:	f001 ffb4 	bl	8016af4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8014b8c:	4ba9      	ldr	r3, [pc, #676]	; (8014e34 <RadioSetRxConfig+0x30c>)
 8014b8e:	2200      	movs	r2, #0
 8014b90:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8014b94:	4aa7      	ldr	r2, [pc, #668]	; (8014e34 <RadioSetRxConfig+0x30c>)
 8014b96:	687b      	ldr	r3, [r7, #4]
 8014b98:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 8014b9a:	4ba6      	ldr	r3, [pc, #664]	; (8014e34 <RadioSetRxConfig+0x30c>)
 8014b9c:	2209      	movs	r2, #9
 8014b9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 8014ba2:	4ba4      	ldr	r3, [pc, #656]	; (8014e34 <RadioSetRxConfig+0x30c>)
 8014ba4:	f44f 7248 	mov.w	r2, #800	; 0x320
 8014ba8:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8014baa:	68b8      	ldr	r0, [r7, #8]
 8014bac:	f002 fdee 	bl	801778c <SUBGRF_GetFskBandwidthRegValue>
 8014bb0:	4603      	mov	r3, r0
 8014bb2:	461a      	mov	r2, r3
 8014bb4:	4b9f      	ldr	r3, [pc, #636]	; (8014e34 <RadioSetRxConfig+0x30c>)
 8014bb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8014bba:	4b9e      	ldr	r3, [pc, #632]	; (8014e34 <RadioSetRxConfig+0x30c>)
 8014bbc:	2200      	movs	r2, #0
 8014bbe:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8014bc0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8014bc2:	00db      	lsls	r3, r3, #3
 8014bc4:	b29a      	uxth	r2, r3
 8014bc6:	4b9b      	ldr	r3, [pc, #620]	; (8014e34 <RadioSetRxConfig+0x30c>)
 8014bc8:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 8014bca:	4b9a      	ldr	r3, [pc, #616]	; (8014e34 <RadioSetRxConfig+0x30c>)
 8014bcc:	2200      	movs	r2, #0
 8014bce:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8014bd0:	4b98      	ldr	r3, [pc, #608]	; (8014e34 <RadioSetRxConfig+0x30c>)
 8014bd2:	2210      	movs	r2, #16
 8014bd4:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8014bd6:	4b97      	ldr	r3, [pc, #604]	; (8014e34 <RadioSetRxConfig+0x30c>)
 8014bd8:	2200      	movs	r2, #0
 8014bda:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8014bdc:	4b95      	ldr	r3, [pc, #596]	; (8014e34 <RadioSetRxConfig+0x30c>)
 8014bde:	2200      	movs	r2, #0
 8014be0:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8014be2:	4b95      	ldr	r3, [pc, #596]	; (8014e38 <RadioSetRxConfig+0x310>)
 8014be4:	781a      	ldrb	r2, [r3, #0]
 8014be6:	4b93      	ldr	r3, [pc, #588]	; (8014e34 <RadioSetRxConfig+0x30c>)
 8014be8:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8014bea:	4b92      	ldr	r3, [pc, #584]	; (8014e34 <RadioSetRxConfig+0x30c>)
 8014bec:	2201      	movs	r2, #1
 8014bee:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8014bf0:	4b90      	ldr	r3, [pc, #576]	; (8014e34 <RadioSetRxConfig+0x30c>)
 8014bf2:	2200      	movs	r2, #0
 8014bf4:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 8014bf6:	2004      	movs	r0, #4
 8014bf8:	f7ff fec8 	bl	801498c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8014bfc:	488f      	ldr	r0, [pc, #572]	; (8014e3c <RadioSetRxConfig+0x314>)
 8014bfe:	f002 f9a7 	bl	8016f50 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8014c02:	488f      	ldr	r0, [pc, #572]	; (8014e40 <RadioSetRxConfig+0x318>)
 8014c04:	f002 fa70 	bl	80170e8 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8014c08:	4a8e      	ldr	r2, [pc, #568]	; (8014e44 <RadioSetRxConfig+0x31c>)
 8014c0a:	f107 031c 	add.w	r3, r7, #28
 8014c0e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014c12:	e883 0003 	stmia.w	r3, {r0, r1}
 8014c16:	f107 031c 	add.w	r3, r7, #28
 8014c1a:	4618      	mov	r0, r3
 8014c1c:	f001 fda3 	bl	8016766 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8014c20:	f240 10ff 	movw	r0, #511	; 0x1ff
 8014c24:	f001 fdee 	bl	8016804 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(0x8b8);
 8014c28:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8014c2c:	f000 fe11 	bl	8015852 <RadioRead>
 8014c30:	4603      	mov	r3, r0
 8014c32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 8014c36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014c3a:	f023 0310 	bic.w	r3, r3, #16
 8014c3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x8b8, modReg);
 8014c42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014c46:	4619      	mov	r1, r3
 8014c48:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8014c4c:	f000 fdef 	bl	801582e <RadioWrite>
            RadioWrite(0x8b9, 0x4 );
 8014c50:	2104      	movs	r1, #4
 8014c52:	f640 00b9 	movw	r0, #2233	; 0x8b9
 8014c56:	f000 fdea 	bl	801582e <RadioWrite>
            modReg= RadioRead(0x89b);
 8014c5a:	f640 009b 	movw	r0, #2203	; 0x89b
 8014c5e:	f000 fdf8 	bl	8015852 <RadioRead>
 8014c62:	4603      	mov	r3, r0
 8014c64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8014c68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014c6c:	f023 031c 	bic.w	r3, r3, #28
 8014c70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x89b, (modReg| (0x1<<3) ) );
 8014c74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014c78:	f043 0308 	orr.w	r3, r3, #8
 8014c7c:	b2db      	uxtb	r3, r3
 8014c7e:	4619      	mov	r1, r3
 8014c80:	f640 009b 	movw	r0, #2203	; 0x89b
 8014c84:	f000 fdd3 	bl	801582e <RadioWrite>
            modReg= RadioRead(0x6d1);
 8014c88:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8014c8c:	f000 fde1 	bl	8015852 <RadioRead>
 8014c90:	4603      	mov	r3, r0
 8014c92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8014c96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014c9a:	f023 0318 	bic.w	r3, r3, #24
 8014c9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x6d1, (modReg| (0x3<<3) ));
 8014ca2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014ca6:	f043 0318 	orr.w	r3, r3, #24
 8014caa:	b2db      	uxtb	r3, r3
 8014cac:	4619      	mov	r1, r3
 8014cae:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8014cb2:	f000 fdbc 	bl	801582e <RadioWrite>
            modReg= RadioRead(0x6ac);
 8014cb6:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8014cba:	f000 fdca 	bl	8015852 <RadioRead>
 8014cbe:	4603      	mov	r3, r0
 8014cc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 8014cc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014cc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014ccc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x6ac, (modReg| (0x5<<4) ));
 8014cd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014cd4:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8014cd8:	b2db      	uxtb	r3, r3
 8014cda:	4619      	mov	r1, r3
 8014cdc:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8014ce0:	f000 fda5 	bl	801582e <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8014ce4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8014ce6:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8014cea:	fb02 f303 	mul.w	r3, r2, r3
 8014cee:	461a      	mov	r2, r3
 8014cf0:	687b      	ldr	r3, [r7, #4]
 8014cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8014cf6:	4a4f      	ldr	r2, [pc, #316]	; (8014e34 <RadioSetRxConfig+0x30c>)
 8014cf8:	6093      	str	r3, [r2, #8]
            break;
 8014cfa:	e118      	b.n	8014f2e <RadioSetRxConfig+0x406>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8014cfc:	2000      	movs	r0, #0
 8014cfe:	f001 fef9 	bl	8016af4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8014d02:	4b4c      	ldr	r3, [pc, #304]	; (8014e34 <RadioSetRxConfig+0x30c>)
 8014d04:	2200      	movs	r2, #0
 8014d06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8014d0a:	4a4a      	ldr	r2, [pc, #296]	; (8014e34 <RadioSetRxConfig+0x30c>)
 8014d0c:	687b      	ldr	r3, [r7, #4]
 8014d0e:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8014d10:	4b48      	ldr	r3, [pc, #288]	; (8014e34 <RadioSetRxConfig+0x30c>)
 8014d12:	220b      	movs	r2, #11
 8014d14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8014d18:	68b8      	ldr	r0, [r7, #8]
 8014d1a:	f002 fd37 	bl	801778c <SUBGRF_GetFskBandwidthRegValue>
 8014d1e:	4603      	mov	r3, r0
 8014d20:	461a      	mov	r2, r3
 8014d22:	4b44      	ldr	r3, [pc, #272]	; (8014e34 <RadioSetRxConfig+0x30c>)
 8014d24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8014d28:	4b42      	ldr	r3, [pc, #264]	; (8014e34 <RadioSetRxConfig+0x30c>)
 8014d2a:	2200      	movs	r2, #0
 8014d2c:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8014d2e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8014d30:	00db      	lsls	r3, r3, #3
 8014d32:	b29a      	uxth	r2, r3
 8014d34:	4b3f      	ldr	r3, [pc, #252]	; (8014e34 <RadioSetRxConfig+0x30c>)
 8014d36:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8014d38:	4b3e      	ldr	r3, [pc, #248]	; (8014e34 <RadioSetRxConfig+0x30c>)
 8014d3a:	2204      	movs	r2, #4
 8014d3c:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8014d3e:	4b3d      	ldr	r3, [pc, #244]	; (8014e34 <RadioSetRxConfig+0x30c>)
 8014d40:	2218      	movs	r2, #24
 8014d42:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8014d44:	4b3b      	ldr	r3, [pc, #236]	; (8014e34 <RadioSetRxConfig+0x30c>)
 8014d46:	2200      	movs	r2, #0
 8014d48:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8014d4a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8014d4e:	f083 0301 	eor.w	r3, r3, #1
 8014d52:	b2db      	uxtb	r3, r3
 8014d54:	461a      	mov	r2, r3
 8014d56:	4b37      	ldr	r3, [pc, #220]	; (8014e34 <RadioSetRxConfig+0x30c>)
 8014d58:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8014d5a:	4b37      	ldr	r3, [pc, #220]	; (8014e38 <RadioSetRxConfig+0x310>)
 8014d5c:	781a      	ldrb	r2, [r3, #0]
 8014d5e:	4b35      	ldr	r3, [pc, #212]	; (8014e34 <RadioSetRxConfig+0x30c>)
 8014d60:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 8014d62:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8014d66:	2b00      	cmp	r3, #0
 8014d68:	d003      	beq.n	8014d72 <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8014d6a:	4b32      	ldr	r3, [pc, #200]	; (8014e34 <RadioSetRxConfig+0x30c>)
 8014d6c:	22f2      	movs	r2, #242	; 0xf2
 8014d6e:	75da      	strb	r2, [r3, #23]
 8014d70:	e002      	b.n	8014d78 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8014d72:	4b30      	ldr	r3, [pc, #192]	; (8014e34 <RadioSetRxConfig+0x30c>)
 8014d74:	2201      	movs	r2, #1
 8014d76:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8014d78:	4b2e      	ldr	r3, [pc, #184]	; (8014e34 <RadioSetRxConfig+0x30c>)
 8014d7a:	2201      	movs	r2, #1
 8014d7c:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8014d7e:	f000 fc70 	bl	8015662 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8014d82:	4b2c      	ldr	r3, [pc, #176]	; (8014e34 <RadioSetRxConfig+0x30c>)
 8014d84:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8014d88:	2b00      	cmp	r3, #0
 8014d8a:	bf14      	ite	ne
 8014d8c:	2301      	movne	r3, #1
 8014d8e:	2300      	moveq	r3, #0
 8014d90:	b2db      	uxtb	r3, r3
 8014d92:	4618      	mov	r0, r3
 8014d94:	f7ff fdfa 	bl	801498c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8014d98:	4828      	ldr	r0, [pc, #160]	; (8014e3c <RadioSetRxConfig+0x314>)
 8014d9a:	f002 f8d9 	bl	8016f50 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8014d9e:	4828      	ldr	r0, [pc, #160]	; (8014e40 <RadioSetRxConfig+0x318>)
 8014da0:	f002 f9a2 	bl	80170e8 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8014da4:	4a28      	ldr	r2, [pc, #160]	; (8014e48 <RadioSetRxConfig+0x320>)
 8014da6:	f107 0314 	add.w	r3, r7, #20
 8014daa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014dae:	e883 0003 	stmia.w	r3, {r0, r1}
 8014db2:	f107 0314 	add.w	r3, r7, #20
 8014db6:	4618      	mov	r0, r3
 8014db8:	f001 fcd5 	bl	8016766 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8014dbc:	f240 10ff 	movw	r0, #511	; 0x1ff
 8014dc0:	f001 fd20 	bl	8016804 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8014dc4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8014dc6:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8014dca:	fb02 f303 	mul.w	r3, r2, r3
 8014dce:	461a      	mov	r2, r3
 8014dd0:	687b      	ldr	r3, [r7, #4]
 8014dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8014dd6:	4a17      	ldr	r2, [pc, #92]	; (8014e34 <RadioSetRxConfig+0x30c>)
 8014dd8:	6093      	str	r3, [r2, #8]
            break;
 8014dda:	e0a8      	b.n	8014f2e <RadioSetRxConfig+0x406>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8014ddc:	2000      	movs	r0, #0
 8014dde:	f001 fe89 	bl	8016af4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8014de2:	4b14      	ldr	r3, [pc, #80]	; (8014e34 <RadioSetRxConfig+0x30c>)
 8014de4:	2201      	movs	r2, #1
 8014de6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8014dea:	687b      	ldr	r3, [r7, #4]
 8014dec:	b2da      	uxtb	r2, r3
 8014dee:	4b11      	ldr	r3, [pc, #68]	; (8014e34 <RadioSetRxConfig+0x30c>)
 8014df0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8014df4:	4a15      	ldr	r2, [pc, #84]	; (8014e4c <RadioSetRxConfig+0x324>)
 8014df6:	68bb      	ldr	r3, [r7, #8]
 8014df8:	4413      	add	r3, r2
 8014dfa:	781a      	ldrb	r2, [r3, #0]
 8014dfc:	4b0d      	ldr	r3, [pc, #52]	; (8014e34 <RadioSetRxConfig+0x30c>)
 8014dfe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8014e02:	4a0c      	ldr	r2, [pc, #48]	; (8014e34 <RadioSetRxConfig+0x30c>)
 8014e04:	7bbb      	ldrb	r3, [r7, #14]
 8014e06:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8014e0a:	68bb      	ldr	r3, [r7, #8]
 8014e0c:	2b00      	cmp	r3, #0
 8014e0e:	d105      	bne.n	8014e1c <RadioSetRxConfig+0x2f4>
 8014e10:	687b      	ldr	r3, [r7, #4]
 8014e12:	2b0b      	cmp	r3, #11
 8014e14:	d008      	beq.n	8014e28 <RadioSetRxConfig+0x300>
 8014e16:	687b      	ldr	r3, [r7, #4]
 8014e18:	2b0c      	cmp	r3, #12
 8014e1a:	d005      	beq.n	8014e28 <RadioSetRxConfig+0x300>
 8014e1c:	68bb      	ldr	r3, [r7, #8]
 8014e1e:	2b01      	cmp	r3, #1
 8014e20:	d116      	bne.n	8014e50 <RadioSetRxConfig+0x328>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8014e22:	687b      	ldr	r3, [r7, #4]
 8014e24:	2b0c      	cmp	r3, #12
 8014e26:	d113      	bne.n	8014e50 <RadioSetRxConfig+0x328>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8014e28:	4b02      	ldr	r3, [pc, #8]	; (8014e34 <RadioSetRxConfig+0x30c>)
 8014e2a:	2201      	movs	r2, #1
 8014e2c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8014e30:	e012      	b.n	8014e58 <RadioSetRxConfig+0x330>
 8014e32:	bf00      	nop
 8014e34:	20001678 	.word	0x20001678
 8014e38:	200000f0 	.word	0x200000f0
 8014e3c:	200016b0 	.word	0x200016b0
 8014e40:	20001686 	.word	0x20001686
 8014e44:	08019714 	.word	0x08019714
 8014e48:	0801971c 	.word	0x0801971c
 8014e4c:	08019d00 	.word	0x08019d00
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8014e50:	4b39      	ldr	r3, [pc, #228]	; (8014f38 <RadioSetRxConfig+0x410>)
 8014e52:	2200      	movs	r2, #0
 8014e54:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8014e58:	4b37      	ldr	r3, [pc, #220]	; (8014f38 <RadioSetRxConfig+0x410>)
 8014e5a:	2201      	movs	r2, #1
 8014e5c:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8014e5e:	4b36      	ldr	r3, [pc, #216]	; (8014f38 <RadioSetRxConfig+0x410>)
 8014e60:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8014e64:	2b05      	cmp	r3, #5
 8014e66:	d004      	beq.n	8014e72 <RadioSetRxConfig+0x34a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8014e68:	4b33      	ldr	r3, [pc, #204]	; (8014f38 <RadioSetRxConfig+0x410>)
 8014e6a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8014e6e:	2b06      	cmp	r3, #6
 8014e70:	d10a      	bne.n	8014e88 <RadioSetRxConfig+0x360>
                if( preambleLen < 12 )
 8014e72:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8014e74:	2b0b      	cmp	r3, #11
 8014e76:	d803      	bhi.n	8014e80 <RadioSetRxConfig+0x358>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8014e78:	4b2f      	ldr	r3, [pc, #188]	; (8014f38 <RadioSetRxConfig+0x410>)
 8014e7a:	220c      	movs	r2, #12
 8014e7c:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8014e7e:	e006      	b.n	8014e8e <RadioSetRxConfig+0x366>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8014e80:	4a2d      	ldr	r2, [pc, #180]	; (8014f38 <RadioSetRxConfig+0x410>)
 8014e82:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8014e84:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8014e86:	e002      	b.n	8014e8e <RadioSetRxConfig+0x366>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8014e88:	4a2b      	ldr	r2, [pc, #172]	; (8014f38 <RadioSetRxConfig+0x410>)
 8014e8a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8014e8c:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8014e8e:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8014e92:	4b29      	ldr	r3, [pc, #164]	; (8014f38 <RadioSetRxConfig+0x410>)
 8014e94:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8014e96:	4b29      	ldr	r3, [pc, #164]	; (8014f3c <RadioSetRxConfig+0x414>)
 8014e98:	781a      	ldrb	r2, [r3, #0]
 8014e9a:	4b27      	ldr	r3, [pc, #156]	; (8014f38 <RadioSetRxConfig+0x410>)
 8014e9c:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8014e9e:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8014ea2:	4b25      	ldr	r3, [pc, #148]	; (8014f38 <RadioSetRxConfig+0x410>)
 8014ea4:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8014ea8:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8014eac:	4b22      	ldr	r3, [pc, #136]	; (8014f38 <RadioSetRxConfig+0x410>)
 8014eae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8014eb2:	f000 fbd6 	bl	8015662 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8014eb6:	4b20      	ldr	r3, [pc, #128]	; (8014f38 <RadioSetRxConfig+0x410>)
 8014eb8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8014ebc:	2b00      	cmp	r3, #0
 8014ebe:	bf14      	ite	ne
 8014ec0:	2301      	movne	r3, #1
 8014ec2:	2300      	moveq	r3, #0
 8014ec4:	b2db      	uxtb	r3, r3
 8014ec6:	4618      	mov	r0, r3
 8014ec8:	f7ff fd60 	bl	801498c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8014ecc:	481c      	ldr	r0, [pc, #112]	; (8014f40 <RadioSetRxConfig+0x418>)
 8014ece:	f002 f83f 	bl	8016f50 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8014ed2:	481c      	ldr	r0, [pc, #112]	; (8014f44 <RadioSetRxConfig+0x41c>)
 8014ed4:	f002 f908 	bl	80170e8 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8014ed8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8014eda:	b2db      	uxtb	r3, r3
 8014edc:	4618      	mov	r0, r3
 8014ede:	f001 fe18 	bl	8016b12 <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8014ee2:	4b15      	ldr	r3, [pc, #84]	; (8014f38 <RadioSetRxConfig+0x410>)
 8014ee4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8014ee8:	2b01      	cmp	r3, #1
 8014eea:	d10d      	bne.n	8014f08 <RadioSetRxConfig+0x3e0>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 8014eec:	f240 7036 	movw	r0, #1846	; 0x736
 8014ef0:	f002 fa56 	bl	80173a0 <SUBGRF_ReadRegister>
 8014ef4:	4603      	mov	r3, r0
 8014ef6:	f023 0304 	bic.w	r3, r3, #4
 8014efa:	b2db      	uxtb	r3, r3
 8014efc:	4619      	mov	r1, r3
 8014efe:	f240 7036 	movw	r0, #1846	; 0x736
 8014f02:	f002 fa39 	bl	8017378 <SUBGRF_WriteRegister>
 8014f06:	e00c      	b.n	8014f22 <RadioSetRxConfig+0x3fa>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 8014f08:	f240 7036 	movw	r0, #1846	; 0x736
 8014f0c:	f002 fa48 	bl	80173a0 <SUBGRF_ReadRegister>
 8014f10:	4603      	mov	r3, r0
 8014f12:	f043 0304 	orr.w	r3, r3, #4
 8014f16:	b2db      	uxtb	r3, r3
 8014f18:	4619      	mov	r1, r3
 8014f1a:	f240 7036 	movw	r0, #1846	; 0x736
 8014f1e:	f002 fa2b 	bl	8017378 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8014f22:	4b05      	ldr	r3, [pc, #20]	; (8014f38 <RadioSetRxConfig+0x410>)
 8014f24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014f28:	609a      	str	r2, [r3, #8]
            break;
 8014f2a:	e000      	b.n	8014f2e <RadioSetRxConfig+0x406>
            break;
 8014f2c:	bf00      	nop
    }
}
 8014f2e:	bf00      	nop
 8014f30:	3728      	adds	r7, #40	; 0x28
 8014f32:	46bd      	mov	sp, r7
 8014f34:	bd80      	pop	{r7, pc}
 8014f36:	bf00      	nop
 8014f38:	20001678 	.word	0x20001678
 8014f3c:	200000f0 	.word	0x200000f0
 8014f40:	200016b0 	.word	0x200016b0
 8014f44:	20001686 	.word	0x20001686

08014f48 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8014f48:	b580      	push	{r7, lr}
 8014f4a:	b086      	sub	sp, #24
 8014f4c:	af00      	add	r7, sp, #0
 8014f4e:	60ba      	str	r2, [r7, #8]
 8014f50:	607b      	str	r3, [r7, #4]
 8014f52:	4603      	mov	r3, r0
 8014f54:	73fb      	strb	r3, [r7, #15]
 8014f56:	460b      	mov	r3, r1
 8014f58:	73bb      	strb	r3, [r7, #14]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8014f5a:	f002 fce6 	bl	801792a <RFW_DeInit>
    switch( modem )
 8014f5e:	7bfb      	ldrb	r3, [r7, #15]
 8014f60:	2b03      	cmp	r3, #3
 8014f62:	f000 80d7 	beq.w	8015114 <RadioSetTxConfig+0x1cc>
 8014f66:	2b03      	cmp	r3, #3
 8014f68:	f300 80e6 	bgt.w	8015138 <RadioSetTxConfig+0x1f0>
 8014f6c:	2b00      	cmp	r3, #0
 8014f6e:	d002      	beq.n	8014f76 <RadioSetTxConfig+0x2e>
 8014f70:	2b01      	cmp	r3, #1
 8014f72:	d061      	beq.n	8015038 <RadioSetTxConfig+0xf0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;

        default:
            break;
 8014f74:	e0e0      	b.n	8015138 <RadioSetTxConfig+0x1f0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8014f76:	4b7c      	ldr	r3, [pc, #496]	; (8015168 <RadioSetTxConfig+0x220>)
 8014f78:	2200      	movs	r2, #0
 8014f7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8014f7e:	4a7a      	ldr	r2, [pc, #488]	; (8015168 <RadioSetTxConfig+0x220>)
 8014f80:	6a3b      	ldr	r3, [r7, #32]
 8014f82:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8014f84:	4b78      	ldr	r3, [pc, #480]	; (8015168 <RadioSetTxConfig+0x220>)
 8014f86:	220b      	movs	r2, #11
 8014f88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8014f8c:	6878      	ldr	r0, [r7, #4]
 8014f8e:	f002 fbfd 	bl	801778c <SUBGRF_GetFskBandwidthRegValue>
 8014f92:	4603      	mov	r3, r0
 8014f94:	461a      	mov	r2, r3
 8014f96:	4b74      	ldr	r3, [pc, #464]	; (8015168 <RadioSetTxConfig+0x220>)
 8014f98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8014f9c:	4a72      	ldr	r2, [pc, #456]	; (8015168 <RadioSetTxConfig+0x220>)
 8014f9e:	68bb      	ldr	r3, [r7, #8]
 8014fa0:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8014fa2:	4b71      	ldr	r3, [pc, #452]	; (8015168 <RadioSetTxConfig+0x220>)
 8014fa4:	2200      	movs	r2, #0
 8014fa6:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8014fa8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8014faa:	00db      	lsls	r3, r3, #3
 8014fac:	b29a      	uxth	r2, r3
 8014fae:	4b6e      	ldr	r3, [pc, #440]	; (8015168 <RadioSetTxConfig+0x220>)
 8014fb0:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8014fb2:	4b6d      	ldr	r3, [pc, #436]	; (8015168 <RadioSetTxConfig+0x220>)
 8014fb4:	2204      	movs	r2, #4
 8014fb6:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8014fb8:	4b6b      	ldr	r3, [pc, #428]	; (8015168 <RadioSetTxConfig+0x220>)
 8014fba:	2218      	movs	r2, #24
 8014fbc:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8014fbe:	4b6a      	ldr	r3, [pc, #424]	; (8015168 <RadioSetTxConfig+0x220>)
 8014fc0:	2200      	movs	r2, #0
 8014fc2:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8014fc4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8014fc8:	f083 0301 	eor.w	r3, r3, #1
 8014fcc:	b2db      	uxtb	r3, r3
 8014fce:	461a      	mov	r2, r3
 8014fd0:	4b65      	ldr	r3, [pc, #404]	; (8015168 <RadioSetTxConfig+0x220>)
 8014fd2:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 8014fd4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8014fd8:	2b00      	cmp	r3, #0
 8014fda:	d003      	beq.n	8014fe4 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8014fdc:	4b62      	ldr	r3, [pc, #392]	; (8015168 <RadioSetTxConfig+0x220>)
 8014fde:	22f2      	movs	r2, #242	; 0xf2
 8014fe0:	75da      	strb	r2, [r3, #23]
 8014fe2:	e002      	b.n	8014fea <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8014fe4:	4b60      	ldr	r3, [pc, #384]	; (8015168 <RadioSetTxConfig+0x220>)
 8014fe6:	2201      	movs	r2, #1
 8014fe8:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8014fea:	4b5f      	ldr	r3, [pc, #380]	; (8015168 <RadioSetTxConfig+0x220>)
 8014fec:	2201      	movs	r2, #1
 8014fee:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8014ff0:	f000 fb37 	bl	8015662 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8014ff4:	4b5c      	ldr	r3, [pc, #368]	; (8015168 <RadioSetTxConfig+0x220>)
 8014ff6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8014ffa:	2b00      	cmp	r3, #0
 8014ffc:	bf14      	ite	ne
 8014ffe:	2301      	movne	r3, #1
 8015000:	2300      	moveq	r3, #0
 8015002:	b2db      	uxtb	r3, r3
 8015004:	4618      	mov	r0, r3
 8015006:	f7ff fcc1 	bl	801498c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801500a:	4858      	ldr	r0, [pc, #352]	; (801516c <RadioSetTxConfig+0x224>)
 801500c:	f001 ffa0 	bl	8016f50 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8015010:	4857      	ldr	r0, [pc, #348]	; (8015170 <RadioSetTxConfig+0x228>)
 8015012:	f002 f869 	bl	80170e8 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8015016:	4a57      	ldr	r2, [pc, #348]	; (8015174 <RadioSetTxConfig+0x22c>)
 8015018:	f107 0310 	add.w	r3, r7, #16
 801501c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015020:	e883 0003 	stmia.w	r3, {r0, r1}
 8015024:	f107 0310 	add.w	r3, r7, #16
 8015028:	4618      	mov	r0, r3
 801502a:	f001 fb9c 	bl	8016766 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801502e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8015032:	f001 fbe7 	bl	8016804 <SUBGRF_SetWhiteningSeed>
            break;
 8015036:	e080      	b.n	801513a <RadioSetTxConfig+0x1f2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8015038:	4b4b      	ldr	r3, [pc, #300]	; (8015168 <RadioSetTxConfig+0x220>)
 801503a:	2201      	movs	r2, #1
 801503c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8015040:	6a3b      	ldr	r3, [r7, #32]
 8015042:	b2da      	uxtb	r2, r3
 8015044:	4b48      	ldr	r3, [pc, #288]	; (8015168 <RadioSetTxConfig+0x220>)
 8015046:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 801504a:	4a4b      	ldr	r2, [pc, #300]	; (8015178 <RadioSetTxConfig+0x230>)
 801504c:	687b      	ldr	r3, [r7, #4]
 801504e:	4413      	add	r3, r2
 8015050:	781a      	ldrb	r2, [r3, #0]
 8015052:	4b45      	ldr	r3, [pc, #276]	; (8015168 <RadioSetTxConfig+0x220>)
 8015054:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8015058:	4a43      	ldr	r2, [pc, #268]	; (8015168 <RadioSetTxConfig+0x220>)
 801505a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801505e:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8015062:	687b      	ldr	r3, [r7, #4]
 8015064:	2b00      	cmp	r3, #0
 8015066:	d105      	bne.n	8015074 <RadioSetTxConfig+0x12c>
 8015068:	6a3b      	ldr	r3, [r7, #32]
 801506a:	2b0b      	cmp	r3, #11
 801506c:	d008      	beq.n	8015080 <RadioSetTxConfig+0x138>
 801506e:	6a3b      	ldr	r3, [r7, #32]
 8015070:	2b0c      	cmp	r3, #12
 8015072:	d005      	beq.n	8015080 <RadioSetTxConfig+0x138>
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	2b01      	cmp	r3, #1
 8015078:	d107      	bne.n	801508a <RadioSetTxConfig+0x142>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801507a:	6a3b      	ldr	r3, [r7, #32]
 801507c:	2b0c      	cmp	r3, #12
 801507e:	d104      	bne.n	801508a <RadioSetTxConfig+0x142>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8015080:	4b39      	ldr	r3, [pc, #228]	; (8015168 <RadioSetTxConfig+0x220>)
 8015082:	2201      	movs	r2, #1
 8015084:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8015088:	e003      	b.n	8015092 <RadioSetTxConfig+0x14a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 801508a:	4b37      	ldr	r3, [pc, #220]	; (8015168 <RadioSetTxConfig+0x220>)
 801508c:	2200      	movs	r2, #0
 801508e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8015092:	4b35      	ldr	r3, [pc, #212]	; (8015168 <RadioSetTxConfig+0x220>)
 8015094:	2201      	movs	r2, #1
 8015096:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8015098:	4b33      	ldr	r3, [pc, #204]	; (8015168 <RadioSetTxConfig+0x220>)
 801509a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801509e:	2b05      	cmp	r3, #5
 80150a0:	d004      	beq.n	80150ac <RadioSetTxConfig+0x164>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 80150a2:	4b31      	ldr	r3, [pc, #196]	; (8015168 <RadioSetTxConfig+0x220>)
 80150a4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80150a8:	2b06      	cmp	r3, #6
 80150aa:	d10a      	bne.n	80150c2 <RadioSetTxConfig+0x17a>
                if( preambleLen < 12 )
 80150ac:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80150ae:	2b0b      	cmp	r3, #11
 80150b0:	d803      	bhi.n	80150ba <RadioSetTxConfig+0x172>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 80150b2:	4b2d      	ldr	r3, [pc, #180]	; (8015168 <RadioSetTxConfig+0x220>)
 80150b4:	220c      	movs	r2, #12
 80150b6:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 80150b8:	e006      	b.n	80150c8 <RadioSetTxConfig+0x180>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80150ba:	4a2b      	ldr	r2, [pc, #172]	; (8015168 <RadioSetTxConfig+0x220>)
 80150bc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80150be:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 80150c0:	e002      	b.n	80150c8 <RadioSetTxConfig+0x180>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80150c2:	4a29      	ldr	r2, [pc, #164]	; (8015168 <RadioSetTxConfig+0x220>)
 80150c4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80150c6:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 80150c8:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80150cc:	4b26      	ldr	r3, [pc, #152]	; (8015168 <RadioSetTxConfig+0x220>)
 80150ce:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80150d0:	4b2a      	ldr	r3, [pc, #168]	; (801517c <RadioSetTxConfig+0x234>)
 80150d2:	781a      	ldrb	r2, [r3, #0]
 80150d4:	4b24      	ldr	r3, [pc, #144]	; (8015168 <RadioSetTxConfig+0x220>)
 80150d6:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80150d8:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80150dc:	4b22      	ldr	r3, [pc, #136]	; (8015168 <RadioSetTxConfig+0x220>)
 80150de:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 80150e2:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 80150e6:	4b20      	ldr	r3, [pc, #128]	; (8015168 <RadioSetTxConfig+0x220>)
 80150e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 80150ec:	f000 fab9 	bl	8015662 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 80150f0:	4b1d      	ldr	r3, [pc, #116]	; (8015168 <RadioSetTxConfig+0x220>)
 80150f2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80150f6:	2b00      	cmp	r3, #0
 80150f8:	bf14      	ite	ne
 80150fa:	2301      	movne	r3, #1
 80150fc:	2300      	moveq	r3, #0
 80150fe:	b2db      	uxtb	r3, r3
 8015100:	4618      	mov	r0, r3
 8015102:	f7ff fc43 	bl	801498c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8015106:	4819      	ldr	r0, [pc, #100]	; (801516c <RadioSetTxConfig+0x224>)
 8015108:	f001 ff22 	bl	8016f50 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801510c:	4818      	ldr	r0, [pc, #96]	; (8015170 <RadioSetTxConfig+0x228>)
 801510e:	f001 ffeb 	bl	80170e8 <SUBGRF_SetPacketParams>
            break;
 8015112:	e012      	b.n	801513a <RadioSetTxConfig+0x1f2>
            RadioSetModem(MODEM_SIGFOX_TX);
 8015114:	2003      	movs	r0, #3
 8015116:	f7ff fc39 	bl	801498c <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 801511a:	4b13      	ldr	r3, [pc, #76]	; (8015168 <RadioSetTxConfig+0x220>)
 801511c:	2202      	movs	r2, #2
 801511e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 8015122:	4a11      	ldr	r2, [pc, #68]	; (8015168 <RadioSetTxConfig+0x220>)
 8015124:	6a3b      	ldr	r3, [r7, #32]
 8015126:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8015128:	4b0f      	ldr	r3, [pc, #60]	; (8015168 <RadioSetTxConfig+0x220>)
 801512a:	2216      	movs	r2, #22
 801512c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8015130:	480e      	ldr	r0, [pc, #56]	; (801516c <RadioSetTxConfig+0x224>)
 8015132:	f001 ff0d 	bl	8016f50 <SUBGRF_SetModulationParams>
            break;
 8015136:	e000      	b.n	801513a <RadioSetTxConfig+0x1f2>
            break;
 8015138:	bf00      	nop
    }



    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 801513a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801513e:	4618      	mov	r0, r3
 8015140:	f002 fa36 	bl	80175b0 <SUBGRF_SetRfTxPower>
 8015144:	4603      	mov	r3, r0
 8015146:	461a      	mov	r2, r3
 8015148:	4b07      	ldr	r3, [pc, #28]	; (8015168 <RadioSetTxConfig+0x220>)
 801514a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 801514e:	4b06      	ldr	r3, [pc, #24]	; (8015168 <RadioSetTxConfig+0x220>)
 8015150:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8015154:	4618      	mov	r0, r3
 8015156:	f002 fbfc 	bl	8017952 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 801515a:	4a03      	ldr	r2, [pc, #12]	; (8015168 <RadioSetTxConfig+0x220>)
 801515c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801515e:	6053      	str	r3, [r2, #4]
}
 8015160:	bf00      	nop
 8015162:	3718      	adds	r7, #24
 8015164:	46bd      	mov	sp, r7
 8015166:	bd80      	pop	{r7, pc}
 8015168:	20001678 	.word	0x20001678
 801516c:	200016b0 	.word	0x200016b0
 8015170:	20001686 	.word	0x20001686
 8015174:	0801971c 	.word	0x0801971c
 8015178:	08019d00 	.word	0x08019d00
 801517c:	200000f0 	.word	0x200000f0

08015180 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 8015180:	b480      	push	{r7}
 8015182:	b083      	sub	sp, #12
 8015184:	af00      	add	r7, sp, #0
 8015186:	6078      	str	r0, [r7, #4]
    return true;
 8015188:	2301      	movs	r3, #1
}
 801518a:	4618      	mov	r0, r3
 801518c:	370c      	adds	r7, #12
 801518e:	46bd      	mov	sp, r7
 8015190:	bc80      	pop	{r7}
 8015192:	4770      	bx	lr

08015194 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8015194:	b480      	push	{r7}
 8015196:	b085      	sub	sp, #20
 8015198:	af00      	add	r7, sp, #0
 801519a:	4603      	mov	r3, r0
 801519c:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 801519e:	2300      	movs	r3, #0
 80151a0:	60fb      	str	r3, [r7, #12]

    switch( bw )
 80151a2:	79fb      	ldrb	r3, [r7, #7]
 80151a4:	2b0a      	cmp	r3, #10
 80151a6:	d83e      	bhi.n	8015226 <RadioGetLoRaBandwidthInHz+0x92>
 80151a8:	a201      	add	r2, pc, #4	; (adr r2, 80151b0 <RadioGetLoRaBandwidthInHz+0x1c>)
 80151aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80151ae:	bf00      	nop
 80151b0:	080151dd 	.word	0x080151dd
 80151b4:	080151ed 	.word	0x080151ed
 80151b8:	080151fd 	.word	0x080151fd
 80151bc:	0801520d 	.word	0x0801520d
 80151c0:	08015215 	.word	0x08015215
 80151c4:	0801521b 	.word	0x0801521b
 80151c8:	08015221 	.word	0x08015221
 80151cc:	08015227 	.word	0x08015227
 80151d0:	080151e5 	.word	0x080151e5
 80151d4:	080151f5 	.word	0x080151f5
 80151d8:	08015205 	.word	0x08015205
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 80151dc:	f641 6384 	movw	r3, #7812	; 0x1e84
 80151e0:	60fb      	str	r3, [r7, #12]
        break;
 80151e2:	e020      	b.n	8015226 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 80151e4:	f642 03b1 	movw	r3, #10417	; 0x28b1
 80151e8:	60fb      	str	r3, [r7, #12]
        break;
 80151ea:	e01c      	b.n	8015226 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 80151ec:	f643 5309 	movw	r3, #15625	; 0x3d09
 80151f0:	60fb      	str	r3, [r7, #12]
        break;
 80151f2:	e018      	b.n	8015226 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 80151f4:	f245 1361 	movw	r3, #20833	; 0x5161
 80151f8:	60fb      	str	r3, [r7, #12]
        break;
 80151fa:	e014      	b.n	8015226 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 80151fc:	f647 2312 	movw	r3, #31250	; 0x7a12
 8015200:	60fb      	str	r3, [r7, #12]
        break;
 8015202:	e010      	b.n	8015226 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8015204:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 8015208:	60fb      	str	r3, [r7, #12]
        break;
 801520a:	e00c      	b.n	8015226 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 801520c:	f24f 4324 	movw	r3, #62500	; 0xf424
 8015210:	60fb      	str	r3, [r7, #12]
        break;
 8015212:	e008      	b.n	8015226 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8015214:	4b07      	ldr	r3, [pc, #28]	; (8015234 <RadioGetLoRaBandwidthInHz+0xa0>)
 8015216:	60fb      	str	r3, [r7, #12]
        break;
 8015218:	e005      	b.n	8015226 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 801521a:	4b07      	ldr	r3, [pc, #28]	; (8015238 <RadioGetLoRaBandwidthInHz+0xa4>)
 801521c:	60fb      	str	r3, [r7, #12]
        break;
 801521e:	e002      	b.n	8015226 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8015220:	4b06      	ldr	r3, [pc, #24]	; (801523c <RadioGetLoRaBandwidthInHz+0xa8>)
 8015222:	60fb      	str	r3, [r7, #12]
        break;
 8015224:	bf00      	nop
    }

    return bandwidthInHz;
 8015226:	68fb      	ldr	r3, [r7, #12]
}
 8015228:	4618      	mov	r0, r3
 801522a:	3714      	adds	r7, #20
 801522c:	46bd      	mov	sp, r7
 801522e:	bc80      	pop	{r7}
 8015230:	4770      	bx	lr
 8015232:	bf00      	nop
 8015234:	0001e848 	.word	0x0001e848
 8015238:	0003d090 	.word	0x0003d090
 801523c:	0007a120 	.word	0x0007a120

08015240 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8015240:	b480      	push	{r7}
 8015242:	b083      	sub	sp, #12
 8015244:	af00      	add	r7, sp, #0
 8015246:	6078      	str	r0, [r7, #4]
 8015248:	4608      	mov	r0, r1
 801524a:	4611      	mov	r1, r2
 801524c:	461a      	mov	r2, r3
 801524e:	4603      	mov	r3, r0
 8015250:	70fb      	strb	r3, [r7, #3]
 8015252:	460b      	mov	r3, r1
 8015254:	803b      	strh	r3, [r7, #0]
 8015256:	4613      	mov	r3, r2
 8015258:	70bb      	strb	r3, [r7, #2]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 801525a:	883b      	ldrh	r3, [r7, #0]
 801525c:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801525e:	78ba      	ldrb	r2, [r7, #2]
 8015260:	f082 0201 	eor.w	r2, r2, #1
 8015264:	b2d2      	uxtb	r2, r2
 8015266:	2a00      	cmp	r2, #0
 8015268:	d001      	beq.n	801526e <RadioGetGfskTimeOnAirNumerator+0x2e>
 801526a:	2208      	movs	r2, #8
 801526c:	e000      	b.n	8015270 <RadioGetGfskTimeOnAirNumerator+0x30>
 801526e:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8015270:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8015272:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8015276:	7c3b      	ldrb	r3, [r7, #16]
 8015278:	7d39      	ldrb	r1, [r7, #20]
 801527a:	2900      	cmp	r1, #0
 801527c:	d001      	beq.n	8015282 <RadioGetGfskTimeOnAirNumerator+0x42>
 801527e:	2102      	movs	r1, #2
 8015280:	e000      	b.n	8015284 <RadioGetGfskTimeOnAirNumerator+0x44>
 8015282:	2100      	movs	r1, #0
 8015284:	440b      	add	r3, r1
 8015286:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8015288:	4413      	add	r3, r2
    /* ST_WORKAROUND_END */
}
 801528a:	4618      	mov	r0, r3
 801528c:	370c      	adds	r7, #12
 801528e:	46bd      	mov	sp, r7
 8015290:	bc80      	pop	{r7}
 8015292:	4770      	bx	lr

08015294 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8015294:	b480      	push	{r7}
 8015296:	b08b      	sub	sp, #44	; 0x2c
 8015298:	af00      	add	r7, sp, #0
 801529a:	60f8      	str	r0, [r7, #12]
 801529c:	60b9      	str	r1, [r7, #8]
 801529e:	4611      	mov	r1, r2
 80152a0:	461a      	mov	r2, r3
 80152a2:	460b      	mov	r3, r1
 80152a4:	71fb      	strb	r3, [r7, #7]
 80152a6:	4613      	mov	r3, r2
 80152a8:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 80152aa:	79fb      	ldrb	r3, [r7, #7]
 80152ac:	3304      	adds	r3, #4
 80152ae:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 80152b0:	2300      	movs	r3, #0
 80152b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 80152b6:	68bb      	ldr	r3, [r7, #8]
 80152b8:	2b05      	cmp	r3, #5
 80152ba:	d002      	beq.n	80152c2 <RadioGetLoRaTimeOnAirNumerator+0x2e>
 80152bc:	68bb      	ldr	r3, [r7, #8]
 80152be:	2b06      	cmp	r3, #6
 80152c0:	d104      	bne.n	80152cc <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 80152c2:	88bb      	ldrh	r3, [r7, #4]
 80152c4:	2b0b      	cmp	r3, #11
 80152c6:	d801      	bhi.n	80152cc <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 80152c8:	230c      	movs	r3, #12
 80152ca:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80152cc:	68fb      	ldr	r3, [r7, #12]
 80152ce:	2b00      	cmp	r3, #0
 80152d0:	d105      	bne.n	80152de <RadioGetLoRaTimeOnAirNumerator+0x4a>
 80152d2:	68bb      	ldr	r3, [r7, #8]
 80152d4:	2b0b      	cmp	r3, #11
 80152d6:	d008      	beq.n	80152ea <RadioGetLoRaTimeOnAirNumerator+0x56>
 80152d8:	68bb      	ldr	r3, [r7, #8]
 80152da:	2b0c      	cmp	r3, #12
 80152dc:	d005      	beq.n	80152ea <RadioGetLoRaTimeOnAirNumerator+0x56>
 80152de:	68fb      	ldr	r3, [r7, #12]
 80152e0:	2b01      	cmp	r3, #1
 80152e2:	d105      	bne.n	80152f0 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80152e4:	68bb      	ldr	r3, [r7, #8]
 80152e6:	2b0c      	cmp	r3, #12
 80152e8:	d102      	bne.n	80152f0 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 80152ea:	2301      	movs	r3, #1
 80152ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80152f0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80152f4:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 80152f6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80152fa:	2a00      	cmp	r2, #0
 80152fc:	d001      	beq.n	8015302 <RadioGetLoRaTimeOnAirNumerator+0x6e>
 80152fe:	2210      	movs	r2, #16
 8015300:	e000      	b.n	8015304 <RadioGetLoRaTimeOnAirNumerator+0x70>
 8015302:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8015304:	4413      	add	r3, r2
 8015306:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8015308:	68bb      	ldr	r3, [r7, #8]
 801530a:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 801530c:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 801530e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8015312:	2a00      	cmp	r2, #0
 8015314:	d001      	beq.n	801531a <RadioGetLoRaTimeOnAirNumerator+0x86>
 8015316:	2200      	movs	r2, #0
 8015318:	e000      	b.n	801531c <RadioGetLoRaTimeOnAirNumerator+0x88>
 801531a:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 801531c:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801531e:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 8015320:	68bb      	ldr	r3, [r7, #8]
 8015322:	2b06      	cmp	r3, #6
 8015324:	d803      	bhi.n	801532e <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 8015326:	68bb      	ldr	r3, [r7, #8]
 8015328:	009b      	lsls	r3, r3, #2
 801532a:	623b      	str	r3, [r7, #32]
 801532c:	e00e      	b.n	801534c <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 801532e:	69fb      	ldr	r3, [r7, #28]
 8015330:	3308      	adds	r3, #8
 8015332:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8015334:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015338:	2b00      	cmp	r3, #0
 801533a:	d004      	beq.n	8015346 <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 801533c:	68bb      	ldr	r3, [r7, #8]
 801533e:	3b02      	subs	r3, #2
 8015340:	009b      	lsls	r3, r3, #2
 8015342:	623b      	str	r3, [r7, #32]
 8015344:	e002      	b.n	801534c <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 8015346:	68bb      	ldr	r3, [r7, #8]
 8015348:	009b      	lsls	r3, r3, #2
 801534a:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 801534c:	69fb      	ldr	r3, [r7, #28]
 801534e:	2b00      	cmp	r3, #0
 8015350:	da01      	bge.n	8015356 <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 8015352:	2300      	movs	r3, #0
 8015354:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8015356:	69fa      	ldr	r2, [r7, #28]
 8015358:	6a3b      	ldr	r3, [r7, #32]
 801535a:	4413      	add	r3, r2
 801535c:	1e5a      	subs	r2, r3, #1
 801535e:	6a3b      	ldr	r3, [r7, #32]
 8015360:	fb92 f3f3 	sdiv	r3, r2, r3
 8015364:	697a      	ldr	r2, [r7, #20]
 8015366:	fb02 f203 	mul.w	r2, r2, r3
 801536a:	88bb      	ldrh	r3, [r7, #4]
 801536c:	4413      	add	r3, r2
    int32_t intermediate =
 801536e:	330c      	adds	r3, #12
 8015370:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 8015372:	68bb      	ldr	r3, [r7, #8]
 8015374:	2b06      	cmp	r3, #6
 8015376:	d802      	bhi.n	801537e <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8015378:	69bb      	ldr	r3, [r7, #24]
 801537a:	3302      	adds	r3, #2
 801537c:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 801537e:	69bb      	ldr	r3, [r7, #24]
 8015380:	009b      	lsls	r3, r3, #2
 8015382:	1c5a      	adds	r2, r3, #1
 8015384:	68bb      	ldr	r3, [r7, #8]
 8015386:	3b02      	subs	r3, #2
 8015388:	fa02 f303 	lsl.w	r3, r2, r3
}
 801538c:	4618      	mov	r0, r3
 801538e:	372c      	adds	r7, #44	; 0x2c
 8015390:	46bd      	mov	sp, r7
 8015392:	bc80      	pop	{r7}
 8015394:	4770      	bx	lr
	...

08015398 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8015398:	b580      	push	{r7, lr}
 801539a:	b08a      	sub	sp, #40	; 0x28
 801539c:	af04      	add	r7, sp, #16
 801539e:	60b9      	str	r1, [r7, #8]
 80153a0:	607a      	str	r2, [r7, #4]
 80153a2:	461a      	mov	r2, r3
 80153a4:	4603      	mov	r3, r0
 80153a6:	73fb      	strb	r3, [r7, #15]
 80153a8:	4613      	mov	r3, r2
 80153aa:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 80153ac:	2300      	movs	r3, #0
 80153ae:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 80153b0:	2301      	movs	r3, #1
 80153b2:	613b      	str	r3, [r7, #16]

    switch( modem )
 80153b4:	7bfb      	ldrb	r3, [r7, #15]
 80153b6:	2b00      	cmp	r3, #0
 80153b8:	d002      	beq.n	80153c0 <RadioTimeOnAir+0x28>
 80153ba:	2b01      	cmp	r3, #1
 80153bc:	d017      	beq.n	80153ee <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 80153be:	e035      	b.n	801542c <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 80153c0:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 80153c4:	8c3a      	ldrh	r2, [r7, #32]
 80153c6:	7bb9      	ldrb	r1, [r7, #14]
 80153c8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80153cc:	9301      	str	r3, [sp, #4]
 80153ce:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80153d2:	9300      	str	r3, [sp, #0]
 80153d4:	4603      	mov	r3, r0
 80153d6:	6878      	ldr	r0, [r7, #4]
 80153d8:	f7ff ff32 	bl	8015240 <RadioGetGfskTimeOnAirNumerator>
 80153dc:	4603      	mov	r3, r0
 80153de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80153e2:	fb02 f303 	mul.w	r3, r2, r3
 80153e6:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 80153e8:	687b      	ldr	r3, [r7, #4]
 80153ea:	613b      	str	r3, [r7, #16]
        break;
 80153ec:	e01e      	b.n	801542c <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 80153ee:	8c39      	ldrh	r1, [r7, #32]
 80153f0:	7bba      	ldrb	r2, [r7, #14]
 80153f2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80153f6:	9302      	str	r3, [sp, #8]
 80153f8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80153fc:	9301      	str	r3, [sp, #4]
 80153fe:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015402:	9300      	str	r3, [sp, #0]
 8015404:	460b      	mov	r3, r1
 8015406:	6879      	ldr	r1, [r7, #4]
 8015408:	68b8      	ldr	r0, [r7, #8]
 801540a:	f7ff ff43 	bl	8015294 <RadioGetLoRaTimeOnAirNumerator>
 801540e:	4603      	mov	r3, r0
 8015410:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8015414:	fb02 f303 	mul.w	r3, r2, r3
 8015418:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 801541a:	4a0a      	ldr	r2, [pc, #40]	; (8015444 <RadioTimeOnAir+0xac>)
 801541c:	68bb      	ldr	r3, [r7, #8]
 801541e:	4413      	add	r3, r2
 8015420:	781b      	ldrb	r3, [r3, #0]
 8015422:	4618      	mov	r0, r3
 8015424:	f7ff feb6 	bl	8015194 <RadioGetLoRaBandwidthInHz>
 8015428:	6138      	str	r0, [r7, #16]
        break;
 801542a:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC(numerator, denominator); /* ST_WORKAROUND : simplified calculation with macro usage */
 801542c:	697a      	ldr	r2, [r7, #20]
 801542e:	693b      	ldr	r3, [r7, #16]
 8015430:	4413      	add	r3, r2
 8015432:	1e5a      	subs	r2, r3, #1
 8015434:	693b      	ldr	r3, [r7, #16]
 8015436:	fbb2 f3f3 	udiv	r3, r2, r3
}
 801543a:	4618      	mov	r0, r3
 801543c:	3718      	adds	r7, #24
 801543e:	46bd      	mov	sp, r7
 8015440:	bd80      	pop	{r7, pc}
 8015442:	bf00      	nop
 8015444:	08019d00 	.word	0x08019d00

08015448 <RadioSend>:

static void RadioSend( uint8_t *buffer, uint8_t size )
{
 8015448:	b580      	push	{r7, lr}
 801544a:	b084      	sub	sp, #16
 801544c:	af00      	add	r7, sp, #0
 801544e:	6078      	str	r0, [r7, #4]
 8015450:	460b      	mov	r3, r1
 8015452:	70fb      	strb	r3, [r7, #3]
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8015454:	2300      	movs	r3, #0
 8015456:	2200      	movs	r2, #0
 8015458:	f240 2101 	movw	r1, #513	; 0x201
 801545c:	f240 2001 	movw	r0, #513	; 0x201
 8015460:	f001 fc4c 	bl	8016cfc <SUBGRF_SetDioIrqParams>
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_TX(SET);

    /* Set RF switch */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_TX);
 8015464:	4b70      	ldr	r3, [pc, #448]	; (8015628 <RadioSend+0x1e0>)
 8015466:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801546a:	2101      	movs	r1, #1
 801546c:	4618      	mov	r0, r3
 801546e:	f002 f877 	bl	8017560 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if((SubgRf.Modem==MODEM_LORA) && (SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ))
 8015472:	4b6d      	ldr	r3, [pc, #436]	; (8015628 <RadioSend+0x1e0>)
 8015474:	781b      	ldrb	r3, [r3, #0]
 8015476:	2b01      	cmp	r3, #1
 8015478:	d112      	bne.n	80154a0 <RadioSend+0x58>
 801547a:	4b6b      	ldr	r3, [pc, #428]	; (8015628 <RadioSend+0x1e0>)
 801547c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8015480:	2b06      	cmp	r3, #6
 8015482:	d10d      	bne.n	80154a0 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 8015484:	f640 0089 	movw	r0, #2185	; 0x889
 8015488:	f001 ff8a 	bl	80173a0 <SUBGRF_ReadRegister>
 801548c:	4603      	mov	r3, r0
 801548e:	f023 0304 	bic.w	r3, r3, #4
 8015492:	b2db      	uxtb	r3, r3
 8015494:	4619      	mov	r1, r3
 8015496:	f640 0089 	movw	r0, #2185	; 0x889
 801549a:	f001 ff6d 	bl	8017378 <SUBGRF_WriteRegister>
 801549e:	e00c      	b.n	80154ba <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 80154a0:	f640 0089 	movw	r0, #2185	; 0x889
 80154a4:	f001 ff7c 	bl	80173a0 <SUBGRF_ReadRegister>
 80154a8:	4603      	mov	r3, r0
 80154aa:	f043 0304 	orr.w	r3, r3, #4
 80154ae:	b2db      	uxtb	r3, r3
 80154b0:	4619      	mov	r1, r3
 80154b2:	f640 0089 	movw	r0, #2185	; 0x889
 80154b6:	f001 ff5f 	bl	8017378 <SUBGRF_WriteRegister>
    }
    /* WORKAROUND END */
    switch(SubgRf.Modem)
 80154ba:	4b5b      	ldr	r3, [pc, #364]	; (8015628 <RadioSend+0x1e0>)
 80154bc:	781b      	ldrb	r3, [r3, #0]
 80154be:	2b03      	cmp	r3, #3
 80154c0:	f200 80a5 	bhi.w	801560e <RadioSend+0x1c6>
 80154c4:	a201      	add	r2, pc, #4	; (adr r2, 80154cc <RadioSend+0x84>)
 80154c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80154ca:	bf00      	nop
 80154cc:	080154f7 	.word	0x080154f7
 80154d0:	080154dd 	.word	0x080154dd
 80154d4:	08015557 	.word	0x08015557
 80154d8:	08015577 	.word	0x08015577
    {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 80154dc:	4a52      	ldr	r2, [pc, #328]	; (8015628 <RadioSend+0x1e0>)
 80154de:	78fb      	ldrb	r3, [r7, #3]
 80154e0:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80154e2:	4852      	ldr	r0, [pc, #328]	; (801562c <RadioSend+0x1e4>)
 80154e4:	f001 fe00 	bl	80170e8 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 80154e8:	78fb      	ldrb	r3, [r7, #3]
 80154ea:	2200      	movs	r2, #0
 80154ec:	4619      	mov	r1, r3
 80154ee:	6878      	ldr	r0, [r7, #4]
 80154f0:	f001 f926 	bl	8016740 <SUBGRF_SendPayload>
            break;
 80154f4:	e08c      	b.n	8015610 <RadioSend+0x1c8>
        }
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 80154f6:	f002 fa1e 	bl	8017936 <RFW_Is_Init>
 80154fa:	4603      	mov	r3, r0
 80154fc:	2b01      	cmp	r3, #1
 80154fe:	d11d      	bne.n	801553c <RadioSend+0xf4>
            {
              uint8_t outsize;
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8015500:	f107 020d 	add.w	r2, r7, #13
 8015504:	78fb      	ldrb	r3, [r7, #3]
 8015506:	4619      	mov	r1, r3
 8015508:	6878      	ldr	r0, [r7, #4]
 801550a:	f002 fa2c 	bl	8017966 <RFW_TransmitInit>
 801550e:	4603      	mov	r3, r0
 8015510:	2b00      	cmp	r3, #0
 8015512:	d10c      	bne.n	801552e <RadioSend+0xe6>
              {
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8015514:	7b7a      	ldrb	r2, [r7, #13]
 8015516:	4b44      	ldr	r3, [pc, #272]	; (8015628 <RadioSend+0x1e0>)
 8015518:	759a      	strb	r2, [r3, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801551a:	4844      	ldr	r0, [pc, #272]	; (801562c <RadioSend+0x1e4>)
 801551c:	f001 fde4 	bl	80170e8 <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 8015520:	7b7b      	ldrb	r3, [r7, #13]
 8015522:	2200      	movs	r2, #0
 8015524:	4619      	mov	r1, r3
 8015526:	6878      	ldr	r0, [r7, #4]
 8015528:	f001 f90a 	bl	8016740 <SUBGRF_SendPayload>
            {
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
              SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 801552c:	e070      	b.n	8015610 <RadioSend+0x1c8>
                MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n");
 801552e:	4b40      	ldr	r3, [pc, #256]	; (8015630 <RadioSend+0x1e8>)
 8015530:	2201      	movs	r2, #1
 8015532:	2100      	movs	r1, #0
 8015534:	2002      	movs	r0, #2
 8015536:	f003 fb23 	bl	8018b80 <UTIL_ADV_TRACE_COND_FSend>
 801553a:	e072      	b.n	8015622 <RadioSend+0x1da>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 801553c:	4a3a      	ldr	r2, [pc, #232]	; (8015628 <RadioSend+0x1e0>)
 801553e:	78fb      	ldrb	r3, [r7, #3]
 8015540:	7593      	strb	r3, [r2, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8015542:	483a      	ldr	r0, [pc, #232]	; (801562c <RadioSend+0x1e4>)
 8015544:	f001 fdd0 	bl	80170e8 <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 8015548:	78fb      	ldrb	r3, [r7, #3]
 801554a:	2200      	movs	r2, #0
 801554c:	4619      	mov	r1, r3
 801554e:	6878      	ldr	r0, [r7, #4]
 8015550:	f001 f8f6 	bl	8016740 <SUBGRF_SendPayload>
            break;
 8015554:	e05c      	b.n	8015610 <RadioSend+0x1c8>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8015556:	4b34      	ldr	r3, [pc, #208]	; (8015628 <RadioSend+0x1e0>)
 8015558:	2202      	movs	r2, #2
 801555a:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 801555c:	4a32      	ldr	r2, [pc, #200]	; (8015628 <RadioSend+0x1e0>)
 801555e:	78fb      	ldrb	r3, [r7, #3]
 8015560:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8015562:	4832      	ldr	r0, [pc, #200]	; (801562c <RadioSend+0x1e4>)
 8015564:	f001 fdc0 	bl	80170e8 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8015568:	78fb      	ldrb	r3, [r7, #3]
 801556a:	2200      	movs	r2, #0
 801556c:	4619      	mov	r1, r3
 801556e:	6878      	ldr	r0, [r7, #4]
 8015570:	f001 f8e6 	bl	8016740 <SUBGRF_SendPayload>
            break;
 8015574:	e04c      	b.n	8015610 <RadioSend+0x1c8>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 8015576:	78fb      	ldrb	r3, [r7, #3]
 8015578:	461a      	mov	r2, r3
 801557a:	6879      	ldr	r1, [r7, #4]
 801557c:	482d      	ldr	r0, [pc, #180]	; (8015634 <RadioSend+0x1ec>)
 801557e:	f000 fc66 	bl	8015e4e <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8015582:	4b29      	ldr	r3, [pc, #164]	; (8015628 <RadioSend+0x1e0>)
 8015584:	2202      	movs	r2, #2
 8015586:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8015588:	78fb      	ldrb	r3, [r7, #3]
 801558a:	3301      	adds	r3, #1
 801558c:	b2da      	uxtb	r2, r3
 801558e:	4b26      	ldr	r3, [pc, #152]	; (8015628 <RadioSend+0x1e0>)
 8015590:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8015592:	4826      	ldr	r0, [pc, #152]	; (801562c <RadioSend+0x1e4>)
 8015594:	f001 fda8 	bl	80170e8 <SUBGRF_SetPacketParams>

            RadioWrite( 0x00F1, 0 ); // clean start-up LSB
 8015598:	2100      	movs	r1, #0
 801559a:	20f1      	movs	r0, #241	; 0xf1
 801559c:	f000 f947 	bl	801582e <RadioWrite>
            RadioWrite( 0x00F0, 0 ); // clean start-up MSB
 80155a0:	2100      	movs	r1, #0
 80155a2:	20f0      	movs	r0, #240	; 0xf0
 80155a4:	f000 f943 	bl	801582e <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 80155a8:	4b1f      	ldr	r3, [pc, #124]	; (8015628 <RadioSend+0x1e0>)
 80155aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80155ac:	2b64      	cmp	r3, #100	; 0x64
 80155ae:	d108      	bne.n	80155c2 <RadioSend+0x17a>
            {
                RadioWrite( 0x00F3, 0x70 ); // clean end of frame LSB
 80155b0:	2170      	movs	r1, #112	; 0x70
 80155b2:	20f3      	movs	r0, #243	; 0xf3
 80155b4:	f000 f93b 	bl	801582e <RadioWrite>
                RadioWrite( 0x00F2, 0x1D ); // clean end of frame MSB
 80155b8:	211d      	movs	r1, #29
 80155ba:	20f2      	movs	r0, #242	; 0xf2
 80155bc:	f000 f937 	bl	801582e <RadioWrite>
 80155c0:	e007      	b.n	80155d2 <RadioSend+0x18a>
            }
            else // 600 bps
            {
                RadioWrite( 0x00F3, 0xE1 ); // clean end of frame LSB
 80155c2:	21e1      	movs	r1, #225	; 0xe1
 80155c4:	20f3      	movs	r0, #243	; 0xf3
 80155c6:	f000 f932 	bl	801582e <RadioWrite>
                RadioWrite( 0x00F2, 0x04 ); // clean end of frame MSB
 80155ca:	2104      	movs	r1, #4
 80155cc:	20f2      	movs	r0, #242	; 0xf2
 80155ce:	f000 f92e 	bl	801582e <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 80155d2:	78fb      	ldrb	r3, [r7, #3]
 80155d4:	b29b      	uxth	r3, r3
 80155d6:	00db      	lsls	r3, r3, #3
 80155d8:	b29b      	uxth	r3, r3
 80155da:	3302      	adds	r3, #2
 80155dc:	81fb      	strh	r3, [r7, #14]
            RadioWrite( 0x00F4, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 80155de:	89fb      	ldrh	r3, [r7, #14]
 80155e0:	0a1b      	lsrs	r3, r3, #8
 80155e2:	b29b      	uxth	r3, r3
 80155e4:	b2db      	uxtb	r3, r3
 80155e6:	4619      	mov	r1, r3
 80155e8:	20f4      	movs	r0, #244	; 0xf4
 80155ea:	f000 f920 	bl	801582e <RadioWrite>
            RadioWrite( 0x00F5, bitNum & 0x00FF );             // limit frame
 80155ee:	89fb      	ldrh	r3, [r7, #14]
 80155f0:	b2db      	uxtb	r3, r3
 80155f2:	4619      	mov	r1, r3
 80155f4:	20f5      	movs	r0, #245	; 0xf5
 80155f6:	f000 f91a 	bl	801582e <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size+1 , 0xFFFFFF );
 80155fa:	78fb      	ldrb	r3, [r7, #3]
 80155fc:	3301      	adds	r3, #1
 80155fe:	b2db      	uxtb	r3, r3
 8015600:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8015604:	4619      	mov	r1, r3
 8015606:	480b      	ldr	r0, [pc, #44]	; (8015634 <RadioSend+0x1ec>)
 8015608:	f001 f89a 	bl	8016740 <SUBGRF_SendPayload>
            break;
 801560c:	e000      	b.n	8015610 <RadioSend+0x1c8>
        }
        default:
            break;
 801560e:	bf00      	nop
    }

    TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8015610:	4b05      	ldr	r3, [pc, #20]	; (8015628 <RadioSend+0x1e0>)
 8015612:	685b      	ldr	r3, [r3, #4]
 8015614:	4619      	mov	r1, r3
 8015616:	4808      	ldr	r0, [pc, #32]	; (8015638 <RadioSend+0x1f0>)
 8015618:	f003 f918 	bl	801884c <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 801561c:	4806      	ldr	r0, [pc, #24]	; (8015638 <RadioSend+0x1f0>)
 801561e:	f003 f837 	bl	8018690 <UTIL_TIMER_Start>
}
 8015622:	3710      	adds	r7, #16
 8015624:	46bd      	mov	sp, r7
 8015626:	bd80      	pop	{r7, pc}
 8015628:	20001678 	.word	0x20001678
 801562c:	20001686 	.word	0x20001686
 8015630:	08019724 	.word	0x08019724
 8015634:	20000cec 	.word	0x20000cec
 8015638:	200016d0 	.word	0x200016d0

0801563c <RadioSleep>:

static void RadioSleep( void )
{
 801563c:	b580      	push	{r7, lr}
 801563e:	b082      	sub	sp, #8
 8015640:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 8015642:	2300      	movs	r3, #0
 8015644:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 8015646:	793b      	ldrb	r3, [r7, #4]
 8015648:	f043 0304 	orr.w	r3, r3, #4
 801564c:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 801564e:	7938      	ldrb	r0, [r7, #4]
 8015650:	f001 f952 	bl	80168f8 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 8015654:	2002      	movs	r0, #2
 8015656:	f7ec f852 	bl	80016fe <HAL_Delay>
}
 801565a:	bf00      	nop
 801565c:	3708      	adds	r7, #8
 801565e:	46bd      	mov	sp, r7
 8015660:	bd80      	pop	{r7, pc}

08015662 <RadioStandby>:

static void RadioStandby( void )
{
 8015662:	b580      	push	{r7, lr}
 8015664:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 8015666:	2000      	movs	r0, #0
 8015668:	f001 f978 	bl	801695c <SUBGRF_SetStandby>
}
 801566c:	bf00      	nop
 801566e:	bd80      	pop	{r7, pc}

08015670 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 8015670:	b580      	push	{r7, lr}
 8015672:	b082      	sub	sp, #8
 8015674:	af00      	add	r7, sp, #0
 8015676:	6078      	str	r0, [r7, #4]
    if ( 1UL == RFW_Is_Init( ) )
 8015678:	f002 f95d 	bl	8017936 <RFW_Is_Init>
 801567c:	4603      	mov	r3, r0
 801567e:	2b01      	cmp	r3, #1
 8015680:	d102      	bne.n	8015688 <RadioRx+0x18>
    {
      RFW_ReceiveInit( );
 8015682:	f002 f980 	bl	8017986 <RFW_ReceiveInit>
 8015686:	e007      	b.n	8015698 <RadioRx+0x28>
    }
    else
    {
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8015688:	2300      	movs	r3, #0
 801568a:	2200      	movs	r2, #0
 801568c:	f240 2162 	movw	r1, #610	; 0x262
 8015690:	f240 2062 	movw	r0, #610	; 0x262
 8015694:	f001 fb32 	bl	8016cfc <SUBGRF_SetDioIrqParams>
                              IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                              IRQ_RADIO_NONE,
                              IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 8015698:	687b      	ldr	r3, [r7, #4]
 801569a:	2b00      	cmp	r3, #0
 801569c:	d006      	beq.n	80156ac <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 801569e:	6879      	ldr	r1, [r7, #4]
 80156a0:	480f      	ldr	r0, [pc, #60]	; (80156e0 <RadioRx+0x70>)
 80156a2:	f003 f8d3 	bl	801884c <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 80156a6:	480e      	ldr	r0, [pc, #56]	; (80156e0 <RadioRx+0x70>)
 80156a8:	f002 fff2 	bl	8018690 <UTIL_TIMER_Start>
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX(SET);

    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 80156ac:	4b0d      	ldr	r3, [pc, #52]	; (80156e4 <RadioRx+0x74>)
 80156ae:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80156b2:	2100      	movs	r1, #0
 80156b4:	4618      	mov	r0, r3
 80156b6:	f001 ff53 	bl	8017560 <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 80156ba:	4b0a      	ldr	r3, [pc, #40]	; (80156e4 <RadioRx+0x74>)
 80156bc:	785b      	ldrb	r3, [r3, #1]
 80156be:	2b00      	cmp	r3, #0
 80156c0:	d004      	beq.n	80156cc <RadioRx+0x5c>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 80156c2:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80156c6:	f001 f985 	bl	80169d4 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 80156ca:	e005      	b.n	80156d8 <RadioRx+0x68>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 80156cc:	4b05      	ldr	r3, [pc, #20]	; (80156e4 <RadioRx+0x74>)
 80156ce:	689b      	ldr	r3, [r3, #8]
 80156d0:	019b      	lsls	r3, r3, #6
 80156d2:	4618      	mov	r0, r3
 80156d4:	f001 f97e 	bl	80169d4 <SUBGRF_SetRx>
}
 80156d8:	bf00      	nop
 80156da:	3708      	adds	r7, #8
 80156dc:	46bd      	mov	sp, r7
 80156de:	bd80      	pop	{r7, pc}
 80156e0:	200016e8 	.word	0x200016e8
 80156e4:	20001678 	.word	0x20001678

080156e8 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 80156e8:	b580      	push	{r7, lr}
 80156ea:	b082      	sub	sp, #8
 80156ec:	af00      	add	r7, sp, #0
 80156ee:	6078      	str	r0, [r7, #4]
    if (1UL==RFW_Is_Init())
 80156f0:	f002 f921 	bl	8017936 <RFW_Is_Init>
 80156f4:	4603      	mov	r3, r0
 80156f6:	2b01      	cmp	r3, #1
 80156f8:	d102      	bne.n	8015700 <RadioRxBoosted+0x18>
    {
      RFW_ReceiveInit();
 80156fa:	f002 f944 	bl	8017986 <RFW_ReceiveInit>
 80156fe:	e007      	b.n	8015710 <RadioRxBoosted+0x28>
    }
    else
    {
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8015700:	2300      	movs	r3, #0
 8015702:	2200      	movs	r2, #0
 8015704:	f240 2162 	movw	r1, #610	; 0x262
 8015708:	f240 2062 	movw	r0, #610	; 0x262
 801570c:	f001 faf6 	bl	8016cfc <SUBGRF_SetDioIrqParams>
                              IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                              IRQ_RADIO_NONE,
                              IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 8015710:	687b      	ldr	r3, [r7, #4]
 8015712:	2b00      	cmp	r3, #0
 8015714:	d006      	beq.n	8015724 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8015716:	6879      	ldr	r1, [r7, #4]
 8015718:	480f      	ldr	r0, [pc, #60]	; (8015758 <RadioRxBoosted+0x70>)
 801571a:	f003 f897 	bl	801884c <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801571e:	480e      	ldr	r0, [pc, #56]	; (8015758 <RadioRxBoosted+0x70>)
 8015720:	f002 ffb6 	bl	8018690 <UTIL_TIMER_Start>
    }

    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8015724:	4b0d      	ldr	r3, [pc, #52]	; (801575c <RadioRxBoosted+0x74>)
 8015726:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801572a:	2100      	movs	r1, #0
 801572c:	4618      	mov	r0, r3
 801572e:	f001 ff17 	bl	8017560 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8015732:	4b0a      	ldr	r3, [pc, #40]	; (801575c <RadioRxBoosted+0x74>)
 8015734:	785b      	ldrb	r3, [r3, #1]
 8015736:	2b00      	cmp	r3, #0
 8015738:	d004      	beq.n	8015744 <RadioRxBoosted+0x5c>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 801573a:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801573e:	f001 f969 	bl	8016a14 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 8015742:	e005      	b.n	8015750 <RadioRxBoosted+0x68>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8015744:	4b05      	ldr	r3, [pc, #20]	; (801575c <RadioRxBoosted+0x74>)
 8015746:	689b      	ldr	r3, [r3, #8]
 8015748:	019b      	lsls	r3, r3, #6
 801574a:	4618      	mov	r0, r3
 801574c:	f001 f962 	bl	8016a14 <SUBGRF_SetRxBoosted>
}
 8015750:	bf00      	nop
 8015752:	3708      	adds	r7, #8
 8015754:	46bd      	mov	sp, r7
 8015756:	bd80      	pop	{r7, pc}
 8015758:	200016e8 	.word	0x200016e8
 801575c:	20001678 	.word	0x20001678

08015760 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8015760:	b580      	push	{r7, lr}
 8015762:	b082      	sub	sp, #8
 8015764:	af00      	add	r7, sp, #0
 8015766:	6078      	str	r0, [r7, #4]
 8015768:	6039      	str	r1, [r7, #0]
    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 801576a:	4b07      	ldr	r3, [pc, #28]	; (8015788 <RadioSetRxDutyCycle+0x28>)
 801576c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8015770:	2100      	movs	r1, #0
 8015772:	4618      	mov	r0, r3
 8015774:	f001 fef4 	bl	8017560 <SUBGRF_SetSwitch>

    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8015778:	6839      	ldr	r1, [r7, #0]
 801577a:	6878      	ldr	r0, [r7, #4]
 801577c:	f001 f96e 	bl	8016a5c <SUBGRF_SetRxDutyCycle>
}
 8015780:	bf00      	nop
 8015782:	3708      	adds	r7, #8
 8015784:	46bd      	mov	sp, r7
 8015786:	bd80      	pop	{r7, pc}
 8015788:	20001678 	.word	0x20001678

0801578c <RadioStartCad>:

static void RadioStartCad( void )
{
 801578c:	b580      	push	{r7, lr}
 801578e:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8015790:	4b09      	ldr	r3, [pc, #36]	; (80157b8 <RadioStartCad+0x2c>)
 8015792:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8015796:	2100      	movs	r1, #0
 8015798:	4618      	mov	r0, r3
 801579a:	f001 fee1 	bl	8017560 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 801579e:	2300      	movs	r3, #0
 80157a0:	2200      	movs	r2, #0
 80157a2:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80157a6:	f44f 70c0 	mov.w	r0, #384	; 0x180
 80157aa:	f001 faa7 	bl	8016cfc <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 80157ae:	f001 f981 	bl	8016ab4 <SUBGRF_SetCad>
}
 80157b2:	bf00      	nop
 80157b4:	bd80      	pop	{r7, pc}
 80157b6:	bf00      	nop
 80157b8:	20001678 	.word	0x20001678

080157bc <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 80157bc:	b580      	push	{r7, lr}
 80157be:	b084      	sub	sp, #16
 80157c0:	af00      	add	r7, sp, #0
 80157c2:	6078      	str	r0, [r7, #4]
 80157c4:	460b      	mov	r3, r1
 80157c6:	70fb      	strb	r3, [r7, #3]
 80157c8:	4613      	mov	r3, r2
 80157ca:	803b      	strh	r3, [r7, #0]
    uint32_t timeout = ( uint32_t )time * 1000;
 80157cc:	883b      	ldrh	r3, [r7, #0]
 80157ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80157d2:	fb02 f303 	mul.w	r3, r2, r3
 80157d6:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 80157d8:	6878      	ldr	r0, [r7, #4]
 80157da:	f001 faeb 	bl	8016db4 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 80157de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80157e2:	4618      	mov	r0, r3
 80157e4:	f001 fee4 	bl	80175b0 <SUBGRF_SetRfTxPower>
 80157e8:	4603      	mov	r3, r0
 80157ea:	72fb      	strb	r3, [r7, #11]

    /* Set RF switch */
    SUBGRF_SetSwitch(antswitchpow, RFSWITCH_TX);
 80157ec:	7afb      	ldrb	r3, [r7, #11]
 80157ee:	2101      	movs	r1, #1
 80157f0:	4618      	mov	r0, r3
 80157f2:	f001 feb5 	bl	8017560 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 80157f6:	f001 f96b 	bl	8016ad0 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 80157fa:	68f9      	ldr	r1, [r7, #12]
 80157fc:	4804      	ldr	r0, [pc, #16]	; (8015810 <RadioSetTxContinuousWave+0x54>)
 80157fe:	f003 f825 	bl	801884c <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8015802:	4803      	ldr	r0, [pc, #12]	; (8015810 <RadioSetTxContinuousWave+0x54>)
 8015804:	f002 ff44 	bl	8018690 <UTIL_TIMER_Start>
}
 8015808:	bf00      	nop
 801580a:	3710      	adds	r7, #16
 801580c:	46bd      	mov	sp, r7
 801580e:	bd80      	pop	{r7, pc}
 8015810:	200016d0 	.word	0x200016d0

08015814 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 8015814:	b580      	push	{r7, lr}
 8015816:	b082      	sub	sp, #8
 8015818:	af00      	add	r7, sp, #0
 801581a:	4603      	mov	r3, r0
 801581c:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 801581e:	f001 fd18 	bl	8017252 <SUBGRF_GetRssiInst>
 8015822:	4603      	mov	r3, r0
 8015824:	b21b      	sxth	r3, r3
}
 8015826:	4618      	mov	r0, r3
 8015828:	3708      	adds	r7, #8
 801582a:	46bd      	mov	sp, r7
 801582c:	bd80      	pop	{r7, pc}

0801582e <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 801582e:	b580      	push	{r7, lr}
 8015830:	b082      	sub	sp, #8
 8015832:	af00      	add	r7, sp, #0
 8015834:	4603      	mov	r3, r0
 8015836:	460a      	mov	r2, r1
 8015838:	80fb      	strh	r3, [r7, #6]
 801583a:	4613      	mov	r3, r2
 801583c:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister(addr, data );
 801583e:	797a      	ldrb	r2, [r7, #5]
 8015840:	88fb      	ldrh	r3, [r7, #6]
 8015842:	4611      	mov	r1, r2
 8015844:	4618      	mov	r0, r3
 8015846:	f001 fd97 	bl	8017378 <SUBGRF_WriteRegister>
}
 801584a:	bf00      	nop
 801584c:	3708      	adds	r7, #8
 801584e:	46bd      	mov	sp, r7
 8015850:	bd80      	pop	{r7, pc}

08015852 <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 8015852:	b580      	push	{r7, lr}
 8015854:	b082      	sub	sp, #8
 8015856:	af00      	add	r7, sp, #0
 8015858:	4603      	mov	r3, r0
 801585a:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister(addr);
 801585c:	88fb      	ldrh	r3, [r7, #6]
 801585e:	4618      	mov	r0, r3
 8015860:	f001 fd9e 	bl	80173a0 <SUBGRF_ReadRegister>
 8015864:	4603      	mov	r3, r0
}
 8015866:	4618      	mov	r0, r3
 8015868:	3708      	adds	r7, #8
 801586a:	46bd      	mov	sp, r7
 801586c:	bd80      	pop	{r7, pc}

0801586e <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 801586e:	b580      	push	{r7, lr}
 8015870:	b082      	sub	sp, #8
 8015872:	af00      	add	r7, sp, #0
 8015874:	4603      	mov	r3, r0
 8015876:	6039      	str	r1, [r7, #0]
 8015878:	80fb      	strh	r3, [r7, #6]
 801587a:	4613      	mov	r3, r2
 801587c:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 801587e:	797b      	ldrb	r3, [r7, #5]
 8015880:	b29a      	uxth	r2, r3
 8015882:	88fb      	ldrh	r3, [r7, #6]
 8015884:	6839      	ldr	r1, [r7, #0]
 8015886:	4618      	mov	r0, r3
 8015888:	f001 fd9e 	bl	80173c8 <SUBGRF_WriteRegisters>
}
 801588c:	bf00      	nop
 801588e:	3708      	adds	r7, #8
 8015890:	46bd      	mov	sp, r7
 8015892:	bd80      	pop	{r7, pc}

08015894 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8015894:	b580      	push	{r7, lr}
 8015896:	b082      	sub	sp, #8
 8015898:	af00      	add	r7, sp, #0
 801589a:	4603      	mov	r3, r0
 801589c:	6039      	str	r1, [r7, #0]
 801589e:	80fb      	strh	r3, [r7, #6]
 80158a0:	4613      	mov	r3, r2
 80158a2:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 80158a4:	797b      	ldrb	r3, [r7, #5]
 80158a6:	b29a      	uxth	r2, r3
 80158a8:	88fb      	ldrh	r3, [r7, #6]
 80158aa:	6839      	ldr	r1, [r7, #0]
 80158ac:	4618      	mov	r0, r3
 80158ae:	f001 fdad 	bl	801740c <SUBGRF_ReadRegisters>
}
 80158b2:	bf00      	nop
 80158b4:	3708      	adds	r7, #8
 80158b6:	46bd      	mov	sp, r7
 80158b8:	bd80      	pop	{r7, pc}
	...

080158bc <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 80158bc:	b580      	push	{r7, lr}
 80158be:	b082      	sub	sp, #8
 80158c0:	af00      	add	r7, sp, #0
 80158c2:	4603      	mov	r3, r0
 80158c4:	460a      	mov	r2, r1
 80158c6:	71fb      	strb	r3, [r7, #7]
 80158c8:	4613      	mov	r3, r2
 80158ca:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 80158cc:	79fb      	ldrb	r3, [r7, #7]
 80158ce:	2b01      	cmp	r3, #1
 80158d0:	d10a      	bne.n	80158e8 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 80158d2:	4a0e      	ldr	r2, [pc, #56]	; (801590c <RadioSetMaxPayloadLength+0x50>)
 80158d4:	79bb      	ldrb	r3, [r7, #6]
 80158d6:	7013      	strb	r3, [r2, #0]
 80158d8:	4b0c      	ldr	r3, [pc, #48]	; (801590c <RadioSetMaxPayloadLength+0x50>)
 80158da:	781a      	ldrb	r2, [r3, #0]
 80158dc:	4b0c      	ldr	r3, [pc, #48]	; (8015910 <RadioSetMaxPayloadLength+0x54>)
 80158de:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80158e0:	480c      	ldr	r0, [pc, #48]	; (8015914 <RadioSetMaxPayloadLength+0x58>)
 80158e2:	f001 fc01 	bl	80170e8 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 80158e6:	e00d      	b.n	8015904 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 80158e8:	4b09      	ldr	r3, [pc, #36]	; (8015910 <RadioSetMaxPayloadLength+0x54>)
 80158ea:	7d5b      	ldrb	r3, [r3, #21]
 80158ec:	2b01      	cmp	r3, #1
 80158ee:	d109      	bne.n	8015904 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 80158f0:	4a06      	ldr	r2, [pc, #24]	; (801590c <RadioSetMaxPayloadLength+0x50>)
 80158f2:	79bb      	ldrb	r3, [r7, #6]
 80158f4:	7013      	strb	r3, [r2, #0]
 80158f6:	4b05      	ldr	r3, [pc, #20]	; (801590c <RadioSetMaxPayloadLength+0x50>)
 80158f8:	781a      	ldrb	r2, [r3, #0]
 80158fa:	4b05      	ldr	r3, [pc, #20]	; (8015910 <RadioSetMaxPayloadLength+0x54>)
 80158fc:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80158fe:	4805      	ldr	r0, [pc, #20]	; (8015914 <RadioSetMaxPayloadLength+0x58>)
 8015900:	f001 fbf2 	bl	80170e8 <SUBGRF_SetPacketParams>
}
 8015904:	bf00      	nop
 8015906:	3708      	adds	r7, #8
 8015908:	46bd      	mov	sp, r7
 801590a:	bd80      	pop	{r7, pc}
 801590c:	200000f0 	.word	0x200000f0
 8015910:	20001678 	.word	0x20001678
 8015914:	20001686 	.word	0x20001686

08015918 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 8015918:	b580      	push	{r7, lr}
 801591a:	b082      	sub	sp, #8
 801591c:	af00      	add	r7, sp, #0
 801591e:	4603      	mov	r3, r0
 8015920:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8015922:	4a13      	ldr	r2, [pc, #76]	; (8015970 <RadioSetPublicNetwork+0x58>)
 8015924:	79fb      	ldrb	r3, [r7, #7]
 8015926:	7313      	strb	r3, [r2, #12]
 8015928:	4b11      	ldr	r3, [pc, #68]	; (8015970 <RadioSetPublicNetwork+0x58>)
 801592a:	7b1a      	ldrb	r2, [r3, #12]
 801592c:	4b10      	ldr	r3, [pc, #64]	; (8015970 <RadioSetPublicNetwork+0x58>)
 801592e:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 8015930:	2001      	movs	r0, #1
 8015932:	f7ff f82b 	bl	801498c <RadioSetModem>
    if( enable == true )
 8015936:	79fb      	ldrb	r3, [r7, #7]
 8015938:	2b00      	cmp	r3, #0
 801593a:	d00a      	beq.n	8015952 <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 801593c:	2134      	movs	r1, #52	; 0x34
 801593e:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8015942:	f001 fd19 	bl	8017378 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8015946:	2144      	movs	r1, #68	; 0x44
 8015948:	f240 7041 	movw	r0, #1857	; 0x741
 801594c:	f001 fd14 	bl	8017378 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 8015950:	e009      	b.n	8015966 <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8015952:	2114      	movs	r1, #20
 8015954:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8015958:	f001 fd0e 	bl	8017378 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 801595c:	2124      	movs	r1, #36	; 0x24
 801595e:	f240 7041 	movw	r0, #1857	; 0x741
 8015962:	f001 fd09 	bl	8017378 <SUBGRF_WriteRegister>
}
 8015966:	bf00      	nop
 8015968:	3708      	adds	r7, #8
 801596a:	46bd      	mov	sp, r7
 801596c:	bd80      	pop	{r7, pc}
 801596e:	bf00      	nop
 8015970:	20001678 	.word	0x20001678

08015974 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 8015974:	b580      	push	{r7, lr}
 8015976:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8015978:	f001 fe4e 	bl	8017618 <SUBGRF_GetRadioWakeUpTime>
 801597c:	4603      	mov	r3, r0
 801597e:	3303      	adds	r3, #3
}
 8015980:	4618      	mov	r0, r3
 8015982:	bd80      	pop	{r7, pc}

08015984 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void* context )
{
 8015984:	b580      	push	{r7, lr}
 8015986:	b082      	sub	sp, #8
 8015988:	af00      	add	r7, sp, #0
 801598a:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 801598c:	f000 f80e 	bl	80159ac <RadioOnTxTimeoutProcess>
}
 8015990:	bf00      	nop
 8015992:	3708      	adds	r7, #8
 8015994:	46bd      	mov	sp, r7
 8015996:	bd80      	pop	{r7, pc}

08015998 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void* context )
{
 8015998:	b580      	push	{r7, lr}
 801599a:	b082      	sub	sp, #8
 801599c:	af00      	add	r7, sp, #0
 801599e:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 80159a0:	f000 f818 	bl	80159d4 <RadioOnRxTimeoutProcess>
}
 80159a4:	bf00      	nop
 80159a6:	3708      	adds	r7, #8
 80159a8:	46bd      	mov	sp, r7
 80159aa:	bd80      	pop	{r7, pc}

080159ac <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 80159ac:	b580      	push	{r7, lr}
 80159ae:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_TX(RST);
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80159b0:	4b07      	ldr	r3, [pc, #28]	; (80159d0 <RadioOnTxTimeoutProcess+0x24>)
 80159b2:	681b      	ldr	r3, [r3, #0]
 80159b4:	2b00      	cmp	r3, #0
 80159b6:	d008      	beq.n	80159ca <RadioOnTxTimeoutProcess+0x1e>
 80159b8:	4b05      	ldr	r3, [pc, #20]	; (80159d0 <RadioOnTxTimeoutProcess+0x24>)
 80159ba:	681b      	ldr	r3, [r3, #0]
 80159bc:	685b      	ldr	r3, [r3, #4]
 80159be:	2b00      	cmp	r3, #0
 80159c0:	d003      	beq.n	80159ca <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 80159c2:	4b03      	ldr	r3, [pc, #12]	; (80159d0 <RadioOnTxTimeoutProcess+0x24>)
 80159c4:	681b      	ldr	r3, [r3, #0]
 80159c6:	685b      	ldr	r3, [r3, #4]
 80159c8:	4798      	blx	r3
    }
}
 80159ca:	bf00      	nop
 80159cc:	bd80      	pop	{r7, pc}
 80159ce:	bf00      	nop
 80159d0:	20000dec 	.word	0x20000dec

080159d4 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 80159d4:	b580      	push	{r7, lr}
 80159d6:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_RX(RST);
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80159d8:	4b07      	ldr	r3, [pc, #28]	; (80159f8 <RadioOnRxTimeoutProcess+0x24>)
 80159da:	681b      	ldr	r3, [r3, #0]
 80159dc:	2b00      	cmp	r3, #0
 80159de:	d008      	beq.n	80159f2 <RadioOnRxTimeoutProcess+0x1e>
 80159e0:	4b05      	ldr	r3, [pc, #20]	; (80159f8 <RadioOnRxTimeoutProcess+0x24>)
 80159e2:	681b      	ldr	r3, [r3, #0]
 80159e4:	68db      	ldr	r3, [r3, #12]
 80159e6:	2b00      	cmp	r3, #0
 80159e8:	d003      	beq.n	80159f2 <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 80159ea:	4b03      	ldr	r3, [pc, #12]	; (80159f8 <RadioOnRxTimeoutProcess+0x24>)
 80159ec:	681b      	ldr	r3, [r3, #0]
 80159ee:	68db      	ldr	r3, [r3, #12]
 80159f0:	4798      	blx	r3
    }
}
 80159f2:	bf00      	nop
 80159f4:	bd80      	pop	{r7, pc}
 80159f6:	bf00      	nop
 80159f8:	20000dec 	.word	0x20000dec

080159fc <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 80159fc:	b580      	push	{r7, lr}
 80159fe:	b082      	sub	sp, #8
 8015a00:	af00      	add	r7, sp, #0
 8015a02:	4603      	mov	r3, r0
 8015a04:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 8015a06:	4a05      	ldr	r2, [pc, #20]	; (8015a1c <RadioOnDioIrq+0x20>)
 8015a08:	88fb      	ldrh	r3, [r7, #6]
 8015a0a:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 8015a0e:	f000 f807 	bl	8015a20 <RadioIrqProcess>
}
 8015a12:	bf00      	nop
 8015a14:	3708      	adds	r7, #8
 8015a16:	46bd      	mov	sp, r7
 8015a18:	bd80      	pop	{r7, pc}
 8015a1a:	bf00      	nop
 8015a1c:	20001678 	.word	0x20001678

08015a20 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 8015a20:	b590      	push	{r4, r7, lr}
 8015a22:	b083      	sub	sp, #12
 8015a24:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 8015a26:	2300      	movs	r3, #0
 8015a28:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 8015a2a:	2300      	movs	r3, #0
 8015a2c:	603b      	str	r3, [r7, #0]

    switch ( SubgRf.RadioIrq )
 8015a2e:	4bb5      	ldr	r3, [pc, #724]	; (8015d04 <RadioIrqProcess+0x2e4>)
 8015a30:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8015a34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015a38:	f000 810c 	beq.w	8015c54 <RadioIrqProcess+0x234>
 8015a3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015a40:	f300 81b5 	bgt.w	8015dae <RadioIrqProcess+0x38e>
 8015a44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015a48:	f000 80f0 	beq.w	8015c2c <RadioIrqProcess+0x20c>
 8015a4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015a50:	f300 81ad 	bgt.w	8015dae <RadioIrqProcess+0x38e>
 8015a54:	2b80      	cmp	r3, #128	; 0x80
 8015a56:	f000 80d5 	beq.w	8015c04 <RadioIrqProcess+0x1e4>
 8015a5a:	2b80      	cmp	r3, #128	; 0x80
 8015a5c:	f300 81a7 	bgt.w	8015dae <RadioIrqProcess+0x38e>
 8015a60:	2b20      	cmp	r3, #32
 8015a62:	dc49      	bgt.n	8015af8 <RadioIrqProcess+0xd8>
 8015a64:	2b00      	cmp	r3, #0
 8015a66:	f340 81a2 	ble.w	8015dae <RadioIrqProcess+0x38e>
 8015a6a:	3b01      	subs	r3, #1
 8015a6c:	2b1f      	cmp	r3, #31
 8015a6e:	f200 819e 	bhi.w	8015dae <RadioIrqProcess+0x38e>
 8015a72:	a201      	add	r2, pc, #4	; (adr r2, 8015a78 <RadioIrqProcess+0x58>)
 8015a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015a78:	08015b01 	.word	0x08015b01
 8015a7c:	08015b3b 	.word	0x08015b3b
 8015a80:	08015daf 	.word	0x08015daf
 8015a84:	08015ccd 	.word	0x08015ccd
 8015a88:	08015daf 	.word	0x08015daf
 8015a8c:	08015daf 	.word	0x08015daf
 8015a90:	08015daf 	.word	0x08015daf
 8015a94:	08015cdb 	.word	0x08015cdb
 8015a98:	08015daf 	.word	0x08015daf
 8015a9c:	08015daf 	.word	0x08015daf
 8015aa0:	08015daf 	.word	0x08015daf
 8015aa4:	08015daf 	.word	0x08015daf
 8015aa8:	08015daf 	.word	0x08015daf
 8015aac:	08015daf 	.word	0x08015daf
 8015ab0:	08015daf 	.word	0x08015daf
 8015ab4:	08015cf7 	.word	0x08015cf7
 8015ab8:	08015daf 	.word	0x08015daf
 8015abc:	08015daf 	.word	0x08015daf
 8015ac0:	08015daf 	.word	0x08015daf
 8015ac4:	08015daf 	.word	0x08015daf
 8015ac8:	08015daf 	.word	0x08015daf
 8015acc:	08015daf 	.word	0x08015daf
 8015ad0:	08015daf 	.word	0x08015daf
 8015ad4:	08015daf 	.word	0x08015daf
 8015ad8:	08015daf 	.word	0x08015daf
 8015adc:	08015daf 	.word	0x08015daf
 8015ae0:	08015daf 	.word	0x08015daf
 8015ae4:	08015daf 	.word	0x08015daf
 8015ae8:	08015daf 	.word	0x08015daf
 8015aec:	08015daf 	.word	0x08015daf
 8015af0:	08015daf 	.word	0x08015daf
 8015af4:	08015d31 	.word	0x08015d31
 8015af8:	2b40      	cmp	r3, #64	; 0x40
 8015afa:	f000 813a 	beq.w	8015d72 <RadioIrqProcess+0x352>
        {
            RadioEvents->RxError( );
        }
        break;
    default:
        break;
 8015afe:	e156      	b.n	8015dae <RadioIrqProcess+0x38e>
        TimerStop( &TxTimeoutTimer );
 8015b00:	4881      	ldr	r0, [pc, #516]	; (8015d08 <RadioIrqProcess+0x2e8>)
 8015b02:	f002 fe33 	bl	801876c <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 8015b06:	2000      	movs	r0, #0
 8015b08:	f000 ff28 	bl	801695c <SUBGRF_SetStandby>
        if ( RFW_Is_LongPacketModeEnabled() == 1 )
 8015b0c:	f001 ff1a 	bl	8017944 <RFW_Is_LongPacketModeEnabled>
 8015b10:	4603      	mov	r3, r0
 8015b12:	2b01      	cmp	r3, #1
 8015b14:	d101      	bne.n	8015b1a <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 8015b16:	f001 ff3e 	bl	8017996 <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8015b1a:	4b7c      	ldr	r3, [pc, #496]	; (8015d0c <RadioIrqProcess+0x2ec>)
 8015b1c:	681b      	ldr	r3, [r3, #0]
 8015b1e:	2b00      	cmp	r3, #0
 8015b20:	f000 8147 	beq.w	8015db2 <RadioIrqProcess+0x392>
 8015b24:	4b79      	ldr	r3, [pc, #484]	; (8015d0c <RadioIrqProcess+0x2ec>)
 8015b26:	681b      	ldr	r3, [r3, #0]
 8015b28:	681b      	ldr	r3, [r3, #0]
 8015b2a:	2b00      	cmp	r3, #0
 8015b2c:	f000 8141 	beq.w	8015db2 <RadioIrqProcess+0x392>
            RadioEvents->TxDone( );
 8015b30:	4b76      	ldr	r3, [pc, #472]	; (8015d0c <RadioIrqProcess+0x2ec>)
 8015b32:	681b      	ldr	r3, [r3, #0]
 8015b34:	681b      	ldr	r3, [r3, #0]
 8015b36:	4798      	blx	r3
        break;
 8015b38:	e13b      	b.n	8015db2 <RadioIrqProcess+0x392>
        TimerStop( &RxTimeoutTimer );
 8015b3a:	4875      	ldr	r0, [pc, #468]	; (8015d10 <RadioIrqProcess+0x2f0>)
 8015b3c:	f002 fe16 	bl	801876c <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8015b40:	4b70      	ldr	r3, [pc, #448]	; (8015d04 <RadioIrqProcess+0x2e4>)
 8015b42:	785b      	ldrb	r3, [r3, #1]
 8015b44:	f083 0301 	eor.w	r3, r3, #1
 8015b48:	b2db      	uxtb	r3, r3
 8015b4a:	2b00      	cmp	r3, #0
 8015b4c:	d014      	beq.n	8015b78 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 8015b4e:	2000      	movs	r0, #0
 8015b50:	f000 ff04 	bl	801695c <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( 0x0902, 0x00 );
 8015b54:	2100      	movs	r1, #0
 8015b56:	f640 1002 	movw	r0, #2306	; 0x902
 8015b5a:	f001 fc0d 	bl	8017378 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( 0x0944, SUBGRF_ReadRegister( 0x0944 ) | ( 1 << 1 ) );
 8015b5e:	f640 1044 	movw	r0, #2372	; 0x944
 8015b62:	f001 fc1d 	bl	80173a0 <SUBGRF_ReadRegister>
 8015b66:	4603      	mov	r3, r0
 8015b68:	f043 0302 	orr.w	r3, r3, #2
 8015b6c:	b2db      	uxtb	r3, r3
 8015b6e:	4619      	mov	r1, r3
 8015b70:	f640 1044 	movw	r0, #2372	; 0x944
 8015b74:	f001 fc00 	bl	8017378 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size , 255 );
 8015b78:	1dfb      	adds	r3, r7, #7
 8015b7a:	22ff      	movs	r2, #255	; 0xff
 8015b7c:	4619      	mov	r1, r3
 8015b7e:	4865      	ldr	r0, [pc, #404]	; (8015d14 <RadioIrqProcess+0x2f4>)
 8015b80:	f000 fdbc 	bl	80166fc <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &(SubgRf.PacketStatus) );
 8015b84:	4864      	ldr	r0, [pc, #400]	; (8015d18 <RadioIrqProcess+0x2f8>)
 8015b86:	f001 fba5 	bl	80172d4 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8015b8a:	4b60      	ldr	r3, [pc, #384]	; (8015d0c <RadioIrqProcess+0x2ec>)
 8015b8c:	681b      	ldr	r3, [r3, #0]
 8015b8e:	2b00      	cmp	r3, #0
 8015b90:	d036      	beq.n	8015c00 <RadioIrqProcess+0x1e0>
 8015b92:	4b5e      	ldr	r3, [pc, #376]	; (8015d0c <RadioIrqProcess+0x2ec>)
 8015b94:	681b      	ldr	r3, [r3, #0]
 8015b96:	689b      	ldr	r3, [r3, #8]
 8015b98:	2b00      	cmp	r3, #0
 8015b9a:	d031      	beq.n	8015c00 <RadioIrqProcess+0x1e0>
            switch ( SubgRf.PacketStatus.packetType )
 8015b9c:	4b59      	ldr	r3, [pc, #356]	; (8015d04 <RadioIrqProcess+0x2e4>)
 8015b9e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8015ba2:	2b01      	cmp	r3, #1
 8015ba4:	d10e      	bne.n	8015bc4 <RadioIrqProcess+0x1a4>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 8015ba6:	4b59      	ldr	r3, [pc, #356]	; (8015d0c <RadioIrqProcess+0x2ec>)
 8015ba8:	681b      	ldr	r3, [r3, #0]
 8015baa:	689c      	ldr	r4, [r3, #8]
 8015bac:	79fb      	ldrb	r3, [r7, #7]
 8015bae:	b299      	uxth	r1, r3
 8015bb0:	4b54      	ldr	r3, [pc, #336]	; (8015d04 <RadioIrqProcess+0x2e4>)
 8015bb2:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 8015bb6:	b21a      	sxth	r2, r3
 8015bb8:	4b52      	ldr	r3, [pc, #328]	; (8015d04 <RadioIrqProcess+0x2e4>)
 8015bba:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 8015bbe:	4855      	ldr	r0, [pc, #340]	; (8015d14 <RadioIrqProcess+0x2f4>)
 8015bc0:	47a0      	blx	r4
                break;
 8015bc2:	e01e      	b.n	8015c02 <RadioIrqProcess+0x1e2>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8015bc4:	4b4f      	ldr	r3, [pc, #316]	; (8015d04 <RadioIrqProcess+0x2e4>)
 8015bc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015bc8:	463a      	mov	r2, r7
 8015bca:	4611      	mov	r1, r2
 8015bcc:	4618      	mov	r0, r3
 8015bce:	f001 fe05 	bl	80177dc <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 8015bd2:	4b4e      	ldr	r3, [pc, #312]	; (8015d0c <RadioIrqProcess+0x2ec>)
 8015bd4:	681b      	ldr	r3, [r3, #0]
 8015bd6:	689c      	ldr	r4, [r3, #8]
 8015bd8:	79fb      	ldrb	r3, [r7, #7]
 8015bda:	b299      	uxth	r1, r3
 8015bdc:	4b49      	ldr	r3, [pc, #292]	; (8015d04 <RadioIrqProcess+0x2e4>)
 8015bde:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 8015be2:	b218      	sxth	r0, r3
 8015be4:	683b      	ldr	r3, [r7, #0]
 8015be6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8015bea:	4a4c      	ldr	r2, [pc, #304]	; (8015d1c <RadioIrqProcess+0x2fc>)
 8015bec:	fb82 c203 	smull	ip, r2, r2, r3
 8015bf0:	1192      	asrs	r2, r2, #6
 8015bf2:	17db      	asrs	r3, r3, #31
 8015bf4:	1ad3      	subs	r3, r2, r3
 8015bf6:	b25b      	sxtb	r3, r3
 8015bf8:	4602      	mov	r2, r0
 8015bfa:	4846      	ldr	r0, [pc, #280]	; (8015d14 <RadioIrqProcess+0x2f4>)
 8015bfc:	47a0      	blx	r4
                break;
 8015bfe:	e000      	b.n	8015c02 <RadioIrqProcess+0x1e2>
        }
 8015c00:	bf00      	nop
        break;
 8015c02:	e0e3      	b.n	8015dcc <RadioIrqProcess+0x3ac>
        SUBGRF_SetStandby( STDBY_RC );
 8015c04:	2000      	movs	r0, #0
 8015c06:	f000 fea9 	bl	801695c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8015c0a:	4b40      	ldr	r3, [pc, #256]	; (8015d0c <RadioIrqProcess+0x2ec>)
 8015c0c:	681b      	ldr	r3, [r3, #0]
 8015c0e:	2b00      	cmp	r3, #0
 8015c10:	f000 80d1 	beq.w	8015db6 <RadioIrqProcess+0x396>
 8015c14:	4b3d      	ldr	r3, [pc, #244]	; (8015d0c <RadioIrqProcess+0x2ec>)
 8015c16:	681b      	ldr	r3, [r3, #0]
 8015c18:	699b      	ldr	r3, [r3, #24]
 8015c1a:	2b00      	cmp	r3, #0
 8015c1c:	f000 80cb 	beq.w	8015db6 <RadioIrqProcess+0x396>
            RadioEvents->CadDone( false );
 8015c20:	4b3a      	ldr	r3, [pc, #232]	; (8015d0c <RadioIrqProcess+0x2ec>)
 8015c22:	681b      	ldr	r3, [r3, #0]
 8015c24:	699b      	ldr	r3, [r3, #24]
 8015c26:	2000      	movs	r0, #0
 8015c28:	4798      	blx	r3
        break;
 8015c2a:	e0c4      	b.n	8015db6 <RadioIrqProcess+0x396>
        SUBGRF_SetStandby( STDBY_RC );
 8015c2c:	2000      	movs	r0, #0
 8015c2e:	f000 fe95 	bl	801695c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8015c32:	4b36      	ldr	r3, [pc, #216]	; (8015d0c <RadioIrqProcess+0x2ec>)
 8015c34:	681b      	ldr	r3, [r3, #0]
 8015c36:	2b00      	cmp	r3, #0
 8015c38:	f000 80bf 	beq.w	8015dba <RadioIrqProcess+0x39a>
 8015c3c:	4b33      	ldr	r3, [pc, #204]	; (8015d0c <RadioIrqProcess+0x2ec>)
 8015c3e:	681b      	ldr	r3, [r3, #0]
 8015c40:	699b      	ldr	r3, [r3, #24]
 8015c42:	2b00      	cmp	r3, #0
 8015c44:	f000 80b9 	beq.w	8015dba <RadioIrqProcess+0x39a>
            RadioEvents->CadDone( true );
 8015c48:	4b30      	ldr	r3, [pc, #192]	; (8015d0c <RadioIrqProcess+0x2ec>)
 8015c4a:	681b      	ldr	r3, [r3, #0]
 8015c4c:	699b      	ldr	r3, [r3, #24]
 8015c4e:	2001      	movs	r0, #1
 8015c50:	4798      	blx	r3
        break;
 8015c52:	e0b2      	b.n	8015dba <RadioIrqProcess+0x39a>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 8015c54:	4b32      	ldr	r3, [pc, #200]	; (8015d20 <RadioIrqProcess+0x300>)
 8015c56:	2201      	movs	r2, #1
 8015c58:	2100      	movs	r1, #0
 8015c5a:	2002      	movs	r0, #2
 8015c5c:	f002 ff90 	bl	8018b80 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8015c60:	f000 fd32 	bl	80166c8 <SUBGRF_GetOperatingMode>
 8015c64:	4603      	mov	r3, r0
 8015c66:	2b04      	cmp	r3, #4
 8015c68:	d115      	bne.n	8015c96 <RadioIrqProcess+0x276>
            TimerStop( &TxTimeoutTimer );
 8015c6a:	4827      	ldr	r0, [pc, #156]	; (8015d08 <RadioIrqProcess+0x2e8>)
 8015c6c:	f002 fd7e 	bl	801876c <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8015c70:	2000      	movs	r0, #0
 8015c72:	f000 fe73 	bl	801695c <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8015c76:	4b25      	ldr	r3, [pc, #148]	; (8015d0c <RadioIrqProcess+0x2ec>)
 8015c78:	681b      	ldr	r3, [r3, #0]
 8015c7a:	2b00      	cmp	r3, #0
 8015c7c:	f000 809f 	beq.w	8015dbe <RadioIrqProcess+0x39e>
 8015c80:	4b22      	ldr	r3, [pc, #136]	; (8015d0c <RadioIrqProcess+0x2ec>)
 8015c82:	681b      	ldr	r3, [r3, #0]
 8015c84:	685b      	ldr	r3, [r3, #4]
 8015c86:	2b00      	cmp	r3, #0
 8015c88:	f000 8099 	beq.w	8015dbe <RadioIrqProcess+0x39e>
                RadioEvents->TxTimeout( );
 8015c8c:	4b1f      	ldr	r3, [pc, #124]	; (8015d0c <RadioIrqProcess+0x2ec>)
 8015c8e:	681b      	ldr	r3, [r3, #0]
 8015c90:	685b      	ldr	r3, [r3, #4]
 8015c92:	4798      	blx	r3
        break;
 8015c94:	e093      	b.n	8015dbe <RadioIrqProcess+0x39e>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 8015c96:	f000 fd17 	bl	80166c8 <SUBGRF_GetOperatingMode>
 8015c9a:	4603      	mov	r3, r0
 8015c9c:	2b05      	cmp	r3, #5
 8015c9e:	f040 808e 	bne.w	8015dbe <RadioIrqProcess+0x39e>
            TimerStop( &RxTimeoutTimer );
 8015ca2:	481b      	ldr	r0, [pc, #108]	; (8015d10 <RadioIrqProcess+0x2f0>)
 8015ca4:	f002 fd62 	bl	801876c <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8015ca8:	2000      	movs	r0, #0
 8015caa:	f000 fe57 	bl	801695c <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8015cae:	4b17      	ldr	r3, [pc, #92]	; (8015d0c <RadioIrqProcess+0x2ec>)
 8015cb0:	681b      	ldr	r3, [r3, #0]
 8015cb2:	2b00      	cmp	r3, #0
 8015cb4:	f000 8083 	beq.w	8015dbe <RadioIrqProcess+0x39e>
 8015cb8:	4b14      	ldr	r3, [pc, #80]	; (8015d0c <RadioIrqProcess+0x2ec>)
 8015cba:	681b      	ldr	r3, [r3, #0]
 8015cbc:	68db      	ldr	r3, [r3, #12]
 8015cbe:	2b00      	cmp	r3, #0
 8015cc0:	d07d      	beq.n	8015dbe <RadioIrqProcess+0x39e>
                RadioEvents->RxTimeout( );
 8015cc2:	4b12      	ldr	r3, [pc, #72]	; (8015d0c <RadioIrqProcess+0x2ec>)
 8015cc4:	681b      	ldr	r3, [r3, #0]
 8015cc6:	68db      	ldr	r3, [r3, #12]
 8015cc8:	4798      	blx	r3
        break;
 8015cca:	e078      	b.n	8015dbe <RadioIrqProcess+0x39e>
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 8015ccc:	4b15      	ldr	r3, [pc, #84]	; (8015d24 <RadioIrqProcess+0x304>)
 8015cce:	2201      	movs	r2, #1
 8015cd0:	2100      	movs	r1, #0
 8015cd2:	2002      	movs	r0, #2
 8015cd4:	f002 ff54 	bl	8018b80 <UTIL_ADV_TRACE_COND_FSend>
        break;
 8015cd8:	e078      	b.n	8015dcc <RadioIrqProcess+0x3ac>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 8015cda:	4b13      	ldr	r3, [pc, #76]	; (8015d28 <RadioIrqProcess+0x308>)
 8015cdc:	2201      	movs	r2, #1
 8015cde:	2100      	movs	r1, #0
 8015ce0:	2002      	movs	r0, #2
 8015ce2:	f002 ff4d 	bl	8018b80 <UTIL_ADV_TRACE_COND_FSend>
        if ( 1UL == RFW_Is_Init( ) )
 8015ce6:	f001 fe26 	bl	8017936 <RFW_Is_Init>
 8015cea:	4603      	mov	r3, r0
 8015cec:	2b01      	cmp	r3, #1
 8015cee:	d168      	bne.n	8015dc2 <RadioIrqProcess+0x3a2>
            RFW_ReceivePayload( );
 8015cf0:	f001 fe57 	bl	80179a2 <RFW_ReceivePayload>
        break;
 8015cf4:	e065      	b.n	8015dc2 <RadioIrqProcess+0x3a2>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 8015cf6:	4b0d      	ldr	r3, [pc, #52]	; (8015d2c <RadioIrqProcess+0x30c>)
 8015cf8:	2201      	movs	r2, #1
 8015cfa:	2100      	movs	r1, #0
 8015cfc:	2002      	movs	r0, #2
 8015cfe:	f002 ff3f 	bl	8018b80 <UTIL_ADV_TRACE_COND_FSend>
        break;
 8015d02:	e063      	b.n	8015dcc <RadioIrqProcess+0x3ac>
 8015d04:	20001678 	.word	0x20001678
 8015d08:	200016d0 	.word	0x200016d0
 8015d0c:	20000dec 	.word	0x20000dec
 8015d10:	200016e8 	.word	0x200016e8
 8015d14:	20000cec 	.word	0x20000cec
 8015d18:	2000169c 	.word	0x2000169c
 8015d1c:	10624dd3 	.word	0x10624dd3
 8015d20:	0801973c 	.word	0x0801973c
 8015d24:	08019750 	.word	0x08019750
 8015d28:	0801975c 	.word	0x0801975c
 8015d2c:	08019768 	.word	0x08019768
        TimerStop( &RxTimeoutTimer );
 8015d30:	4828      	ldr	r0, [pc, #160]	; (8015dd4 <RadioIrqProcess+0x3b4>)
 8015d32:	f002 fd1b 	bl	801876c <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8015d36:	4b28      	ldr	r3, [pc, #160]	; (8015dd8 <RadioIrqProcess+0x3b8>)
 8015d38:	785b      	ldrb	r3, [r3, #1]
 8015d3a:	f083 0301 	eor.w	r3, r3, #1
 8015d3e:	b2db      	uxtb	r3, r3
 8015d40:	2b00      	cmp	r3, #0
 8015d42:	d002      	beq.n	8015d4a <RadioIrqProcess+0x32a>
            SUBGRF_SetStandby( STDBY_RC );
 8015d44:	2000      	movs	r0, #0
 8015d46:	f000 fe09 	bl	801695c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8015d4a:	4b24      	ldr	r3, [pc, #144]	; (8015ddc <RadioIrqProcess+0x3bc>)
 8015d4c:	681b      	ldr	r3, [r3, #0]
 8015d4e:	2b00      	cmp	r3, #0
 8015d50:	d039      	beq.n	8015dc6 <RadioIrqProcess+0x3a6>
 8015d52:	4b22      	ldr	r3, [pc, #136]	; (8015ddc <RadioIrqProcess+0x3bc>)
 8015d54:	681b      	ldr	r3, [r3, #0]
 8015d56:	68db      	ldr	r3, [r3, #12]
 8015d58:	2b00      	cmp	r3, #0
 8015d5a:	d034      	beq.n	8015dc6 <RadioIrqProcess+0x3a6>
            RadioEvents->RxTimeout( );
 8015d5c:	4b1f      	ldr	r3, [pc, #124]	; (8015ddc <RadioIrqProcess+0x3bc>)
 8015d5e:	681b      	ldr	r3, [r3, #0]
 8015d60:	68db      	ldr	r3, [r3, #12]
 8015d62:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 8015d64:	4b1e      	ldr	r3, [pc, #120]	; (8015de0 <RadioIrqProcess+0x3c0>)
 8015d66:	2201      	movs	r2, #1
 8015d68:	2100      	movs	r1, #0
 8015d6a:	2002      	movs	r0, #2
 8015d6c:	f002 ff08 	bl	8018b80 <UTIL_ADV_TRACE_COND_FSend>
        break;
 8015d70:	e029      	b.n	8015dc6 <RadioIrqProcess+0x3a6>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 8015d72:	4b1c      	ldr	r3, [pc, #112]	; (8015de4 <RadioIrqProcess+0x3c4>)
 8015d74:	2201      	movs	r2, #1
 8015d76:	2100      	movs	r1, #0
 8015d78:	2002      	movs	r0, #2
 8015d7a:	f002 ff01 	bl	8018b80 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 8015d7e:	4b16      	ldr	r3, [pc, #88]	; (8015dd8 <RadioIrqProcess+0x3b8>)
 8015d80:	785b      	ldrb	r3, [r3, #1]
 8015d82:	f083 0301 	eor.w	r3, r3, #1
 8015d86:	b2db      	uxtb	r3, r3
 8015d88:	2b00      	cmp	r3, #0
 8015d8a:	d002      	beq.n	8015d92 <RadioIrqProcess+0x372>
            SUBGRF_SetStandby( STDBY_RC );
 8015d8c:	2000      	movs	r0, #0
 8015d8e:	f000 fde5 	bl	801695c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8015d92:	4b12      	ldr	r3, [pc, #72]	; (8015ddc <RadioIrqProcess+0x3bc>)
 8015d94:	681b      	ldr	r3, [r3, #0]
 8015d96:	2b00      	cmp	r3, #0
 8015d98:	d017      	beq.n	8015dca <RadioIrqProcess+0x3aa>
 8015d9a:	4b10      	ldr	r3, [pc, #64]	; (8015ddc <RadioIrqProcess+0x3bc>)
 8015d9c:	681b      	ldr	r3, [r3, #0]
 8015d9e:	691b      	ldr	r3, [r3, #16]
 8015da0:	2b00      	cmp	r3, #0
 8015da2:	d012      	beq.n	8015dca <RadioIrqProcess+0x3aa>
            RadioEvents->RxError( );
 8015da4:	4b0d      	ldr	r3, [pc, #52]	; (8015ddc <RadioIrqProcess+0x3bc>)
 8015da6:	681b      	ldr	r3, [r3, #0]
 8015da8:	691b      	ldr	r3, [r3, #16]
 8015daa:	4798      	blx	r3
        break;
 8015dac:	e00d      	b.n	8015dca <RadioIrqProcess+0x3aa>
        break;
 8015dae:	bf00      	nop
 8015db0:	e00c      	b.n	8015dcc <RadioIrqProcess+0x3ac>
        break;
 8015db2:	bf00      	nop
 8015db4:	e00a      	b.n	8015dcc <RadioIrqProcess+0x3ac>
        break;
 8015db6:	bf00      	nop
 8015db8:	e008      	b.n	8015dcc <RadioIrqProcess+0x3ac>
        break;
 8015dba:	bf00      	nop
 8015dbc:	e006      	b.n	8015dcc <RadioIrqProcess+0x3ac>
        break;
 8015dbe:	bf00      	nop
 8015dc0:	e004      	b.n	8015dcc <RadioIrqProcess+0x3ac>
        break;
 8015dc2:	bf00      	nop
 8015dc4:	e002      	b.n	8015dcc <RadioIrqProcess+0x3ac>
        break;
 8015dc6:	bf00      	nop
 8015dc8:	e000      	b.n	8015dcc <RadioIrqProcess+0x3ac>
        break;
 8015dca:	bf00      	nop
  }
}
 8015dcc:	bf00      	nop
 8015dce:	370c      	adds	r7, #12
 8015dd0:	46bd      	mov	sp, r7
 8015dd2:	bd90      	pop	{r4, r7, pc}
 8015dd4:	200016e8 	.word	0x200016e8
 8015dd8:	20001678 	.word	0x20001678
 8015ddc:	20000dec 	.word	0x20000dec
 8015de0:	08019774 	.word	0x08019774
 8015de4:	08019780 	.word	0x08019780

08015de8 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 8015de8:	b580      	push	{r7, lr}
 8015dea:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8015dec:	4b09      	ldr	r3, [pc, #36]	; (8015e14 <RadioTxPrbs+0x2c>)
 8015dee:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8015df2:	2101      	movs	r1, #1
 8015df4:	4618      	mov	r0, r3
 8015df6:	f001 fbb3 	bl	8017560 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_PKTCTL1A, 0x2d );  // sel mode prbs9 instead of preamble
 8015dfa:	4b07      	ldr	r3, [pc, #28]	; (8015e18 <RadioTxPrbs+0x30>)
 8015dfc:	212d      	movs	r1, #45	; 0x2d
 8015dfe:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8015e02:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 8015e04:	f000 fe6d 	bl	8016ae2 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 8015e08:	4804      	ldr	r0, [pc, #16]	; (8015e1c <RadioTxPrbs+0x34>)
 8015e0a:	f000 fdc3 	bl	8016994 <SUBGRF_SetTx>
}
 8015e0e:	bf00      	nop
 8015e10:	bd80      	pop	{r7, pc}
 8015e12:	bf00      	nop
 8015e14:	20001678 	.word	0x20001678
 8015e18:	0801582f 	.word	0x0801582f
 8015e1c:	000fffff 	.word	0x000fffff

08015e20 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 8015e20:	b580      	push	{r7, lr}
 8015e22:	b084      	sub	sp, #16
 8015e24:	af00      	add	r7, sp, #0
 8015e26:	4603      	mov	r3, r0
 8015e28:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 8015e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015e2e:	4618      	mov	r0, r3
 8015e30:	f001 fbbe 	bl	80175b0 <SUBGRF_SetRfTxPower>
 8015e34:	4603      	mov	r3, r0
 8015e36:	73fb      	strb	r3, [r7, #15]
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 8015e38:	7bfb      	ldrb	r3, [r7, #15]
 8015e3a:	2101      	movs	r1, #1
 8015e3c:	4618      	mov	r0, r3
 8015e3e:	f001 fb8f 	bl	8017560 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8015e42:	f000 fe45 	bl	8016ad0 <SUBGRF_SetTxContinuousWave>
}
 8015e46:	bf00      	nop
 8015e48:	3710      	adds	r7, #16
 8015e4a:	46bd      	mov	sp, r7
 8015e4c:	bd80      	pop	{r7, pc}

08015e4e <payload_integration>:

static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 8015e4e:	b480      	push	{r7}
 8015e50:	b089      	sub	sp, #36	; 0x24
 8015e52:	af00      	add	r7, sp, #0
 8015e54:	60f8      	str	r0, [r7, #12]
 8015e56:	60b9      	str	r1, [r7, #8]
 8015e58:	4613      	mov	r3, r2
 8015e5a:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 8015e5c:	2300      	movs	r3, #0
 8015e5e:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int i = 0;
 8015e60:	2300      	movs	r3, #0
 8015e62:	61bb      	str	r3, [r7, #24]

    for (i = 0; i < size; i++)
 8015e64:	2300      	movs	r3, #0
 8015e66:	61bb      	str	r3, [r7, #24]
 8015e68:	e011      	b.n	8015e8e <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 8015e6a:	69bb      	ldr	r3, [r7, #24]
 8015e6c:	68ba      	ldr	r2, [r7, #8]
 8015e6e:	4413      	add	r3, r2
 8015e70:	781a      	ldrb	r2, [r3, #0]
 8015e72:	69bb      	ldr	r3, [r7, #24]
 8015e74:	68b9      	ldr	r1, [r7, #8]
 8015e76:	440b      	add	r3, r1
 8015e78:	43d2      	mvns	r2, r2
 8015e7a:	b2d2      	uxtb	r2, r2
 8015e7c:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 8015e7e:	69bb      	ldr	r3, [r7, #24]
 8015e80:	68fa      	ldr	r2, [r7, #12]
 8015e82:	4413      	add	r3, r2
 8015e84:	2200      	movs	r2, #0
 8015e86:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < size; i++)
 8015e88:	69bb      	ldr	r3, [r7, #24]
 8015e8a:	3301      	adds	r3, #1
 8015e8c:	61bb      	str	r3, [r7, #24]
 8015e8e:	79fb      	ldrb	r3, [r7, #7]
 8015e90:	69ba      	ldr	r2, [r7, #24]
 8015e92:	429a      	cmp	r2, r3
 8015e94:	dbe9      	blt.n	8015e6a <payload_integration+0x1c>
    }

    for (i = 0; i < (size * 8); i++)
 8015e96:	2300      	movs	r3, #0
 8015e98:	61bb      	str	r3, [r7, #24]
 8015e9a:	e049      	b.n	8015f30 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 8015e9c:	69bb      	ldr	r3, [r7, #24]
 8015e9e:	425a      	negs	r2, r3
 8015ea0:	f003 0307 	and.w	r3, r3, #7
 8015ea4:	f002 0207 	and.w	r2, r2, #7
 8015ea8:	bf58      	it	pl
 8015eaa:	4253      	negpl	r3, r2
 8015eac:	b2db      	uxtb	r3, r3
 8015eae:	f1c3 0307 	rsb	r3, r3, #7
 8015eb2:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 8015eb4:	69bb      	ldr	r3, [r7, #24]
 8015eb6:	2b00      	cmp	r3, #0
 8015eb8:	da00      	bge.n	8015ebc <payload_integration+0x6e>
 8015eba:	3307      	adds	r3, #7
 8015ebc:	10db      	asrs	r3, r3, #3
 8015ebe:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 8015ec0:	69bb      	ldr	r3, [r7, #24]
 8015ec2:	3301      	adds	r3, #1
 8015ec4:	425a      	negs	r2, r3
 8015ec6:	f003 0307 	and.w	r3, r3, #7
 8015eca:	f002 0207 	and.w	r2, r2, #7
 8015ece:	bf58      	it	pl
 8015ed0:	4253      	negpl	r3, r2
 8015ed2:	b2db      	uxtb	r3, r3
 8015ed4:	f1c3 0307 	rsb	r3, r3, #7
 8015ed8:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 8015eda:	69bb      	ldr	r3, [r7, #24]
 8015edc:	3301      	adds	r3, #1
 8015ede:	2b00      	cmp	r3, #0
 8015ee0:	da00      	bge.n	8015ee4 <payload_integration+0x96>
 8015ee2:	3307      	adds	r3, #7
 8015ee4:	10db      	asrs	r3, r3, #3
 8015ee6:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 8015ee8:	7dbb      	ldrb	r3, [r7, #22]
 8015eea:	68ba      	ldr	r2, [r7, #8]
 8015eec:	4413      	add	r3, r2
 8015eee:	781b      	ldrb	r3, [r3, #0]
 8015ef0:	461a      	mov	r2, r3
 8015ef2:	7dfb      	ldrb	r3, [r7, #23]
 8015ef4:	fa42 f303 	asr.w	r3, r2, r3
 8015ef8:	b2db      	uxtb	r3, r3
 8015efa:	f003 0301 	and.w	r3, r3, #1
 8015efe:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 8015f00:	7ffa      	ldrb	r2, [r7, #31]
 8015f02:	7cfb      	ldrb	r3, [r7, #19]
 8015f04:	4053      	eors	r3, r2
 8015f06:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 8015f08:	7d3b      	ldrb	r3, [r7, #20]
 8015f0a:	68fa      	ldr	r2, [r7, #12]
 8015f0c:	4413      	add	r3, r2
 8015f0e:	781b      	ldrb	r3, [r3, #0]
 8015f10:	b25a      	sxtb	r2, r3
 8015f12:	7ff9      	ldrb	r1, [r7, #31]
 8015f14:	7d7b      	ldrb	r3, [r7, #21]
 8015f16:	fa01 f303 	lsl.w	r3, r1, r3
 8015f1a:	b25b      	sxtb	r3, r3
 8015f1c:	4313      	orrs	r3, r2
 8015f1e:	b259      	sxtb	r1, r3
 8015f20:	7d3b      	ldrb	r3, [r7, #20]
 8015f22:	68fa      	ldr	r2, [r7, #12]
 8015f24:	4413      	add	r3, r2
 8015f26:	b2ca      	uxtb	r2, r1
 8015f28:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < (size * 8); i++)
 8015f2a:	69bb      	ldr	r3, [r7, #24]
 8015f2c:	3301      	adds	r3, #1
 8015f2e:	61bb      	str	r3, [r7, #24]
 8015f30:	79fb      	ldrb	r3, [r7, #7]
 8015f32:	00db      	lsls	r3, r3, #3
 8015f34:	69ba      	ldr	r2, [r7, #24]
 8015f36:	429a      	cmp	r2, r3
 8015f38:	dbb0      	blt.n	8015e9c <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 8015f3a:	7ffb      	ldrb	r3, [r7, #31]
 8015f3c:	01db      	lsls	r3, r3, #7
 8015f3e:	b25a      	sxtb	r2, r3
 8015f40:	7ffb      	ldrb	r3, [r7, #31]
 8015f42:	019b      	lsls	r3, r3, #6
 8015f44:	b25b      	sxtb	r3, r3
 8015f46:	4313      	orrs	r3, r2
 8015f48:	b25b      	sxtb	r3, r3
 8015f4a:	7ffa      	ldrb	r2, [r7, #31]
 8015f4c:	2a00      	cmp	r2, #0
 8015f4e:	d101      	bne.n	8015f54 <payload_integration+0x106>
 8015f50:	2220      	movs	r2, #32
 8015f52:	e000      	b.n	8015f56 <payload_integration+0x108>
 8015f54:	2200      	movs	r2, #0
 8015f56:	4313      	orrs	r3, r2
 8015f58:	b259      	sxtb	r1, r3
 8015f5a:	79fb      	ldrb	r3, [r7, #7]
 8015f5c:	68fa      	ldr	r2, [r7, #12]
 8015f5e:	4413      	add	r3, r2
 8015f60:	b2ca      	uxtb	r2, r1
 8015f62:	701a      	strb	r2, [r3, #0]
}
 8015f64:	bf00      	nop
 8015f66:	3724      	adds	r7, #36	; 0x24
 8015f68:	46bd      	mov	sp, r7
 8015f6a:	bc80      	pop	{r7}
 8015f6c:	4770      	bx	lr
	...

08015f70 <RadioSetRxGenericConfig>:

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t* config, uint32_t rxContinuous, uint32_t symbTimeout )
{
 8015f70:	b580      	push	{r7, lr}
 8015f72:	b08c      	sub	sp, #48	; 0x30
 8015f74:	af00      	add	r7, sp, #0
 8015f76:	60b9      	str	r1, [r7, #8]
 8015f78:	607a      	str	r2, [r7, #4]
 8015f7a:	603b      	str	r3, [r7, #0]
 8015f7c:	4603      	mov	r3, r0
 8015f7e:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 8015f80:	2300      	movs	r3, #0
 8015f82:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t syncword[8] = {0};
 8015f84:	2300      	movs	r3, #0
 8015f86:	61fb      	str	r3, [r7, #28]
 8015f88:	2300      	movs	r3, #0
 8015f8a:	623b      	str	r3, [r7, #32]
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8015f8c:	f001 fccd 	bl	801792a <RFW_DeInit>

    if( rxContinuous != 0 )
 8015f90:	687b      	ldr	r3, [r7, #4]
 8015f92:	2b00      	cmp	r3, #0
 8015f94:	d001      	beq.n	8015f9a <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 8015f96:	2300      	movs	r3, #0
 8015f98:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 8015f9a:	687b      	ldr	r3, [r7, #4]
 8015f9c:	2b00      	cmp	r3, #0
 8015f9e:	bf14      	ite	ne
 8015fa0:	2301      	movne	r3, #1
 8015fa2:	2300      	moveq	r3, #0
 8015fa4:	b2da      	uxtb	r2, r3
 8015fa6:	4ba9      	ldr	r3, [pc, #676]	; (801624c <RadioSetRxGenericConfig+0x2dc>)
 8015fa8:	705a      	strb	r2, [r3, #1]

    switch( modem )
 8015faa:	7bfb      	ldrb	r3, [r7, #15]
 8015fac:	2b00      	cmp	r3, #0
 8015fae:	d003      	beq.n	8015fb8 <RadioSetRxGenericConfig+0x48>
 8015fb0:	2b01      	cmp	r3, #1
 8015fb2:	f000 80e8 	beq.w	8016186 <RadioSetRxGenericConfig+0x216>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 8015fb6:	e1a0      	b.n	80162fa <RadioSetRxGenericConfig+0x38a>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8015fb8:	68bb      	ldr	r3, [r7, #8]
 8015fba:	68db      	ldr	r3, [r3, #12]
 8015fbc:	2b00      	cmp	r3, #0
 8015fbe:	d003      	beq.n	8015fc8 <RadioSetRxGenericConfig+0x58>
 8015fc0:	68bb      	ldr	r3, [r7, #8]
 8015fc2:	691b      	ldr	r3, [r3, #16]
 8015fc4:	2b00      	cmp	r3, #0
 8015fc6:	d102      	bne.n	8015fce <RadioSetRxGenericConfig+0x5e>
            return -1;
 8015fc8:	f04f 33ff 	mov.w	r3, #4294967295
 8015fcc:	e196      	b.n	80162fc <RadioSetRxGenericConfig+0x38c>
        if( config->fsk.SyncWordLength > 8 )
 8015fce:	68bb      	ldr	r3, [r7, #8]
 8015fd0:	7d5b      	ldrb	r3, [r3, #21]
 8015fd2:	2b08      	cmp	r3, #8
 8015fd4:	d902      	bls.n	8015fdc <RadioSetRxGenericConfig+0x6c>
            return -1;
 8015fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8015fda:	e18f      	b.n	80162fc <RadioSetRxGenericConfig+0x38c>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 8015fdc:	2300      	movs	r3, #0
 8015fde:	62bb      	str	r3, [r7, #40]	; 0x28
 8015fe0:	e00d      	b.n	8015ffe <RadioSetRxGenericConfig+0x8e>
                syncword[i] = config->fsk.SyncWord[i];
 8015fe2:	68bb      	ldr	r3, [r7, #8]
 8015fe4:	699a      	ldr	r2, [r3, #24]
 8015fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fe8:	4413      	add	r3, r2
 8015fea:	7819      	ldrb	r1, [r3, #0]
 8015fec:	f107 021c 	add.w	r2, r7, #28
 8015ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ff2:	4413      	add	r3, r2
 8015ff4:	460a      	mov	r2, r1
 8015ff6:	701a      	strb	r2, [r3, #0]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 8015ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ffa:	3301      	adds	r3, #1
 8015ffc:	62bb      	str	r3, [r7, #40]	; 0x28
 8015ffe:	68bb      	ldr	r3, [r7, #8]
 8016000:	7d5b      	ldrb	r3, [r3, #21]
 8016002:	461a      	mov	r2, r3
 8016004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016006:	4293      	cmp	r3, r2
 8016008:	dbeb      	blt.n	8015fe2 <RadioSetRxGenericConfig+0x72>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801600a:	68bb      	ldr	r3, [r7, #8]
 801600c:	681b      	ldr	r3, [r3, #0]
 801600e:	2b00      	cmp	r3, #0
 8016010:	bf14      	ite	ne
 8016012:	2301      	movne	r3, #1
 8016014:	2300      	moveq	r3, #0
 8016016:	b2db      	uxtb	r3, r3
 8016018:	4618      	mov	r0, r3
 801601a:	f000 fd6b 	bl	8016af4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801601e:	4b8b      	ldr	r3, [pc, #556]	; (801624c <RadioSetRxGenericConfig+0x2dc>)
 8016020:	2200      	movs	r2, #0
 8016022:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8016026:	68bb      	ldr	r3, [r7, #8]
 8016028:	68db      	ldr	r3, [r3, #12]
 801602a:	4a88      	ldr	r2, [pc, #544]	; (801624c <RadioSetRxGenericConfig+0x2dc>)
 801602c:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = (RadioModShapings_t) config->fsk.ModulationShaping;
 801602e:	68bb      	ldr	r3, [r7, #8]
 8016030:	791a      	ldrb	r2, [r3, #4]
 8016032:	4b86      	ldr	r3, [pc, #536]	; (801624c <RadioSetRxGenericConfig+0x2dc>)
 8016034:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8016038:	68bb      	ldr	r3, [r7, #8]
 801603a:	689b      	ldr	r3, [r3, #8]
 801603c:	4618      	mov	r0, r3
 801603e:	f001 fba5 	bl	801778c <SUBGRF_GetFskBandwidthRegValue>
 8016042:	4603      	mov	r3, r0
 8016044:	461a      	mov	r2, r3
 8016046:	4b81      	ldr	r3, [pc, #516]	; (801624c <RadioSetRxGenericConfig+0x2dc>)
 8016048:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801604c:	4b7f      	ldr	r3, [pc, #508]	; (801624c <RadioSetRxGenericConfig+0x2dc>)
 801604e:	2200      	movs	r2, #0
 8016050:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 8016052:	68bb      	ldr	r3, [r7, #8]
 8016054:	691b      	ldr	r3, [r3, #16]
 8016056:	b29b      	uxth	r3, r3
 8016058:	00db      	lsls	r3, r3, #3
 801605a:	b29a      	uxth	r2, r3
 801605c:	4b7b      	ldr	r3, [pc, #492]	; (801624c <RadioSetRxGenericConfig+0x2dc>)
 801605e:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 8016060:	68bb      	ldr	r3, [r7, #8]
 8016062:	7d1a      	ldrb	r2, [r3, #20]
 8016064:	4b79      	ldr	r3, [pc, #484]	; (801624c <RadioSetRxGenericConfig+0x2dc>)
 8016066:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8016068:	68bb      	ldr	r3, [r7, #8]
 801606a:	7d5b      	ldrb	r3, [r3, #21]
 801606c:	00db      	lsls	r3, r3, #3
 801606e:	b2da      	uxtb	r2, r3
 8016070:	4b76      	ldr	r3, [pc, #472]	; (801624c <RadioSetRxGenericConfig+0x2dc>)
 8016072:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 8016074:	68bb      	ldr	r3, [r7, #8]
 8016076:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 801607a:	4b74      	ldr	r3, [pc, #464]	; (801624c <RadioSetRxGenericConfig+0x2dc>)
 801607c:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 801607e:	68bb      	ldr	r3, [r7, #8]
 8016080:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8016084:	2b00      	cmp	r3, #0
 8016086:	d105      	bne.n	8016094 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 8016088:	68bb      	ldr	r3, [r7, #8]
 801608a:	69db      	ldr	r3, [r3, #28]
 801608c:	b2da      	uxtb	r2, r3
 801608e:	4b6f      	ldr	r3, [pc, #444]	; (801624c <RadioSetRxGenericConfig+0x2dc>)
 8016090:	759a      	strb	r2, [r3, #22]
 8016092:	e00b      	b.n	80160ac <RadioSetRxGenericConfig+0x13c>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 8016094:	68bb      	ldr	r3, [r7, #8]
 8016096:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801609a:	2b02      	cmp	r3, #2
 801609c:	d103      	bne.n	80160a6 <RadioSetRxGenericConfig+0x136>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801609e:	4b6b      	ldr	r3, [pc, #428]	; (801624c <RadioSetRxGenericConfig+0x2dc>)
 80160a0:	22ff      	movs	r2, #255	; 0xff
 80160a2:	759a      	strb	r2, [r3, #22]
 80160a4:	e002      	b.n	80160ac <RadioSetRxGenericConfig+0x13c>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 80160a6:	4b69      	ldr	r3, [pc, #420]	; (801624c <RadioSetRxGenericConfig+0x2dc>)
 80160a8:	22ff      	movs	r2, #255	; 0xff
 80160aa:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 80160ac:	68bb      	ldr	r3, [r7, #8]
 80160ae:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80160b2:	2b02      	cmp	r3, #2
 80160b4:	d004      	beq.n	80160c0 <RadioSetRxGenericConfig+0x150>
 80160b6:	68bb      	ldr	r3, [r7, #8]
 80160b8:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80160bc:	2b02      	cmp	r3, #2
 80160be:	d12d      	bne.n	801611c <RadioSetRxGenericConfig+0x1ac>
          if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 80160c0:	68bb      	ldr	r3, [r7, #8]
 80160c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80160c6:	2bf1      	cmp	r3, #241	; 0xf1
 80160c8:	d00c      	beq.n	80160e4 <RadioSetRxGenericConfig+0x174>
 80160ca:	68bb      	ldr	r3, [r7, #8]
 80160cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80160d0:	2bf2      	cmp	r3, #242	; 0xf2
 80160d2:	d007      	beq.n	80160e4 <RadioSetRxGenericConfig+0x174>
 80160d4:	68bb      	ldr	r3, [r7, #8]
 80160d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80160da:	2b01      	cmp	r3, #1
 80160dc:	d002      	beq.n	80160e4 <RadioSetRxGenericConfig+0x174>
            return -1;
 80160de:	f04f 33ff 	mov.w	r3, #4294967295
 80160e2:	e10b      	b.n	80162fc <RadioSetRxGenericConfig+0x38c>
          ConfigGeneric.rtx = CONFIG_RX;
 80160e4:	2300      	movs	r3, #0
 80160e6:	763b      	strb	r3, [r7, #24]
          ConfigGeneric.RxConfig = config;
 80160e8:	68bb      	ldr	r3, [r7, #8]
 80160ea:	617b      	str	r3, [r7, #20]
          if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 80160ec:	4b58      	ldr	r3, [pc, #352]	; (8016250 <RadioSetRxGenericConfig+0x2e0>)
 80160ee:	6819      	ldr	r1, [r3, #0]
 80160f0:	f107 0310 	add.w	r3, r7, #16
 80160f4:	4a57      	ldr	r2, [pc, #348]	; (8016254 <RadioSetRxGenericConfig+0x2e4>)
 80160f6:	4618      	mov	r0, r3
 80160f8:	f001 fc0a 	bl	8017910 <RFW_Init>
 80160fc:	4603      	mov	r3, r0
 80160fe:	2b00      	cmp	r3, #0
 8016100:	d002      	beq.n	8016108 <RadioSetRxGenericConfig+0x198>
            return -1;
 8016102:	f04f 33ff 	mov.w	r3, #4294967295
 8016106:	e0f9      	b.n	80162fc <RadioSetRxGenericConfig+0x38c>
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8016108:	4b50      	ldr	r3, [pc, #320]	; (801624c <RadioSetRxGenericConfig+0x2dc>)
 801610a:	2200      	movs	r2, #0
 801610c:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801610e:	4b4f      	ldr	r3, [pc, #316]	; (801624c <RadioSetRxGenericConfig+0x2dc>)
 8016110:	2201      	movs	r2, #1
 8016112:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8016114:	4b4d      	ldr	r3, [pc, #308]	; (801624c <RadioSetRxGenericConfig+0x2dc>)
 8016116:	2200      	movs	r2, #0
 8016118:	755a      	strb	r2, [r3, #21]
        {
 801611a:	e00e      	b.n	801613a <RadioSetRxGenericConfig+0x1ca>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801611c:	68bb      	ldr	r3, [r7, #8]
 801611e:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8016122:	4b4a      	ldr	r3, [pc, #296]	; (801624c <RadioSetRxGenericConfig+0x2dc>)
 8016124:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8016126:	68bb      	ldr	r3, [r7, #8]
 8016128:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 801612c:	4b47      	ldr	r3, [pc, #284]	; (801624c <RadioSetRxGenericConfig+0x2dc>)
 801612e:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 8016130:	68bb      	ldr	r3, [r7, #8]
 8016132:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8016136:	4b45      	ldr	r3, [pc, #276]	; (801624c <RadioSetRxGenericConfig+0x2dc>)
 8016138:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 801613a:	f7ff fa92 	bl	8015662 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801613e:	2000      	movs	r0, #0
 8016140:	f7fe fc24 	bl	801498c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8016144:	4844      	ldr	r0, [pc, #272]	; (8016258 <RadioSetRxGenericConfig+0x2e8>)
 8016146:	f000 ff03 	bl	8016f50 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801614a:	4844      	ldr	r0, [pc, #272]	; (801625c <RadioSetRxGenericConfig+0x2ec>)
 801614c:	f000 ffcc 	bl	80170e8 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8016150:	f107 031c 	add.w	r3, r7, #28
 8016154:	4618      	mov	r0, r3
 8016156:	f000 fb06 	bl	8016766 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801615a:	68bb      	ldr	r3, [r7, #8]
 801615c:	8c1b      	ldrh	r3, [r3, #32]
 801615e:	4618      	mov	r0, r3
 8016160:	f000 fb50 	bl	8016804 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8016164:	68bb      	ldr	r3, [r7, #8]
 8016166:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8016168:	4618      	mov	r0, r3
 801616a:	f000 fb2b 	bl	80167c4 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 801616e:	683b      	ldr	r3, [r7, #0]
 8016170:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8016174:	fb02 f203 	mul.w	r2, r2, r3
 8016178:	68bb      	ldr	r3, [r7, #8]
 801617a:	68db      	ldr	r3, [r3, #12]
 801617c:	fbb2 f3f3 	udiv	r3, r2, r3
 8016180:	4a32      	ldr	r2, [pc, #200]	; (801624c <RadioSetRxGenericConfig+0x2dc>)
 8016182:	6093      	str	r3, [r2, #8]
        break;
 8016184:	e0b9      	b.n	80162fa <RadioSetRxGenericConfig+0x38a>
        if( config->lora.PreambleLen == 0 )
 8016186:	68bb      	ldr	r3, [r7, #8]
 8016188:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 801618a:	2b00      	cmp	r3, #0
 801618c:	d102      	bne.n	8016194 <RadioSetRxGenericConfig+0x224>
            return -1;
 801618e:	f04f 33ff 	mov.w	r3, #4294967295
 8016192:	e0b3      	b.n	80162fc <RadioSetRxGenericConfig+0x38c>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 8016194:	68bb      	ldr	r3, [r7, #8]
 8016196:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 801619a:	2b01      	cmp	r3, #1
 801619c:	d104      	bne.n	80161a8 <RadioSetRxGenericConfig+0x238>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 801619e:	68bb      	ldr	r3, [r7, #8]
 80161a0:	69db      	ldr	r3, [r3, #28]
 80161a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80161a6:	e002      	b.n	80161ae <RadioSetRxGenericConfig+0x23e>
            MaxPayloadLength = 0xFF;
 80161a8:	23ff      	movs	r3, #255	; 0xff
 80161aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 80161ae:	68bb      	ldr	r3, [r7, #8]
 80161b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80161b2:	2b00      	cmp	r3, #0
 80161b4:	bf14      	ite	ne
 80161b6:	2301      	movne	r3, #1
 80161b8:	2300      	moveq	r3, #0
 80161ba:	b2db      	uxtb	r3, r3
 80161bc:	4618      	mov	r0, r3
 80161be:	f000 fc99 	bl	8016af4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 80161c2:	683b      	ldr	r3, [r7, #0]
 80161c4:	b2db      	uxtb	r3, r3
 80161c6:	4618      	mov	r0, r3
 80161c8:	f000 fca3 	bl	8016b12 <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80161cc:	4b1f      	ldr	r3, [pc, #124]	; (801624c <RadioSetRxGenericConfig+0x2dc>)
 80161ce:	2201      	movs	r2, #1
 80161d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 80161d4:	68bb      	ldr	r3, [r7, #8]
 80161d6:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80161da:	4b1c      	ldr	r3, [pc, #112]	; (801624c <RadioSetRxGenericConfig+0x2dc>)
 80161dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 80161e0:	68bb      	ldr	r3, [r7, #8]
 80161e2:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 80161e6:	4b19      	ldr	r3, [pc, #100]	; (801624c <RadioSetRxGenericConfig+0x2dc>)
 80161e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 80161ec:	68bb      	ldr	r3, [r7, #8]
 80161ee:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 80161f2:	4b16      	ldr	r3, [pc, #88]	; (801624c <RadioSetRxGenericConfig+0x2dc>)
 80161f4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 80161f8:	68bb      	ldr	r3, [r7, #8]
 80161fa:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80161fe:	2b02      	cmp	r3, #2
 8016200:	d010      	beq.n	8016224 <RadioSetRxGenericConfig+0x2b4>
 8016202:	2b02      	cmp	r3, #2
 8016204:	dc2c      	bgt.n	8016260 <RadioSetRxGenericConfig+0x2f0>
 8016206:	2b00      	cmp	r3, #0
 8016208:	d002      	beq.n	8016210 <RadioSetRxGenericConfig+0x2a0>
 801620a:	2b01      	cmp	r3, #1
 801620c:	d005      	beq.n	801621a <RadioSetRxGenericConfig+0x2aa>
            break;
 801620e:	e027      	b.n	8016260 <RadioSetRxGenericConfig+0x2f0>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8016210:	4b0e      	ldr	r3, [pc, #56]	; (801624c <RadioSetRxGenericConfig+0x2dc>)
 8016212:	2200      	movs	r2, #0
 8016214:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8016218:	e023      	b.n	8016262 <RadioSetRxGenericConfig+0x2f2>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801621a:	4b0c      	ldr	r3, [pc, #48]	; (801624c <RadioSetRxGenericConfig+0x2dc>)
 801621c:	2201      	movs	r2, #1
 801621e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8016222:	e01e      	b.n	8016262 <RadioSetRxGenericConfig+0x2f2>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8016224:	68bb      	ldr	r3, [r7, #8]
 8016226:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801622a:	2b0b      	cmp	r3, #11
 801622c:	d004      	beq.n	8016238 <RadioSetRxGenericConfig+0x2c8>
 801622e:	68bb      	ldr	r3, [r7, #8]
 8016230:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016234:	2b0c      	cmp	r3, #12
 8016236:	d104      	bne.n	8016242 <RadioSetRxGenericConfig+0x2d2>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8016238:	4b04      	ldr	r3, [pc, #16]	; (801624c <RadioSetRxGenericConfig+0x2dc>)
 801623a:	2201      	movs	r2, #1
 801623c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8016240:	e00f      	b.n	8016262 <RadioSetRxGenericConfig+0x2f2>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8016242:	4b02      	ldr	r3, [pc, #8]	; (801624c <RadioSetRxGenericConfig+0x2dc>)
 8016244:	2200      	movs	r2, #0
 8016246:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801624a:	e00a      	b.n	8016262 <RadioSetRxGenericConfig+0x2f2>
 801624c:	20001678 	.word	0x20001678
 8016250:	20000dec 	.word	0x20000dec
 8016254:	200016e8 	.word	0x200016e8
 8016258:	200016b0 	.word	0x200016b0
 801625c:	20001686 	.word	0x20001686
            break;
 8016260:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8016262:	4b28      	ldr	r3, [pc, #160]	; (8016304 <RadioSetRxGenericConfig+0x394>)
 8016264:	2201      	movs	r2, #1
 8016266:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8016268:	68bb      	ldr	r3, [r7, #8]
 801626a:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 801626c:	4b25      	ldr	r3, [pc, #148]	; (8016304 <RadioSetRxGenericConfig+0x394>)
 801626e:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8016270:	68bb      	ldr	r3, [r7, #8]
 8016272:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 8016276:	4b23      	ldr	r3, [pc, #140]	; (8016304 <RadioSetRxGenericConfig+0x394>)
 8016278:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801627a:	4a22      	ldr	r2, [pc, #136]	; (8016304 <RadioSetRxGenericConfig+0x394>)
 801627c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016280:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8016282:	68bb      	ldr	r3, [r7, #8]
 8016284:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8016288:	4b1e      	ldr	r3, [pc, #120]	; (8016304 <RadioSetRxGenericConfig+0x394>)
 801628a:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801628e:	68bb      	ldr	r3, [r7, #8]
 8016290:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8016294:	4b1b      	ldr	r3, [pc, #108]	; (8016304 <RadioSetRxGenericConfig+0x394>)
 8016296:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 801629a:	f7ff f9e2 	bl	8015662 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801629e:	2001      	movs	r0, #1
 80162a0:	f7fe fb74 	bl	801498c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80162a4:	4818      	ldr	r0, [pc, #96]	; (8016308 <RadioSetRxGenericConfig+0x398>)
 80162a6:	f000 fe53 	bl	8016f50 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80162aa:	4818      	ldr	r0, [pc, #96]	; (801630c <RadioSetRxGenericConfig+0x39c>)
 80162ac:	f000 ff1c 	bl	80170e8 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 80162b0:	4b14      	ldr	r3, [pc, #80]	; (8016304 <RadioSetRxGenericConfig+0x394>)
 80162b2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80162b6:	2b01      	cmp	r3, #1
 80162b8:	d10d      	bne.n	80162d6 <RadioSetRxGenericConfig+0x366>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 80162ba:	f240 7036 	movw	r0, #1846	; 0x736
 80162be:	f001 f86f 	bl	80173a0 <SUBGRF_ReadRegister>
 80162c2:	4603      	mov	r3, r0
 80162c4:	f023 0304 	bic.w	r3, r3, #4
 80162c8:	b2db      	uxtb	r3, r3
 80162ca:	4619      	mov	r1, r3
 80162cc:	f240 7036 	movw	r0, #1846	; 0x736
 80162d0:	f001 f852 	bl	8017378 <SUBGRF_WriteRegister>
 80162d4:	e00c      	b.n	80162f0 <RadioSetRxGenericConfig+0x380>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 80162d6:	f240 7036 	movw	r0, #1846	; 0x736
 80162da:	f001 f861 	bl	80173a0 <SUBGRF_ReadRegister>
 80162de:	4603      	mov	r3, r0
 80162e0:	f043 0304 	orr.w	r3, r3, #4
 80162e4:	b2db      	uxtb	r3, r3
 80162e6:	4619      	mov	r1, r3
 80162e8:	f240 7036 	movw	r0, #1846	; 0x736
 80162ec:	f001 f844 	bl	8017378 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 80162f0:	4b04      	ldr	r3, [pc, #16]	; (8016304 <RadioSetRxGenericConfig+0x394>)
 80162f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80162f6:	609a      	str	r2, [r3, #8]
        break;
 80162f8:	bf00      	nop
    }
    return status;
 80162fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80162fc:	4618      	mov	r0, r3
 80162fe:	3730      	adds	r7, #48	; 0x30
 8016300:	46bd      	mov	sp, r7
 8016302:	bd80      	pop	{r7, pc}
 8016304:	20001678 	.word	0x20001678
 8016308:	200016b0 	.word	0x200016b0
 801630c:	20001686 	.word	0x20001686

08016310 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t* config, int8_t power, uint32_t timeout )
{
 8016310:	b580      	push	{r7, lr}
 8016312:	b08a      	sub	sp, #40	; 0x28
 8016314:	af00      	add	r7, sp, #0
 8016316:	60b9      	str	r1, [r7, #8]
 8016318:	607b      	str	r3, [r7, #4]
 801631a:	4603      	mov	r3, r0
 801631c:	73fb      	strb	r3, [r7, #15]
 801631e:	4613      	mov	r3, r2
 8016320:	73bb      	strb	r3, [r7, #14]
    uint8_t syncword[8] = {0};
 8016322:	2300      	movs	r3, #0
 8016324:	61fb      	str	r3, [r7, #28]
 8016326:	2300      	movs	r3, #0
 8016328:	623b      	str	r3, [r7, #32]
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801632a:	f001 fafe 	bl	801792a <RFW_DeInit>
    switch( modem )
 801632e:	7bfb      	ldrb	r3, [r7, #15]
 8016330:	2b02      	cmp	r3, #2
 8016332:	f000 8144 	beq.w	80165be <RadioSetTxGenericConfig+0x2ae>
 8016336:	2b02      	cmp	r3, #2
 8016338:	f300 8160 	bgt.w	80165fc <RadioSetTxGenericConfig+0x2ec>
 801633c:	2b00      	cmp	r3, #0
 801633e:	d003      	beq.n	8016348 <RadioSetTxGenericConfig+0x38>
 8016340:	2b01      	cmp	r3, #1
 8016342:	f000 80b7 	beq.w	80164b4 <RadioSetTxGenericConfig+0x1a4>
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
        break;
    default:
        break;
 8016346:	e159      	b.n	80165fc <RadioSetTxGenericConfig+0x2ec>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8016348:	68bb      	ldr	r3, [r7, #8]
 801634a:	689b      	ldr	r3, [r3, #8]
 801634c:	2b00      	cmp	r3, #0
 801634e:	d003      	beq.n	8016358 <RadioSetTxGenericConfig+0x48>
 8016350:	68bb      	ldr	r3, [r7, #8]
 8016352:	691b      	ldr	r3, [r3, #16]
 8016354:	2b00      	cmp	r3, #0
 8016356:	d102      	bne.n	801635e <RadioSetTxGenericConfig+0x4e>
            return -1;
 8016358:	f04f 33ff 	mov.w	r3, #4294967295
 801635c:	e163      	b.n	8016626 <RadioSetTxGenericConfig+0x316>
        if( config->fsk.SyncWordLength > 8 )
 801635e:	68bb      	ldr	r3, [r7, #8]
 8016360:	7d1b      	ldrb	r3, [r3, #20]
 8016362:	2b08      	cmp	r3, #8
 8016364:	d902      	bls.n	801636c <RadioSetTxGenericConfig+0x5c>
            return -1;
 8016366:	f04f 33ff 	mov.w	r3, #4294967295
 801636a:	e15c      	b.n	8016626 <RadioSetTxGenericConfig+0x316>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 801636c:	2300      	movs	r3, #0
 801636e:	627b      	str	r3, [r7, #36]	; 0x24
 8016370:	e00d      	b.n	801638e <RadioSetTxGenericConfig+0x7e>
                syncword[i] = config->fsk.SyncWord[i];
 8016372:	68bb      	ldr	r3, [r7, #8]
 8016374:	699a      	ldr	r2, [r3, #24]
 8016376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016378:	4413      	add	r3, r2
 801637a:	7819      	ldrb	r1, [r3, #0]
 801637c:	f107 021c 	add.w	r2, r7, #28
 8016380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016382:	4413      	add	r3, r2
 8016384:	460a      	mov	r2, r1
 8016386:	701a      	strb	r2, [r3, #0]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 8016388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801638a:	3301      	adds	r3, #1
 801638c:	627b      	str	r3, [r7, #36]	; 0x24
 801638e:	68bb      	ldr	r3, [r7, #8]
 8016390:	7d1b      	ldrb	r3, [r3, #20]
 8016392:	461a      	mov	r2, r3
 8016394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016396:	4293      	cmp	r3, r2
 8016398:	dbeb      	blt.n	8016372 <RadioSetTxGenericConfig+0x62>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801639a:	4ba5      	ldr	r3, [pc, #660]	; (8016630 <RadioSetTxGenericConfig+0x320>)
 801639c:	2200      	movs	r2, #0
 801639e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 80163a2:	68bb      	ldr	r3, [r7, #8]
 80163a4:	689b      	ldr	r3, [r3, #8]
 80163a6:	4aa2      	ldr	r2, [pc, #648]	; (8016630 <RadioSetTxGenericConfig+0x320>)
 80163a8:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 80163aa:	68bb      	ldr	r3, [r7, #8]
 80163ac:	781a      	ldrb	r2, [r3, #0]
 80163ae:	4ba0      	ldr	r3, [pc, #640]	; (8016630 <RadioSetTxGenericConfig+0x320>)
 80163b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 80163b4:	68bb      	ldr	r3, [r7, #8]
 80163b6:	685b      	ldr	r3, [r3, #4]
 80163b8:	4618      	mov	r0, r3
 80163ba:	f001 f9e7 	bl	801778c <SUBGRF_GetFskBandwidthRegValue>
 80163be:	4603      	mov	r3, r0
 80163c0:	461a      	mov	r2, r3
 80163c2:	4b9b      	ldr	r3, [pc, #620]	; (8016630 <RadioSetTxGenericConfig+0x320>)
 80163c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 80163c8:	68bb      	ldr	r3, [r7, #8]
 80163ca:	68db      	ldr	r3, [r3, #12]
 80163cc:	4a98      	ldr	r2, [pc, #608]	; (8016630 <RadioSetTxGenericConfig+0x320>)
 80163ce:	6413      	str	r3, [r2, #64]	; 0x40
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80163d0:	4b97      	ldr	r3, [pc, #604]	; (8016630 <RadioSetTxGenericConfig+0x320>)
 80163d2:	2200      	movs	r2, #0
 80163d4:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 80163d6:	68bb      	ldr	r3, [r7, #8]
 80163d8:	691b      	ldr	r3, [r3, #16]
 80163da:	b29b      	uxth	r3, r3
 80163dc:	00db      	lsls	r3, r3, #3
 80163de:	b29a      	uxth	r2, r3
 80163e0:	4b93      	ldr	r3, [pc, #588]	; (8016630 <RadioSetTxGenericConfig+0x320>)
 80163e2:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 80163e4:	4b92      	ldr	r3, [pc, #584]	; (8016630 <RadioSetTxGenericConfig+0x320>)
 80163e6:	2204      	movs	r2, #4
 80163e8:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 80163ea:	68bb      	ldr	r3, [r7, #8]
 80163ec:	7d1b      	ldrb	r3, [r3, #20]
 80163ee:	00db      	lsls	r3, r3, #3
 80163f0:	b2da      	uxtb	r2, r3
 80163f2:	4b8f      	ldr	r3, [pc, #572]	; (8016630 <RadioSetTxGenericConfig+0x320>)
 80163f4:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 80163f6:	4b8e      	ldr	r3, [pc, #568]	; (8016630 <RadioSetTxGenericConfig+0x320>)
 80163f8:	2200      	movs	r2, #0
 80163fa:	751a      	strb	r2, [r3, #20]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 80163fc:	68bb      	ldr	r3, [r7, #8]
 80163fe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8016402:	2b02      	cmp	r3, #2
 8016404:	d003      	beq.n	801640e <RadioSetTxGenericConfig+0xfe>
 8016406:	68bb      	ldr	r3, [r7, #8]
 8016408:	7f9b      	ldrb	r3, [r3, #30]
 801640a:	2b02      	cmp	r3, #2
 801640c:	d12a      	bne.n	8016464 <RadioSetTxGenericConfig+0x154>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801640e:	68bb      	ldr	r3, [r7, #8]
 8016410:	7fdb      	ldrb	r3, [r3, #31]
 8016412:	2bf1      	cmp	r3, #241	; 0xf1
 8016414:	d00a      	beq.n	801642c <RadioSetTxGenericConfig+0x11c>
 8016416:	68bb      	ldr	r3, [r7, #8]
 8016418:	7fdb      	ldrb	r3, [r3, #31]
 801641a:	2bf2      	cmp	r3, #242	; 0xf2
 801641c:	d006      	beq.n	801642c <RadioSetTxGenericConfig+0x11c>
 801641e:	68bb      	ldr	r3, [r7, #8]
 8016420:	7fdb      	ldrb	r3, [r3, #31]
 8016422:	2b01      	cmp	r3, #1
 8016424:	d002      	beq.n	801642c <RadioSetTxGenericConfig+0x11c>
                return -1;
 8016426:	f04f 33ff 	mov.w	r3, #4294967295
 801642a:	e0fc      	b.n	8016626 <RadioSetTxGenericConfig+0x316>
            ConfigGeneric.rtx = CONFIG_TX;
 801642c:	2301      	movs	r3, #1
 801642e:	763b      	strb	r3, [r7, #24]
            ConfigGeneric.TxConfig = config;
 8016430:	68bb      	ldr	r3, [r7, #8]
 8016432:	613b      	str	r3, [r7, #16]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8016434:	4b7f      	ldr	r3, [pc, #508]	; (8016634 <RadioSetTxGenericConfig+0x324>)
 8016436:	6819      	ldr	r1, [r3, #0]
 8016438:	f107 0310 	add.w	r3, r7, #16
 801643c:	4a7e      	ldr	r2, [pc, #504]	; (8016638 <RadioSetTxGenericConfig+0x328>)
 801643e:	4618      	mov	r0, r3
 8016440:	f001 fa66 	bl	8017910 <RFW_Init>
 8016444:	4603      	mov	r3, r0
 8016446:	2b00      	cmp	r3, #0
 8016448:	d002      	beq.n	8016450 <RadioSetTxGenericConfig+0x140>
              return -1;
 801644a:	f04f 33ff 	mov.w	r3, #4294967295
 801644e:	e0ea      	b.n	8016626 <RadioSetTxGenericConfig+0x316>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8016450:	4b77      	ldr	r3, [pc, #476]	; (8016630 <RadioSetTxGenericConfig+0x320>)
 8016452:	2200      	movs	r2, #0
 8016454:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 8016456:	4b76      	ldr	r3, [pc, #472]	; (8016630 <RadioSetTxGenericConfig+0x320>)
 8016458:	2201      	movs	r2, #1
 801645a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801645c:	4b74      	ldr	r3, [pc, #464]	; (8016630 <RadioSetTxGenericConfig+0x320>)
 801645e:	2200      	movs	r2, #0
 8016460:	755a      	strb	r2, [r3, #21]
        {
 8016462:	e00c      	b.n	801647e <RadioSetTxGenericConfig+0x16e>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8016464:	68bb      	ldr	r3, [r7, #8]
 8016466:	7fda      	ldrb	r2, [r3, #31]
 8016468:	4b71      	ldr	r3, [pc, #452]	; (8016630 <RadioSetTxGenericConfig+0x320>)
 801646a:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801646c:	68bb      	ldr	r3, [r7, #8]
 801646e:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8016472:	4b6f      	ldr	r3, [pc, #444]	; (8016630 <RadioSetTxGenericConfig+0x320>)
 8016474:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 8016476:	68bb      	ldr	r3, [r7, #8]
 8016478:	7f9a      	ldrb	r2, [r3, #30]
 801647a:	4b6d      	ldr	r3, [pc, #436]	; (8016630 <RadioSetTxGenericConfig+0x320>)
 801647c:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 801647e:	f7ff f8f0 	bl	8015662 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8016482:	2000      	movs	r0, #0
 8016484:	f7fe fa82 	bl	801498c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8016488:	486c      	ldr	r0, [pc, #432]	; (801663c <RadioSetTxGenericConfig+0x32c>)
 801648a:	f000 fd61 	bl	8016f50 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801648e:	486c      	ldr	r0, [pc, #432]	; (8016640 <RadioSetTxGenericConfig+0x330>)
 8016490:	f000 fe2a 	bl	80170e8 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8016494:	f107 031c 	add.w	r3, r7, #28
 8016498:	4618      	mov	r0, r3
 801649a:	f000 f964 	bl	8016766 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801649e:	68bb      	ldr	r3, [r7, #8]
 80164a0:	8b9b      	ldrh	r3, [r3, #28]
 80164a2:	4618      	mov	r0, r3
 80164a4:	f000 f9ae 	bl	8016804 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->fsk.CrcPolynomial );
 80164a8:	68bb      	ldr	r3, [r7, #8]
 80164aa:	8c1b      	ldrh	r3, [r3, #32]
 80164ac:	4618      	mov	r0, r3
 80164ae:	f000 f989 	bl	80167c4 <SUBGRF_SetCrcPolynomial>
        break;
 80164b2:	e0a4      	b.n	80165fe <RadioSetTxGenericConfig+0x2ee>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80164b4:	4b5e      	ldr	r3, [pc, #376]	; (8016630 <RadioSetTxGenericConfig+0x320>)
 80164b6:	2201      	movs	r2, #1
 80164b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 80164bc:	68bb      	ldr	r3, [r7, #8]
 80164be:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80164c2:	4b5b      	ldr	r3, [pc, #364]	; (8016630 <RadioSetTxGenericConfig+0x320>)
 80164c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 80164c8:	68bb      	ldr	r3, [r7, #8]
 80164ca:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 80164ce:	4b58      	ldr	r3, [pc, #352]	; (8016630 <RadioSetTxGenericConfig+0x320>)
 80164d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 80164d4:	68bb      	ldr	r3, [r7, #8]
 80164d6:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80164da:	4b55      	ldr	r3, [pc, #340]	; (8016630 <RadioSetTxGenericConfig+0x320>)
 80164dc:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 80164e0:	68bb      	ldr	r3, [r7, #8]
 80164e2:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80164e6:	2b02      	cmp	r3, #2
 80164e8:	d010      	beq.n	801650c <RadioSetTxGenericConfig+0x1fc>
 80164ea:	2b02      	cmp	r3, #2
 80164ec:	dc22      	bgt.n	8016534 <RadioSetTxGenericConfig+0x224>
 80164ee:	2b00      	cmp	r3, #0
 80164f0:	d002      	beq.n	80164f8 <RadioSetTxGenericConfig+0x1e8>
 80164f2:	2b01      	cmp	r3, #1
 80164f4:	d005      	beq.n	8016502 <RadioSetTxGenericConfig+0x1f2>
            break;
 80164f6:	e01d      	b.n	8016534 <RadioSetTxGenericConfig+0x224>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80164f8:	4b4d      	ldr	r3, [pc, #308]	; (8016630 <RadioSetTxGenericConfig+0x320>)
 80164fa:	2200      	movs	r2, #0
 80164fc:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8016500:	e019      	b.n	8016536 <RadioSetTxGenericConfig+0x226>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8016502:	4b4b      	ldr	r3, [pc, #300]	; (8016630 <RadioSetTxGenericConfig+0x320>)
 8016504:	2201      	movs	r2, #1
 8016506:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801650a:	e014      	b.n	8016536 <RadioSetTxGenericConfig+0x226>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801650c:	68bb      	ldr	r3, [r7, #8]
 801650e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016512:	2b0b      	cmp	r3, #11
 8016514:	d004      	beq.n	8016520 <RadioSetTxGenericConfig+0x210>
 8016516:	68bb      	ldr	r3, [r7, #8]
 8016518:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801651c:	2b0c      	cmp	r3, #12
 801651e:	d104      	bne.n	801652a <RadioSetTxGenericConfig+0x21a>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8016520:	4b43      	ldr	r3, [pc, #268]	; (8016630 <RadioSetTxGenericConfig+0x320>)
 8016522:	2201      	movs	r2, #1
 8016524:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8016528:	e005      	b.n	8016536 <RadioSetTxGenericConfig+0x226>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801652a:	4b41      	ldr	r3, [pc, #260]	; (8016630 <RadioSetTxGenericConfig+0x320>)
 801652c:	2200      	movs	r2, #0
 801652e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8016532:	e000      	b.n	8016536 <RadioSetTxGenericConfig+0x226>
            break;
 8016534:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8016536:	4b3e      	ldr	r3, [pc, #248]	; (8016630 <RadioSetTxGenericConfig+0x320>)
 8016538:	2201      	movs	r2, #1
 801653a:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801653c:	68bb      	ldr	r3, [r7, #8]
 801653e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8016540:	4b3b      	ldr	r3, [pc, #236]	; (8016630 <RadioSetTxGenericConfig+0x320>)
 8016542:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8016544:	68bb      	ldr	r3, [r7, #8]
 8016546:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 801654a:	4b39      	ldr	r3, [pc, #228]	; (8016630 <RadioSetTxGenericConfig+0x320>)
 801654c:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801654e:	68bb      	ldr	r3, [r7, #8]
 8016550:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8016554:	4b36      	ldr	r3, [pc, #216]	; (8016630 <RadioSetTxGenericConfig+0x320>)
 8016556:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801655a:	68bb      	ldr	r3, [r7, #8]
 801655c:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8016560:	4b33      	ldr	r3, [pc, #204]	; (8016630 <RadioSetTxGenericConfig+0x320>)
 8016562:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 8016566:	f7ff f87c 	bl	8015662 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801656a:	2001      	movs	r0, #1
 801656c:	f7fe fa0e 	bl	801498c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8016570:	4832      	ldr	r0, [pc, #200]	; (801663c <RadioSetTxGenericConfig+0x32c>)
 8016572:	f000 fced 	bl	8016f50 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8016576:	4832      	ldr	r0, [pc, #200]	; (8016640 <RadioSetTxGenericConfig+0x330>)
 8016578:	f000 fdb6 	bl	80170e8 <SUBGRF_SetPacketParams>
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 801657c:	4b2c      	ldr	r3, [pc, #176]	; (8016630 <RadioSetTxGenericConfig+0x320>)
 801657e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8016582:	2b06      	cmp	r3, #6
 8016584:	d10d      	bne.n	80165a2 <RadioSetTxGenericConfig+0x292>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 8016586:	f640 0089 	movw	r0, #2185	; 0x889
 801658a:	f000 ff09 	bl	80173a0 <SUBGRF_ReadRegister>
 801658e:	4603      	mov	r3, r0
 8016590:	f023 0304 	bic.w	r3, r3, #4
 8016594:	b2db      	uxtb	r3, r3
 8016596:	4619      	mov	r1, r3
 8016598:	f640 0089 	movw	r0, #2185	; 0x889
 801659c:	f000 feec 	bl	8017378 <SUBGRF_WriteRegister>
        break;
 80165a0:	e02d      	b.n	80165fe <RadioSetTxGenericConfig+0x2ee>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 80165a2:	f640 0089 	movw	r0, #2185	; 0x889
 80165a6:	f000 fefb 	bl	80173a0 <SUBGRF_ReadRegister>
 80165aa:	4603      	mov	r3, r0
 80165ac:	f043 0304 	orr.w	r3, r3, #4
 80165b0:	b2db      	uxtb	r3, r3
 80165b2:	4619      	mov	r1, r3
 80165b4:	f640 0089 	movw	r0, #2185	; 0x889
 80165b8:	f000 fede 	bl	8017378 <SUBGRF_WriteRegister>
        break;
 80165bc:	e01f      	b.n	80165fe <RadioSetTxGenericConfig+0x2ee>
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 80165be:	68bb      	ldr	r3, [r7, #8]
 80165c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80165c2:	2b00      	cmp	r3, #0
 80165c4:	d004      	beq.n	80165d0 <RadioSetTxGenericConfig+0x2c0>
 80165c6:	68bb      	ldr	r3, [r7, #8]
 80165c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80165ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80165ce:	d902      	bls.n	80165d6 <RadioSetTxGenericConfig+0x2c6>
            return -1;
 80165d0:	f04f 33ff 	mov.w	r3, #4294967295
 80165d4:	e027      	b.n	8016626 <RadioSetTxGenericConfig+0x316>
        RadioSetModem( MODEM_BPSK );
 80165d6:	2002      	movs	r0, #2
 80165d8:	f7fe f9d8 	bl	801498c <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 80165dc:	4b14      	ldr	r3, [pc, #80]	; (8016630 <RadioSetTxGenericConfig+0x320>)
 80165de:	2202      	movs	r2, #2
 80165e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 80165e4:	68bb      	ldr	r3, [r7, #8]
 80165e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80165e8:	4a11      	ldr	r2, [pc, #68]	; (8016630 <RadioSetTxGenericConfig+0x320>)
 80165ea:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 80165ec:	4b10      	ldr	r3, [pc, #64]	; (8016630 <RadioSetTxGenericConfig+0x320>)
 80165ee:	2216      	movs	r2, #22
 80165f0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80165f4:	4811      	ldr	r0, [pc, #68]	; (801663c <RadioSetTxGenericConfig+0x32c>)
 80165f6:	f000 fcab 	bl	8016f50 <SUBGRF_SetModulationParams>
        break;
 80165fa:	e000      	b.n	80165fe <RadioSetTxGenericConfig+0x2ee>
        break;
 80165fc:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 80165fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016602:	4618      	mov	r0, r3
 8016604:	f000 ffd4 	bl	80175b0 <SUBGRF_SetRfTxPower>
 8016608:	4603      	mov	r3, r0
 801660a:	461a      	mov	r2, r3
 801660c:	4b08      	ldr	r3, [pc, #32]	; (8016630 <RadioSetTxGenericConfig+0x320>)
 801660e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8016612:	4b07      	ldr	r3, [pc, #28]	; (8016630 <RadioSetTxGenericConfig+0x320>)
 8016614:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8016618:	4618      	mov	r0, r3
 801661a:	f001 f99a 	bl	8017952 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 801661e:	4a04      	ldr	r2, [pc, #16]	; (8016630 <RadioSetTxGenericConfig+0x320>)
 8016620:	687b      	ldr	r3, [r7, #4]
 8016622:	6053      	str	r3, [r2, #4]
    return 0;
 8016624:	2300      	movs	r3, #0
}
 8016626:	4618      	mov	r0, r3
 8016628:	3728      	adds	r7, #40	; 0x28
 801662a:	46bd      	mov	sp, r7
 801662c:	bd80      	pop	{r7, pc}
 801662e:	bf00      	nop
 8016630:	20001678 	.word	0x20001678
 8016634:	20000dec 	.word	0x20000dec
 8016638:	200016d0 	.word	0x200016d0
 801663c:	200016b0 	.word	0x200016b0
 8016640:	20001686 	.word	0x20001686

08016644 <SUBGRF_Init>:
static void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size );

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 8016644:	b580      	push	{r7, lr}
 8016646:	b084      	sub	sp, #16
 8016648:	af00      	add	r7, sp, #0
 801664a:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 801664c:	687b      	ldr	r3, [r7, #4]
 801664e:	2b00      	cmp	r3, #0
 8016650:	d002      	beq.n	8016658 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 8016652:	4a1a      	ldr	r2, [pc, #104]	; (80166bc <SUBGRF_Init+0x78>)
 8016654:	687b      	ldr	r3, [r7, #4]
 8016656:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 8016658:	f7ea fea2 	bl	80013a0 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801665c:	2002      	movs	r0, #2
 801665e:	f001 f873 	bl	8017748 <Radio_SMPS_Set>

    ImageCalibrated = false;
 8016662:	4b17      	ldr	r3, [pc, #92]	; (80166c0 <SUBGRF_Init+0x7c>)
 8016664:	2200      	movs	r2, #0
 8016666:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 8016668:	2000      	movs	r0, #0
 801666a:	f000 f977 	bl	801695c <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 801666e:	f7f2 fba2 	bl	8008db6 <RBI_IsTCXO>
 8016672:	4603      	mov	r3, r0
 8016674:	2b01      	cmp	r3, #1
 8016676:	d10e      	bne.n	8016696 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8016678:	2140      	movs	r1, #64	; 0x40
 801667a:	2001      	movs	r0, #1
 801667c:	f000 fb78 	bl	8016d70 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8016680:	2100      	movs	r1, #0
 8016682:	f640 1011 	movw	r0, #2321	; 0x911
 8016686:	f000 fe77 	bl	8017378 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 801668a:	237f      	movs	r3, #127	; 0x7f
 801668c:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 801668e:	7b38      	ldrb	r0, [r7, #12]
 8016690:	f000 fa85 	bl	8016b9e <SUBGRF_Calibrate>
 8016694:	e009      	b.n	80166aa <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8016696:	2120      	movs	r1, #32
 8016698:	f640 1011 	movw	r0, #2321	; 0x911
 801669c:	f000 fe6c 	bl	8017378 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 80166a0:	2120      	movs	r1, #32
 80166a2:	f640 1012 	movw	r0, #2322	; 0x912
 80166a6:	f000 fe67 	bl	8017378 <SUBGRF_WriteRegister>
    }
    /* Init RF Switch */
    RBI_Init();
 80166aa:	f7f2 fb61 	bl	8008d70 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 80166ae:	4b05      	ldr	r3, [pc, #20]	; (80166c4 <SUBGRF_Init+0x80>)
 80166b0:	2201      	movs	r2, #1
 80166b2:	701a      	strb	r2, [r3, #0]
}
 80166b4:	bf00      	nop
 80166b6:	3710      	adds	r7, #16
 80166b8:	46bd      	mov	sp, r7
 80166ba:	bd80      	pop	{r7, pc}
 80166bc:	20000dfc 	.word	0x20000dfc
 80166c0:	20000df8 	.word	0x20000df8
 80166c4:	20000df0 	.word	0x20000df0

080166c8 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 80166c8:	b480      	push	{r7}
 80166ca:	af00      	add	r7, sp, #0
    return OperatingMode;
 80166cc:	4b02      	ldr	r3, [pc, #8]	; (80166d8 <SUBGRF_GetOperatingMode+0x10>)
 80166ce:	781b      	ldrb	r3, [r3, #0]
}
 80166d0:	4618      	mov	r0, r3
 80166d2:	46bd      	mov	sp, r7
 80166d4:	bc80      	pop	{r7}
 80166d6:	4770      	bx	lr
 80166d8:	20000df0 	.word	0x20000df0

080166dc <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 80166dc:	b580      	push	{r7, lr}
 80166de:	b082      	sub	sp, #8
 80166e0:	af00      	add	r7, sp, #0
 80166e2:	6078      	str	r0, [r7, #4]
 80166e4:	460b      	mov	r3, r1
 80166e6:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 80166e8:	78fb      	ldrb	r3, [r7, #3]
 80166ea:	461a      	mov	r2, r3
 80166ec:	6879      	ldr	r1, [r7, #4]
 80166ee:	2000      	movs	r0, #0
 80166f0:	f000 feae 	bl	8017450 <SUBGRF_WriteBuffer>
}
 80166f4:	bf00      	nop
 80166f6:	3708      	adds	r7, #8
 80166f8:	46bd      	mov	sp, r7
 80166fa:	bd80      	pop	{r7, pc}

080166fc <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 80166fc:	b580      	push	{r7, lr}
 80166fe:	b086      	sub	sp, #24
 8016700:	af00      	add	r7, sp, #0
 8016702:	60f8      	str	r0, [r7, #12]
 8016704:	60b9      	str	r1, [r7, #8]
 8016706:	4613      	mov	r3, r2
 8016708:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 801670a:	2300      	movs	r3, #0
 801670c:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 801670e:	f107 0317 	add.w	r3, r7, #23
 8016712:	4619      	mov	r1, r3
 8016714:	68b8      	ldr	r0, [r7, #8]
 8016716:	f000 fdb1 	bl	801727c <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 801671a:	68bb      	ldr	r3, [r7, #8]
 801671c:	781b      	ldrb	r3, [r3, #0]
 801671e:	79fa      	ldrb	r2, [r7, #7]
 8016720:	429a      	cmp	r2, r3
 8016722:	d201      	bcs.n	8016728 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 8016724:	2301      	movs	r3, #1
 8016726:	e007      	b.n	8016738 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8016728:	7df8      	ldrb	r0, [r7, #23]
 801672a:	68bb      	ldr	r3, [r7, #8]
 801672c:	781b      	ldrb	r3, [r3, #0]
 801672e:	461a      	mov	r2, r3
 8016730:	68f9      	ldr	r1, [r7, #12]
 8016732:	f000 feaf 	bl	8017494 <SUBGRF_ReadBuffer>

    return 0;
 8016736:	2300      	movs	r3, #0
}
 8016738:	4618      	mov	r0, r3
 801673a:	3718      	adds	r7, #24
 801673c:	46bd      	mov	sp, r7
 801673e:	bd80      	pop	{r7, pc}

08016740 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 8016740:	b580      	push	{r7, lr}
 8016742:	b084      	sub	sp, #16
 8016744:	af00      	add	r7, sp, #0
 8016746:	60f8      	str	r0, [r7, #12]
 8016748:	460b      	mov	r3, r1
 801674a:	607a      	str	r2, [r7, #4]
 801674c:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 801674e:	7afb      	ldrb	r3, [r7, #11]
 8016750:	4619      	mov	r1, r3
 8016752:	68f8      	ldr	r0, [r7, #12]
 8016754:	f7ff ffc2 	bl	80166dc <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8016758:	6878      	ldr	r0, [r7, #4]
 801675a:	f000 f91b 	bl	8016994 <SUBGRF_SetTx>
}
 801675e:	bf00      	nop
 8016760:	3710      	adds	r7, #16
 8016762:	46bd      	mov	sp, r7
 8016764:	bd80      	pop	{r7, pc}

08016766 <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 8016766:	b580      	push	{r7, lr}
 8016768:	b082      	sub	sp, #8
 801676a:	af00      	add	r7, sp, #0
 801676c:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 801676e:	2208      	movs	r2, #8
 8016770:	6879      	ldr	r1, [r7, #4]
 8016772:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 8016776:	f000 fe27 	bl	80173c8 <SUBGRF_WriteRegisters>
    return 0;
 801677a:	2300      	movs	r3, #0
}
 801677c:	4618      	mov	r0, r3
 801677e:	3708      	adds	r7, #8
 8016780:	46bd      	mov	sp, r7
 8016782:	bd80      	pop	{r7, pc}

08016784 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 8016784:	b580      	push	{r7, lr}
 8016786:	b084      	sub	sp, #16
 8016788:	af00      	add	r7, sp, #0
 801678a:	4603      	mov	r3, r0
 801678c:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 801678e:	88fb      	ldrh	r3, [r7, #6]
 8016790:	0a1b      	lsrs	r3, r3, #8
 8016792:	b29b      	uxth	r3, r3
 8016794:	b2db      	uxtb	r3, r3
 8016796:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8016798:	88fb      	ldrh	r3, [r7, #6]
 801679a:	b2db      	uxtb	r3, r3
 801679c:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801679e:	f000 fb67 	bl	8016e70 <SUBGRF_GetPacketType>
 80167a2:	4603      	mov	r3, r0
 80167a4:	2b00      	cmp	r3, #0
 80167a6:	d108      	bne.n	80167ba <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 80167a8:	f107 030c 	add.w	r3, r7, #12
 80167ac:	2202      	movs	r2, #2
 80167ae:	4619      	mov	r1, r3
 80167b0:	f240 60bc 	movw	r0, #1724	; 0x6bc
 80167b4:	f000 fe08 	bl	80173c8 <SUBGRF_WriteRegisters>
            break;
 80167b8:	e000      	b.n	80167bc <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 80167ba:	bf00      	nop
    }
}
 80167bc:	bf00      	nop
 80167be:	3710      	adds	r7, #16
 80167c0:	46bd      	mov	sp, r7
 80167c2:	bd80      	pop	{r7, pc}

080167c4 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 80167c4:	b580      	push	{r7, lr}
 80167c6:	b084      	sub	sp, #16
 80167c8:	af00      	add	r7, sp, #0
 80167ca:	4603      	mov	r3, r0
 80167cc:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 80167ce:	88fb      	ldrh	r3, [r7, #6]
 80167d0:	0a1b      	lsrs	r3, r3, #8
 80167d2:	b29b      	uxth	r3, r3
 80167d4:	b2db      	uxtb	r3, r3
 80167d6:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 80167d8:	88fb      	ldrh	r3, [r7, #6]
 80167da:	b2db      	uxtb	r3, r3
 80167dc:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 80167de:	f000 fb47 	bl	8016e70 <SUBGRF_GetPacketType>
 80167e2:	4603      	mov	r3, r0
 80167e4:	2b00      	cmp	r3, #0
 80167e6:	d108      	bne.n	80167fa <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 80167e8:	f107 030c 	add.w	r3, r7, #12
 80167ec:	2202      	movs	r2, #2
 80167ee:	4619      	mov	r1, r3
 80167f0:	f240 60be 	movw	r0, #1726	; 0x6be
 80167f4:	f000 fde8 	bl	80173c8 <SUBGRF_WriteRegisters>
            break;
 80167f8:	e000      	b.n	80167fc <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 80167fa:	bf00      	nop
    }
}
 80167fc:	bf00      	nop
 80167fe:	3710      	adds	r7, #16
 8016800:	46bd      	mov	sp, r7
 8016802:	bd80      	pop	{r7, pc}

08016804 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 8016804:	b580      	push	{r7, lr}
 8016806:	b084      	sub	sp, #16
 8016808:	af00      	add	r7, sp, #0
 801680a:	4603      	mov	r3, r0
 801680c:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 801680e:	2300      	movs	r3, #0
 8016810:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 8016812:	f000 fb2d 	bl	8016e70 <SUBGRF_GetPacketType>
 8016816:	4603      	mov	r3, r0
 8016818:	2b00      	cmp	r3, #0
 801681a:	d121      	bne.n	8016860 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 801681c:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8016820:	f000 fdbe 	bl	80173a0 <SUBGRF_ReadRegister>
 8016824:	4603      	mov	r3, r0
 8016826:	f023 0301 	bic.w	r3, r3, #1
 801682a:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 801682c:	88fb      	ldrh	r3, [r7, #6]
 801682e:	0a1b      	lsrs	r3, r3, #8
 8016830:	b29b      	uxth	r3, r3
 8016832:	b25b      	sxtb	r3, r3
 8016834:	f003 0301 	and.w	r3, r3, #1
 8016838:	b25a      	sxtb	r2, r3
 801683a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801683e:	4313      	orrs	r3, r2
 8016840:	b25b      	sxtb	r3, r3
 8016842:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 8016844:	7bfb      	ldrb	r3, [r7, #15]
 8016846:	4619      	mov	r1, r3
 8016848:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801684c:	f000 fd94 	bl	8017378 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 8016850:	88fb      	ldrh	r3, [r7, #6]
 8016852:	b2db      	uxtb	r3, r3
 8016854:	4619      	mov	r1, r3
 8016856:	f240 60b9 	movw	r0, #1721	; 0x6b9
 801685a:	f000 fd8d 	bl	8017378 <SUBGRF_WriteRegister>
            break;
 801685e:	e000      	b.n	8016862 <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 8016860:	bf00      	nop
    }
}
 8016862:	bf00      	nop
 8016864:	3710      	adds	r7, #16
 8016866:	46bd      	mov	sp, r7
 8016868:	bd80      	pop	{r7, pc}

0801686a <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 801686a:	b580      	push	{r7, lr}
 801686c:	b082      	sub	sp, #8
 801686e:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 8016870:	2300      	movs	r3, #0
 8016872:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 8016874:	2300      	movs	r3, #0
 8016876:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 8016878:	2300      	movs	r3, #0
 801687a:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 801687c:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8016880:	f000 fd8e 	bl	80173a0 <SUBGRF_ReadRegister>
 8016884:	4603      	mov	r3, r0
 8016886:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8016888:	79fb      	ldrb	r3, [r7, #7]
 801688a:	f023 0301 	bic.w	r3, r3, #1
 801688e:	b2db      	uxtb	r3, r3
 8016890:	4619      	mov	r1, r3
 8016892:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8016896:	f000 fd6f 	bl	8017378 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 801689a:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801689e:	f000 fd7f 	bl	80173a0 <SUBGRF_ReadRegister>
 80168a2:	4603      	mov	r3, r0
 80168a4:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 80168a6:	79bb      	ldrb	r3, [r7, #6]
 80168a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80168ac:	b2db      	uxtb	r3, r3
 80168ae:	4619      	mov	r1, r3
 80168b0:	f640 00e5 	movw	r0, #2277	; 0x8e5
 80168b4:	f000 fd60 	bl	8017378 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 80168b8:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80168bc:	f000 f88a 	bl	80169d4 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 80168c0:	463b      	mov	r3, r7
 80168c2:	2204      	movs	r2, #4
 80168c4:	4619      	mov	r1, r3
 80168c6:	f640 0019 	movw	r0, #2073	; 0x819
 80168ca:	f000 fd9f 	bl	801740c <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 80168ce:	2000      	movs	r0, #0
 80168d0:	f000 f844 	bl	801695c <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 80168d4:	79fb      	ldrb	r3, [r7, #7]
 80168d6:	4619      	mov	r1, r3
 80168d8:	f640 00e2 	movw	r0, #2274	; 0x8e2
 80168dc:	f000 fd4c 	bl	8017378 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 80168e0:	79bb      	ldrb	r3, [r7, #6]
 80168e2:	4619      	mov	r1, r3
 80168e4:	f640 00e5 	movw	r0, #2277	; 0x8e5
 80168e8:	f000 fd46 	bl	8017378 <SUBGRF_WriteRegister>

    return number;
 80168ec:	683b      	ldr	r3, [r7, #0]
}
 80168ee:	4618      	mov	r0, r3
 80168f0:	3708      	adds	r7, #8
 80168f2:	46bd      	mov	sp, r7
 80168f4:	bd80      	pop	{r7, pc}
	...

080168f8 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 80168f8:	b580      	push	{r7, lr}
 80168fa:	b084      	sub	sp, #16
 80168fc:	af00      	add	r7, sp, #0
 80168fe:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 8016900:	2000      	movs	r0, #0
 8016902:	f7f2 fa40 	bl	8008d86 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8016906:	2002      	movs	r0, #2
 8016908:	f000 ff1e 	bl	8017748 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801690c:	793b      	ldrb	r3, [r7, #4]
 801690e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8016912:	b2db      	uxtb	r3, r3
 8016914:	009b      	lsls	r3, r3, #2
 8016916:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8016918:	793b      	ldrb	r3, [r7, #4]
 801691a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801691e:	b2db      	uxtb	r3, r3
 8016920:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8016922:	b25b      	sxtb	r3, r3
 8016924:	4313      	orrs	r3, r2
 8016926:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 8016928:	793b      	ldrb	r3, [r7, #4]
 801692a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801692e:	b2db      	uxtb	r3, r3
 8016930:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8016932:	4313      	orrs	r3, r2
 8016934:	b25b      	sxtb	r3, r3
 8016936:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8016938:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 801693a:	f107 030f 	add.w	r3, r7, #15
 801693e:	2201      	movs	r2, #1
 8016940:	4619      	mov	r1, r3
 8016942:	2084      	movs	r0, #132	; 0x84
 8016944:	f000 fdc8 	bl	80174d8 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 8016948:	4b03      	ldr	r3, [pc, #12]	; (8016958 <SUBGRF_SetSleep+0x60>)
 801694a:	2200      	movs	r2, #0
 801694c:	701a      	strb	r2, [r3, #0]
}
 801694e:	bf00      	nop
 8016950:	3710      	adds	r7, #16
 8016952:	46bd      	mov	sp, r7
 8016954:	bd80      	pop	{r7, pc}
 8016956:	bf00      	nop
 8016958:	20000df0 	.word	0x20000df0

0801695c <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 801695c:	b580      	push	{r7, lr}
 801695e:	b082      	sub	sp, #8
 8016960:	af00      	add	r7, sp, #0
 8016962:	4603      	mov	r3, r0
 8016964:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8016966:	1dfb      	adds	r3, r7, #7
 8016968:	2201      	movs	r2, #1
 801696a:	4619      	mov	r1, r3
 801696c:	2080      	movs	r0, #128	; 0x80
 801696e:	f000 fdb3 	bl	80174d8 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 8016972:	79fb      	ldrb	r3, [r7, #7]
 8016974:	2b00      	cmp	r3, #0
 8016976:	d103      	bne.n	8016980 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 8016978:	4b05      	ldr	r3, [pc, #20]	; (8016990 <SUBGRF_SetStandby+0x34>)
 801697a:	2201      	movs	r2, #1
 801697c:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 801697e:	e002      	b.n	8016986 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 8016980:	4b03      	ldr	r3, [pc, #12]	; (8016990 <SUBGRF_SetStandby+0x34>)
 8016982:	2202      	movs	r2, #2
 8016984:	701a      	strb	r2, [r3, #0]
}
 8016986:	bf00      	nop
 8016988:	3708      	adds	r7, #8
 801698a:	46bd      	mov	sp, r7
 801698c:	bd80      	pop	{r7, pc}
 801698e:	bf00      	nop
 8016990:	20000df0 	.word	0x20000df0

08016994 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 8016994:	b580      	push	{r7, lr}
 8016996:	b084      	sub	sp, #16
 8016998:	af00      	add	r7, sp, #0
 801699a:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 801699c:	4b0c      	ldr	r3, [pc, #48]	; (80169d0 <SUBGRF_SetTx+0x3c>)
 801699e:	2204      	movs	r2, #4
 80169a0:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80169a2:	687b      	ldr	r3, [r7, #4]
 80169a4:	0c1b      	lsrs	r3, r3, #16
 80169a6:	b2db      	uxtb	r3, r3
 80169a8:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80169aa:	687b      	ldr	r3, [r7, #4]
 80169ac:	0a1b      	lsrs	r3, r3, #8
 80169ae:	b2db      	uxtb	r3, r3
 80169b0:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80169b2:	687b      	ldr	r3, [r7, #4]
 80169b4:	b2db      	uxtb	r3, r3
 80169b6:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 80169b8:	f107 030c 	add.w	r3, r7, #12
 80169bc:	2203      	movs	r2, #3
 80169be:	4619      	mov	r1, r3
 80169c0:	2083      	movs	r0, #131	; 0x83
 80169c2:	f000 fd89 	bl	80174d8 <SUBGRF_WriteCommand>
}
 80169c6:	bf00      	nop
 80169c8:	3710      	adds	r7, #16
 80169ca:	46bd      	mov	sp, r7
 80169cc:	bd80      	pop	{r7, pc}
 80169ce:	bf00      	nop
 80169d0:	20000df0 	.word	0x20000df0

080169d4 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 80169d4:	b580      	push	{r7, lr}
 80169d6:	b084      	sub	sp, #16
 80169d8:	af00      	add	r7, sp, #0
 80169da:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 80169dc:	4b0c      	ldr	r3, [pc, #48]	; (8016a10 <SUBGRF_SetRx+0x3c>)
 80169de:	2205      	movs	r2, #5
 80169e0:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80169e2:	687b      	ldr	r3, [r7, #4]
 80169e4:	0c1b      	lsrs	r3, r3, #16
 80169e6:	b2db      	uxtb	r3, r3
 80169e8:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80169ea:	687b      	ldr	r3, [r7, #4]
 80169ec:	0a1b      	lsrs	r3, r3, #8
 80169ee:	b2db      	uxtb	r3, r3
 80169f0:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80169f2:	687b      	ldr	r3, [r7, #4]
 80169f4:	b2db      	uxtb	r3, r3
 80169f6:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 80169f8:	f107 030c 	add.w	r3, r7, #12
 80169fc:	2203      	movs	r2, #3
 80169fe:	4619      	mov	r1, r3
 8016a00:	2082      	movs	r0, #130	; 0x82
 8016a02:	f000 fd69 	bl	80174d8 <SUBGRF_WriteCommand>
}
 8016a06:	bf00      	nop
 8016a08:	3710      	adds	r7, #16
 8016a0a:	46bd      	mov	sp, r7
 8016a0c:	bd80      	pop	{r7, pc}
 8016a0e:	bf00      	nop
 8016a10:	20000df0 	.word	0x20000df0

08016a14 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 8016a14:	b580      	push	{r7, lr}
 8016a16:	b084      	sub	sp, #16
 8016a18:	af00      	add	r7, sp, #0
 8016a1a:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8016a1c:	4b0e      	ldr	r3, [pc, #56]	; (8016a58 <SUBGRF_SetRxBoosted+0x44>)
 8016a1e:	2205      	movs	r2, #5
 8016a20:	701a      	strb	r2, [r3, #0]

    /* ST_WORKAROUND_BEGIN: Sigfox patch > 0x96 replaced by 0x97 */
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 8016a22:	2197      	movs	r1, #151	; 0x97
 8016a24:	f640 00ac 	movw	r0, #2220	; 0x8ac
 8016a28:	f000 fca6 	bl	8017378 <SUBGRF_WriteRegister>
    /* ST_WORKAROUND_END */

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8016a2c:	687b      	ldr	r3, [r7, #4]
 8016a2e:	0c1b      	lsrs	r3, r3, #16
 8016a30:	b2db      	uxtb	r3, r3
 8016a32:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8016a34:	687b      	ldr	r3, [r7, #4]
 8016a36:	0a1b      	lsrs	r3, r3, #8
 8016a38:	b2db      	uxtb	r3, r3
 8016a3a:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8016a3c:	687b      	ldr	r3, [r7, #4]
 8016a3e:	b2db      	uxtb	r3, r3
 8016a40:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8016a42:	f107 030c 	add.w	r3, r7, #12
 8016a46:	2203      	movs	r2, #3
 8016a48:	4619      	mov	r1, r3
 8016a4a:	2082      	movs	r0, #130	; 0x82
 8016a4c:	f000 fd44 	bl	80174d8 <SUBGRF_WriteCommand>
}
 8016a50:	bf00      	nop
 8016a52:	3710      	adds	r7, #16
 8016a54:	46bd      	mov	sp, r7
 8016a56:	bd80      	pop	{r7, pc}
 8016a58:	20000df0 	.word	0x20000df0

08016a5c <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8016a5c:	b580      	push	{r7, lr}
 8016a5e:	b084      	sub	sp, #16
 8016a60:	af00      	add	r7, sp, #0
 8016a62:	6078      	str	r0, [r7, #4]
 8016a64:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 8016a66:	687b      	ldr	r3, [r7, #4]
 8016a68:	0c1b      	lsrs	r3, r3, #16
 8016a6a:	b2db      	uxtb	r3, r3
 8016a6c:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 8016a6e:	687b      	ldr	r3, [r7, #4]
 8016a70:	0a1b      	lsrs	r3, r3, #8
 8016a72:	b2db      	uxtb	r3, r3
 8016a74:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 8016a76:	687b      	ldr	r3, [r7, #4]
 8016a78:	b2db      	uxtb	r3, r3
 8016a7a:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 8016a7c:	683b      	ldr	r3, [r7, #0]
 8016a7e:	0c1b      	lsrs	r3, r3, #16
 8016a80:	b2db      	uxtb	r3, r3
 8016a82:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 8016a84:	683b      	ldr	r3, [r7, #0]
 8016a86:	0a1b      	lsrs	r3, r3, #8
 8016a88:	b2db      	uxtb	r3, r3
 8016a8a:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 8016a8c:	683b      	ldr	r3, [r7, #0]
 8016a8e:	b2db      	uxtb	r3, r3
 8016a90:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 8016a92:	f107 0308 	add.w	r3, r7, #8
 8016a96:	2206      	movs	r2, #6
 8016a98:	4619      	mov	r1, r3
 8016a9a:	2094      	movs	r0, #148	; 0x94
 8016a9c:	f000 fd1c 	bl	80174d8 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 8016aa0:	4b03      	ldr	r3, [pc, #12]	; (8016ab0 <SUBGRF_SetRxDutyCycle+0x54>)
 8016aa2:	2206      	movs	r2, #6
 8016aa4:	701a      	strb	r2, [r3, #0]
}
 8016aa6:	bf00      	nop
 8016aa8:	3710      	adds	r7, #16
 8016aaa:	46bd      	mov	sp, r7
 8016aac:	bd80      	pop	{r7, pc}
 8016aae:	bf00      	nop
 8016ab0:	20000df0 	.word	0x20000df0

08016ab4 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 8016ab4:	b580      	push	{r7, lr}
 8016ab6:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 8016ab8:	2200      	movs	r2, #0
 8016aba:	2100      	movs	r1, #0
 8016abc:	20c5      	movs	r0, #197	; 0xc5
 8016abe:	f000 fd0b 	bl	80174d8 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 8016ac2:	4b02      	ldr	r3, [pc, #8]	; (8016acc <SUBGRF_SetCad+0x18>)
 8016ac4:	2207      	movs	r2, #7
 8016ac6:	701a      	strb	r2, [r3, #0]
}
 8016ac8:	bf00      	nop
 8016aca:	bd80      	pop	{r7, pc}
 8016acc:	20000df0 	.word	0x20000df0

08016ad0 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 8016ad0:	b580      	push	{r7, lr}
 8016ad2:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 8016ad4:	2200      	movs	r2, #0
 8016ad6:	2100      	movs	r1, #0
 8016ad8:	20d1      	movs	r0, #209	; 0xd1
 8016ada:	f000 fcfd 	bl	80174d8 <SUBGRF_WriteCommand>
}
 8016ade:	bf00      	nop
 8016ae0:	bd80      	pop	{r7, pc}

08016ae2 <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 8016ae2:	b580      	push	{r7, lr}
 8016ae4:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 8016ae6:	2200      	movs	r2, #0
 8016ae8:	2100      	movs	r1, #0
 8016aea:	20d2      	movs	r0, #210	; 0xd2
 8016aec:	f000 fcf4 	bl	80174d8 <SUBGRF_WriteCommand>
}
 8016af0:	bf00      	nop
 8016af2:	bd80      	pop	{r7, pc}

08016af4 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 8016af4:	b580      	push	{r7, lr}
 8016af6:	b082      	sub	sp, #8
 8016af8:	af00      	add	r7, sp, #0
 8016afa:	4603      	mov	r3, r0
 8016afc:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8016afe:	1dfb      	adds	r3, r7, #7
 8016b00:	2201      	movs	r2, #1
 8016b02:	4619      	mov	r1, r3
 8016b04:	209f      	movs	r0, #159	; 0x9f
 8016b06:	f000 fce7 	bl	80174d8 <SUBGRF_WriteCommand>
}
 8016b0a:	bf00      	nop
 8016b0c:	3708      	adds	r7, #8
 8016b0e:	46bd      	mov	sp, r7
 8016b10:	bd80      	pop	{r7, pc}

08016b12 <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 8016b12:	b580      	push	{r7, lr}
 8016b14:	b084      	sub	sp, #16
 8016b16:	af00      	add	r7, sp, #0
 8016b18:	4603      	mov	r3, r0
 8016b1a:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 8016b1c:	1dfb      	adds	r3, r7, #7
 8016b1e:	2201      	movs	r2, #1
 8016b20:	4619      	mov	r1, r3
 8016b22:	20a0      	movs	r0, #160	; 0xa0
 8016b24:	f000 fcd8 	bl	80174d8 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 8016b28:	79fb      	ldrb	r3, [r7, #7]
 8016b2a:	2b3f      	cmp	r3, #63	; 0x3f
 8016b2c:	d91c      	bls.n	8016b68 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 8016b2e:	79fb      	ldrb	r3, [r7, #7]
 8016b30:	085b      	lsrs	r3, r3, #1
 8016b32:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 8016b34:	2300      	movs	r3, #0
 8016b36:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 8016b38:	2300      	movs	r3, #0
 8016b3a:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 8016b3c:	e005      	b.n	8016b4a <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 8016b3e:	7bfb      	ldrb	r3, [r7, #15]
 8016b40:	089b      	lsrs	r3, r3, #2
 8016b42:	73fb      	strb	r3, [r7, #15]
            exp++;
 8016b44:	7bbb      	ldrb	r3, [r7, #14]
 8016b46:	3301      	adds	r3, #1
 8016b48:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 8016b4a:	7bfb      	ldrb	r3, [r7, #15]
 8016b4c:	2b1f      	cmp	r3, #31
 8016b4e:	d8f6      	bhi.n	8016b3e <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 8016b50:	7bfb      	ldrb	r3, [r7, #15]
 8016b52:	00db      	lsls	r3, r3, #3
 8016b54:	b2da      	uxtb	r2, r3
 8016b56:	7bbb      	ldrb	r3, [r7, #14]
 8016b58:	4413      	add	r3, r2
 8016b5a:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 8016b5c:	7b7b      	ldrb	r3, [r7, #13]
 8016b5e:	4619      	mov	r1, r3
 8016b60:	f240 7006 	movw	r0, #1798	; 0x706
 8016b64:	f000 fc08 	bl	8017378 <SUBGRF_WriteRegister>
    }
}
 8016b68:	bf00      	nop
 8016b6a:	3710      	adds	r7, #16
 8016b6c:	46bd      	mov	sp, r7
 8016b6e:	bd80      	pop	{r7, pc}

08016b70 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 8016b70:	b580      	push	{r7, lr}
 8016b72:	b082      	sub	sp, #8
 8016b74:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Get RegulatorMode value from RBI */
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 8016b76:	f7f2 f929 	bl	8008dcc <RBI_IsDCDC>
 8016b7a:	4603      	mov	r3, r0
 8016b7c:	2b01      	cmp	r3, #1
 8016b7e:	d102      	bne.n	8016b86 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 8016b80:	2301      	movs	r3, #1
 8016b82:	71fb      	strb	r3, [r7, #7]
 8016b84:	e001      	b.n	8016b8a <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 8016b86:	2300      	movs	r3, #0
 8016b88:	71fb      	strb	r3, [r7, #7]
    }
    /* ST_WORKAROUND_END */
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 8016b8a:	1dfb      	adds	r3, r7, #7
 8016b8c:	2201      	movs	r2, #1
 8016b8e:	4619      	mov	r1, r3
 8016b90:	2096      	movs	r0, #150	; 0x96
 8016b92:	f000 fca1 	bl	80174d8 <SUBGRF_WriteCommand>
}
 8016b96:	bf00      	nop
 8016b98:	3708      	adds	r7, #8
 8016b9a:	46bd      	mov	sp, r7
 8016b9c:	bd80      	pop	{r7, pc}

08016b9e <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 8016b9e:	b580      	push	{r7, lr}
 8016ba0:	b084      	sub	sp, #16
 8016ba2:	af00      	add	r7, sp, #0
 8016ba4:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8016ba6:	793b      	ldrb	r3, [r7, #4]
 8016ba8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8016bac:	b2db      	uxtb	r3, r3
 8016bae:	019b      	lsls	r3, r3, #6
 8016bb0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8016bb2:	793b      	ldrb	r3, [r7, #4]
 8016bb4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8016bb8:	b2db      	uxtb	r3, r3
 8016bba:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8016bbc:	b25b      	sxtb	r3, r3
 8016bbe:	4313      	orrs	r3, r2
 8016bc0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8016bc2:	793b      	ldrb	r3, [r7, #4]
 8016bc4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8016bc8:	b2db      	uxtb	r3, r3
 8016bca:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8016bcc:	b25b      	sxtb	r3, r3
 8016bce:	4313      	orrs	r3, r2
 8016bd0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8016bd2:	793b      	ldrb	r3, [r7, #4]
 8016bd4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8016bd8:	b2db      	uxtb	r3, r3
 8016bda:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8016bdc:	b25b      	sxtb	r3, r3
 8016bde:	4313      	orrs	r3, r2
 8016be0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8016be2:	793b      	ldrb	r3, [r7, #4]
 8016be4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8016be8:	b2db      	uxtb	r3, r3
 8016bea:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8016bec:	b25b      	sxtb	r3, r3
 8016bee:	4313      	orrs	r3, r2
 8016bf0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8016bf2:	793b      	ldrb	r3, [r7, #4]
 8016bf4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8016bf8:	b2db      	uxtb	r3, r3
 8016bfa:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8016bfc:	b25b      	sxtb	r3, r3
 8016bfe:	4313      	orrs	r3, r2
 8016c00:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8016c02:	793b      	ldrb	r3, [r7, #4]
 8016c04:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8016c08:	b2db      	uxtb	r3, r3
 8016c0a:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8016c0c:	4313      	orrs	r3, r2
 8016c0e:	b25b      	sxtb	r3, r3
 8016c10:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8016c12:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8016c14:	f107 030f 	add.w	r3, r7, #15
 8016c18:	2201      	movs	r2, #1
 8016c1a:	4619      	mov	r1, r3
 8016c1c:	2089      	movs	r0, #137	; 0x89
 8016c1e:	f000 fc5b 	bl	80174d8 <SUBGRF_WriteCommand>
}
 8016c22:	bf00      	nop
 8016c24:	3710      	adds	r7, #16
 8016c26:	46bd      	mov	sp, r7
 8016c28:	bd80      	pop	{r7, pc}
	...

08016c2c <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 8016c2c:	b580      	push	{r7, lr}
 8016c2e:	b084      	sub	sp, #16
 8016c30:	af00      	add	r7, sp, #0
 8016c32:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 8016c34:	687b      	ldr	r3, [r7, #4]
 8016c36:	4a1b      	ldr	r2, [pc, #108]	; (8016ca4 <SUBGRF_CalibrateImage+0x78>)
 8016c38:	4293      	cmp	r3, r2
 8016c3a:	d904      	bls.n	8016c46 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 8016c3c:	23e1      	movs	r3, #225	; 0xe1
 8016c3e:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 8016c40:	23e9      	movs	r3, #233	; 0xe9
 8016c42:	737b      	strb	r3, [r7, #13]
 8016c44:	e022      	b.n	8016c8c <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 850000000 )
 8016c46:	687b      	ldr	r3, [r7, #4]
 8016c48:	4a17      	ldr	r2, [pc, #92]	; (8016ca8 <SUBGRF_CalibrateImage+0x7c>)
 8016c4a:	4293      	cmp	r3, r2
 8016c4c:	d904      	bls.n	8016c58 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 8016c4e:	23d7      	movs	r3, #215	; 0xd7
 8016c50:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 8016c52:	23db      	movs	r3, #219	; 0xdb
 8016c54:	737b      	strb	r3, [r7, #13]
 8016c56:	e019      	b.n	8016c8c <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 770000000 )
 8016c58:	687b      	ldr	r3, [r7, #4]
 8016c5a:	4a14      	ldr	r2, [pc, #80]	; (8016cac <SUBGRF_CalibrateImage+0x80>)
 8016c5c:	4293      	cmp	r3, r2
 8016c5e:	d904      	bls.n	8016c6a <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 8016c60:	23c1      	movs	r3, #193	; 0xc1
 8016c62:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 8016c64:	23c5      	movs	r3, #197	; 0xc5
 8016c66:	737b      	strb	r3, [r7, #13]
 8016c68:	e010      	b.n	8016c8c <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 460000000 )
 8016c6a:	687b      	ldr	r3, [r7, #4]
 8016c6c:	4a10      	ldr	r2, [pc, #64]	; (8016cb0 <SUBGRF_CalibrateImage+0x84>)
 8016c6e:	4293      	cmp	r3, r2
 8016c70:	d904      	bls.n	8016c7c <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 8016c72:	2375      	movs	r3, #117	; 0x75
 8016c74:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 8016c76:	2381      	movs	r3, #129	; 0x81
 8016c78:	737b      	strb	r3, [r7, #13]
 8016c7a:	e007      	b.n	8016c8c <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 425000000 )
 8016c7c:	687b      	ldr	r3, [r7, #4]
 8016c7e:	4a0d      	ldr	r2, [pc, #52]	; (8016cb4 <SUBGRF_CalibrateImage+0x88>)
 8016c80:	4293      	cmp	r3, r2
 8016c82:	d903      	bls.n	8016c8c <SUBGRF_CalibrateImage+0x60>
    {
        calFreq[0] = 0x6B;
 8016c84:	236b      	movs	r3, #107	; 0x6b
 8016c86:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 8016c88:	236f      	movs	r3, #111	; 0x6f
 8016c8a:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 8016c8c:	f107 030c 	add.w	r3, r7, #12
 8016c90:	2202      	movs	r2, #2
 8016c92:	4619      	mov	r1, r3
 8016c94:	2098      	movs	r0, #152	; 0x98
 8016c96:	f000 fc1f 	bl	80174d8 <SUBGRF_WriteCommand>
}
 8016c9a:	bf00      	nop
 8016c9c:	3710      	adds	r7, #16
 8016c9e:	46bd      	mov	sp, r7
 8016ca0:	bd80      	pop	{r7, pc}
 8016ca2:	bf00      	nop
 8016ca4:	35a4e900 	.word	0x35a4e900
 8016ca8:	32a9f880 	.word	0x32a9f880
 8016cac:	2de54480 	.word	0x2de54480
 8016cb0:	1b6b0b00 	.word	0x1b6b0b00
 8016cb4:	1954fc40 	.word	0x1954fc40

08016cb8 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 8016cb8:	b590      	push	{r4, r7, lr}
 8016cba:	b085      	sub	sp, #20
 8016cbc:	af00      	add	r7, sp, #0
 8016cbe:	4604      	mov	r4, r0
 8016cc0:	4608      	mov	r0, r1
 8016cc2:	4611      	mov	r1, r2
 8016cc4:	461a      	mov	r2, r3
 8016cc6:	4623      	mov	r3, r4
 8016cc8:	71fb      	strb	r3, [r7, #7]
 8016cca:	4603      	mov	r3, r0
 8016ccc:	71bb      	strb	r3, [r7, #6]
 8016cce:	460b      	mov	r3, r1
 8016cd0:	717b      	strb	r3, [r7, #5]
 8016cd2:	4613      	mov	r3, r2
 8016cd4:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 8016cd6:	79fb      	ldrb	r3, [r7, #7]
 8016cd8:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 8016cda:	79bb      	ldrb	r3, [r7, #6]
 8016cdc:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 8016cde:	797b      	ldrb	r3, [r7, #5]
 8016ce0:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 8016ce2:	793b      	ldrb	r3, [r7, #4]
 8016ce4:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8016ce6:	f107 030c 	add.w	r3, r7, #12
 8016cea:	2204      	movs	r2, #4
 8016cec:	4619      	mov	r1, r3
 8016cee:	2095      	movs	r0, #149	; 0x95
 8016cf0:	f000 fbf2 	bl	80174d8 <SUBGRF_WriteCommand>
}
 8016cf4:	bf00      	nop
 8016cf6:	3714      	adds	r7, #20
 8016cf8:	46bd      	mov	sp, r7
 8016cfa:	bd90      	pop	{r4, r7, pc}

08016cfc <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 8016cfc:	b590      	push	{r4, r7, lr}
 8016cfe:	b085      	sub	sp, #20
 8016d00:	af00      	add	r7, sp, #0
 8016d02:	4604      	mov	r4, r0
 8016d04:	4608      	mov	r0, r1
 8016d06:	4611      	mov	r1, r2
 8016d08:	461a      	mov	r2, r3
 8016d0a:	4623      	mov	r3, r4
 8016d0c:	80fb      	strh	r3, [r7, #6]
 8016d0e:	4603      	mov	r3, r0
 8016d10:	80bb      	strh	r3, [r7, #4]
 8016d12:	460b      	mov	r3, r1
 8016d14:	807b      	strh	r3, [r7, #2]
 8016d16:	4613      	mov	r3, r2
 8016d18:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8016d1a:	88fb      	ldrh	r3, [r7, #6]
 8016d1c:	0a1b      	lsrs	r3, r3, #8
 8016d1e:	b29b      	uxth	r3, r3
 8016d20:	b2db      	uxtb	r3, r3
 8016d22:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8016d24:	88fb      	ldrh	r3, [r7, #6]
 8016d26:	b2db      	uxtb	r3, r3
 8016d28:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8016d2a:	88bb      	ldrh	r3, [r7, #4]
 8016d2c:	0a1b      	lsrs	r3, r3, #8
 8016d2e:	b29b      	uxth	r3, r3
 8016d30:	b2db      	uxtb	r3, r3
 8016d32:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8016d34:	88bb      	ldrh	r3, [r7, #4]
 8016d36:	b2db      	uxtb	r3, r3
 8016d38:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8016d3a:	887b      	ldrh	r3, [r7, #2]
 8016d3c:	0a1b      	lsrs	r3, r3, #8
 8016d3e:	b29b      	uxth	r3, r3
 8016d40:	b2db      	uxtb	r3, r3
 8016d42:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8016d44:	887b      	ldrh	r3, [r7, #2]
 8016d46:	b2db      	uxtb	r3, r3
 8016d48:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8016d4a:	883b      	ldrh	r3, [r7, #0]
 8016d4c:	0a1b      	lsrs	r3, r3, #8
 8016d4e:	b29b      	uxth	r3, r3
 8016d50:	b2db      	uxtb	r3, r3
 8016d52:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8016d54:	883b      	ldrh	r3, [r7, #0]
 8016d56:	b2db      	uxtb	r3, r3
 8016d58:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8016d5a:	f107 0308 	add.w	r3, r7, #8
 8016d5e:	2208      	movs	r2, #8
 8016d60:	4619      	mov	r1, r3
 8016d62:	2008      	movs	r0, #8
 8016d64:	f000 fbb8 	bl	80174d8 <SUBGRF_WriteCommand>
}
 8016d68:	bf00      	nop
 8016d6a:	3714      	adds	r7, #20
 8016d6c:	46bd      	mov	sp, r7
 8016d6e:	bd90      	pop	{r4, r7, pc}

08016d70 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 8016d70:	b580      	push	{r7, lr}
 8016d72:	b084      	sub	sp, #16
 8016d74:	af00      	add	r7, sp, #0
 8016d76:	4603      	mov	r3, r0
 8016d78:	6039      	str	r1, [r7, #0]
 8016d7a:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 8016d7c:	79fb      	ldrb	r3, [r7, #7]
 8016d7e:	f003 0307 	and.w	r3, r3, #7
 8016d82:	b2db      	uxtb	r3, r3
 8016d84:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8016d86:	683b      	ldr	r3, [r7, #0]
 8016d88:	0c1b      	lsrs	r3, r3, #16
 8016d8a:	b2db      	uxtb	r3, r3
 8016d8c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8016d8e:	683b      	ldr	r3, [r7, #0]
 8016d90:	0a1b      	lsrs	r3, r3, #8
 8016d92:	b2db      	uxtb	r3, r3
 8016d94:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 8016d96:	683b      	ldr	r3, [r7, #0]
 8016d98:	b2db      	uxtb	r3, r3
 8016d9a:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8016d9c:	f107 030c 	add.w	r3, r7, #12
 8016da0:	2204      	movs	r2, #4
 8016da2:	4619      	mov	r1, r3
 8016da4:	2097      	movs	r0, #151	; 0x97
 8016da6:	f000 fb97 	bl	80174d8 <SUBGRF_WriteCommand>
}
 8016daa:	bf00      	nop
 8016dac:	3710      	adds	r7, #16
 8016dae:	46bd      	mov	sp, r7
 8016db0:	bd80      	pop	{r7, pc}
	...

08016db4 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 8016db4:	b5b0      	push	{r4, r5, r7, lr}
 8016db6:	b084      	sub	sp, #16
 8016db8:	af00      	add	r7, sp, #0
 8016dba:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 8016dbc:	2300      	movs	r3, #0
 8016dbe:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 8016dc0:	4b1b      	ldr	r3, [pc, #108]	; (8016e30 <SUBGRF_SetRfFrequency+0x7c>)
 8016dc2:	781b      	ldrb	r3, [r3, #0]
 8016dc4:	f083 0301 	eor.w	r3, r3, #1
 8016dc8:	b2db      	uxtb	r3, r3
 8016dca:	2b00      	cmp	r3, #0
 8016dcc:	d005      	beq.n	8016dda <SUBGRF_SetRfFrequency+0x26>
    {
        SUBGRF_CalibrateImage( frequency );
 8016dce:	6878      	ldr	r0, [r7, #4]
 8016dd0:	f7ff ff2c 	bl	8016c2c <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 8016dd4:	4b16      	ldr	r3, [pc, #88]	; (8016e30 <SUBGRF_SetRfFrequency+0x7c>)
 8016dd6:	2201      	movs	r2, #1
 8016dd8:	701a      	strb	r2, [r3, #0]
    }
    /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
    SX_FREQ_TO_CHANNEL(chan, frequency);   
 8016dda:	687b      	ldr	r3, [r7, #4]
 8016ddc:	461a      	mov	r2, r3
 8016dde:	f04f 0300 	mov.w	r3, #0
 8016de2:	09d5      	lsrs	r5, r2, #7
 8016de4:	0654      	lsls	r4, r2, #25
 8016de6:	4a13      	ldr	r2, [pc, #76]	; (8016e34 <SUBGRF_SetRfFrequency+0x80>)
 8016de8:	f04f 0300 	mov.w	r3, #0
 8016dec:	4620      	mov	r0, r4
 8016dee:	4629      	mov	r1, r5
 8016df0:	f7e9 fd44 	bl	800087c <__aeabi_uldivmod>
 8016df4:	4602      	mov	r2, r0
 8016df6:	460b      	mov	r3, r1
 8016df8:	4613      	mov	r3, r2
 8016dfa:	60fb      	str	r3, [r7, #12]
    /* ST_WORKAROUND_END */
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8016dfc:	68fb      	ldr	r3, [r7, #12]
 8016dfe:	0e1b      	lsrs	r3, r3, #24
 8016e00:	b2db      	uxtb	r3, r3
 8016e02:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 8016e04:	68fb      	ldr	r3, [r7, #12]
 8016e06:	0c1b      	lsrs	r3, r3, #16
 8016e08:	b2db      	uxtb	r3, r3
 8016e0a:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 8016e0c:	68fb      	ldr	r3, [r7, #12]
 8016e0e:	0a1b      	lsrs	r3, r3, #8
 8016e10:	b2db      	uxtb	r3, r3
 8016e12:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 8016e14:	68fb      	ldr	r3, [r7, #12]
 8016e16:	b2db      	uxtb	r3, r3
 8016e18:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8016e1a:	f107 0308 	add.w	r3, r7, #8
 8016e1e:	2204      	movs	r2, #4
 8016e20:	4619      	mov	r1, r3
 8016e22:	2086      	movs	r0, #134	; 0x86
 8016e24:	f000 fb58 	bl	80174d8 <SUBGRF_WriteCommand>
}
 8016e28:	bf00      	nop
 8016e2a:	3710      	adds	r7, #16
 8016e2c:	46bd      	mov	sp, r7
 8016e2e:	bdb0      	pop	{r4, r5, r7, pc}
 8016e30:	20000df8 	.word	0x20000df8
 8016e34:	01e84800 	.word	0x01e84800

08016e38 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 8016e38:	b580      	push	{r7, lr}
 8016e3a:	b082      	sub	sp, #8
 8016e3c:	af00      	add	r7, sp, #0
 8016e3e:	4603      	mov	r3, r0
 8016e40:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 8016e42:	79fa      	ldrb	r2, [r7, #7]
 8016e44:	4b09      	ldr	r3, [pc, #36]	; (8016e6c <SUBGRF_SetPacketType+0x34>)
 8016e46:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 8016e48:	79fb      	ldrb	r3, [r7, #7]
 8016e4a:	2b00      	cmp	r3, #0
 8016e4c:	d104      	bne.n	8016e58 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 8016e4e:	2100      	movs	r1, #0
 8016e50:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8016e54:	f000 fa90 	bl	8017378 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8016e58:	1dfb      	adds	r3, r7, #7
 8016e5a:	2201      	movs	r2, #1
 8016e5c:	4619      	mov	r1, r3
 8016e5e:	208a      	movs	r0, #138	; 0x8a
 8016e60:	f000 fb3a 	bl	80174d8 <SUBGRF_WriteCommand>
}
 8016e64:	bf00      	nop
 8016e66:	3708      	adds	r7, #8
 8016e68:	46bd      	mov	sp, r7
 8016e6a:	bd80      	pop	{r7, pc}
 8016e6c:	20000df1 	.word	0x20000df1

08016e70 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 8016e70:	b480      	push	{r7}
 8016e72:	af00      	add	r7, sp, #0
    return PacketType;
 8016e74:	4b02      	ldr	r3, [pc, #8]	; (8016e80 <SUBGRF_GetPacketType+0x10>)
 8016e76:	781b      	ldrb	r3, [r3, #0]
}
 8016e78:	4618      	mov	r0, r3
 8016e7a:	46bd      	mov	sp, r7
 8016e7c:	bc80      	pop	{r7}
 8016e7e:	4770      	bx	lr
 8016e80:	20000df1 	.word	0x20000df1

08016e84 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime ) 
{
 8016e84:	b580      	push	{r7, lr}
 8016e86:	b084      	sub	sp, #16
 8016e88:	af00      	add	r7, sp, #0
 8016e8a:	4603      	mov	r3, r0
 8016e8c:	71fb      	strb	r3, [r7, #7]
 8016e8e:	460b      	mov	r3, r1
 8016e90:	71bb      	strb	r3, [r7, #6]
 8016e92:	4613      	mov	r3, r2
 8016e94:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];

    if( paSelect == RFO_LP )
 8016e96:	79fb      	ldrb	r3, [r7, #7]
 8016e98:	2b01      	cmp	r3, #1
 8016e9a:	d124      	bne.n	8016ee6 <SUBGRF_SetTxParams+0x62>
    {
        if( power == 15 )
 8016e9c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8016ea0:	2b0f      	cmp	r3, #15
 8016ea2:	d106      	bne.n	8016eb2 <SUBGRF_SetTxParams+0x2e>
        {
            SUBGRF_SetPaConfig( 0x06, 0x00, 0x01, 0x01 );
 8016ea4:	2301      	movs	r3, #1
 8016ea6:	2201      	movs	r2, #1
 8016ea8:	2100      	movs	r1, #0
 8016eaa:	2006      	movs	r0, #6
 8016eac:	f7ff ff04 	bl	8016cb8 <SUBGRF_SetPaConfig>
 8016eb0:	e005      	b.n	8016ebe <SUBGRF_SetTxParams+0x3a>
        }
        else
        {
            SUBGRF_SetPaConfig( 0x04, 0x00, 0x01, 0x01 );
 8016eb2:	2301      	movs	r3, #1
 8016eb4:	2201      	movs	r2, #1
 8016eb6:	2100      	movs	r1, #0
 8016eb8:	2004      	movs	r0, #4
 8016eba:	f7ff fefd 	bl	8016cb8 <SUBGRF_SetPaConfig>
        }
        if( power >= 14 )
 8016ebe:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8016ec2:	2b0d      	cmp	r3, #13
 8016ec4:	dd02      	ble.n	8016ecc <SUBGRF_SetTxParams+0x48>
        {
            power = 14;
 8016ec6:	230e      	movs	r3, #14
 8016ec8:	71bb      	strb	r3, [r7, #6]
 8016eca:	e006      	b.n	8016eda <SUBGRF_SetTxParams+0x56>
        }
        else if( power < -17 )
 8016ecc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8016ed0:	f113 0f11 	cmn.w	r3, #17
 8016ed4:	da01      	bge.n	8016eda <SUBGRF_SetTxParams+0x56>
        {
            power = -17;
 8016ed6:	23ef      	movs	r3, #239	; 0xef
 8016ed8:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister( REG_OCP, 0x18 ); // current max is 80 mA for the whole device
 8016eda:	2118      	movs	r1, #24
 8016edc:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8016ee0:	f000 fa4a 	bl	8017378 <SUBGRF_WriteRegister>
 8016ee4:	e025      	b.n	8016f32 <SUBGRF_SetTxParams+0xae>
    }
    else // rfo_hp
    {
        // WORKAROUND - Better Resistance of the SX1262 Tx to Antenna Mismatch, see DS_SX1261-2_V1.2 datasheet chapter 15.2
        // RegTxClampConfig = @address 0x08D8
        SUBGRF_WriteRegister( REG_TX_CLAMP, SUBGRF_ReadRegister( REG_TX_CLAMP ) | ( 0x0F << 1 ) );
 8016ee6:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8016eea:	f000 fa59 	bl	80173a0 <SUBGRF_ReadRegister>
 8016eee:	4603      	mov	r3, r0
 8016ef0:	f043 031e 	orr.w	r3, r3, #30
 8016ef4:	b2db      	uxtb	r3, r3
 8016ef6:	4619      	mov	r1, r3
 8016ef8:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8016efc:	f000 fa3c 	bl	8017378 <SUBGRF_WriteRegister>
        // WORKAROUND END

        SUBGRF_SetPaConfig( 0x04, 0x07, 0x00, 0x01 );
 8016f00:	2301      	movs	r3, #1
 8016f02:	2200      	movs	r2, #0
 8016f04:	2107      	movs	r1, #7
 8016f06:	2004      	movs	r0, #4
 8016f08:	f7ff fed6 	bl	8016cb8 <SUBGRF_SetPaConfig>
        if( power > 22 )
 8016f0c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8016f10:	2b16      	cmp	r3, #22
 8016f12:	dd02      	ble.n	8016f1a <SUBGRF_SetTxParams+0x96>
        {
            power = 22;
 8016f14:	2316      	movs	r3, #22
 8016f16:	71bb      	strb	r3, [r7, #6]
 8016f18:	e006      	b.n	8016f28 <SUBGRF_SetTxParams+0xa4>
        }
        else if( power < -9 )
 8016f1a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8016f1e:	f113 0f09 	cmn.w	r3, #9
 8016f22:	da01      	bge.n	8016f28 <SUBGRF_SetTxParams+0xa4>
        {
            power = -9;
 8016f24:	23f7      	movs	r3, #247	; 0xf7
 8016f26:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister( REG_OCP, 0x38 ); // current max 160mA for the whole device
 8016f28:	2138      	movs	r1, #56	; 0x38
 8016f2a:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8016f2e:	f000 fa23 	bl	8017378 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 8016f32:	79bb      	ldrb	r3, [r7, #6]
 8016f34:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )rampTime;
 8016f36:	797b      	ldrb	r3, [r7, #5]
 8016f38:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
 8016f3a:	f107 030c 	add.w	r3, r7, #12
 8016f3e:	2202      	movs	r2, #2
 8016f40:	4619      	mov	r1, r3
 8016f42:	208e      	movs	r0, #142	; 0x8e
 8016f44:	f000 fac8 	bl	80174d8 <SUBGRF_WriteCommand>
}
 8016f48:	bf00      	nop
 8016f4a:	3710      	adds	r7, #16
 8016f4c:	46bd      	mov	sp, r7
 8016f4e:	bd80      	pop	{r7, pc}

08016f50 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 8016f50:	b5b0      	push	{r4, r5, r7, lr}
 8016f52:	b086      	sub	sp, #24
 8016f54:	af00      	add	r7, sp, #0
 8016f56:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 8016f58:	2300      	movs	r3, #0
 8016f5a:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8016f5c:	4a5e      	ldr	r2, [pc, #376]	; (80170d8 <SUBGRF_SetModulationParams+0x188>)
 8016f5e:	f107 0308 	add.w	r3, r7, #8
 8016f62:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016f66:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 8016f6a:	687b      	ldr	r3, [r7, #4]
 8016f6c:	781a      	ldrb	r2, [r3, #0]
 8016f6e:	4b5b      	ldr	r3, [pc, #364]	; (80170dc <SUBGRF_SetModulationParams+0x18c>)
 8016f70:	781b      	ldrb	r3, [r3, #0]
 8016f72:	429a      	cmp	r2, r3
 8016f74:	d004      	beq.n	8016f80 <SUBGRF_SetModulationParams+0x30>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8016f76:	687b      	ldr	r3, [r7, #4]
 8016f78:	781b      	ldrb	r3, [r3, #0]
 8016f7a:	4618      	mov	r0, r3
 8016f7c:	f7ff ff5c 	bl	8016e38 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 8016f80:	687b      	ldr	r3, [r7, #4]
 8016f82:	781b      	ldrb	r3, [r3, #0]
 8016f84:	2b03      	cmp	r3, #3
 8016f86:	f200 80a2 	bhi.w	80170ce <SUBGRF_SetModulationParams+0x17e>
 8016f8a:	a201      	add	r2, pc, #4	; (adr r2, 8016f90 <SUBGRF_SetModulationParams+0x40>)
 8016f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016f90:	08016fa1 	.word	0x08016fa1
 8016f94:	0801705d 	.word	0x0801705d
 8016f98:	0801701f 	.word	0x0801701f
 8016f9c:	0801708b 	.word	0x0801708b
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 8016fa0:	2308      	movs	r3, #8
 8016fa2:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 8016fa4:	687b      	ldr	r3, [r7, #4]
 8016fa6:	685b      	ldr	r3, [r3, #4]
 8016fa8:	4a4d      	ldr	r2, [pc, #308]	; (80170e0 <SUBGRF_SetModulationParams+0x190>)
 8016faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8016fae:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8016fb0:	697b      	ldr	r3, [r7, #20]
 8016fb2:	0c1b      	lsrs	r3, r3, #16
 8016fb4:	b2db      	uxtb	r3, r3
 8016fb6:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8016fb8:	697b      	ldr	r3, [r7, #20]
 8016fba:	0a1b      	lsrs	r3, r3, #8
 8016fbc:	b2db      	uxtb	r3, r3
 8016fbe:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8016fc0:	697b      	ldr	r3, [r7, #20]
 8016fc2:	b2db      	uxtb	r3, r3
 8016fc4:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8016fc6:	687b      	ldr	r3, [r7, #4]
 8016fc8:	7b1b      	ldrb	r3, [r3, #12]
 8016fca:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8016fcc:	687b      	ldr	r3, [r7, #4]
 8016fce:	7b5b      	ldrb	r3, [r3, #13]
 8016fd0:	733b      	strb	r3, [r7, #12]
        /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 8016fd2:	687b      	ldr	r3, [r7, #4]
 8016fd4:	689b      	ldr	r3, [r3, #8]
 8016fd6:	461a      	mov	r2, r3
 8016fd8:	f04f 0300 	mov.w	r3, #0
 8016fdc:	09d5      	lsrs	r5, r2, #7
 8016fde:	0654      	lsls	r4, r2, #25
 8016fe0:	4a40      	ldr	r2, [pc, #256]	; (80170e4 <SUBGRF_SetModulationParams+0x194>)
 8016fe2:	f04f 0300 	mov.w	r3, #0
 8016fe6:	4620      	mov	r0, r4
 8016fe8:	4629      	mov	r1, r5
 8016fea:	f7e9 fc47 	bl	800087c <__aeabi_uldivmod>
 8016fee:	4602      	mov	r2, r0
 8016ff0:	460b      	mov	r3, r1
 8016ff2:	4613      	mov	r3, r2
 8016ff4:	617b      	str	r3, [r7, #20]
        /* ST_WORKAROUND_END */
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8016ff6:	697b      	ldr	r3, [r7, #20]
 8016ff8:	0c1b      	lsrs	r3, r3, #16
 8016ffa:	b2db      	uxtb	r3, r3
 8016ffc:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8016ffe:	697b      	ldr	r3, [r7, #20]
 8017000:	0a1b      	lsrs	r3, r3, #8
 8017002:	b2db      	uxtb	r3, r3
 8017004:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 8017006:	697b      	ldr	r3, [r7, #20]
 8017008:	b2db      	uxtb	r3, r3
 801700a:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801700c:	7cfb      	ldrb	r3, [r7, #19]
 801700e:	b29a      	uxth	r2, r3
 8017010:	f107 0308 	add.w	r3, r7, #8
 8017014:	4619      	mov	r1, r3
 8017016:	208b      	movs	r0, #139	; 0x8b
 8017018:	f000 fa5e 	bl	80174d8 <SUBGRF_WriteCommand>
        break;
 801701c:	e058      	b.n	80170d0 <SUBGRF_SetModulationParams+0x180>
    case PACKET_TYPE_BPSK:
        n = 4;
 801701e:	2304      	movs	r3, #4
 8017020:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8017022:	687b      	ldr	r3, [r7, #4]
 8017024:	691b      	ldr	r3, [r3, #16]
 8017026:	4a2e      	ldr	r2, [pc, #184]	; (80170e0 <SUBGRF_SetModulationParams+0x190>)
 8017028:	fbb2 f3f3 	udiv	r3, r2, r3
 801702c:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801702e:	697b      	ldr	r3, [r7, #20]
 8017030:	0c1b      	lsrs	r3, r3, #16
 8017032:	b2db      	uxtb	r3, r3
 8017034:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8017036:	697b      	ldr	r3, [r7, #20]
 8017038:	0a1b      	lsrs	r3, r3, #8
 801703a:	b2db      	uxtb	r3, r3
 801703c:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801703e:	697b      	ldr	r3, [r7, #20]
 8017040:	b2db      	uxtb	r3, r3
 8017042:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8017044:	687b      	ldr	r3, [r7, #4]
 8017046:	7d1b      	ldrb	r3, [r3, #20]
 8017048:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801704a:	7cfb      	ldrb	r3, [r7, #19]
 801704c:	b29a      	uxth	r2, r3
 801704e:	f107 0308 	add.w	r3, r7, #8
 8017052:	4619      	mov	r1, r3
 8017054:	208b      	movs	r0, #139	; 0x8b
 8017056:	f000 fa3f 	bl	80174d8 <SUBGRF_WriteCommand>
        break;
 801705a:	e039      	b.n	80170d0 <SUBGRF_SetModulationParams+0x180>
    case PACKET_TYPE_LORA:
        n = 4;
 801705c:	2304      	movs	r3, #4
 801705e:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8017060:	687b      	ldr	r3, [r7, #4]
 8017062:	7e1b      	ldrb	r3, [r3, #24]
 8017064:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8017066:	687b      	ldr	r3, [r7, #4]
 8017068:	7e5b      	ldrb	r3, [r3, #25]
 801706a:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 801706c:	687b      	ldr	r3, [r7, #4]
 801706e:	7e9b      	ldrb	r3, [r3, #26]
 8017070:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8017072:	687b      	ldr	r3, [r7, #4]
 8017074:	7edb      	ldrb	r3, [r3, #27]
 8017076:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8017078:	7cfb      	ldrb	r3, [r7, #19]
 801707a:	b29a      	uxth	r2, r3
 801707c:	f107 0308 	add.w	r3, r7, #8
 8017080:	4619      	mov	r1, r3
 8017082:	208b      	movs	r0, #139	; 0x8b
 8017084:	f000 fa28 	bl	80174d8 <SUBGRF_WriteCommand>

        break;
 8017088:	e022      	b.n	80170d0 <SUBGRF_SetModulationParams+0x180>
    case PACKET_TYPE_GMSK:
        n = 5;
 801708a:	2305      	movs	r3, #5
 801708c:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 801708e:	687b      	ldr	r3, [r7, #4]
 8017090:	685b      	ldr	r3, [r3, #4]
 8017092:	4a13      	ldr	r2, [pc, #76]	; (80170e0 <SUBGRF_SetModulationParams+0x190>)
 8017094:	fbb2 f3f3 	udiv	r3, r2, r3
 8017098:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801709a:	697b      	ldr	r3, [r7, #20]
 801709c:	0c1b      	lsrs	r3, r3, #16
 801709e:	b2db      	uxtb	r3, r3
 80170a0:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80170a2:	697b      	ldr	r3, [r7, #20]
 80170a4:	0a1b      	lsrs	r3, r3, #8
 80170a6:	b2db      	uxtb	r3, r3
 80170a8:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 80170aa:	697b      	ldr	r3, [r7, #20]
 80170ac:	b2db      	uxtb	r3, r3
 80170ae:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 80170b0:	687b      	ldr	r3, [r7, #4]
 80170b2:	7b1b      	ldrb	r3, [r3, #12]
 80170b4:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 80170b6:	687b      	ldr	r3, [r7, #4]
 80170b8:	7b5b      	ldrb	r3, [r3, #13]
 80170ba:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80170bc:	7cfb      	ldrb	r3, [r7, #19]
 80170be:	b29a      	uxth	r2, r3
 80170c0:	f107 0308 	add.w	r3, r7, #8
 80170c4:	4619      	mov	r1, r3
 80170c6:	208b      	movs	r0, #139	; 0x8b
 80170c8:	f000 fa06 	bl	80174d8 <SUBGRF_WriteCommand>
        break;
 80170cc:	e000      	b.n	80170d0 <SUBGRF_SetModulationParams+0x180>
    default:
    case PACKET_TYPE_NONE:
      break;
 80170ce:	bf00      	nop
    }
}
 80170d0:	bf00      	nop
 80170d2:	3718      	adds	r7, #24
 80170d4:	46bd      	mov	sp, r7
 80170d6:	bdb0      	pop	{r4, r5, r7, pc}
 80170d8:	08019790 	.word	0x08019790
 80170dc:	20000df1 	.word	0x20000df1
 80170e0:	3d090000 	.word	0x3d090000
 80170e4:	01e84800 	.word	0x01e84800

080170e8 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 80170e8:	b580      	push	{r7, lr}
 80170ea:	b086      	sub	sp, #24
 80170ec:	af00      	add	r7, sp, #0
 80170ee:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 80170f0:	2300      	movs	r3, #0
 80170f2:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 80170f4:	4a48      	ldr	r2, [pc, #288]	; (8017218 <SUBGRF_SetPacketParams+0x130>)
 80170f6:	f107 030c 	add.w	r3, r7, #12
 80170fa:	ca07      	ldmia	r2, {r0, r1, r2}
 80170fc:	c303      	stmia	r3!, {r0, r1}
 80170fe:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 8017100:	687b      	ldr	r3, [r7, #4]
 8017102:	781a      	ldrb	r2, [r3, #0]
 8017104:	4b45      	ldr	r3, [pc, #276]	; (801721c <SUBGRF_SetPacketParams+0x134>)
 8017106:	781b      	ldrb	r3, [r3, #0]
 8017108:	429a      	cmp	r2, r3
 801710a:	d004      	beq.n	8017116 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 801710c:	687b      	ldr	r3, [r7, #4]
 801710e:	781b      	ldrb	r3, [r3, #0]
 8017110:	4618      	mov	r0, r3
 8017112:	f7ff fe91 	bl	8016e38 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 8017116:	687b      	ldr	r3, [r7, #4]
 8017118:	781b      	ldrb	r3, [r3, #0]
 801711a:	2b03      	cmp	r3, #3
 801711c:	d878      	bhi.n	8017210 <SUBGRF_SetPacketParams+0x128>
 801711e:	a201      	add	r2, pc, #4	; (adr r2, 8017124 <SUBGRF_SetPacketParams+0x3c>)
 8017120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017124:	08017135 	.word	0x08017135
 8017128:	080171c5 	.word	0x080171c5
 801712c:	080171b9 	.word	0x080171b9
 8017130:	08017135 	.word	0x08017135
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8017134:	687b      	ldr	r3, [r7, #4]
 8017136:	7a5b      	ldrb	r3, [r3, #9]
 8017138:	2bf1      	cmp	r3, #241	; 0xf1
 801713a:	d10a      	bne.n	8017152 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 801713c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8017140:	f7ff fb20 	bl	8016784 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8017144:	f248 0005 	movw	r0, #32773	; 0x8005
 8017148:	f7ff fb3c 	bl	80167c4 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 801714c:	2302      	movs	r3, #2
 801714e:	75bb      	strb	r3, [r7, #22]
 8017150:	e011      	b.n	8017176 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8017152:	687b      	ldr	r3, [r7, #4]
 8017154:	7a5b      	ldrb	r3, [r3, #9]
 8017156:	2bf2      	cmp	r3, #242	; 0xf2
 8017158:	d10a      	bne.n	8017170 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 801715a:	f641 500f 	movw	r0, #7439	; 0x1d0f
 801715e:	f7ff fb11 	bl	8016784 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8017162:	f241 0021 	movw	r0, #4129	; 0x1021
 8017166:	f7ff fb2d 	bl	80167c4 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 801716a:	2306      	movs	r3, #6
 801716c:	75bb      	strb	r3, [r7, #22]
 801716e:	e002      	b.n	8017176 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 8017170:	687b      	ldr	r3, [r7, #4]
 8017172:	7a5b      	ldrb	r3, [r3, #9]
 8017174:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 8017176:	2309      	movs	r3, #9
 8017178:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 801717a:	687b      	ldr	r3, [r7, #4]
 801717c:	885b      	ldrh	r3, [r3, #2]
 801717e:	0a1b      	lsrs	r3, r3, #8
 8017180:	b29b      	uxth	r3, r3
 8017182:	b2db      	uxtb	r3, r3
 8017184:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8017186:	687b      	ldr	r3, [r7, #4]
 8017188:	885b      	ldrh	r3, [r3, #2]
 801718a:	b2db      	uxtb	r3, r3
 801718c:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 801718e:	687b      	ldr	r3, [r7, #4]
 8017190:	791b      	ldrb	r3, [r3, #4]
 8017192:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8017194:	687b      	ldr	r3, [r7, #4]
 8017196:	795b      	ldrb	r3, [r3, #5]
 8017198:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 801719a:	687b      	ldr	r3, [r7, #4]
 801719c:	799b      	ldrb	r3, [r3, #6]
 801719e:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 80171a0:	687b      	ldr	r3, [r7, #4]
 80171a2:	79db      	ldrb	r3, [r3, #7]
 80171a4:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 80171a6:	687b      	ldr	r3, [r7, #4]
 80171a8:	7a1b      	ldrb	r3, [r3, #8]
 80171aa:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 80171ac:	7dbb      	ldrb	r3, [r7, #22]
 80171ae:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 80171b0:	687b      	ldr	r3, [r7, #4]
 80171b2:	7a9b      	ldrb	r3, [r3, #10]
 80171b4:	753b      	strb	r3, [r7, #20]
        break;
 80171b6:	e022      	b.n	80171fe <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 80171b8:	2301      	movs	r3, #1
 80171ba:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 80171bc:	687b      	ldr	r3, [r7, #4]
 80171be:	7b1b      	ldrb	r3, [r3, #12]
 80171c0:	733b      	strb	r3, [r7, #12]
        break;
 80171c2:	e01c      	b.n	80171fe <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 80171c4:	2306      	movs	r3, #6
 80171c6:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 80171c8:	687b      	ldr	r3, [r7, #4]
 80171ca:	89db      	ldrh	r3, [r3, #14]
 80171cc:	0a1b      	lsrs	r3, r3, #8
 80171ce:	b29b      	uxth	r3, r3
 80171d0:	b2db      	uxtb	r3, r3
 80171d2:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 80171d4:	687b      	ldr	r3, [r7, #4]
 80171d6:	89db      	ldrh	r3, [r3, #14]
 80171d8:	b2db      	uxtb	r3, r3
 80171da:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 80171dc:	687b      	ldr	r3, [r7, #4]
 80171de:	7c1a      	ldrb	r2, [r3, #16]
 80171e0:	4b0f      	ldr	r3, [pc, #60]	; (8017220 <SUBGRF_SetPacketParams+0x138>)
 80171e2:	4611      	mov	r1, r2
 80171e4:	7019      	strb	r1, [r3, #0]
 80171e6:	4613      	mov	r3, r2
 80171e8:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 80171ea:	687b      	ldr	r3, [r7, #4]
 80171ec:	7c5b      	ldrb	r3, [r3, #17]
 80171ee:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 80171f0:	687b      	ldr	r3, [r7, #4]
 80171f2:	7c9b      	ldrb	r3, [r3, #18]
 80171f4:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 80171f6:	687b      	ldr	r3, [r7, #4]
 80171f8:	7cdb      	ldrb	r3, [r3, #19]
 80171fa:	747b      	strb	r3, [r7, #17]
        break;
 80171fc:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 80171fe:	7dfb      	ldrb	r3, [r7, #23]
 8017200:	b29a      	uxth	r2, r3
 8017202:	f107 030c 	add.w	r3, r7, #12
 8017206:	4619      	mov	r1, r3
 8017208:	208c      	movs	r0, #140	; 0x8c
 801720a:	f000 f965 	bl	80174d8 <SUBGRF_WriteCommand>
 801720e:	e000      	b.n	8017212 <SUBGRF_SetPacketParams+0x12a>
        return;
 8017210:	bf00      	nop
}
 8017212:	3718      	adds	r7, #24
 8017214:	46bd      	mov	sp, r7
 8017216:	bd80      	pop	{r7, pc}
 8017218:	08019798 	.word	0x08019798
 801721c:	20000df1 	.word	0x20000df1
 8017220:	20000df2 	.word	0x20000df2

08017224 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 8017224:	b580      	push	{r7, lr}
 8017226:	b084      	sub	sp, #16
 8017228:	af00      	add	r7, sp, #0
 801722a:	4603      	mov	r3, r0
 801722c:	460a      	mov	r2, r1
 801722e:	71fb      	strb	r3, [r7, #7]
 8017230:	4613      	mov	r3, r2
 8017232:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 8017234:	79fb      	ldrb	r3, [r7, #7]
 8017236:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 8017238:	79bb      	ldrb	r3, [r7, #6]
 801723a:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 801723c:	f107 030c 	add.w	r3, r7, #12
 8017240:	2202      	movs	r2, #2
 8017242:	4619      	mov	r1, r3
 8017244:	208f      	movs	r0, #143	; 0x8f
 8017246:	f000 f947 	bl	80174d8 <SUBGRF_WriteCommand>
}
 801724a:	bf00      	nop
 801724c:	3710      	adds	r7, #16
 801724e:	46bd      	mov	sp, r7
 8017250:	bd80      	pop	{r7, pc}

08017252 <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 8017252:	b580      	push	{r7, lr}
 8017254:	b082      	sub	sp, #8
 8017256:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 8017258:	2300      	movs	r3, #0
 801725a:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 801725c:	1d3b      	adds	r3, r7, #4
 801725e:	2201      	movs	r2, #1
 8017260:	4619      	mov	r1, r3
 8017262:	2015      	movs	r0, #21
 8017264:	f000 f95a 	bl	801751c <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 8017268:	793b      	ldrb	r3, [r7, #4]
 801726a:	425b      	negs	r3, r3
 801726c:	105b      	asrs	r3, r3, #1
 801726e:	71fb      	strb	r3, [r7, #7]
    return rssi;
 8017270:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8017274:	4618      	mov	r0, r3
 8017276:	3708      	adds	r7, #8
 8017278:	46bd      	mov	sp, r7
 801727a:	bd80      	pop	{r7, pc}

0801727c <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 801727c:	b580      	push	{r7, lr}
 801727e:	b084      	sub	sp, #16
 8017280:	af00      	add	r7, sp, #0
 8017282:	6078      	str	r0, [r7, #4]
 8017284:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8017286:	f107 030c 	add.w	r3, r7, #12
 801728a:	2202      	movs	r2, #2
 801728c:	4619      	mov	r1, r3
 801728e:	2013      	movs	r0, #19
 8017290:	f000 f944 	bl	801751c <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8017294:	f7ff fdec 	bl	8016e70 <SUBGRF_GetPacketType>
 8017298:	4603      	mov	r3, r0
 801729a:	2b01      	cmp	r3, #1
 801729c:	d10d      	bne.n	80172ba <SUBGRF_GetRxBufferStatus+0x3e>
 801729e:	4b0c      	ldr	r3, [pc, #48]	; (80172d0 <SUBGRF_GetRxBufferStatus+0x54>)
 80172a0:	781b      	ldrb	r3, [r3, #0]
 80172a2:	b2db      	uxtb	r3, r3
 80172a4:	2b01      	cmp	r3, #1
 80172a6:	d108      	bne.n	80172ba <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 80172a8:	f240 7002 	movw	r0, #1794	; 0x702
 80172ac:	f000 f878 	bl	80173a0 <SUBGRF_ReadRegister>
 80172b0:	4603      	mov	r3, r0
 80172b2:	461a      	mov	r2, r3
 80172b4:	687b      	ldr	r3, [r7, #4]
 80172b6:	701a      	strb	r2, [r3, #0]
 80172b8:	e002      	b.n	80172c0 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 80172ba:	7b3a      	ldrb	r2, [r7, #12]
 80172bc:	687b      	ldr	r3, [r7, #4]
 80172be:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 80172c0:	7b7a      	ldrb	r2, [r7, #13]
 80172c2:	683b      	ldr	r3, [r7, #0]
 80172c4:	701a      	strb	r2, [r3, #0]
}
 80172c6:	bf00      	nop
 80172c8:	3710      	adds	r7, #16
 80172ca:	46bd      	mov	sp, r7
 80172cc:	bd80      	pop	{r7, pc}
 80172ce:	bf00      	nop
 80172d0:	20000df2 	.word	0x20000df2

080172d4 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 80172d4:	b580      	push	{r7, lr}
 80172d6:	b084      	sub	sp, #16
 80172d8:	af00      	add	r7, sp, #0
 80172da:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 80172dc:	f107 030c 	add.w	r3, r7, #12
 80172e0:	2203      	movs	r2, #3
 80172e2:	4619      	mov	r1, r3
 80172e4:	2014      	movs	r0, #20
 80172e6:	f000 f919 	bl	801751c <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 80172ea:	f7ff fdc1 	bl	8016e70 <SUBGRF_GetPacketType>
 80172ee:	4603      	mov	r3, r0
 80172f0:	461a      	mov	r2, r3
 80172f2:	687b      	ldr	r3, [r7, #4]
 80172f4:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 80172f6:	687b      	ldr	r3, [r7, #4]
 80172f8:	781b      	ldrb	r3, [r3, #0]
 80172fa:	2b00      	cmp	r3, #0
 80172fc:	d002      	beq.n	8017304 <SUBGRF_GetPacketStatus+0x30>
 80172fe:	2b01      	cmp	r3, #1
 8017300:	d013      	beq.n	801732a <SUBGRF_GetPacketStatus+0x56>
 8017302:	e02a      	b.n	801735a <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8017304:	7b3a      	ldrb	r2, [r7, #12]
 8017306:	687b      	ldr	r3, [r7, #4]
 8017308:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 801730a:	7b7b      	ldrb	r3, [r7, #13]
 801730c:	425b      	negs	r3, r3
 801730e:	105b      	asrs	r3, r3, #1
 8017310:	b25a      	sxtb	r2, r3
 8017312:	687b      	ldr	r3, [r7, #4]
 8017314:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 8017316:	7bbb      	ldrb	r3, [r7, #14]
 8017318:	425b      	negs	r3, r3
 801731a:	105b      	asrs	r3, r3, #1
 801731c:	b25a      	sxtb	r2, r3
 801731e:	687b      	ldr	r3, [r7, #4]
 8017320:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 8017322:	687b      	ldr	r3, [r7, #4]
 8017324:	2200      	movs	r2, #0
 8017326:	609a      	str	r2, [r3, #8]
            break;
 8017328:	e020      	b.n	801736c <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 801732a:	7b3b      	ldrb	r3, [r7, #12]
 801732c:	425b      	negs	r3, r3
 801732e:	105b      	asrs	r3, r3, #1
 8017330:	b25a      	sxtb	r2, r3
 8017332:	687b      	ldr	r3, [r7, #4]
 8017334:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 8017336:	7b7b      	ldrb	r3, [r7, #13]
 8017338:	b25b      	sxtb	r3, r3
 801733a:	3302      	adds	r3, #2
 801733c:	109b      	asrs	r3, r3, #2
 801733e:	b25a      	sxtb	r2, r3
 8017340:	687b      	ldr	r3, [r7, #4]
 8017342:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8017344:	7bbb      	ldrb	r3, [r7, #14]
 8017346:	425b      	negs	r3, r3
 8017348:	105b      	asrs	r3, r3, #1
 801734a:	b25a      	sxtb	r2, r3
 801734c:	687b      	ldr	r3, [r7, #4]
 801734e:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8017350:	4b08      	ldr	r3, [pc, #32]	; (8017374 <SUBGRF_GetPacketStatus+0xa0>)
 8017352:	681a      	ldr	r2, [r3, #0]
 8017354:	687b      	ldr	r3, [r7, #4]
 8017356:	611a      	str	r2, [r3, #16]
            break;
 8017358:	e008      	b.n	801736c <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 801735a:	2214      	movs	r2, #20
 801735c:	2100      	movs	r1, #0
 801735e:	6878      	ldr	r0, [r7, #4]
 8017360:	f000 fbf5 	bl	8017b4e <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 8017364:	687b      	ldr	r3, [r7, #4]
 8017366:	220f      	movs	r2, #15
 8017368:	701a      	strb	r2, [r3, #0]
            break;
 801736a:	bf00      	nop
    }
}
 801736c:	bf00      	nop
 801736e:	3710      	adds	r7, #16
 8017370:	46bd      	mov	sp, r7
 8017372:	bd80      	pop	{r7, pc}
 8017374:	20000df4 	.word	0x20000df4

08017378 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 8017378:	b580      	push	{r7, lr}
 801737a:	b082      	sub	sp, #8
 801737c:	af00      	add	r7, sp, #0
 801737e:	4603      	mov	r3, r0
 8017380:	460a      	mov	r2, r1
 8017382:	80fb      	strh	r3, [r7, #6]
 8017384:	4613      	mov	r3, r2
 8017386:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 8017388:	1d7a      	adds	r2, r7, #5
 801738a:	88f9      	ldrh	r1, [r7, #6]
 801738c:	2301      	movs	r3, #1
 801738e:	4803      	ldr	r0, [pc, #12]	; (801739c <SUBGRF_WriteRegister+0x24>)
 8017390:	f7ee fe68 	bl	8006064 <HAL_SUBGHZ_WriteRegisters>
}
 8017394:	bf00      	nop
 8017396:	3708      	adds	r7, #8
 8017398:	46bd      	mov	sp, r7
 801739a:	bd80      	pop	{r7, pc}
 801739c:	20001560 	.word	0x20001560

080173a0 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 80173a0:	b580      	push	{r7, lr}
 80173a2:	b084      	sub	sp, #16
 80173a4:	af00      	add	r7, sp, #0
 80173a6:	4603      	mov	r3, r0
 80173a8:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 80173aa:	f107 020f 	add.w	r2, r7, #15
 80173ae:	88f9      	ldrh	r1, [r7, #6]
 80173b0:	2301      	movs	r3, #1
 80173b2:	4804      	ldr	r0, [pc, #16]	; (80173c4 <SUBGRF_ReadRegister+0x24>)
 80173b4:	f7ee feb5 	bl	8006122 <HAL_SUBGHZ_ReadRegisters>
    return data;
 80173b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80173ba:	4618      	mov	r0, r3
 80173bc:	3710      	adds	r7, #16
 80173be:	46bd      	mov	sp, r7
 80173c0:	bd80      	pop	{r7, pc}
 80173c2:	bf00      	nop
 80173c4:	20001560 	.word	0x20001560

080173c8 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 80173c8:	b580      	push	{r7, lr}
 80173ca:	b086      	sub	sp, #24
 80173cc:	af00      	add	r7, sp, #0
 80173ce:	4603      	mov	r3, r0
 80173d0:	6039      	str	r1, [r7, #0]
 80173d2:	80fb      	strh	r3, [r7, #6]
 80173d4:	4613      	mov	r3, r2
 80173d6:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80173d8:	f3ef 8310 	mrs	r3, PRIMASK
 80173dc:	60fb      	str	r3, [r7, #12]
  return(result);
 80173de:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 80173e0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80173e2:	b672      	cpsid	i
}
 80173e4:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 80173e6:	88bb      	ldrh	r3, [r7, #4]
 80173e8:	88f9      	ldrh	r1, [r7, #6]
 80173ea:	683a      	ldr	r2, [r7, #0]
 80173ec:	4806      	ldr	r0, [pc, #24]	; (8017408 <SUBGRF_WriteRegisters+0x40>)
 80173ee:	f7ee fe39 	bl	8006064 <HAL_SUBGHZ_WriteRegisters>
 80173f2:	697b      	ldr	r3, [r7, #20]
 80173f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80173f6:	693b      	ldr	r3, [r7, #16]
 80173f8:	f383 8810 	msr	PRIMASK, r3
}
 80173fc:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80173fe:	bf00      	nop
 8017400:	3718      	adds	r7, #24
 8017402:	46bd      	mov	sp, r7
 8017404:	bd80      	pop	{r7, pc}
 8017406:	bf00      	nop
 8017408:	20001560 	.word	0x20001560

0801740c <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801740c:	b580      	push	{r7, lr}
 801740e:	b086      	sub	sp, #24
 8017410:	af00      	add	r7, sp, #0
 8017412:	4603      	mov	r3, r0
 8017414:	6039      	str	r1, [r7, #0]
 8017416:	80fb      	strh	r3, [r7, #6]
 8017418:	4613      	mov	r3, r2
 801741a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801741c:	f3ef 8310 	mrs	r3, PRIMASK
 8017420:	60fb      	str	r3, [r7, #12]
  return(result);
 8017422:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8017424:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8017426:	b672      	cpsid	i
}
 8017428:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 801742a:	88bb      	ldrh	r3, [r7, #4]
 801742c:	88f9      	ldrh	r1, [r7, #6]
 801742e:	683a      	ldr	r2, [r7, #0]
 8017430:	4806      	ldr	r0, [pc, #24]	; (801744c <SUBGRF_ReadRegisters+0x40>)
 8017432:	f7ee fe76 	bl	8006122 <HAL_SUBGHZ_ReadRegisters>
 8017436:	697b      	ldr	r3, [r7, #20]
 8017438:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801743a:	693b      	ldr	r3, [r7, #16]
 801743c:	f383 8810 	msr	PRIMASK, r3
}
 8017440:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8017442:	bf00      	nop
 8017444:	3718      	adds	r7, #24
 8017446:	46bd      	mov	sp, r7
 8017448:	bd80      	pop	{r7, pc}
 801744a:	bf00      	nop
 801744c:	20001560 	.word	0x20001560

08017450 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8017450:	b580      	push	{r7, lr}
 8017452:	b086      	sub	sp, #24
 8017454:	af00      	add	r7, sp, #0
 8017456:	4603      	mov	r3, r0
 8017458:	6039      	str	r1, [r7, #0]
 801745a:	71fb      	strb	r3, [r7, #7]
 801745c:	4613      	mov	r3, r2
 801745e:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017460:	f3ef 8310 	mrs	r3, PRIMASK
 8017464:	60fb      	str	r3, [r7, #12]
  return(result);
 8017466:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8017468:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801746a:	b672      	cpsid	i
}
 801746c:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 801746e:	79bb      	ldrb	r3, [r7, #6]
 8017470:	b29b      	uxth	r3, r3
 8017472:	79f9      	ldrb	r1, [r7, #7]
 8017474:	683a      	ldr	r2, [r7, #0]
 8017476:	4806      	ldr	r0, [pc, #24]	; (8017490 <SUBGRF_WriteBuffer+0x40>)
 8017478:	f7ee ff67 	bl	800634a <HAL_SUBGHZ_WriteBuffer>
 801747c:	697b      	ldr	r3, [r7, #20]
 801747e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017480:	693b      	ldr	r3, [r7, #16]
 8017482:	f383 8810 	msr	PRIMASK, r3
}
 8017486:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8017488:	bf00      	nop
 801748a:	3718      	adds	r7, #24
 801748c:	46bd      	mov	sp, r7
 801748e:	bd80      	pop	{r7, pc}
 8017490:	20001560 	.word	0x20001560

08017494 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8017494:	b580      	push	{r7, lr}
 8017496:	b086      	sub	sp, #24
 8017498:	af00      	add	r7, sp, #0
 801749a:	4603      	mov	r3, r0
 801749c:	6039      	str	r1, [r7, #0]
 801749e:	71fb      	strb	r3, [r7, #7]
 80174a0:	4613      	mov	r3, r2
 80174a2:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80174a4:	f3ef 8310 	mrs	r3, PRIMASK
 80174a8:	60fb      	str	r3, [r7, #12]
  return(result);
 80174aa:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 80174ac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80174ae:	b672      	cpsid	i
}
 80174b0:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 80174b2:	79bb      	ldrb	r3, [r7, #6]
 80174b4:	b29b      	uxth	r3, r3
 80174b6:	79f9      	ldrb	r1, [r7, #7]
 80174b8:	683a      	ldr	r2, [r7, #0]
 80174ba:	4806      	ldr	r0, [pc, #24]	; (80174d4 <SUBGRF_ReadBuffer+0x40>)
 80174bc:	f7ee ff98 	bl	80063f0 <HAL_SUBGHZ_ReadBuffer>
 80174c0:	697b      	ldr	r3, [r7, #20]
 80174c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80174c4:	693b      	ldr	r3, [r7, #16]
 80174c6:	f383 8810 	msr	PRIMASK, r3
}
 80174ca:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80174cc:	bf00      	nop
 80174ce:	3718      	adds	r7, #24
 80174d0:	46bd      	mov	sp, r7
 80174d2:	bd80      	pop	{r7, pc}
 80174d4:	20001560 	.word	0x20001560

080174d8 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 80174d8:	b580      	push	{r7, lr}
 80174da:	b086      	sub	sp, #24
 80174dc:	af00      	add	r7, sp, #0
 80174de:	4603      	mov	r3, r0
 80174e0:	6039      	str	r1, [r7, #0]
 80174e2:	71fb      	strb	r3, [r7, #7]
 80174e4:	4613      	mov	r3, r2
 80174e6:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80174e8:	f3ef 8310 	mrs	r3, PRIMASK
 80174ec:	60fb      	str	r3, [r7, #12]
  return(result);
 80174ee:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 80174f0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80174f2:	b672      	cpsid	i
}
 80174f4:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 80174f6:	88bb      	ldrh	r3, [r7, #4]
 80174f8:	79f9      	ldrb	r1, [r7, #7]
 80174fa:	683a      	ldr	r2, [r7, #0]
 80174fc:	4806      	ldr	r0, [pc, #24]	; (8017518 <SUBGRF_WriteCommand+0x40>)
 80174fe:	f7ee fe71 	bl	80061e4 <HAL_SUBGHZ_ExecSetCmd>
 8017502:	697b      	ldr	r3, [r7, #20]
 8017504:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017506:	693b      	ldr	r3, [r7, #16]
 8017508:	f383 8810 	msr	PRIMASK, r3
}
 801750c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801750e:	bf00      	nop
 8017510:	3718      	adds	r7, #24
 8017512:	46bd      	mov	sp, r7
 8017514:	bd80      	pop	{r7, pc}
 8017516:	bf00      	nop
 8017518:	20001560 	.word	0x20001560

0801751c <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801751c:	b580      	push	{r7, lr}
 801751e:	b086      	sub	sp, #24
 8017520:	af00      	add	r7, sp, #0
 8017522:	4603      	mov	r3, r0
 8017524:	6039      	str	r1, [r7, #0]
 8017526:	71fb      	strb	r3, [r7, #7]
 8017528:	4613      	mov	r3, r2
 801752a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801752c:	f3ef 8310 	mrs	r3, PRIMASK
 8017530:	60fb      	str	r3, [r7, #12]
  return(result);
 8017532:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8017534:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8017536:	b672      	cpsid	i
}
 8017538:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 801753a:	88bb      	ldrh	r3, [r7, #4]
 801753c:	79f9      	ldrb	r1, [r7, #7]
 801753e:	683a      	ldr	r2, [r7, #0]
 8017540:	4806      	ldr	r0, [pc, #24]	; (801755c <SUBGRF_ReadCommand+0x40>)
 8017542:	f7ee feae 	bl	80062a2 <HAL_SUBGHZ_ExecGetCmd>
 8017546:	697b      	ldr	r3, [r7, #20]
 8017548:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801754a:	693b      	ldr	r3, [r7, #16]
 801754c:	f383 8810 	msr	PRIMASK, r3
}
 8017550:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8017552:	bf00      	nop
 8017554:	3718      	adds	r7, #24
 8017556:	46bd      	mov	sp, r7
 8017558:	bd80      	pop	{r7, pc}
 801755a:	bf00      	nop
 801755c:	20001560 	.word	0x20001560

08017560 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 8017560:	b580      	push	{r7, lr}
 8017562:	b084      	sub	sp, #16
 8017564:	af00      	add	r7, sp, #0
 8017566:	4603      	mov	r3, r0
 8017568:	460a      	mov	r2, r1
 801756a:	71fb      	strb	r3, [r7, #7]
 801756c:	4613      	mov	r3, r2
 801756e:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 8017570:	2301      	movs	r3, #1
 8017572:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 8017574:	79bb      	ldrb	r3, [r7, #6]
 8017576:	2b01      	cmp	r3, #1
 8017578:	d10d      	bne.n	8017596 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 801757a:	79fb      	ldrb	r3, [r7, #7]
 801757c:	2b01      	cmp	r3, #1
 801757e:	d104      	bne.n	801758a <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 8017580:	2302      	movs	r3, #2
 8017582:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 8017584:	2004      	movs	r0, #4
 8017586:	f000 f8df 	bl	8017748 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 801758a:	79fb      	ldrb	r3, [r7, #7]
 801758c:	2b02      	cmp	r3, #2
 801758e:	d107      	bne.n	80175a0 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 8017590:	2303      	movs	r3, #3
 8017592:	73fb      	strb	r3, [r7, #15]
 8017594:	e004      	b.n	80175a0 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 8017596:	79bb      	ldrb	r3, [r7, #6]
 8017598:	2b00      	cmp	r3, #0
 801759a:	d101      	bne.n	80175a0 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 801759c:	2301      	movs	r3, #1
 801759e:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 80175a0:	7bfb      	ldrb	r3, [r7, #15]
 80175a2:	4618      	mov	r0, r3
 80175a4:	f7f1 fbef 	bl	8008d86 <RBI_ConfigRFSwitch>
}
 80175a8:	bf00      	nop
 80175aa:	3710      	adds	r7, #16
 80175ac:	46bd      	mov	sp, r7
 80175ae:	bd80      	pop	{r7, pc}

080175b0 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power ) 
{
 80175b0:	b580      	push	{r7, lr}
 80175b2:	b084      	sub	sp, #16
 80175b4:	af00      	add	r7, sp, #0
 80175b6:	4603      	mov	r3, r0
 80175b8:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 80175ba:	2301      	movs	r3, #1
 80175bc:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 80175be:	f7f1 fbef 	bl	8008da0 <RBI_GetTxConfig>
 80175c2:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 80175c4:	68bb      	ldr	r3, [r7, #8]
 80175c6:	2b02      	cmp	r3, #2
 80175c8:	d016      	beq.n	80175f8 <SUBGRF_SetRfTxPower+0x48>
 80175ca:	68bb      	ldr	r3, [r7, #8]
 80175cc:	2b02      	cmp	r3, #2
 80175ce:	dc16      	bgt.n	80175fe <SUBGRF_SetRfTxPower+0x4e>
 80175d0:	68bb      	ldr	r3, [r7, #8]
 80175d2:	2b00      	cmp	r3, #0
 80175d4:	d003      	beq.n	80175de <SUBGRF_SetRfTxPower+0x2e>
 80175d6:	68bb      	ldr	r3, [r7, #8]
 80175d8:	2b01      	cmp	r3, #1
 80175da:	d00a      	beq.n	80175f2 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 80175dc:	e00f      	b.n	80175fe <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 80175de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80175e2:	2b0f      	cmp	r3, #15
 80175e4:	dd02      	ble.n	80175ec <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 80175e6:	2302      	movs	r3, #2
 80175e8:	73fb      	strb	r3, [r7, #15]
            break;
 80175ea:	e009      	b.n	8017600 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 80175ec:	2301      	movs	r3, #1
 80175ee:	73fb      	strb	r3, [r7, #15]
            break;
 80175f0:	e006      	b.n	8017600 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 80175f2:	2301      	movs	r3, #1
 80175f4:	73fb      	strb	r3, [r7, #15]
            break;
 80175f6:	e003      	b.n	8017600 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 80175f8:	2302      	movs	r3, #2
 80175fa:	73fb      	strb	r3, [r7, #15]
            break;
 80175fc:	e000      	b.n	8017600 <SUBGRF_SetRfTxPower+0x50>
            break;
 80175fe:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8017600:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8017604:	7bfb      	ldrb	r3, [r7, #15]
 8017606:	2202      	movs	r2, #2
 8017608:	4618      	mov	r0, r3
 801760a:	f7ff fc3b 	bl	8016e84 <SUBGRF_SetTxParams>

    return paSelect;
 801760e:	7bfb      	ldrb	r3, [r7, #15]
}
 8017610:	4618      	mov	r0, r3
 8017612:	3710      	adds	r7, #16
 8017614:	46bd      	mov	sp, r7
 8017616:	bd80      	pop	{r7, pc}

08017618 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 8017618:	b480      	push	{r7}
 801761a:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 801761c:	2301      	movs	r3, #1
}
 801761e:	4618      	mov	r0, r3
 8017620:	46bd      	mov	sp, r7
 8017622:	bc80      	pop	{r7}
 8017624:	4770      	bx	lr
	...

08017628 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */ 
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8017628:	b580      	push	{r7, lr}
 801762a:	b082      	sub	sp, #8
 801762c:	af00      	add	r7, sp, #0
 801762e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8017630:	4b03      	ldr	r3, [pc, #12]	; (8017640 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 8017632:	681b      	ldr	r3, [r3, #0]
 8017634:	2001      	movs	r0, #1
 8017636:	4798      	blx	r3
}
 8017638:	bf00      	nop
 801763a:	3708      	adds	r7, #8
 801763c:	46bd      	mov	sp, r7
 801763e:	bd80      	pop	{r7, pc}
 8017640:	20000dfc 	.word	0x20000dfc

08017644 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8017644:	b580      	push	{r7, lr}
 8017646:	b082      	sub	sp, #8
 8017648:	af00      	add	r7, sp, #0
 801764a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 801764c:	4b03      	ldr	r3, [pc, #12]	; (801765c <HAL_SUBGHZ_RxCpltCallback+0x18>)
 801764e:	681b      	ldr	r3, [r3, #0]
 8017650:	2002      	movs	r0, #2
 8017652:	4798      	blx	r3
}
 8017654:	bf00      	nop
 8017656:	3708      	adds	r7, #8
 8017658:	46bd      	mov	sp, r7
 801765a:	bd80      	pop	{r7, pc}
 801765c:	20000dfc 	.word	0x20000dfc

08017660 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 8017660:	b580      	push	{r7, lr}
 8017662:	b082      	sub	sp, #8
 8017664:	af00      	add	r7, sp, #0
 8017666:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 8017668:	4b03      	ldr	r3, [pc, #12]	; (8017678 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 801766a:	681b      	ldr	r3, [r3, #0]
 801766c:	2040      	movs	r0, #64	; 0x40
 801766e:	4798      	blx	r3
}
 8017670:	bf00      	nop
 8017672:	3708      	adds	r7, #8
 8017674:	46bd      	mov	sp, r7
 8017676:	bd80      	pop	{r7, pc}
 8017678:	20000dfc 	.word	0x20000dfc

0801767c <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 801767c:	b580      	push	{r7, lr}
 801767e:	b082      	sub	sp, #8
 8017680:	af00      	add	r7, sp, #0
 8017682:	6078      	str	r0, [r7, #4]
 8017684:	460b      	mov	r3, r1
 8017686:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 8017688:	78fb      	ldrb	r3, [r7, #3]
 801768a:	2b00      	cmp	r3, #0
 801768c:	d002      	beq.n	8017694 <HAL_SUBGHZ_CADStatusCallback+0x18>
 801768e:	2b01      	cmp	r3, #1
 8017690:	d005      	beq.n	801769e <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 8017692:	e00a      	b.n	80176aa <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 8017694:	4b07      	ldr	r3, [pc, #28]	; (80176b4 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8017696:	681b      	ldr	r3, [r3, #0]
 8017698:	2080      	movs	r0, #128	; 0x80
 801769a:	4798      	blx	r3
            break;
 801769c:	e005      	b.n	80176aa <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 801769e:	4b05      	ldr	r3, [pc, #20]	; (80176b4 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 80176a0:	681b      	ldr	r3, [r3, #0]
 80176a2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80176a6:	4798      	blx	r3
            break;
 80176a8:	bf00      	nop
    }
}
 80176aa:	bf00      	nop
 80176ac:	3708      	adds	r7, #8
 80176ae:	46bd      	mov	sp, r7
 80176b0:	bd80      	pop	{r7, pc}
 80176b2:	bf00      	nop
 80176b4:	20000dfc 	.word	0x20000dfc

080176b8 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80176b8:	b580      	push	{r7, lr}
 80176ba:	b082      	sub	sp, #8
 80176bc:	af00      	add	r7, sp, #0
 80176be:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 80176c0:	4b04      	ldr	r3, [pc, #16]	; (80176d4 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 80176c2:	681b      	ldr	r3, [r3, #0]
 80176c4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80176c8:	4798      	blx	r3
}
 80176ca:	bf00      	nop
 80176cc:	3708      	adds	r7, #8
 80176ce:	46bd      	mov	sp, r7
 80176d0:	bd80      	pop	{r7, pc}
 80176d2:	bf00      	nop
 80176d4:	20000dfc 	.word	0x20000dfc

080176d8 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80176d8:	b580      	push	{r7, lr}
 80176da:	b082      	sub	sp, #8
 80176dc:	af00      	add	r7, sp, #0
 80176de:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 80176e0:	4b03      	ldr	r3, [pc, #12]	; (80176f0 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 80176e2:	681b      	ldr	r3, [r3, #0]
 80176e4:	2020      	movs	r0, #32
 80176e6:	4798      	blx	r3
}
 80176e8:	bf00      	nop
 80176ea:	3708      	adds	r7, #8
 80176ec:	46bd      	mov	sp, r7
 80176ee:	bd80      	pop	{r7, pc}
 80176f0:	20000dfc 	.word	0x20000dfc

080176f4 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80176f4:	b580      	push	{r7, lr}
 80176f6:	b082      	sub	sp, #8
 80176f8:	af00      	add	r7, sp, #0
 80176fa:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 80176fc:	4b03      	ldr	r3, [pc, #12]	; (801770c <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 80176fe:	681b      	ldr	r3, [r3, #0]
 8017700:	2004      	movs	r0, #4
 8017702:	4798      	blx	r3
}
 8017704:	bf00      	nop
 8017706:	3708      	adds	r7, #8
 8017708:	46bd      	mov	sp, r7
 801770a:	bd80      	pop	{r7, pc}
 801770c:	20000dfc 	.word	0x20000dfc

08017710 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8017710:	b580      	push	{r7, lr}
 8017712:	b082      	sub	sp, #8
 8017714:	af00      	add	r7, sp, #0
 8017716:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 8017718:	4b03      	ldr	r3, [pc, #12]	; (8017728 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 801771a:	681b      	ldr	r3, [r3, #0]
 801771c:	2008      	movs	r0, #8
 801771e:	4798      	blx	r3
}
 8017720:	bf00      	nop
 8017722:	3708      	adds	r7, #8
 8017724:	46bd      	mov	sp, r7
 8017726:	bd80      	pop	{r7, pc}
 8017728:	20000dfc 	.word	0x20000dfc

0801772c <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801772c:	b580      	push	{r7, lr}
 801772e:	b082      	sub	sp, #8
 8017730:	af00      	add	r7, sp, #0
 8017732:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 8017734:	4b03      	ldr	r3, [pc, #12]	; (8017744 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 8017736:	681b      	ldr	r3, [r3, #0]
 8017738:	2010      	movs	r0, #16
 801773a:	4798      	blx	r3
}
 801773c:	bf00      	nop
 801773e:	3708      	adds	r7, #8
 8017740:	46bd      	mov	sp, r7
 8017742:	bd80      	pop	{r7, pc}
 8017744:	20000dfc 	.word	0x20000dfc

08017748 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 8017748:	b580      	push	{r7, lr}
 801774a:	b084      	sub	sp, #16
 801774c:	af00      	add	r7, sp, #0
 801774e:	4603      	mov	r3, r0
 8017750:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 8017752:	f7f1 fb3b 	bl	8008dcc <RBI_IsDCDC>
 8017756:	4603      	mov	r3, r0
 8017758:	2b01      	cmp	r3, #1
 801775a:	d112      	bne.n	8017782 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 801775c:	f640 1023 	movw	r0, #2339	; 0x923
 8017760:	f7ff fe1e 	bl	80173a0 <SUBGRF_ReadRegister>
 8017764:	4603      	mov	r3, r0
 8017766:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 8017768:	7bfb      	ldrb	r3, [r7, #15]
 801776a:	f023 0306 	bic.w	r3, r3, #6
 801776e:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 8017770:	7bfa      	ldrb	r2, [r7, #15]
 8017772:	79fb      	ldrb	r3, [r7, #7]
 8017774:	4313      	orrs	r3, r2
 8017776:	b2db      	uxtb	r3, r3
 8017778:	4619      	mov	r1, r3
 801777a:	f640 1023 	movw	r0, #2339	; 0x923
 801777e:	f7ff fdfb 	bl	8017378 <SUBGRF_WriteRegister>
  }
}
 8017782:	bf00      	nop
 8017784:	3710      	adds	r7, #16
 8017786:	46bd      	mov	sp, r7
 8017788:	bd80      	pop	{r7, pc}
	...

0801778c <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 801778c:	b480      	push	{r7}
 801778e:	b085      	sub	sp, #20
 8017790:	af00      	add	r7, sp, #0
 8017792:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 8017794:	687b      	ldr	r3, [r7, #4]
 8017796:	2b00      	cmp	r3, #0
 8017798:	d101      	bne.n	801779e <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 801779a:	231f      	movs	r3, #31
 801779c:	e016      	b.n	80177cc <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801779e:	2300      	movs	r3, #0
 80177a0:	73fb      	strb	r3, [r7, #15]
 80177a2:	e00f      	b.n	80177c4 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 80177a4:	7bfb      	ldrb	r3, [r7, #15]
 80177a6:	4a0c      	ldr	r2, [pc, #48]	; (80177d8 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 80177a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80177ac:	687a      	ldr	r2, [r7, #4]
 80177ae:	429a      	cmp	r2, r3
 80177b0:	d205      	bcs.n	80177be <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 80177b2:	7bfb      	ldrb	r3, [r7, #15]
 80177b4:	4a08      	ldr	r2, [pc, #32]	; (80177d8 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 80177b6:	00db      	lsls	r3, r3, #3
 80177b8:	4413      	add	r3, r2
 80177ba:	791b      	ldrb	r3, [r3, #4]
 80177bc:	e006      	b.n	80177cc <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 80177be:	7bfb      	ldrb	r3, [r7, #15]
 80177c0:	3301      	adds	r3, #1
 80177c2:	73fb      	strb	r3, [r7, #15]
 80177c4:	7bfb      	ldrb	r3, [r7, #15]
 80177c6:	2b15      	cmp	r3, #21
 80177c8:	d9ec      	bls.n	80177a4 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
 80177ca:	e7fe      	b.n	80177ca <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 80177cc:	4618      	mov	r0, r3
 80177ce:	3714      	adds	r7, #20
 80177d0:	46bd      	mov	sp, r7
 80177d2:	bc80      	pop	{r7}
 80177d4:	4770      	bx	lr
 80177d6:	bf00      	nop
 80177d8:	08019d04 	.word	0x08019d04

080177dc <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 80177dc:	b580      	push	{r7, lr}
 80177de:	b08a      	sub	sp, #40	; 0x28
 80177e0:	af00      	add	r7, sp, #0
 80177e2:	6078      	str	r0, [r7, #4]
 80177e4:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 80177e6:	4b36      	ldr	r3, [pc, #216]	; (80178c0 <SUBGRF_GetCFO+0xe4>)
 80177e8:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSEL ));
 80177ea:	f640 0007 	movw	r0, #2055	; 0x807
 80177ee:	f7ff fdd7 	bl	80173a0 <SUBGRF_ReadRegister>
 80177f2:	4603      	mov	r3, r0
 80177f4:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 80177f6:	7ffb      	ldrb	r3, [r7, #31]
 80177f8:	08db      	lsrs	r3, r3, #3
 80177fa:	b2db      	uxtb	r3, r3
 80177fc:	f003 0303 	and.w	r3, r3, #3
 8017800:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8017804:	4413      	add	r3, r2
 8017806:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 801780a:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 801780c:	7ffb      	ldrb	r3, [r7, #31]
 801780e:	f003 0307 	and.w	r3, r3, #7
 8017812:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 8017814:	7fba      	ldrb	r2, [r7, #30]
 8017816:	7f7b      	ldrb	r3, [r7, #29]
 8017818:	3b01      	subs	r3, #1
 801781a:	fa02 f303 	lsl.w	r3, r2, r3
 801781e:	461a      	mov	r2, r3
 8017820:	4b28      	ldr	r3, [pc, #160]	; (80178c4 <SUBGRF_GetCFO+0xe8>)
 8017822:	fbb3 f3f2 	udiv	r3, r3, r2
 8017826:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 8017828:	69ba      	ldr	r2, [r7, #24]
 801782a:	687b      	ldr	r3, [r7, #4]
 801782c:	fbb2 f3f3 	udiv	r3, r2, r3
 8017830:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 8017832:	2301      	movs	r3, #1
 8017834:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 8017838:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801783c:	697a      	ldr	r2, [r7, #20]
 801783e:	fb02 f303 	mul.w	r3, r2, r3
 8017842:	2b07      	cmp	r3, #7
 8017844:	d802      	bhi.n	801784c <SUBGRF_GetCFO+0x70>
  {
    interp = 2;
 8017846:	2302      	movs	r3, #2
 8017848:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 801784c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017850:	697a      	ldr	r2, [r7, #20]
 8017852:	fb02 f303 	mul.w	r3, r2, r3
 8017856:	2b03      	cmp	r3, #3
 8017858:	d802      	bhi.n	8017860 <SUBGRF_GetCFO+0x84>
  {
    interp = 4;
 801785a:	2304      	movs	r3, #4
 801785c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 8017860:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8017864:	69bb      	ldr	r3, [r7, #24]
 8017866:	fb02 f303 	mul.w	r3, r2, r3
 801786a:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_CFO_H ) & 0xF ) << 8;
 801786c:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 8017870:	f7ff fd96 	bl	80173a0 <SUBGRF_ReadRegister>
 8017874:	4603      	mov	r3, r0
 8017876:	021b      	lsls	r3, r3, #8
 8017878:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 801787c:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_CFO_L );
 801787e:	f240 60b1 	movw	r0, #1713	; 0x6b1
 8017882:	f7ff fd8d 	bl	80173a0 <SUBGRF_ReadRegister>
 8017886:	4603      	mov	r3, r0
 8017888:	461a      	mov	r2, r3
 801788a:	6a3b      	ldr	r3, [r7, #32]
 801788c:	4313      	orrs	r3, r2
 801788e:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 8017890:	6a3b      	ldr	r3, [r7, #32]
 8017892:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8017896:	2b00      	cmp	r3, #0
 8017898:	d005      	beq.n	80178a6 <SUBGRF_GetCFO+0xca>
  {
    cfo_bin |= 0xFFFFF000;
 801789a:	6a3b      	ldr	r3, [r7, #32]
 801789c:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 80178a0:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 80178a4:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 80178a6:	693b      	ldr	r3, [r7, #16]
 80178a8:	095b      	lsrs	r3, r3, #5
 80178aa:	6a3a      	ldr	r2, [r7, #32]
 80178ac:	fb02 f303 	mul.w	r3, r2, r3
 80178b0:	11da      	asrs	r2, r3, #7
 80178b2:	683b      	ldr	r3, [r7, #0]
 80178b4:	601a      	str	r2, [r3, #0]
}
 80178b6:	bf00      	nop
 80178b8:	3728      	adds	r7, #40	; 0x28
 80178ba:	46bd      	mov	sp, r7
 80178bc:	bd80      	pop	{r7, pc}
 80178be:	bf00      	nop
 80178c0:	0c0a0804 	.word	0x0c0a0804
 80178c4:	01e84800 	.word	0x01e84800

080178c8 <RFW_TransmitLongPacket>:
static void RFW_GetPayload( uint8_t Offset, uint8_t Length );
#endif

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout, void (*TxLongPacketGetNextChunkCb) (uint8_t** buffer, uint8_t buffer_size) )
{
 80178c8:	b480      	push	{r7}
 80178ca:	b087      	sub	sp, #28
 80178cc:	af00      	add	r7, sp, #0
 80178ce:	4603      	mov	r3, r0
 80178d0:	60b9      	str	r1, [r7, #8]
 80178d2:	607a      	str	r2, [r7, #4]
 80178d4:	81fb      	strh	r3, [r7, #14]
  int32_t status=0;
 80178d6:	2300      	movs	r3, #0
 80178d8:	617b      	str	r3, [r7, #20]
        default:
            break;
    }
  }
#else
  status= -1;
 80178da:	f04f 33ff 	mov.w	r3, #4294967295
 80178de:	617b      	str	r3, [r7, #20]
#endif
  return status;
 80178e0:	697b      	ldr	r3, [r7, #20]
}
 80178e2:	4618      	mov	r0, r3
 80178e4:	371c      	adds	r7, #28
 80178e6:	46bd      	mov	sp, r7
 80178e8:	bc80      	pop	{r7}
 80178ea:	4770      	bx	lr

080178ec <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout, void (*RxLongPacketStoreChunkCb) (uint8_t* buffer, uint8_t chunk_size) )
{
 80178ec:	b480      	push	{r7}
 80178ee:	b087      	sub	sp, #28
 80178f0:	af00      	add	r7, sp, #0
 80178f2:	4603      	mov	r3, r0
 80178f4:	60b9      	str	r1, [r7, #8]
 80178f6:	607a      	str	r2, [r7, #4]
 80178f8:	73fb      	strb	r3, [r7, #15]
  int32_t status=0;
 80178fa:	2300      	movs	r3, #0
 80178fc:	617b      	str	r3, [r7, #20]
    {
      SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
    }
  }
#else
  status= -1;
 80178fe:	f04f 33ff 	mov.w	r3, #4294967295
 8017902:	617b      	str	r3, [r7, #20]
#endif
  return status;
 8017904:	697b      	ldr	r3, [r7, #20]
}
 8017906:	4618      	mov	r0, r3
 8017908:	371c      	adds	r7, #28
 801790a:	46bd      	mov	sp, r7
 801790c:	bc80      	pop	{r7}
 801790e:	4770      	bx	lr

08017910 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t* config, RadioEvents_t* RadioEvents, TimerEvent_t* TimeoutTimerEvent)
{
 8017910:	b480      	push	{r7}
 8017912:	b085      	sub	sp, #20
 8017914:	af00      	add	r7, sp, #0
 8017916:	60f8      	str	r0, [r7, #12]
 8017918:	60b9      	str	r1, [r7, #8]
 801791a:	607a      	str	r2, [r7, #4]
  RFWPacket.Init.Enable=1;
  /* Initialize Timer for end of fixed packet, started at sync*/
  TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
  return 0;
#else
  return -1;
 801791c:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 8017920:	4618      	mov	r0, r3
 8017922:	3714      	adds	r7, #20
 8017924:	46bd      	mov	sp, r7
 8017926:	bc80      	pop	{r7}
 8017928:	4770      	bx	lr

0801792a <RFW_DeInit>:

void RFW_DeInit( void)
{
 801792a:	b480      	push	{r7}
 801792c:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 801792e:	bf00      	nop
 8017930:	46bd      	mov	sp, r7
 8017932:	bc80      	pop	{r7}
 8017934:	4770      	bx	lr

08017936 <RFW_Is_Init>:

uint8_t RFW_Is_Init( void)
{
 8017936:	b480      	push	{r7}
 8017938:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
 801793a:	2300      	movs	r3, #0
#endif
}
 801793c:	4618      	mov	r0, r3
 801793e:	46bd      	mov	sp, r7
 8017940:	bc80      	pop	{r7}
 8017942:	4770      	bx	lr

08017944 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void)
{
 8017944:	b480      	push	{r7}
 8017946:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
 8017948:	2300      	movs	r3, #0
#endif
}
 801794a:	4618      	mov	r0, r3
 801794c:	46bd      	mov	sp, r7
 801794e:	bc80      	pop	{r7}
 8017950:	4770      	bx	lr

08017952 <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch)
{
 8017952:	b480      	push	{r7}
 8017954:	b083      	sub	sp, #12
 8017956:	af00      	add	r7, sp, #0
 8017958:	4603      	mov	r3, r0
 801795a:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 801795c:	bf00      	nop
 801795e:	370c      	adds	r7, #12
 8017960:	46bd      	mov	sp, r7
 8017962:	bc80      	pop	{r7}
 8017964:	4770      	bx	lr

08017966 <RFW_TransmitInit>:

int32_t RFW_TransmitInit(uint8_t* inOutBuffer, uint8_t size, uint8_t* outSize)
{
 8017966:	b480      	push	{r7}
 8017968:	b087      	sub	sp, #28
 801796a:	af00      	add	r7, sp, #0
 801796c:	60f8      	str	r0, [r7, #12]
 801796e:	460b      	mov	r3, r1
 8017970:	607a      	str	r2, [r7, #4]
 8017972:	72fb      	strb	r3, [r7, #11]
  int32_t status=-1;
 8017974:	f04f 33ff 	mov.w	r3, #4294967295
 8017978:	617b      	str	r3, [r7, #20]
    RFWPacket.LongPacketModeEnable=0;
    
    status= 0;
  }
#endif
  return status;
 801797a:	697b      	ldr	r3, [r7, #20]
}
 801797c:	4618      	mov	r0, r3
 801797e:	371c      	adds	r7, #28
 8017980:	46bd      	mov	sp, r7
 8017982:	bc80      	pop	{r7}
 8017984:	4770      	bx	lr

08017986 <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 8017986:	b480      	push	{r7}
 8017988:	af00      	add	r7, sp, #0
  RFWPacket.RxPayloadOffset=0;
  
  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
 801798a:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 801798e:	4618      	mov	r0, r3
 8017990:	46bd      	mov	sp, r7
 8017992:	bc80      	pop	{r7}
 8017994:	4770      	bx	lr

08017996 <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket(void)
{
 8017996:	b480      	push	{r7}
 8017998:	af00      	add	r7, sp, #0
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_PKTCTL1A);
  SUBGRF_WriteRegister(SUBGHZ_PKTCTL1A, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_RTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 801799a:	bf00      	nop
 801799c:	46bd      	mov	sp, r7
 801799e:	bc80      	pop	{r7}
 80179a0:	4770      	bx	lr

080179a2 <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 80179a2:	b480      	push	{r7}
 80179a4:	af00      	add	r7, sp, #0
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 80179a6:	bf00      	nop
 80179a8:	46bd      	mov	sp, r7
 80179aa:	bc80      	pop	{r7}
 80179ac:	4770      	bx	lr

080179ae <RFW_SetRadioModem>:

void RFW_SetRadioModem(RadioModems_t Modem)
{
 80179ae:	b480      	push	{r7}
 80179b0:	b083      	sub	sp, #12
 80179b2:	af00      	add	r7, sp, #0
 80179b4:	4603      	mov	r3, r0
 80179b6:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 80179b8:	bf00      	nop
 80179ba:	370c      	adds	r7, #12
 80179bc:	46bd      	mov	sp, r7
 80179be:	bc80      	pop	{r7}
 80179c0:	4770      	bx	lr
	...

080179c4 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 80179c4:	b480      	push	{r7}
 80179c6:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 80179c8:	4b04      	ldr	r3, [pc, #16]	; (80179dc <UTIL_LPM_Init+0x18>)
 80179ca:	2200      	movs	r2, #0
 80179cc:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 80179ce:	4b04      	ldr	r3, [pc, #16]	; (80179e0 <UTIL_LPM_Init+0x1c>)
 80179d0:	2200      	movs	r2, #0
 80179d2:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 80179d4:	bf00      	nop
 80179d6:	46bd      	mov	sp, r7
 80179d8:	bc80      	pop	{r7}
 80179da:	4770      	bx	lr
 80179dc:	20000e00 	.word	0x20000e00
 80179e0:	20000e04 	.word	0x20000e04

080179e4 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 80179e4:	b480      	push	{r7}
 80179e6:	b087      	sub	sp, #28
 80179e8:	af00      	add	r7, sp, #0
 80179ea:	6078      	str	r0, [r7, #4]
 80179ec:	460b      	mov	r3, r1
 80179ee:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80179f0:	f3ef 8310 	mrs	r3, PRIMASK
 80179f4:	613b      	str	r3, [r7, #16]
  return(result);
 80179f6:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 80179f8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80179fa:	b672      	cpsid	i
}
 80179fc:	bf00      	nop
  
  switch( state )
 80179fe:	78fb      	ldrb	r3, [r7, #3]
 8017a00:	2b00      	cmp	r3, #0
 8017a02:	d008      	beq.n	8017a16 <UTIL_LPM_SetStopMode+0x32>
 8017a04:	2b01      	cmp	r3, #1
 8017a06:	d10e      	bne.n	8017a26 <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 8017a08:	4b0d      	ldr	r3, [pc, #52]	; (8017a40 <UTIL_LPM_SetStopMode+0x5c>)
 8017a0a:	681a      	ldr	r2, [r3, #0]
 8017a0c:	687b      	ldr	r3, [r7, #4]
 8017a0e:	4313      	orrs	r3, r2
 8017a10:	4a0b      	ldr	r2, [pc, #44]	; (8017a40 <UTIL_LPM_SetStopMode+0x5c>)
 8017a12:	6013      	str	r3, [r2, #0]
      break;
 8017a14:	e008      	b.n	8017a28 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 8017a16:	687b      	ldr	r3, [r7, #4]
 8017a18:	43da      	mvns	r2, r3
 8017a1a:	4b09      	ldr	r3, [pc, #36]	; (8017a40 <UTIL_LPM_SetStopMode+0x5c>)
 8017a1c:	681b      	ldr	r3, [r3, #0]
 8017a1e:	4013      	ands	r3, r2
 8017a20:	4a07      	ldr	r2, [pc, #28]	; (8017a40 <UTIL_LPM_SetStopMode+0x5c>)
 8017a22:	6013      	str	r3, [r2, #0]
      break;
 8017a24:	e000      	b.n	8017a28 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 8017a26:	bf00      	nop
 8017a28:	697b      	ldr	r3, [r7, #20]
 8017a2a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017a2c:	68fb      	ldr	r3, [r7, #12]
 8017a2e:	f383 8810 	msr	PRIMASK, r3
}
 8017a32:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8017a34:	bf00      	nop
 8017a36:	371c      	adds	r7, #28
 8017a38:	46bd      	mov	sp, r7
 8017a3a:	bc80      	pop	{r7}
 8017a3c:	4770      	bx	lr
 8017a3e:	bf00      	nop
 8017a40:	20000e00 	.word	0x20000e00

08017a44 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8017a44:	b480      	push	{r7}
 8017a46:	b087      	sub	sp, #28
 8017a48:	af00      	add	r7, sp, #0
 8017a4a:	6078      	str	r0, [r7, #4]
 8017a4c:	460b      	mov	r3, r1
 8017a4e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017a50:	f3ef 8310 	mrs	r3, PRIMASK
 8017a54:	613b      	str	r3, [r7, #16]
  return(result);
 8017a56:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8017a58:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8017a5a:	b672      	cpsid	i
}
 8017a5c:	bf00      	nop
  
  switch(state)
 8017a5e:	78fb      	ldrb	r3, [r7, #3]
 8017a60:	2b00      	cmp	r3, #0
 8017a62:	d008      	beq.n	8017a76 <UTIL_LPM_SetOffMode+0x32>
 8017a64:	2b01      	cmp	r3, #1
 8017a66:	d10e      	bne.n	8017a86 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8017a68:	4b0d      	ldr	r3, [pc, #52]	; (8017aa0 <UTIL_LPM_SetOffMode+0x5c>)
 8017a6a:	681a      	ldr	r2, [r3, #0]
 8017a6c:	687b      	ldr	r3, [r7, #4]
 8017a6e:	4313      	orrs	r3, r2
 8017a70:	4a0b      	ldr	r2, [pc, #44]	; (8017aa0 <UTIL_LPM_SetOffMode+0x5c>)
 8017a72:	6013      	str	r3, [r2, #0]
      break;
 8017a74:	e008      	b.n	8017a88 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8017a76:	687b      	ldr	r3, [r7, #4]
 8017a78:	43da      	mvns	r2, r3
 8017a7a:	4b09      	ldr	r3, [pc, #36]	; (8017aa0 <UTIL_LPM_SetOffMode+0x5c>)
 8017a7c:	681b      	ldr	r3, [r3, #0]
 8017a7e:	4013      	ands	r3, r2
 8017a80:	4a07      	ldr	r2, [pc, #28]	; (8017aa0 <UTIL_LPM_SetOffMode+0x5c>)
 8017a82:	6013      	str	r3, [r2, #0]
      break;
 8017a84:	e000      	b.n	8017a88 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8017a86:	bf00      	nop
 8017a88:	697b      	ldr	r3, [r7, #20]
 8017a8a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017a8c:	68fb      	ldr	r3, [r7, #12]
 8017a8e:	f383 8810 	msr	PRIMASK, r3
}
 8017a92:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8017a94:	bf00      	nop
 8017a96:	371c      	adds	r7, #28
 8017a98:	46bd      	mov	sp, r7
 8017a9a:	bc80      	pop	{r7}
 8017a9c:	4770      	bx	lr
 8017a9e:	bf00      	nop
 8017aa0:	20000e04 	.word	0x20000e04

08017aa4 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 8017aa4:	b580      	push	{r7, lr}
 8017aa6:	b084      	sub	sp, #16
 8017aa8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017aaa:	f3ef 8310 	mrs	r3, PRIMASK
 8017aae:	60bb      	str	r3, [r7, #8]
  return(result);
 8017ab0:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 8017ab2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8017ab4:	b672      	cpsid	i
}
 8017ab6:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 8017ab8:	4b12      	ldr	r3, [pc, #72]	; (8017b04 <UTIL_LPM_EnterLowPower+0x60>)
 8017aba:	681b      	ldr	r3, [r3, #0]
 8017abc:	2b00      	cmp	r3, #0
 8017abe:	d006      	beq.n	8017ace <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 8017ac0:	4b11      	ldr	r3, [pc, #68]	; (8017b08 <UTIL_LPM_EnterLowPower+0x64>)
 8017ac2:	681b      	ldr	r3, [r3, #0]
 8017ac4:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 8017ac6:	4b10      	ldr	r3, [pc, #64]	; (8017b08 <UTIL_LPM_EnterLowPower+0x64>)
 8017ac8:	685b      	ldr	r3, [r3, #4]
 8017aca:	4798      	blx	r3
 8017acc:	e010      	b.n	8017af0 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 8017ace:	4b0f      	ldr	r3, [pc, #60]	; (8017b0c <UTIL_LPM_EnterLowPower+0x68>)
 8017ad0:	681b      	ldr	r3, [r3, #0]
 8017ad2:	2b00      	cmp	r3, #0
 8017ad4:	d006      	beq.n	8017ae4 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 8017ad6:	4b0c      	ldr	r3, [pc, #48]	; (8017b08 <UTIL_LPM_EnterLowPower+0x64>)
 8017ad8:	689b      	ldr	r3, [r3, #8]
 8017ada:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 8017adc:	4b0a      	ldr	r3, [pc, #40]	; (8017b08 <UTIL_LPM_EnterLowPower+0x64>)
 8017ade:	68db      	ldr	r3, [r3, #12]
 8017ae0:	4798      	blx	r3
 8017ae2:	e005      	b.n	8017af0 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 8017ae4:	4b08      	ldr	r3, [pc, #32]	; (8017b08 <UTIL_LPM_EnterLowPower+0x64>)
 8017ae6:	691b      	ldr	r3, [r3, #16]
 8017ae8:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 8017aea:	4b07      	ldr	r3, [pc, #28]	; (8017b08 <UTIL_LPM_EnterLowPower+0x64>)
 8017aec:	695b      	ldr	r3, [r3, #20]
 8017aee:	4798      	blx	r3
 8017af0:	68fb      	ldr	r3, [r7, #12]
 8017af2:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017af4:	687b      	ldr	r3, [r7, #4]
 8017af6:	f383 8810 	msr	PRIMASK, r3
}
 8017afa:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 8017afc:	bf00      	nop
 8017afe:	3710      	adds	r7, #16
 8017b00:	46bd      	mov	sp, r7
 8017b02:	bd80      	pop	{r7, pc}
 8017b04:	20000e00 	.word	0x20000e00
 8017b08:	080197fc 	.word	0x080197fc
 8017b0c:	20000e04 	.word	0x20000e04

08017b10 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 8017b10:	b480      	push	{r7}
 8017b12:	b087      	sub	sp, #28
 8017b14:	af00      	add	r7, sp, #0
 8017b16:	60f8      	str	r0, [r7, #12]
 8017b18:	60b9      	str	r1, [r7, #8]
 8017b1a:	4613      	mov	r3, r2
 8017b1c:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 8017b1e:	68fb      	ldr	r3, [r7, #12]
 8017b20:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 8017b22:	68bb      	ldr	r3, [r7, #8]
 8017b24:	613b      	str	r3, [r7, #16]

  while( size-- )
 8017b26:	e007      	b.n	8017b38 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 8017b28:	693a      	ldr	r2, [r7, #16]
 8017b2a:	1c53      	adds	r3, r2, #1
 8017b2c:	613b      	str	r3, [r7, #16]
 8017b2e:	697b      	ldr	r3, [r7, #20]
 8017b30:	1c59      	adds	r1, r3, #1
 8017b32:	6179      	str	r1, [r7, #20]
 8017b34:	7812      	ldrb	r2, [r2, #0]
 8017b36:	701a      	strb	r2, [r3, #0]
  while( size-- )
 8017b38:	88fb      	ldrh	r3, [r7, #6]
 8017b3a:	1e5a      	subs	r2, r3, #1
 8017b3c:	80fa      	strh	r2, [r7, #6]
 8017b3e:	2b00      	cmp	r3, #0
 8017b40:	d1f2      	bne.n	8017b28 <UTIL_MEM_cpy_8+0x18>
    }
}
 8017b42:	bf00      	nop
 8017b44:	bf00      	nop
 8017b46:	371c      	adds	r7, #28
 8017b48:	46bd      	mov	sp, r7
 8017b4a:	bc80      	pop	{r7}
 8017b4c:	4770      	bx	lr

08017b4e <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 8017b4e:	b480      	push	{r7}
 8017b50:	b085      	sub	sp, #20
 8017b52:	af00      	add	r7, sp, #0
 8017b54:	6078      	str	r0, [r7, #4]
 8017b56:	460b      	mov	r3, r1
 8017b58:	70fb      	strb	r3, [r7, #3]
 8017b5a:	4613      	mov	r3, r2
 8017b5c:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 8017b5e:	687b      	ldr	r3, [r7, #4]
 8017b60:	60fb      	str	r3, [r7, #12]
  while( size-- )
 8017b62:	e004      	b.n	8017b6e <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 8017b64:	68fb      	ldr	r3, [r7, #12]
 8017b66:	1c5a      	adds	r2, r3, #1
 8017b68:	60fa      	str	r2, [r7, #12]
 8017b6a:	78fa      	ldrb	r2, [r7, #3]
 8017b6c:	701a      	strb	r2, [r3, #0]
  while( size-- )
 8017b6e:	883b      	ldrh	r3, [r7, #0]
 8017b70:	1e5a      	subs	r2, r3, #1
 8017b72:	803a      	strh	r2, [r7, #0]
 8017b74:	2b00      	cmp	r3, #0
 8017b76:	d1f5      	bne.n	8017b64 <UTIL_MEM_set_8+0x16>
  }
}
 8017b78:	bf00      	nop
 8017b7a:	bf00      	nop
 8017b7c:	3714      	adds	r7, #20
 8017b7e:	46bd      	mov	sp, r7
 8017b80:	bc80      	pop	{r7}
 8017b82:	4770      	bx	lr

08017b84 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 8017b84:	b082      	sub	sp, #8
 8017b86:	b480      	push	{r7}
 8017b88:	b087      	sub	sp, #28
 8017b8a:	af00      	add	r7, sp, #0
 8017b8c:	60f8      	str	r0, [r7, #12]
 8017b8e:	1d38      	adds	r0, r7, #4
 8017b90:	e880 0006 	stmia.w	r0, {r1, r2}
 8017b94:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 8017b96:	2300      	movs	r3, #0
 8017b98:	613b      	str	r3, [r7, #16]
 8017b9a:	2300      	movs	r3, #0
 8017b9c:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 8017b9e:	687a      	ldr	r2, [r7, #4]
 8017ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ba2:	4413      	add	r3, r2
 8017ba4:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 8017ba6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8017baa:	b29a      	uxth	r2, r3
 8017bac:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8017bb0:	b29b      	uxth	r3, r3
 8017bb2:	4413      	add	r3, r2
 8017bb4:	b29b      	uxth	r3, r3
 8017bb6:	b21b      	sxth	r3, r3
 8017bb8:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 8017bba:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8017bbe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8017bc2:	db0a      	blt.n	8017bda <SysTimeAdd+0x56>
  {
    c.Seconds++;
 8017bc4:	693b      	ldr	r3, [r7, #16]
 8017bc6:	3301      	adds	r3, #1
 8017bc8:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 8017bca:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8017bce:	b29b      	uxth	r3, r3
 8017bd0:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8017bd4:	b29b      	uxth	r3, r3
 8017bd6:	b21b      	sxth	r3, r3
 8017bd8:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 8017bda:	68fb      	ldr	r3, [r7, #12]
 8017bdc:	461a      	mov	r2, r3
 8017bde:	f107 0310 	add.w	r3, r7, #16
 8017be2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017be6:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8017bea:	68f8      	ldr	r0, [r7, #12]
 8017bec:	371c      	adds	r7, #28
 8017bee:	46bd      	mov	sp, r7
 8017bf0:	bc80      	pop	{r7}
 8017bf2:	b002      	add	sp, #8
 8017bf4:	4770      	bx	lr

08017bf6 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 8017bf6:	b082      	sub	sp, #8
 8017bf8:	b480      	push	{r7}
 8017bfa:	b087      	sub	sp, #28
 8017bfc:	af00      	add	r7, sp, #0
 8017bfe:	60f8      	str	r0, [r7, #12]
 8017c00:	1d38      	adds	r0, r7, #4
 8017c02:	e880 0006 	stmia.w	r0, {r1, r2}
 8017c06:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 8017c08:	2300      	movs	r3, #0
 8017c0a:	613b      	str	r3, [r7, #16]
 8017c0c:	2300      	movs	r3, #0
 8017c0e:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 8017c10:	687a      	ldr	r2, [r7, #4]
 8017c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c14:	1ad3      	subs	r3, r2, r3
 8017c16:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 8017c18:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8017c1c:	b29a      	uxth	r2, r3
 8017c1e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8017c22:	b29b      	uxth	r3, r3
 8017c24:	1ad3      	subs	r3, r2, r3
 8017c26:	b29b      	uxth	r3, r3
 8017c28:	b21b      	sxth	r3, r3
 8017c2a:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 8017c2c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8017c30:	2b00      	cmp	r3, #0
 8017c32:	da0a      	bge.n	8017c4a <SysTimeSub+0x54>
  {
    c.Seconds--;
 8017c34:	693b      	ldr	r3, [r7, #16]
 8017c36:	3b01      	subs	r3, #1
 8017c38:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 8017c3a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8017c3e:	b29b      	uxth	r3, r3
 8017c40:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8017c44:	b29b      	uxth	r3, r3
 8017c46:	b21b      	sxth	r3, r3
 8017c48:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 8017c4a:	68fb      	ldr	r3, [r7, #12]
 8017c4c:	461a      	mov	r2, r3
 8017c4e:	f107 0310 	add.w	r3, r7, #16
 8017c52:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017c56:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8017c5a:	68f8      	ldr	r0, [r7, #12]
 8017c5c:	371c      	adds	r7, #28
 8017c5e:	46bd      	mov	sp, r7
 8017c60:	bc80      	pop	{r7}
 8017c62:	b002      	add	sp, #8
 8017c64:	4770      	bx	lr
	...

08017c68 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 8017c68:	b580      	push	{r7, lr}
 8017c6a:	b088      	sub	sp, #32
 8017c6c:	af02      	add	r7, sp, #8
 8017c6e:	463b      	mov	r3, r7
 8017c70:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8017c74:	2300      	movs	r3, #0
 8017c76:	60bb      	str	r3, [r7, #8]
 8017c78:	2300      	movs	r3, #0
 8017c7a:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8017c7c:	4b10      	ldr	r3, [pc, #64]	; (8017cc0 <SysTimeSet+0x58>)
 8017c7e:	691b      	ldr	r3, [r3, #16]
 8017c80:	f107 0208 	add.w	r2, r7, #8
 8017c84:	3204      	adds	r2, #4
 8017c86:	4610      	mov	r0, r2
 8017c88:	4798      	blx	r3
 8017c8a:	4603      	mov	r3, r0
 8017c8c:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 8017c8e:	f107 0010 	add.w	r0, r7, #16
 8017c92:	68fb      	ldr	r3, [r7, #12]
 8017c94:	9300      	str	r3, [sp, #0]
 8017c96:	68bb      	ldr	r3, [r7, #8]
 8017c98:	463a      	mov	r2, r7
 8017c9a:	ca06      	ldmia	r2, {r1, r2}
 8017c9c:	f7ff ffab 	bl	8017bf6 <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 8017ca0:	4b07      	ldr	r3, [pc, #28]	; (8017cc0 <SysTimeSet+0x58>)
 8017ca2:	681b      	ldr	r3, [r3, #0]
 8017ca4:	693a      	ldr	r2, [r7, #16]
 8017ca6:	4610      	mov	r0, r2
 8017ca8:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 8017caa:	4b05      	ldr	r3, [pc, #20]	; (8017cc0 <SysTimeSet+0x58>)
 8017cac:	689b      	ldr	r3, [r3, #8]
 8017cae:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8017cb2:	4610      	mov	r0, r2
 8017cb4:	4798      	blx	r3
}
 8017cb6:	bf00      	nop
 8017cb8:	3718      	adds	r7, #24
 8017cba:	46bd      	mov	sp, r7
 8017cbc:	bd80      	pop	{r7, pc}
 8017cbe:	bf00      	nop
 8017cc0:	080198e0 	.word	0x080198e0

08017cc4 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 8017cc4:	b580      	push	{r7, lr}
 8017cc6:	b08a      	sub	sp, #40	; 0x28
 8017cc8:	af02      	add	r7, sp, #8
 8017cca:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8017ccc:	2300      	movs	r3, #0
 8017cce:	61bb      	str	r3, [r7, #24]
 8017cd0:	2300      	movs	r3, #0
 8017cd2:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 8017cd4:	2300      	movs	r3, #0
 8017cd6:	613b      	str	r3, [r7, #16]
 8017cd8:	2300      	movs	r3, #0
 8017cda:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8017cdc:	4b14      	ldr	r3, [pc, #80]	; (8017d30 <SysTimeGet+0x6c>)
 8017cde:	691b      	ldr	r3, [r3, #16]
 8017ce0:	f107 0218 	add.w	r2, r7, #24
 8017ce4:	3204      	adds	r2, #4
 8017ce6:	4610      	mov	r0, r2
 8017ce8:	4798      	blx	r3
 8017cea:	4603      	mov	r3, r0
 8017cec:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8017cee:	4b10      	ldr	r3, [pc, #64]	; (8017d30 <SysTimeGet+0x6c>)
 8017cf0:	68db      	ldr	r3, [r3, #12]
 8017cf2:	4798      	blx	r3
 8017cf4:	4603      	mov	r3, r0
 8017cf6:	b21b      	sxth	r3, r3
 8017cf8:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8017cfa:	4b0d      	ldr	r3, [pc, #52]	; (8017d30 <SysTimeGet+0x6c>)
 8017cfc:	685b      	ldr	r3, [r3, #4]
 8017cfe:	4798      	blx	r3
 8017d00:	4603      	mov	r3, r0
 8017d02:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 8017d04:	f107 0010 	add.w	r0, r7, #16
 8017d08:	69fb      	ldr	r3, [r7, #28]
 8017d0a:	9300      	str	r3, [sp, #0]
 8017d0c:	69bb      	ldr	r3, [r7, #24]
 8017d0e:	f107 0208 	add.w	r2, r7, #8
 8017d12:	ca06      	ldmia	r2, {r1, r2}
 8017d14:	f7ff ff36 	bl	8017b84 <SysTimeAdd>

  return sysTime;
 8017d18:	687b      	ldr	r3, [r7, #4]
 8017d1a:	461a      	mov	r2, r3
 8017d1c:	f107 0310 	add.w	r3, r7, #16
 8017d20:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017d24:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8017d28:	6878      	ldr	r0, [r7, #4]
 8017d2a:	3720      	adds	r7, #32
 8017d2c:	46bd      	mov	sp, r7
 8017d2e:	bd80      	pop	{r7, pc}
 8017d30:	080198e0 	.word	0x080198e0

08017d34 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 8017d34:	b580      	push	{r7, lr}
 8017d36:	b084      	sub	sp, #16
 8017d38:	af00      	add	r7, sp, #0
 8017d3a:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8017d3c:	2300      	movs	r3, #0
 8017d3e:	60bb      	str	r3, [r7, #8]
 8017d40:	2300      	movs	r3, #0
 8017d42:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8017d44:	4b0a      	ldr	r3, [pc, #40]	; (8017d70 <SysTimeGetMcuTime+0x3c>)
 8017d46:	691b      	ldr	r3, [r3, #16]
 8017d48:	f107 0208 	add.w	r2, r7, #8
 8017d4c:	3204      	adds	r2, #4
 8017d4e:	4610      	mov	r0, r2
 8017d50:	4798      	blx	r3
 8017d52:	4603      	mov	r3, r0
 8017d54:	60bb      	str	r3, [r7, #8]
  
  return calendarTime;
 8017d56:	687b      	ldr	r3, [r7, #4]
 8017d58:	461a      	mov	r2, r3
 8017d5a:	f107 0308 	add.w	r3, r7, #8
 8017d5e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017d62:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8017d66:	6878      	ldr	r0, [r7, #4]
 8017d68:	3710      	adds	r7, #16
 8017d6a:	46bd      	mov	sp, r7
 8017d6c:	bd80      	pop	{r7, pc}
 8017d6e:	bf00      	nop
 8017d70:	080198e0 	.word	0x080198e0

08017d74 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 8017d74:	b580      	push	{r7, lr}
 8017d76:	b088      	sub	sp, #32
 8017d78:	af02      	add	r7, sp, #8
 8017d7a:	463b      	mov	r3, r7
 8017d7c:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8017d80:	4b0f      	ldr	r3, [pc, #60]	; (8017dc0 <SysTimeToMs+0x4c>)
 8017d82:	68db      	ldr	r3, [r3, #12]
 8017d84:	4798      	blx	r3
 8017d86:	4603      	mov	r3, r0
 8017d88:	b21b      	sxth	r3, r3
 8017d8a:	82bb      	strh	r3, [r7, #20]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8017d8c:	4b0c      	ldr	r3, [pc, #48]	; (8017dc0 <SysTimeToMs+0x4c>)
 8017d8e:	685b      	ldr	r3, [r3, #4]
 8017d90:	4798      	blx	r3
 8017d92:	4603      	mov	r3, r0
 8017d94:	613b      	str	r3, [r7, #16]
  
  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 8017d96:	f107 0008 	add.w	r0, r7, #8
 8017d9a:	697b      	ldr	r3, [r7, #20]
 8017d9c:	9300      	str	r3, [sp, #0]
 8017d9e:	693b      	ldr	r3, [r7, #16]
 8017da0:	463a      	mov	r2, r7
 8017da2:	ca06      	ldmia	r2, {r1, r2}
 8017da4:	f7ff ff27 	bl	8017bf6 <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 8017da8:	68bb      	ldr	r3, [r7, #8]
 8017daa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8017dae:	fb02 f303 	mul.w	r3, r2, r3
 8017db2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8017db6:	4413      	add	r3, r2
}
 8017db8:	4618      	mov	r0, r3
 8017dba:	3718      	adds	r7, #24
 8017dbc:	46bd      	mov	sp, r7
 8017dbe:	bd80      	pop	{r7, pc}
 8017dc0:	080198e0 	.word	0x080198e0

08017dc4 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 8017dc4:	b580      	push	{r7, lr}
 8017dc6:	b08a      	sub	sp, #40	; 0x28
 8017dc8:	af02      	add	r7, sp, #8
 8017dca:	6078      	str	r0, [r7, #4]
 8017dcc:	6039      	str	r1, [r7, #0]
  uint32_t seconds = timeMs / 1000;
 8017dce:	683b      	ldr	r3, [r7, #0]
 8017dd0:	4a19      	ldr	r2, [pc, #100]	; (8017e38 <SysTimeFromMs+0x74>)
 8017dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8017dd6:	099b      	lsrs	r3, r3, #6
 8017dd8:	61fb      	str	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 8017dda:	69fb      	ldr	r3, [r7, #28]
 8017ddc:	617b      	str	r3, [r7, #20]
 8017dde:	683b      	ldr	r3, [r7, #0]
 8017de0:	b29a      	uxth	r2, r3
 8017de2:	69fb      	ldr	r3, [r7, #28]
 8017de4:	b29b      	uxth	r3, r3
 8017de6:	4619      	mov	r1, r3
 8017de8:	0149      	lsls	r1, r1, #5
 8017dea:	1ac9      	subs	r1, r1, r3
 8017dec:	0089      	lsls	r1, r1, #2
 8017dee:	440b      	add	r3, r1
 8017df0:	00db      	lsls	r3, r3, #3
 8017df2:	b29b      	uxth	r3, r3
 8017df4:	1ad3      	subs	r3, r2, r3
 8017df6:	b29b      	uxth	r3, r3
 8017df8:	b21b      	sxth	r3, r3
 8017dfa:	833b      	strh	r3, [r7, #24]
  SysTime_t DeltaTime = { 0 };
 8017dfc:	f107 030c 	add.w	r3, r7, #12
 8017e00:	2200      	movs	r2, #0
 8017e02:	601a      	str	r2, [r3, #0]
 8017e04:	605a      	str	r2, [r3, #4]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8017e06:	4b0d      	ldr	r3, [pc, #52]	; (8017e3c <SysTimeFromMs+0x78>)
 8017e08:	68db      	ldr	r3, [r3, #12]
 8017e0a:	4798      	blx	r3
 8017e0c:	4603      	mov	r3, r0
 8017e0e:	b21b      	sxth	r3, r3
 8017e10:	823b      	strh	r3, [r7, #16]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8017e12:	4b0a      	ldr	r3, [pc, #40]	; (8017e3c <SysTimeFromMs+0x78>)
 8017e14:	685b      	ldr	r3, [r3, #4]
 8017e16:	4798      	blx	r3
 8017e18:	4603      	mov	r3, r0
 8017e1a:	60fb      	str	r3, [r7, #12]
  return SysTimeAdd( sysTime, DeltaTime );
 8017e1c:	6878      	ldr	r0, [r7, #4]
 8017e1e:	693b      	ldr	r3, [r7, #16]
 8017e20:	9300      	str	r3, [sp, #0]
 8017e22:	68fb      	ldr	r3, [r7, #12]
 8017e24:	f107 0214 	add.w	r2, r7, #20
 8017e28:	ca06      	ldmia	r2, {r1, r2}
 8017e2a:	f7ff feab 	bl	8017b84 <SysTimeAdd>
}
 8017e2e:	6878      	ldr	r0, [r7, #4]
 8017e30:	3720      	adds	r7, #32
 8017e32:	46bd      	mov	sp, r7
 8017e34:	bd80      	pop	{r7, pc}
 8017e36:	bf00      	nop
 8017e38:	10624dd3 	.word	0x10624dd3
 8017e3c:	080198e0 	.word	0x080198e0

08017e40 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 8017e40:	b480      	push	{r7}
 8017e42:	b085      	sub	sp, #20
 8017e44:	af00      	add	r7, sp, #0
 8017e46:	6078      	str	r0, [r7, #4]
  int i = 0;
 8017e48:	2300      	movs	r3, #0
 8017e4a:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 8017e4c:	e00e      	b.n	8017e6c <ee_skip_atoi+0x2c>
 8017e4e:	68fa      	ldr	r2, [r7, #12]
 8017e50:	4613      	mov	r3, r2
 8017e52:	009b      	lsls	r3, r3, #2
 8017e54:	4413      	add	r3, r2
 8017e56:	005b      	lsls	r3, r3, #1
 8017e58:	4618      	mov	r0, r3
 8017e5a:	687b      	ldr	r3, [r7, #4]
 8017e5c:	681b      	ldr	r3, [r3, #0]
 8017e5e:	1c59      	adds	r1, r3, #1
 8017e60:	687a      	ldr	r2, [r7, #4]
 8017e62:	6011      	str	r1, [r2, #0]
 8017e64:	781b      	ldrb	r3, [r3, #0]
 8017e66:	4403      	add	r3, r0
 8017e68:	3b30      	subs	r3, #48	; 0x30
 8017e6a:	60fb      	str	r3, [r7, #12]
 8017e6c:	687b      	ldr	r3, [r7, #4]
 8017e6e:	681b      	ldr	r3, [r3, #0]
 8017e70:	781b      	ldrb	r3, [r3, #0]
 8017e72:	2b2f      	cmp	r3, #47	; 0x2f
 8017e74:	d904      	bls.n	8017e80 <ee_skip_atoi+0x40>
 8017e76:	687b      	ldr	r3, [r7, #4]
 8017e78:	681b      	ldr	r3, [r3, #0]
 8017e7a:	781b      	ldrb	r3, [r3, #0]
 8017e7c:	2b39      	cmp	r3, #57	; 0x39
 8017e7e:	d9e6      	bls.n	8017e4e <ee_skip_atoi+0xe>
  return i;
 8017e80:	68fb      	ldr	r3, [r7, #12]
}
 8017e82:	4618      	mov	r0, r3
 8017e84:	3714      	adds	r7, #20
 8017e86:	46bd      	mov	sp, r7
 8017e88:	bc80      	pop	{r7}
 8017e8a:	4770      	bx	lr

08017e8c <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 8017e8c:	b480      	push	{r7}
 8017e8e:	b099      	sub	sp, #100	; 0x64
 8017e90:	af00      	add	r7, sp, #0
 8017e92:	60f8      	str	r0, [r7, #12]
 8017e94:	60b9      	str	r1, [r7, #8]
 8017e96:	607a      	str	r2, [r7, #4]
 8017e98:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 8017e9a:	4b72      	ldr	r3, [pc, #456]	; (8018064 <ee_number+0x1d8>)
 8017e9c:	681b      	ldr	r3, [r3, #0]
 8017e9e:	65bb      	str	r3, [r7, #88]	; 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 8017ea0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8017ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017ea6:	2b00      	cmp	r3, #0
 8017ea8:	d002      	beq.n	8017eb0 <ee_number+0x24>
 8017eaa:	4b6f      	ldr	r3, [pc, #444]	; (8018068 <ee_number+0x1dc>)
 8017eac:	681b      	ldr	r3, [r3, #0]
 8017eae:	65bb      	str	r3, [r7, #88]	; 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 8017eb0:	683b      	ldr	r3, [r7, #0]
 8017eb2:	2b01      	cmp	r3, #1
 8017eb4:	dd02      	ble.n	8017ebc <ee_number+0x30>
 8017eb6:	683b      	ldr	r3, [r7, #0]
 8017eb8:	2b24      	cmp	r3, #36	; 0x24
 8017eba:	dd01      	ble.n	8017ec0 <ee_number+0x34>
 8017ebc:	2300      	movs	r3, #0
 8017ebe:	e0cc      	b.n	801805a <ee_number+0x1ce>
  
  c = (type & ZEROPAD) ? '0' : ' ';
 8017ec0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8017ec2:	f003 0301 	and.w	r3, r3, #1
 8017ec6:	2b00      	cmp	r3, #0
 8017ec8:	d001      	beq.n	8017ece <ee_number+0x42>
 8017eca:	2330      	movs	r3, #48	; 0x30
 8017ecc:	e000      	b.n	8017ed0 <ee_number+0x44>
 8017ece:	2320      	movs	r3, #32
 8017ed0:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  sign = 0;
 8017ed4:	2300      	movs	r3, #0
 8017ed6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (type & SIGN)
 8017eda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8017edc:	f003 0302 	and.w	r3, r3, #2
 8017ee0:	2b00      	cmp	r3, #0
 8017ee2:	d00b      	beq.n	8017efc <ee_number+0x70>
  {
    if (num < 0)
 8017ee4:	687b      	ldr	r3, [r7, #4]
 8017ee6:	2b00      	cmp	r3, #0
 8017ee8:	da08      	bge.n	8017efc <ee_number+0x70>
    {
      sign = '-';
 8017eea:	232d      	movs	r3, #45	; 0x2d
 8017eec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      num = -num;
 8017ef0:	687b      	ldr	r3, [r7, #4]
 8017ef2:	425b      	negs	r3, r3
 8017ef4:	607b      	str	r3, [r7, #4]
      size--;
 8017ef6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017ef8:	3b01      	subs	r3, #1
 8017efa:	66bb      	str	r3, [r7, #104]	; 0x68
    else if (base == 8)
      size--;
  }
#endif
  
  i = 0;
 8017efc:	2300      	movs	r3, #0
 8017efe:	657b      	str	r3, [r7, #84]	; 0x54

  if (num == 0)
 8017f00:	687b      	ldr	r3, [r7, #4]
 8017f02:	2b00      	cmp	r3, #0
 8017f04:	d120      	bne.n	8017f48 <ee_number+0xbc>
    tmp[i++] = '0';
 8017f06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017f08:	1c5a      	adds	r2, r3, #1
 8017f0a:	657a      	str	r2, [r7, #84]	; 0x54
 8017f0c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8017f10:	4413      	add	r3, r2
 8017f12:	2230      	movs	r2, #48	; 0x30
 8017f14:	f803 2c50 	strb.w	r2, [r3, #-80]
 8017f18:	e019      	b.n	8017f4e <ee_number+0xc2>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 8017f1a:	687b      	ldr	r3, [r7, #4]
 8017f1c:	683a      	ldr	r2, [r7, #0]
 8017f1e:	fbb3 f1f2 	udiv	r1, r3, r2
 8017f22:	fb02 f201 	mul.w	r2, r2, r1
 8017f26:	1a9b      	subs	r3, r3, r2
 8017f28:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8017f2a:	441a      	add	r2, r3
 8017f2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017f2e:	1c59      	adds	r1, r3, #1
 8017f30:	6579      	str	r1, [r7, #84]	; 0x54
 8017f32:	7812      	ldrb	r2, [r2, #0]
 8017f34:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8017f38:	440b      	add	r3, r1
 8017f3a:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 8017f3e:	687a      	ldr	r2, [r7, #4]
 8017f40:	683b      	ldr	r3, [r7, #0]
 8017f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8017f46:	607b      	str	r3, [r7, #4]
    while (num != 0)
 8017f48:	687b      	ldr	r3, [r7, #4]
 8017f4a:	2b00      	cmp	r3, #0
 8017f4c:	d1e5      	bne.n	8017f1a <ee_number+0x8e>
    }
  }

  if (i > precision) precision = i;
 8017f4e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8017f50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017f52:	429a      	cmp	r2, r3
 8017f54:	dd01      	ble.n	8017f5a <ee_number+0xce>
 8017f56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017f58:	66fb      	str	r3, [r7, #108]	; 0x6c
  size -= precision;
 8017f5a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8017f5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017f5e:	1ad3      	subs	r3, r2, r3
 8017f60:	66bb      	str	r3, [r7, #104]	; 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8017f62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8017f64:	f003 0301 	and.w	r3, r3, #1
 8017f68:	2b00      	cmp	r3, #0
 8017f6a:	d112      	bne.n	8017f92 <ee_number+0x106>
 8017f6c:	e00c      	b.n	8017f88 <ee_number+0xfc>
 8017f6e:	68fb      	ldr	r3, [r7, #12]
 8017f70:	1c5a      	adds	r2, r3, #1
 8017f72:	60fa      	str	r2, [r7, #12]
 8017f74:	2220      	movs	r2, #32
 8017f76:	701a      	strb	r2, [r3, #0]
 8017f78:	68bb      	ldr	r3, [r7, #8]
 8017f7a:	3b01      	subs	r3, #1
 8017f7c:	60bb      	str	r3, [r7, #8]
 8017f7e:	68bb      	ldr	r3, [r7, #8]
 8017f80:	2b00      	cmp	r3, #0
 8017f82:	d101      	bne.n	8017f88 <ee_number+0xfc>
 8017f84:	68fb      	ldr	r3, [r7, #12]
 8017f86:	e068      	b.n	801805a <ee_number+0x1ce>
 8017f88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017f8a:	1e5a      	subs	r2, r3, #1
 8017f8c:	66ba      	str	r2, [r7, #104]	; 0x68
 8017f8e:	2b00      	cmp	r3, #0
 8017f90:	dced      	bgt.n	8017f6e <ee_number+0xe2>
  if (sign) ASSIGN_STR(sign);
 8017f92:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8017f96:	2b00      	cmp	r3, #0
 8017f98:	d01b      	beq.n	8017fd2 <ee_number+0x146>
 8017f9a:	68fb      	ldr	r3, [r7, #12]
 8017f9c:	1c5a      	adds	r2, r3, #1
 8017f9e:	60fa      	str	r2, [r7, #12]
 8017fa0:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8017fa4:	701a      	strb	r2, [r3, #0]
 8017fa6:	68bb      	ldr	r3, [r7, #8]
 8017fa8:	3b01      	subs	r3, #1
 8017faa:	60bb      	str	r3, [r7, #8]
 8017fac:	68bb      	ldr	r3, [r7, #8]
 8017fae:	2b00      	cmp	r3, #0
 8017fb0:	d10f      	bne.n	8017fd2 <ee_number+0x146>
 8017fb2:	68fb      	ldr	r3, [r7, #12]
 8017fb4:	e051      	b.n	801805a <ee_number+0x1ce>
    }
  }
#endif
  
#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 8017fb6:	68fb      	ldr	r3, [r7, #12]
 8017fb8:	1c5a      	adds	r2, r3, #1
 8017fba:	60fa      	str	r2, [r7, #12]
 8017fbc:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 8017fc0:	701a      	strb	r2, [r3, #0]
 8017fc2:	68bb      	ldr	r3, [r7, #8]
 8017fc4:	3b01      	subs	r3, #1
 8017fc6:	60bb      	str	r3, [r7, #8]
 8017fc8:	68bb      	ldr	r3, [r7, #8]
 8017fca:	2b00      	cmp	r3, #0
 8017fcc:	d101      	bne.n	8017fd2 <ee_number+0x146>
 8017fce:	68fb      	ldr	r3, [r7, #12]
 8017fd0:	e043      	b.n	801805a <ee_number+0x1ce>
 8017fd2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017fd4:	1e5a      	subs	r2, r3, #1
 8017fd6:	66ba      	str	r2, [r7, #104]	; 0x68
 8017fd8:	2b00      	cmp	r3, #0
 8017fda:	dcec      	bgt.n	8017fb6 <ee_number+0x12a>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 8017fdc:	e00c      	b.n	8017ff8 <ee_number+0x16c>
 8017fde:	68fb      	ldr	r3, [r7, #12]
 8017fe0:	1c5a      	adds	r2, r3, #1
 8017fe2:	60fa      	str	r2, [r7, #12]
 8017fe4:	2230      	movs	r2, #48	; 0x30
 8017fe6:	701a      	strb	r2, [r3, #0]
 8017fe8:	68bb      	ldr	r3, [r7, #8]
 8017fea:	3b01      	subs	r3, #1
 8017fec:	60bb      	str	r3, [r7, #8]
 8017fee:	68bb      	ldr	r3, [r7, #8]
 8017ff0:	2b00      	cmp	r3, #0
 8017ff2:	d101      	bne.n	8017ff8 <ee_number+0x16c>
 8017ff4:	68fb      	ldr	r3, [r7, #12]
 8017ff6:	e030      	b.n	801805a <ee_number+0x1ce>
 8017ff8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017ffa:	1e5a      	subs	r2, r3, #1
 8017ffc:	66fa      	str	r2, [r7, #108]	; 0x6c
 8017ffe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8018000:	429a      	cmp	r2, r3
 8018002:	dbec      	blt.n	8017fde <ee_number+0x152>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 8018004:	e010      	b.n	8018028 <ee_number+0x19c>
 8018006:	68fb      	ldr	r3, [r7, #12]
 8018008:	1c5a      	adds	r2, r3, #1
 801800a:	60fa      	str	r2, [r7, #12]
 801800c:	f107 0110 	add.w	r1, r7, #16
 8018010:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8018012:	440a      	add	r2, r1
 8018014:	7812      	ldrb	r2, [r2, #0]
 8018016:	701a      	strb	r2, [r3, #0]
 8018018:	68bb      	ldr	r3, [r7, #8]
 801801a:	3b01      	subs	r3, #1
 801801c:	60bb      	str	r3, [r7, #8]
 801801e:	68bb      	ldr	r3, [r7, #8]
 8018020:	2b00      	cmp	r3, #0
 8018022:	d101      	bne.n	8018028 <ee_number+0x19c>
 8018024:	68fb      	ldr	r3, [r7, #12]
 8018026:	e018      	b.n	801805a <ee_number+0x1ce>
 8018028:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801802a:	1e5a      	subs	r2, r3, #1
 801802c:	657a      	str	r2, [r7, #84]	; 0x54
 801802e:	2b00      	cmp	r3, #0
 8018030:	dce9      	bgt.n	8018006 <ee_number+0x17a>
  while (size-- > 0) ASSIGN_STR(' ');
 8018032:	e00c      	b.n	801804e <ee_number+0x1c2>
 8018034:	68fb      	ldr	r3, [r7, #12]
 8018036:	1c5a      	adds	r2, r3, #1
 8018038:	60fa      	str	r2, [r7, #12]
 801803a:	2220      	movs	r2, #32
 801803c:	701a      	strb	r2, [r3, #0]
 801803e:	68bb      	ldr	r3, [r7, #8]
 8018040:	3b01      	subs	r3, #1
 8018042:	60bb      	str	r3, [r7, #8]
 8018044:	68bb      	ldr	r3, [r7, #8]
 8018046:	2b00      	cmp	r3, #0
 8018048:	d101      	bne.n	801804e <ee_number+0x1c2>
 801804a:	68fb      	ldr	r3, [r7, #12]
 801804c:	e005      	b.n	801805a <ee_number+0x1ce>
 801804e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8018050:	1e5a      	subs	r2, r3, #1
 8018052:	66ba      	str	r2, [r7, #104]	; 0x68
 8018054:	2b00      	cmp	r3, #0
 8018056:	dced      	bgt.n	8018034 <ee_number+0x1a8>

  return str;
 8018058:	68fb      	ldr	r3, [r7, #12]
}
 801805a:	4618      	mov	r0, r3
 801805c:	3764      	adds	r7, #100	; 0x64
 801805e:	46bd      	mov	sp, r7
 8018060:	bc80      	pop	{r7}
 8018062:	4770      	bx	lr
 8018064:	200000f4 	.word	0x200000f4
 8018068:	200000f8 	.word	0x200000f8

0801806c <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 801806c:	b580      	push	{r7, lr}
 801806e:	b092      	sub	sp, #72	; 0x48
 8018070:	af04      	add	r7, sp, #16
 8018072:	60f8      	str	r0, [r7, #12]
 8018074:	60b9      	str	r1, [r7, #8]
 8018076:	607a      	str	r2, [r7, #4]
 8018078:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 801807a:	68bb      	ldr	r3, [r7, #8]
 801807c:	2b00      	cmp	r3, #0
 801807e:	dc01      	bgt.n	8018084 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 8018080:	2300      	movs	r3, #0
 8018082:	e142      	b.n	801830a <tiny_vsnprintf_like+0x29e>
  }
  
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8018084:	68fb      	ldr	r3, [r7, #12]
 8018086:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018088:	e12a      	b.n	80182e0 <tiny_vsnprintf_like+0x274>
  {
    CHECK_STR_SIZE(buf, str, size);
 801808a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801808c:	68fb      	ldr	r3, [r7, #12]
 801808e:	1ad2      	subs	r2, r2, r3
 8018090:	68bb      	ldr	r3, [r7, #8]
 8018092:	3b01      	subs	r3, #1
 8018094:	429a      	cmp	r2, r3
 8018096:	f280 8131 	bge.w	80182fc <tiny_vsnprintf_like+0x290>
    
    if (*fmt != '%')
 801809a:	687b      	ldr	r3, [r7, #4]
 801809c:	781b      	ldrb	r3, [r3, #0]
 801809e:	2b25      	cmp	r3, #37	; 0x25
 80180a0:	d006      	beq.n	80180b0 <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 80180a2:	687a      	ldr	r2, [r7, #4]
 80180a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80180a6:	1c59      	adds	r1, r3, #1
 80180a8:	62f9      	str	r1, [r7, #44]	; 0x2c
 80180aa:	7812      	ldrb	r2, [r2, #0]
 80180ac:	701a      	strb	r2, [r3, #0]
      continue;
 80180ae:	e114      	b.n	80182da <tiny_vsnprintf_like+0x26e>
    }
                  
    // Process flags
    flags = 0;
 80180b0:	2300      	movs	r3, #0
 80180b2:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 80180b4:	687b      	ldr	r3, [r7, #4]
 80180b6:	3301      	adds	r3, #1
 80180b8:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 80180ba:	687b      	ldr	r3, [r7, #4]
 80180bc:	781b      	ldrb	r3, [r3, #0]
 80180be:	2b30      	cmp	r3, #48	; 0x30
 80180c0:	d103      	bne.n	80180ca <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 80180c2:	6a3b      	ldr	r3, [r7, #32]
 80180c4:	f043 0301 	orr.w	r3, r3, #1
 80180c8:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif
    
    // Get field width
    field_width = -1;
 80180ca:	f04f 33ff 	mov.w	r3, #4294967295
 80180ce:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 80180d0:	687b      	ldr	r3, [r7, #4]
 80180d2:	781b      	ldrb	r3, [r3, #0]
 80180d4:	2b2f      	cmp	r3, #47	; 0x2f
 80180d6:	d908      	bls.n	80180ea <tiny_vsnprintf_like+0x7e>
 80180d8:	687b      	ldr	r3, [r7, #4]
 80180da:	781b      	ldrb	r3, [r3, #0]
 80180dc:	2b39      	cmp	r3, #57	; 0x39
 80180de:	d804      	bhi.n	80180ea <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 80180e0:	1d3b      	adds	r3, r7, #4
 80180e2:	4618      	mov	r0, r3
 80180e4:	f7ff feac 	bl	8017e40 <ee_skip_atoi>
 80180e8:	61f8      	str	r0, [r7, #28]
      }
    }
#endif
    
    // Get the precision
    precision = -1;
 80180ea:	f04f 33ff 	mov.w	r3, #4294967295
 80180ee:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif
    
    // Get the conversion qualifier
    qualifier = -1;
 80180f0:	f04f 33ff 	mov.w	r3, #4294967295
 80180f4:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif
    
    // Default base
    base = 10;
 80180f6:	230a      	movs	r3, #10
 80180f8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (*fmt)
 80180fa:	687b      	ldr	r3, [r7, #4]
 80180fc:	781b      	ldrb	r3, [r3, #0]
 80180fe:	3b58      	subs	r3, #88	; 0x58
 8018100:	2b20      	cmp	r3, #32
 8018102:	f200 8094 	bhi.w	801822e <tiny_vsnprintf_like+0x1c2>
 8018106:	a201      	add	r2, pc, #4	; (adr r2, 801810c <tiny_vsnprintf_like+0xa0>)
 8018108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801810c:	08018217 	.word	0x08018217
 8018110:	0801822f 	.word	0x0801822f
 8018114:	0801822f 	.word	0x0801822f
 8018118:	0801822f 	.word	0x0801822f
 801811c:	0801822f 	.word	0x0801822f
 8018120:	0801822f 	.word	0x0801822f
 8018124:	0801822f 	.word	0x0801822f
 8018128:	0801822f 	.word	0x0801822f
 801812c:	0801822f 	.word	0x0801822f
 8018130:	0801822f 	.word	0x0801822f
 8018134:	0801822f 	.word	0x0801822f
 8018138:	0801819b 	.word	0x0801819b
 801813c:	08018225 	.word	0x08018225
 8018140:	0801822f 	.word	0x0801822f
 8018144:	0801822f 	.word	0x0801822f
 8018148:	0801822f 	.word	0x0801822f
 801814c:	0801822f 	.word	0x0801822f
 8018150:	08018225 	.word	0x08018225
 8018154:	0801822f 	.word	0x0801822f
 8018158:	0801822f 	.word	0x0801822f
 801815c:	0801822f 	.word	0x0801822f
 8018160:	0801822f 	.word	0x0801822f
 8018164:	0801822f 	.word	0x0801822f
 8018168:	0801822f 	.word	0x0801822f
 801816c:	0801822f 	.word	0x0801822f
 8018170:	0801822f 	.word	0x0801822f
 8018174:	0801822f 	.word	0x0801822f
 8018178:	080181bb 	.word	0x080181bb
 801817c:	0801822f 	.word	0x0801822f
 8018180:	0801827b 	.word	0x0801827b
 8018184:	0801822f 	.word	0x0801822f
 8018188:	0801822f 	.word	0x0801822f
 801818c:	0801821f 	.word	0x0801821f
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 8018190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018192:	1c5a      	adds	r2, r3, #1
 8018194:	62fa      	str	r2, [r7, #44]	; 0x2c
 8018196:	2220      	movs	r2, #32
 8018198:	701a      	strb	r2, [r3, #0]
 801819a:	69fb      	ldr	r3, [r7, #28]
 801819c:	3b01      	subs	r3, #1
 801819e:	61fb      	str	r3, [r7, #28]
 80181a0:	69fb      	ldr	r3, [r7, #28]
 80181a2:	2b00      	cmp	r3, #0
 80181a4:	dcf4      	bgt.n	8018190 <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 80181a6:	683b      	ldr	r3, [r7, #0]
 80181a8:	1d1a      	adds	r2, r3, #4
 80181aa:	603a      	str	r2, [r7, #0]
 80181ac:	6819      	ldr	r1, [r3, #0]
 80181ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80181b0:	1c5a      	adds	r2, r3, #1
 80181b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80181b4:	b2ca      	uxtb	r2, r1
 80181b6:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 80181b8:	e08f      	b.n	80182da <tiny_vsnprintf_like+0x26e>

      case 's':
        s = va_arg(args, char *);
 80181ba:	683b      	ldr	r3, [r7, #0]
 80181bc:	1d1a      	adds	r2, r3, #4
 80181be:	603a      	str	r2, [r7, #0]
 80181c0:	681b      	ldr	r3, [r3, #0]
 80181c2:	627b      	str	r3, [r7, #36]	; 0x24
        if (!s) s = "<NULL>";
 80181c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181c6:	2b00      	cmp	r3, #0
 80181c8:	d101      	bne.n	80181ce <tiny_vsnprintf_like+0x162>
 80181ca:	4b52      	ldr	r3, [pc, #328]	; (8018314 <tiny_vsnprintf_like+0x2a8>)
 80181cc:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 80181ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80181d0:	f7e7 ffd2 	bl	8000178 <strlen>
 80181d4:	4603      	mov	r3, r0
 80181d6:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 80181d8:	e004      	b.n	80181e4 <tiny_vsnprintf_like+0x178>
 80181da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80181dc:	1c5a      	adds	r2, r3, #1
 80181de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80181e0:	2220      	movs	r2, #32
 80181e2:	701a      	strb	r2, [r3, #0]
 80181e4:	69fb      	ldr	r3, [r7, #28]
 80181e6:	1e5a      	subs	r2, r3, #1
 80181e8:	61fa      	str	r2, [r7, #28]
 80181ea:	693a      	ldr	r2, [r7, #16]
 80181ec:	429a      	cmp	r2, r3
 80181ee:	dbf4      	blt.n	80181da <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 80181f0:	2300      	movs	r3, #0
 80181f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80181f4:	e00a      	b.n	801820c <tiny_vsnprintf_like+0x1a0>
 80181f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80181f8:	1c53      	adds	r3, r2, #1
 80181fa:	627b      	str	r3, [r7, #36]	; 0x24
 80181fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80181fe:	1c59      	adds	r1, r3, #1
 8018200:	62f9      	str	r1, [r7, #44]	; 0x2c
 8018202:	7812      	ldrb	r2, [r2, #0]
 8018204:	701a      	strb	r2, [r3, #0]
 8018206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018208:	3301      	adds	r3, #1
 801820a:	62bb      	str	r3, [r7, #40]	; 0x28
 801820c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801820e:	693b      	ldr	r3, [r7, #16]
 8018210:	429a      	cmp	r2, r3
 8018212:	dbf0      	blt.n	80181f6 <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else        
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 8018214:	e061      	b.n	80182da <tiny_vsnprintf_like+0x26e>
        base = 8;
        break;
#endif
      
      case 'X':
        flags |= UPPERCASE;
 8018216:	6a3b      	ldr	r3, [r7, #32]
 8018218:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801821c:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 801821e:	2310      	movs	r3, #16
 8018220:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 8018222:	e02d      	b.n	8018280 <tiny_vsnprintf_like+0x214>

      case 'd':
      case 'i':
        flags |= SIGN;
 8018224:	6a3b      	ldr	r3, [r7, #32]
 8018226:	f043 0302 	orr.w	r3, r3, #2
 801822a:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 801822c:	e025      	b.n	801827a <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 801822e:	687b      	ldr	r3, [r7, #4]
 8018230:	781b      	ldrb	r3, [r3, #0]
 8018232:	2b25      	cmp	r3, #37	; 0x25
 8018234:	d004      	beq.n	8018240 <tiny_vsnprintf_like+0x1d4>
 8018236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018238:	1c5a      	adds	r2, r3, #1
 801823a:	62fa      	str	r2, [r7, #44]	; 0x2c
 801823c:	2225      	movs	r2, #37	; 0x25
 801823e:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 8018240:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018242:	68fb      	ldr	r3, [r7, #12]
 8018244:	1ad2      	subs	r2, r2, r3
 8018246:	68bb      	ldr	r3, [r7, #8]
 8018248:	3b01      	subs	r3, #1
 801824a:	429a      	cmp	r2, r3
 801824c:	da17      	bge.n	801827e <tiny_vsnprintf_like+0x212>
        if (*fmt)
 801824e:	687b      	ldr	r3, [r7, #4]
 8018250:	781b      	ldrb	r3, [r3, #0]
 8018252:	2b00      	cmp	r3, #0
 8018254:	d006      	beq.n	8018264 <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 8018256:	687a      	ldr	r2, [r7, #4]
 8018258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801825a:	1c59      	adds	r1, r3, #1
 801825c:	62f9      	str	r1, [r7, #44]	; 0x2c
 801825e:	7812      	ldrb	r2, [r2, #0]
 8018260:	701a      	strb	r2, [r3, #0]
 8018262:	e002      	b.n	801826a <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 8018264:	687b      	ldr	r3, [r7, #4]
 8018266:	3b01      	subs	r3, #1
 8018268:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 801826a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801826c:	68fb      	ldr	r3, [r7, #12]
 801826e:	1ad2      	subs	r2, r2, r3
 8018270:	68bb      	ldr	r3, [r7, #8]
 8018272:	3b01      	subs	r3, #1
 8018274:	429a      	cmp	r2, r3
 8018276:	db2f      	blt.n	80182d8 <tiny_vsnprintf_like+0x26c>
 8018278:	e002      	b.n	8018280 <tiny_vsnprintf_like+0x214>
        break;
 801827a:	bf00      	nop
 801827c:	e000      	b.n	8018280 <tiny_vsnprintf_like+0x214>
        CHECK_STR_SIZE(buf, str, size);
 801827e:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 8018280:	697b      	ldr	r3, [r7, #20]
 8018282:	2b6c      	cmp	r3, #108	; 0x6c
 8018284:	d105      	bne.n	8018292 <tiny_vsnprintf_like+0x226>
      num = va_arg(args, unsigned long);
 8018286:	683b      	ldr	r3, [r7, #0]
 8018288:	1d1a      	adds	r2, r3, #4
 801828a:	603a      	str	r2, [r7, #0]
 801828c:	681b      	ldr	r3, [r3, #0]
 801828e:	637b      	str	r3, [r7, #52]	; 0x34
 8018290:	e00f      	b.n	80182b2 <tiny_vsnprintf_like+0x246>
    else if (flags & SIGN)
 8018292:	6a3b      	ldr	r3, [r7, #32]
 8018294:	f003 0302 	and.w	r3, r3, #2
 8018298:	2b00      	cmp	r3, #0
 801829a:	d005      	beq.n	80182a8 <tiny_vsnprintf_like+0x23c>
      num = va_arg(args, int);
 801829c:	683b      	ldr	r3, [r7, #0]
 801829e:	1d1a      	adds	r2, r3, #4
 80182a0:	603a      	str	r2, [r7, #0]
 80182a2:	681b      	ldr	r3, [r3, #0]
 80182a4:	637b      	str	r3, [r7, #52]	; 0x34
 80182a6:	e004      	b.n	80182b2 <tiny_vsnprintf_like+0x246>
    else
      num = va_arg(args, unsigned int);
 80182a8:	683b      	ldr	r3, [r7, #0]
 80182aa:	1d1a      	adds	r2, r3, #4
 80182ac:	603a      	str	r2, [r7, #0]
 80182ae:	681b      	ldr	r3, [r3, #0]
 80182b0:	637b      	str	r3, [r7, #52]	; 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 80182b2:	68bb      	ldr	r3, [r7, #8]
 80182b4:	1e5a      	subs	r2, r3, #1
 80182b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80182b8:	68fb      	ldr	r3, [r7, #12]
 80182ba:	1acb      	subs	r3, r1, r3
 80182bc:	1ad1      	subs	r1, r2, r3
 80182be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80182c0:	6a3b      	ldr	r3, [r7, #32]
 80182c2:	9302      	str	r3, [sp, #8]
 80182c4:	69bb      	ldr	r3, [r7, #24]
 80182c6:	9301      	str	r3, [sp, #4]
 80182c8:	69fb      	ldr	r3, [r7, #28]
 80182ca:	9300      	str	r3, [sp, #0]
 80182cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80182d0:	f7ff fddc 	bl	8017e8c <ee_number>
 80182d4:	62f8      	str	r0, [r7, #44]	; 0x2c
 80182d6:	e000      	b.n	80182da <tiny_vsnprintf_like+0x26e>
        continue;
 80182d8:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 80182da:	687b      	ldr	r3, [r7, #4]
 80182dc:	3301      	adds	r3, #1
 80182de:	607b      	str	r3, [r7, #4]
 80182e0:	687b      	ldr	r3, [r7, #4]
 80182e2:	781b      	ldrb	r3, [r3, #0]
 80182e4:	2b00      	cmp	r3, #0
 80182e6:	f47f aed0 	bne.w	801808a <tiny_vsnprintf_like+0x1e>
 80182ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80182ec:	68fb      	ldr	r3, [r7, #12]
 80182ee:	1ad2      	subs	r2, r2, r3
 80182f0:	68bb      	ldr	r3, [r7, #8]
 80182f2:	3b01      	subs	r3, #1
 80182f4:	429a      	cmp	r2, r3
 80182f6:	f6bf aec8 	bge.w	801808a <tiny_vsnprintf_like+0x1e>
 80182fa:	e000      	b.n	80182fe <tiny_vsnprintf_like+0x292>
    CHECK_STR_SIZE(buf, str, size);
 80182fc:	bf00      	nop
  }

  *str = '\0';
 80182fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018300:	2200      	movs	r2, #0
 8018302:	701a      	strb	r2, [r3, #0]
  return str - buf;
 8018304:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018306:	68fb      	ldr	r3, [r7, #12]
 8018308:	1ad3      	subs	r3, r2, r3
}
 801830a:	4618      	mov	r0, r3
 801830c:	3738      	adds	r7, #56	; 0x38
 801830e:	46bd      	mov	sp, r7
 8018310:	bd80      	pop	{r7, pc}
 8018312:	bf00      	nop
 8018314:	080197f4 	.word	0x080197f4

08018318 <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8018318:	b580      	push	{r7, lr}
 801831a:	b08c      	sub	sp, #48	; 0x30
 801831c:	af00      	add	r7, sp, #0
 801831e:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8018320:	4b67      	ldr	r3, [pc, #412]	; (80184c0 <UTIL_SEQ_Run+0x1a8>)
 8018322:	681b      	ldr	r3, [r3, #0]
 8018324:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 8018326:	4b66      	ldr	r3, [pc, #408]	; (80184c0 <UTIL_SEQ_Run+0x1a8>)
 8018328:	681a      	ldr	r2, [r3, #0]
 801832a:	687b      	ldr	r3, [r7, #4]
 801832c:	4013      	ands	r3, r2
 801832e:	4a64      	ldr	r2, [pc, #400]	; (80184c0 <UTIL_SEQ_Run+0x1a8>)
 8018330:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 8018332:	e083      	b.n	801843c <UTIL_SEQ_Run+0x124>
  {
    counter = 0U;
 8018334:	2300      	movs	r3, #0
 8018336:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 8018338:	e002      	b.n	8018340 <UTIL_SEQ_Run+0x28>
    {
      counter++;
 801833a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801833c:	3301      	adds	r3, #1
 801833e:	62fb      	str	r3, [r7, #44]	; 0x2c
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 8018340:	4a60      	ldr	r2, [pc, #384]	; (80184c4 <UTIL_SEQ_Run+0x1ac>)
 8018342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018344:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8018348:	4b5f      	ldr	r3, [pc, #380]	; (80184c8 <UTIL_SEQ_Run+0x1b0>)
 801834a:	681b      	ldr	r3, [r3, #0]
 801834c:	401a      	ands	r2, r3
 801834e:	4b5c      	ldr	r3, [pc, #368]	; (80184c0 <UTIL_SEQ_Run+0x1a8>)
 8018350:	681b      	ldr	r3, [r3, #0]
 8018352:	4013      	ands	r3, r2
 8018354:	2b00      	cmp	r3, #0
 8018356:	d0f0      	beq.n	801833a <UTIL_SEQ_Run+0x22>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 8018358:	4a5a      	ldr	r2, [pc, #360]	; (80184c4 <UTIL_SEQ_Run+0x1ac>)
 801835a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801835c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8018360:	4b59      	ldr	r3, [pc, #356]	; (80184c8 <UTIL_SEQ_Run+0x1b0>)
 8018362:	681b      	ldr	r3, [r3, #0]
 8018364:	401a      	ands	r2, r3
 8018366:	4b56      	ldr	r3, [pc, #344]	; (80184c0 <UTIL_SEQ_Run+0x1a8>)
 8018368:	681b      	ldr	r3, [r3, #0]
 801836a:	4013      	ands	r3, r2
 801836c:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801836e:	4a55      	ldr	r2, [pc, #340]	; (80184c4 <UTIL_SEQ_Run+0x1ac>)
 8018370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018372:	00db      	lsls	r3, r3, #3
 8018374:	4413      	add	r3, r2
 8018376:	685a      	ldr	r2, [r3, #4]
 8018378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801837a:	4013      	ands	r3, r2
 801837c:	2b00      	cmp	r3, #0
 801837e:	d106      	bne.n	801838e <UTIL_SEQ_Run+0x76>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8018380:	4a50      	ldr	r2, [pc, #320]	; (80184c4 <UTIL_SEQ_Run+0x1ac>)
 8018382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018384:	00db      	lsls	r3, r3, #3
 8018386:	4413      	add	r3, r2
 8018388:	f04f 32ff 	mov.w	r2, #4294967295
 801838c:	605a      	str	r2, [r3, #4]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801838e:	4a4d      	ldr	r2, [pc, #308]	; (80184c4 <UTIL_SEQ_Run+0x1ac>)
 8018390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018392:	00db      	lsls	r3, r3, #3
 8018394:	4413      	add	r3, r2
 8018396:	685a      	ldr	r2, [r3, #4]
 8018398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801839a:	4013      	ands	r3, r2
 801839c:	4618      	mov	r0, r3
 801839e:	f000 f8f9 	bl	8018594 <SEQ_BitPosition>
 80183a2:	4603      	mov	r3, r0
 80183a4:	461a      	mov	r2, r3
 80183a6:	4b49      	ldr	r3, [pc, #292]	; (80184cc <UTIL_SEQ_Run+0x1b4>)
 80183a8:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 80183aa:	4a46      	ldr	r2, [pc, #280]	; (80184c4 <UTIL_SEQ_Run+0x1ac>)
 80183ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80183ae:	00db      	lsls	r3, r3, #3
 80183b0:	4413      	add	r3, r2
 80183b2:	685a      	ldr	r2, [r3, #4]
 80183b4:	4b45      	ldr	r3, [pc, #276]	; (80184cc <UTIL_SEQ_Run+0x1b4>)
 80183b6:	681b      	ldr	r3, [r3, #0]
 80183b8:	2101      	movs	r1, #1
 80183ba:	fa01 f303 	lsl.w	r3, r1, r3
 80183be:	43db      	mvns	r3, r3
 80183c0:	401a      	ands	r2, r3
 80183c2:	4940      	ldr	r1, [pc, #256]	; (80184c4 <UTIL_SEQ_Run+0x1ac>)
 80183c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80183c6:	00db      	lsls	r3, r3, #3
 80183c8:	440b      	add	r3, r1
 80183ca:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80183cc:	f3ef 8310 	mrs	r3, PRIMASK
 80183d0:	61bb      	str	r3, [r7, #24]
  return(result);
 80183d2:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80183d4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80183d6:	b672      	cpsid	i
}
 80183d8:	bf00      	nop
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 80183da:	4b3c      	ldr	r3, [pc, #240]	; (80184cc <UTIL_SEQ_Run+0x1b4>)
 80183dc:	681b      	ldr	r3, [r3, #0]
 80183de:	2201      	movs	r2, #1
 80183e0:	fa02 f303 	lsl.w	r3, r2, r3
 80183e4:	43da      	mvns	r2, r3
 80183e6:	4b3a      	ldr	r3, [pc, #232]	; (80184d0 <UTIL_SEQ_Run+0x1b8>)
 80183e8:	681b      	ldr	r3, [r3, #0]
 80183ea:	4013      	ands	r3, r2
 80183ec:	4a38      	ldr	r2, [pc, #224]	; (80184d0 <UTIL_SEQ_Run+0x1b8>)
 80183ee:	6013      	str	r3, [r2, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80183f0:	2302      	movs	r3, #2
 80183f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80183f4:	e013      	b.n	801841e <UTIL_SEQ_Run+0x106>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 80183f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80183f8:	3b01      	subs	r3, #1
 80183fa:	4a32      	ldr	r2, [pc, #200]	; (80184c4 <UTIL_SEQ_Run+0x1ac>)
 80183fc:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8018400:	4b32      	ldr	r3, [pc, #200]	; (80184cc <UTIL_SEQ_Run+0x1b4>)
 8018402:	681b      	ldr	r3, [r3, #0]
 8018404:	2201      	movs	r2, #1
 8018406:	fa02 f303 	lsl.w	r3, r2, r3
 801840a:	43da      	mvns	r2, r3
 801840c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801840e:	3b01      	subs	r3, #1
 8018410:	400a      	ands	r2, r1
 8018412:	492c      	ldr	r1, [pc, #176]	; (80184c4 <UTIL_SEQ_Run+0x1ac>)
 8018414:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8018418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801841a:	3b01      	subs	r3, #1
 801841c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801841e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018420:	2b00      	cmp	r3, #0
 8018422:	d1e8      	bne.n	80183f6 <UTIL_SEQ_Run+0xde>
 8018424:	6a3b      	ldr	r3, [r7, #32]
 8018426:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018428:	697b      	ldr	r3, [r7, #20]
 801842a:	f383 8810 	msr	PRIMASK, r3
}
 801842e:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8018430:	4b26      	ldr	r3, [pc, #152]	; (80184cc <UTIL_SEQ_Run+0x1b4>)
 8018432:	681b      	ldr	r3, [r3, #0]
 8018434:	4a27      	ldr	r2, [pc, #156]	; (80184d4 <UTIL_SEQ_Run+0x1bc>)
 8018436:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801843a:	4798      	blx	r3
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 801843c:	4b24      	ldr	r3, [pc, #144]	; (80184d0 <UTIL_SEQ_Run+0x1b8>)
 801843e:	681a      	ldr	r2, [r3, #0]
 8018440:	4b21      	ldr	r3, [pc, #132]	; (80184c8 <UTIL_SEQ_Run+0x1b0>)
 8018442:	681b      	ldr	r3, [r3, #0]
 8018444:	401a      	ands	r2, r3
 8018446:	4b1e      	ldr	r3, [pc, #120]	; (80184c0 <UTIL_SEQ_Run+0x1a8>)
 8018448:	681b      	ldr	r3, [r3, #0]
 801844a:	4013      	ands	r3, r2
 801844c:	2b00      	cmp	r3, #0
 801844e:	d007      	beq.n	8018460 <UTIL_SEQ_Run+0x148>
 8018450:	4b21      	ldr	r3, [pc, #132]	; (80184d8 <UTIL_SEQ_Run+0x1c0>)
 8018452:	681a      	ldr	r2, [r3, #0]
 8018454:	4b21      	ldr	r3, [pc, #132]	; (80184dc <UTIL_SEQ_Run+0x1c4>)
 8018456:	681b      	ldr	r3, [r3, #0]
 8018458:	4013      	ands	r3, r2
 801845a:	2b00      	cmp	r3, #0
 801845c:	f43f af6a 	beq.w	8018334 <UTIL_SEQ_Run+0x1c>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8018460:	4b1a      	ldr	r3, [pc, #104]	; (80184cc <UTIL_SEQ_Run+0x1b4>)
 8018462:	f04f 32ff 	mov.w	r2, #4294967295
 8018466:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8018468:	f000 f888 	bl	801857c <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801846c:	f3ef 8310 	mrs	r3, PRIMASK
 8018470:	613b      	str	r3, [r7, #16]
  return(result);
 8018472:	693b      	ldr	r3, [r7, #16]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8018474:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8018476:	b672      	cpsid	i
}
 8018478:	bf00      	nop
  if (!(((TaskSet & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 801847a:	4b15      	ldr	r3, [pc, #84]	; (80184d0 <UTIL_SEQ_Run+0x1b8>)
 801847c:	681a      	ldr	r2, [r3, #0]
 801847e:	4b12      	ldr	r3, [pc, #72]	; (80184c8 <UTIL_SEQ_Run+0x1b0>)
 8018480:	681b      	ldr	r3, [r3, #0]
 8018482:	401a      	ands	r2, r3
 8018484:	4b0e      	ldr	r3, [pc, #56]	; (80184c0 <UTIL_SEQ_Run+0x1a8>)
 8018486:	681b      	ldr	r3, [r3, #0]
 8018488:	4013      	ands	r3, r2
 801848a:	2b00      	cmp	r3, #0
 801848c:	d108      	bne.n	80184a0 <UTIL_SEQ_Run+0x188>
 801848e:	4b12      	ldr	r3, [pc, #72]	; (80184d8 <UTIL_SEQ_Run+0x1c0>)
 8018490:	681a      	ldr	r2, [r3, #0]
 8018492:	4b12      	ldr	r3, [pc, #72]	; (80184dc <UTIL_SEQ_Run+0x1c4>)
 8018494:	681b      	ldr	r3, [r3, #0]
 8018496:	4013      	ands	r3, r2
 8018498:	2b00      	cmp	r3, #0
 801849a:	d101      	bne.n	80184a0 <UTIL_SEQ_Run+0x188>
  {
	UTIL_SEQ_Idle( );
 801849c:	f7e8 fff8 	bl	8001490 <UTIL_SEQ_Idle>
 80184a0:	69fb      	ldr	r3, [r7, #28]
 80184a2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80184a4:	68fb      	ldr	r3, [r7, #12]
 80184a6:	f383 8810 	msr	PRIMASK, r3
}
 80184aa:	bf00      	nop
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );
  
  UTIL_SEQ_PostIdle( );
 80184ac:	f000 f86c 	bl	8018588 <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 80184b0:	4a03      	ldr	r2, [pc, #12]	; (80184c0 <UTIL_SEQ_Run+0x1a8>)
 80184b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80184b4:	6013      	str	r3, [r2, #0]

  return;
 80184b6:	bf00      	nop
}
 80184b8:	3730      	adds	r7, #48	; 0x30
 80184ba:	46bd      	mov	sp, r7
 80184bc:	bd80      	pop	{r7, pc}
 80184be:	bf00      	nop
 80184c0:	20000100 	.word	0x20000100
 80184c4:	20000e98 	.word	0x20000e98
 80184c8:	200000fc 	.word	0x200000fc
 80184cc:	20000e14 	.word	0x20000e14
 80184d0:	20000e08 	.word	0x20000e08
 80184d4:	20000e18 	.word	0x20000e18
 80184d8:	20000e0c 	.word	0x20000e0c
 80184dc:	20000e10 	.word	0x20000e10

080184e0 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 80184e0:	b580      	push	{r7, lr}
 80184e2:	b088      	sub	sp, #32
 80184e4:	af00      	add	r7, sp, #0
 80184e6:	60f8      	str	r0, [r7, #12]
 80184e8:	60b9      	str	r1, [r7, #8]
 80184ea:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80184ec:	f3ef 8310 	mrs	r3, PRIMASK
 80184f0:	617b      	str	r3, [r7, #20]
  return(result);
 80184f2:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 80184f4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80184f6:	b672      	cpsid	i
}
 80184f8:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 80184fa:	68f8      	ldr	r0, [r7, #12]
 80184fc:	f000 f84a 	bl	8018594 <SEQ_BitPosition>
 8018500:	4603      	mov	r3, r0
 8018502:	4619      	mov	r1, r3
 8018504:	4a06      	ldr	r2, [pc, #24]	; (8018520 <UTIL_SEQ_RegTask+0x40>)
 8018506:	687b      	ldr	r3, [r7, #4]
 8018508:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801850c:	69fb      	ldr	r3, [r7, #28]
 801850e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018510:	69bb      	ldr	r3, [r7, #24]
 8018512:	f383 8810 	msr	PRIMASK, r3
}
 8018516:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8018518:	bf00      	nop
}
 801851a:	3720      	adds	r7, #32
 801851c:	46bd      	mov	sp, r7
 801851e:	bd80      	pop	{r7, pc}
 8018520:	20000e18 	.word	0x20000e18

08018524 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8018524:	b480      	push	{r7}
 8018526:	b087      	sub	sp, #28
 8018528:	af00      	add	r7, sp, #0
 801852a:	6078      	str	r0, [r7, #4]
 801852c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801852e:	f3ef 8310 	mrs	r3, PRIMASK
 8018532:	60fb      	str	r3, [r7, #12]
  return(result);
 8018534:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8018536:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8018538:	b672      	cpsid	i
}
 801853a:	bf00      	nop

  TaskSet |= TaskId_bm;
 801853c:	4b0d      	ldr	r3, [pc, #52]	; (8018574 <UTIL_SEQ_SetTask+0x50>)
 801853e:	681a      	ldr	r2, [r3, #0]
 8018540:	687b      	ldr	r3, [r7, #4]
 8018542:	4313      	orrs	r3, r2
 8018544:	4a0b      	ldr	r2, [pc, #44]	; (8018574 <UTIL_SEQ_SetTask+0x50>)
 8018546:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8018548:	4a0b      	ldr	r2, [pc, #44]	; (8018578 <UTIL_SEQ_SetTask+0x54>)
 801854a:	683b      	ldr	r3, [r7, #0]
 801854c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8018550:	687b      	ldr	r3, [r7, #4]
 8018552:	431a      	orrs	r2, r3
 8018554:	4908      	ldr	r1, [pc, #32]	; (8018578 <UTIL_SEQ_SetTask+0x54>)
 8018556:	683b      	ldr	r3, [r7, #0]
 8018558:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801855c:	697b      	ldr	r3, [r7, #20]
 801855e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018560:	693b      	ldr	r3, [r7, #16]
 8018562:	f383 8810 	msr	PRIMASK, r3
}
 8018566:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8018568:	bf00      	nop
}
 801856a:	371c      	adds	r7, #28
 801856c:	46bd      	mov	sp, r7
 801856e:	bc80      	pop	{r7}
 8018570:	4770      	bx	lr
 8018572:	bf00      	nop
 8018574:	20000e08 	.word	0x20000e08
 8018578:	20000e98 	.word	0x20000e98

0801857c <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801857c:	b480      	push	{r7}
 801857e:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8018580:	bf00      	nop
}
 8018582:	46bd      	mov	sp, r7
 8018584:	bc80      	pop	{r7}
 8018586:	4770      	bx	lr

08018588 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8018588:	b480      	push	{r7}
 801858a:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801858c:	bf00      	nop
}
 801858e:	46bd      	mov	sp, r7
 8018590:	bc80      	pop	{r7}
 8018592:	4770      	bx	lr

08018594 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8018594:	b480      	push	{r7}
 8018596:	b085      	sub	sp, #20
 8018598:	af00      	add	r7, sp, #0
 801859a:	6078      	str	r0, [r7, #4]
  uint8_t n = 0U;
 801859c:	2300      	movs	r3, #0
 801859e:	73fb      	strb	r3, [r7, #15]

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 80185a0:	687b      	ldr	r3, [r7, #4]
 80185a2:	0c1b      	lsrs	r3, r3, #16
 80185a4:	041b      	lsls	r3, r3, #16
 80185a6:	2b00      	cmp	r3, #0
 80185a8:	d104      	bne.n	80185b4 <SEQ_BitPosition+0x20>
 80185aa:	2310      	movs	r3, #16
 80185ac:	73fb      	strb	r3, [r7, #15]
 80185ae:	687b      	ldr	r3, [r7, #4]
 80185b0:	041b      	lsls	r3, r3, #16
 80185b2:	607b      	str	r3, [r7, #4]
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 80185b4:	687b      	ldr	r3, [r7, #4]
 80185b6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80185ba:	2b00      	cmp	r3, #0
 80185bc:	d105      	bne.n	80185ca <SEQ_BitPosition+0x36>
 80185be:	7bfb      	ldrb	r3, [r7, #15]
 80185c0:	3308      	adds	r3, #8
 80185c2:	73fb      	strb	r3, [r7, #15]
 80185c4:	687b      	ldr	r3, [r7, #4]
 80185c6:	021b      	lsls	r3, r3, #8
 80185c8:	607b      	str	r3, [r7, #4]
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 80185ca:	687b      	ldr	r3, [r7, #4]
 80185cc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80185d0:	2b00      	cmp	r3, #0
 80185d2:	d105      	bne.n	80185e0 <SEQ_BitPosition+0x4c>
 80185d4:	7bfb      	ldrb	r3, [r7, #15]
 80185d6:	3304      	adds	r3, #4
 80185d8:	73fb      	strb	r3, [r7, #15]
 80185da:	687b      	ldr	r3, [r7, #4]
 80185dc:	011b      	lsls	r3, r3, #4
 80185de:	607b      	str	r3, [r7, #4]

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 80185e0:	687b      	ldr	r3, [r7, #4]
 80185e2:	0f1b      	lsrs	r3, r3, #28
 80185e4:	4a06      	ldr	r2, [pc, #24]	; (8018600 <SEQ_BitPosition+0x6c>)
 80185e6:	5cd2      	ldrb	r2, [r2, r3]
 80185e8:	7bfb      	ldrb	r3, [r7, #15]
 80185ea:	4413      	add	r3, r2
 80185ec:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 80185ee:	7bfb      	ldrb	r3, [r7, #15]
 80185f0:	f1c3 031f 	rsb	r3, r3, #31
 80185f4:	b2db      	uxtb	r3, r3
}
 80185f6:	4618      	mov	r0, r3
 80185f8:	3714      	adds	r7, #20
 80185fa:	46bd      	mov	sp, r7
 80185fc:	bc80      	pop	{r7}
 80185fe:	4770      	bx	lr
 8018600:	08019db4 	.word	0x08019db4

08018604 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 8018604:	b580      	push	{r7, lr}
 8018606:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 8018608:	4b04      	ldr	r3, [pc, #16]	; (801861c <UTIL_TIMER_Init+0x18>)
 801860a:	2200      	movs	r2, #0
 801860c:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801860e:	4b04      	ldr	r3, [pc, #16]	; (8018620 <UTIL_TIMER_Init+0x1c>)
 8018610:	681b      	ldr	r3, [r3, #0]
 8018612:	4798      	blx	r3
 8018614:	4603      	mov	r3, r0
}
 8018616:	4618      	mov	r0, r3
 8018618:	bd80      	pop	{r7, pc}
 801861a:	bf00      	nop
 801861c:	20000ea8 	.word	0x20000ea8
 8018620:	080198b4 	.word	0x080198b4

08018624 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 8018624:	b580      	push	{r7, lr}
 8018626:	b084      	sub	sp, #16
 8018628:	af00      	add	r7, sp, #0
 801862a:	60f8      	str	r0, [r7, #12]
 801862c:	60b9      	str	r1, [r7, #8]
 801862e:	603b      	str	r3, [r7, #0]
 8018630:	4613      	mov	r3, r2
 8018632:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 8018634:	68fb      	ldr	r3, [r7, #12]
 8018636:	2b00      	cmp	r3, #0
 8018638:	d023      	beq.n	8018682 <UTIL_TIMER_Create+0x5e>
 801863a:	683b      	ldr	r3, [r7, #0]
 801863c:	2b00      	cmp	r3, #0
 801863e:	d020      	beq.n	8018682 <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 8018640:	68fb      	ldr	r3, [r7, #12]
 8018642:	2200      	movs	r2, #0
 8018644:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 8018646:	4b11      	ldr	r3, [pc, #68]	; (801868c <UTIL_TIMER_Create+0x68>)
 8018648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801864a:	68b8      	ldr	r0, [r7, #8]
 801864c:	4798      	blx	r3
 801864e:	4602      	mov	r2, r0
 8018650:	68fb      	ldr	r3, [r7, #12]
 8018652:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 8018654:	68fb      	ldr	r3, [r7, #12]
 8018656:	2200      	movs	r2, #0
 8018658:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801865a:	68fb      	ldr	r3, [r7, #12]
 801865c:	2200      	movs	r2, #0
 801865e:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 8018660:	68fb      	ldr	r3, [r7, #12]
 8018662:	2200      	movs	r2, #0
 8018664:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 8018666:	68fb      	ldr	r3, [r7, #12]
 8018668:	683a      	ldr	r2, [r7, #0]
 801866a:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801866c:	68fb      	ldr	r3, [r7, #12]
 801866e:	69ba      	ldr	r2, [r7, #24]
 8018670:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 8018672:	68fb      	ldr	r3, [r7, #12]
 8018674:	79fa      	ldrb	r2, [r7, #7]
 8018676:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 8018678:	68fb      	ldr	r3, [r7, #12]
 801867a:	2200      	movs	r2, #0
 801867c:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801867e:	2300      	movs	r3, #0
 8018680:	e000      	b.n	8018684 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 8018682:	2301      	movs	r3, #1
  }
}
 8018684:	4618      	mov	r0, r3
 8018686:	3710      	adds	r7, #16
 8018688:	46bd      	mov	sp, r7
 801868a:	bd80      	pop	{r7, pc}
 801868c:	080198b4 	.word	0x080198b4

08018690 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 8018690:	b580      	push	{r7, lr}
 8018692:	b08a      	sub	sp, #40	; 0x28
 8018694:	af00      	add	r7, sp, #0
 8018696:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 8018698:	2300      	movs	r3, #0
 801869a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801869e:	687b      	ldr	r3, [r7, #4]
 80186a0:	2b00      	cmp	r3, #0
 80186a2:	d056      	beq.n	8018752 <UTIL_TIMER_Start+0xc2>
 80186a4:	6878      	ldr	r0, [r7, #4]
 80186a6:	f000 f9a9 	bl	80189fc <TimerExists>
 80186aa:	4603      	mov	r3, r0
 80186ac:	f083 0301 	eor.w	r3, r3, #1
 80186b0:	b2db      	uxtb	r3, r3
 80186b2:	2b00      	cmp	r3, #0
 80186b4:	d04d      	beq.n	8018752 <UTIL_TIMER_Start+0xc2>
 80186b6:	687b      	ldr	r3, [r7, #4]
 80186b8:	7a5b      	ldrb	r3, [r3, #9]
 80186ba:	2b00      	cmp	r3, #0
 80186bc:	d149      	bne.n	8018752 <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80186be:	f3ef 8310 	mrs	r3, PRIMASK
 80186c2:	613b      	str	r3, [r7, #16]
  return(result);
 80186c4:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 80186c6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80186c8:	b672      	cpsid	i
}
 80186ca:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 80186cc:	687b      	ldr	r3, [r7, #4]
 80186ce:	685b      	ldr	r3, [r3, #4]
 80186d0:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 80186d2:	4b24      	ldr	r3, [pc, #144]	; (8018764 <UTIL_TIMER_Start+0xd4>)
 80186d4:	6a1b      	ldr	r3, [r3, #32]
 80186d6:	4798      	blx	r3
 80186d8:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 80186da:	6a3a      	ldr	r2, [r7, #32]
 80186dc:	69bb      	ldr	r3, [r7, #24]
 80186de:	429a      	cmp	r2, r3
 80186e0:	d201      	bcs.n	80186e6 <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 80186e2:	69bb      	ldr	r3, [r7, #24]
 80186e4:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 80186e6:	687b      	ldr	r3, [r7, #4]
 80186e8:	6a3a      	ldr	r2, [r7, #32]
 80186ea:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 80186ec:	687b      	ldr	r3, [r7, #4]
 80186ee:	2200      	movs	r2, #0
 80186f0:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 80186f2:	687b      	ldr	r3, [r7, #4]
 80186f4:	2201      	movs	r2, #1
 80186f6:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 80186f8:	687b      	ldr	r3, [r7, #4]
 80186fa:	2200      	movs	r2, #0
 80186fc:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 80186fe:	4b1a      	ldr	r3, [pc, #104]	; (8018768 <UTIL_TIMER_Start+0xd8>)
 8018700:	681b      	ldr	r3, [r3, #0]
 8018702:	2b00      	cmp	r3, #0
 8018704:	d106      	bne.n	8018714 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 8018706:	4b17      	ldr	r3, [pc, #92]	; (8018764 <UTIL_TIMER_Start+0xd4>)
 8018708:	691b      	ldr	r3, [r3, #16]
 801870a:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801870c:	6878      	ldr	r0, [r7, #4]
 801870e:	f000 f9eb 	bl	8018ae8 <TimerInsertNewHeadTimer>
 8018712:	e017      	b.n	8018744 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 8018714:	4b13      	ldr	r3, [pc, #76]	; (8018764 <UTIL_TIMER_Start+0xd4>)
 8018716:	699b      	ldr	r3, [r3, #24]
 8018718:	4798      	blx	r3
 801871a:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801871c:	687b      	ldr	r3, [r7, #4]
 801871e:	681a      	ldr	r2, [r3, #0]
 8018720:	697b      	ldr	r3, [r7, #20]
 8018722:	441a      	add	r2, r3
 8018724:	687b      	ldr	r3, [r7, #4]
 8018726:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 8018728:	687b      	ldr	r3, [r7, #4]
 801872a:	681a      	ldr	r2, [r3, #0]
 801872c:	4b0e      	ldr	r3, [pc, #56]	; (8018768 <UTIL_TIMER_Start+0xd8>)
 801872e:	681b      	ldr	r3, [r3, #0]
 8018730:	681b      	ldr	r3, [r3, #0]
 8018732:	429a      	cmp	r2, r3
 8018734:	d203      	bcs.n	801873e <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 8018736:	6878      	ldr	r0, [r7, #4]
 8018738:	f000 f9d6 	bl	8018ae8 <TimerInsertNewHeadTimer>
 801873c:	e002      	b.n	8018744 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801873e:	6878      	ldr	r0, [r7, #4]
 8018740:	f000 f9a2 	bl	8018a88 <TimerInsertTimer>
 8018744:	69fb      	ldr	r3, [r7, #28]
 8018746:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018748:	68fb      	ldr	r3, [r7, #12]
 801874a:	f383 8810 	msr	PRIMASK, r3
}
 801874e:	bf00      	nop
  {
 8018750:	e002      	b.n	8018758 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 8018752:	2301      	movs	r3, #1
 8018754:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 8018758:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801875c:	4618      	mov	r0, r3
 801875e:	3728      	adds	r7, #40	; 0x28
 8018760:	46bd      	mov	sp, r7
 8018762:	bd80      	pop	{r7, pc}
 8018764:	080198b4 	.word	0x080198b4
 8018768:	20000ea8 	.word	0x20000ea8

0801876c <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801876c:	b580      	push	{r7, lr}
 801876e:	b088      	sub	sp, #32
 8018770:	af00      	add	r7, sp, #0
 8018772:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 8018774:	2300      	movs	r3, #0
 8018776:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 8018778:	687b      	ldr	r3, [r7, #4]
 801877a:	2b00      	cmp	r3, #0
 801877c:	d05b      	beq.n	8018836 <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801877e:	f3ef 8310 	mrs	r3, PRIMASK
 8018782:	60fb      	str	r3, [r7, #12]
  return(result);
 8018784:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 8018786:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8018788:	b672      	cpsid	i
}
 801878a:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801878c:	4b2d      	ldr	r3, [pc, #180]	; (8018844 <UTIL_TIMER_Stop+0xd8>)
 801878e:	681b      	ldr	r3, [r3, #0]
 8018790:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 8018792:	4b2c      	ldr	r3, [pc, #176]	; (8018844 <UTIL_TIMER_Stop+0xd8>)
 8018794:	681b      	ldr	r3, [r3, #0]
 8018796:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 8018798:	687b      	ldr	r3, [r7, #4]
 801879a:	2201      	movs	r2, #1
 801879c:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801879e:	4b29      	ldr	r3, [pc, #164]	; (8018844 <UTIL_TIMER_Stop+0xd8>)
 80187a0:	681b      	ldr	r3, [r3, #0]
 80187a2:	2b00      	cmp	r3, #0
 80187a4:	d041      	beq.n	801882a <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 80187a6:	687b      	ldr	r3, [r7, #4]
 80187a8:	2200      	movs	r2, #0
 80187aa:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 80187ac:	4b25      	ldr	r3, [pc, #148]	; (8018844 <UTIL_TIMER_Stop+0xd8>)
 80187ae:	681b      	ldr	r3, [r3, #0]
 80187b0:	687a      	ldr	r2, [r7, #4]
 80187b2:	429a      	cmp	r2, r3
 80187b4:	d134      	bne.n	8018820 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 80187b6:	4b23      	ldr	r3, [pc, #140]	; (8018844 <UTIL_TIMER_Stop+0xd8>)
 80187b8:	681b      	ldr	r3, [r3, #0]
 80187ba:	2200      	movs	r2, #0
 80187bc:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 80187be:	4b21      	ldr	r3, [pc, #132]	; (8018844 <UTIL_TIMER_Stop+0xd8>)
 80187c0:	681b      	ldr	r3, [r3, #0]
 80187c2:	695b      	ldr	r3, [r3, #20]
 80187c4:	2b00      	cmp	r3, #0
 80187c6:	d00a      	beq.n	80187de <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 80187c8:	4b1e      	ldr	r3, [pc, #120]	; (8018844 <UTIL_TIMER_Stop+0xd8>)
 80187ca:	681b      	ldr	r3, [r3, #0]
 80187cc:	695b      	ldr	r3, [r3, #20]
 80187ce:	4a1d      	ldr	r2, [pc, #116]	; (8018844 <UTIL_TIMER_Stop+0xd8>)
 80187d0:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 80187d2:	4b1c      	ldr	r3, [pc, #112]	; (8018844 <UTIL_TIMER_Stop+0xd8>)
 80187d4:	681b      	ldr	r3, [r3, #0]
 80187d6:	4618      	mov	r0, r3
 80187d8:	f000 f92c 	bl	8018a34 <TimerSetTimeout>
 80187dc:	e023      	b.n	8018826 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 80187de:	4b1a      	ldr	r3, [pc, #104]	; (8018848 <UTIL_TIMER_Stop+0xdc>)
 80187e0:	68db      	ldr	r3, [r3, #12]
 80187e2:	4798      	blx	r3
            TimerListHead = NULL;
 80187e4:	4b17      	ldr	r3, [pc, #92]	; (8018844 <UTIL_TIMER_Stop+0xd8>)
 80187e6:	2200      	movs	r2, #0
 80187e8:	601a      	str	r2, [r3, #0]
 80187ea:	e01c      	b.n	8018826 <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 80187ec:	697a      	ldr	r2, [r7, #20]
 80187ee:	687b      	ldr	r3, [r7, #4]
 80187f0:	429a      	cmp	r2, r3
 80187f2:	d110      	bne.n	8018816 <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 80187f4:	697b      	ldr	r3, [r7, #20]
 80187f6:	695b      	ldr	r3, [r3, #20]
 80187f8:	2b00      	cmp	r3, #0
 80187fa:	d006      	beq.n	801880a <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 80187fc:	697b      	ldr	r3, [r7, #20]
 80187fe:	695b      	ldr	r3, [r3, #20]
 8018800:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 8018802:	69bb      	ldr	r3, [r7, #24]
 8018804:	697a      	ldr	r2, [r7, #20]
 8018806:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 8018808:	e00d      	b.n	8018826 <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 801880a:	2300      	movs	r3, #0
 801880c:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801880e:	69bb      	ldr	r3, [r7, #24]
 8018810:	697a      	ldr	r2, [r7, #20]
 8018812:	615a      	str	r2, [r3, #20]
            break;
 8018814:	e007      	b.n	8018826 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 8018816:	697b      	ldr	r3, [r7, #20]
 8018818:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801881a:	697b      	ldr	r3, [r7, #20]
 801881c:	695b      	ldr	r3, [r3, #20]
 801881e:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 8018820:	697b      	ldr	r3, [r7, #20]
 8018822:	2b00      	cmp	r3, #0
 8018824:	d1e2      	bne.n	80187ec <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 8018826:	2300      	movs	r3, #0
 8018828:	77fb      	strb	r3, [r7, #31]
 801882a:	693b      	ldr	r3, [r7, #16]
 801882c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801882e:	68bb      	ldr	r3, [r7, #8]
 8018830:	f383 8810 	msr	PRIMASK, r3
}
 8018834:	e001      	b.n	801883a <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 8018836:	2301      	movs	r3, #1
 8018838:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 801883a:	7ffb      	ldrb	r3, [r7, #31]
}
 801883c:	4618      	mov	r0, r3
 801883e:	3720      	adds	r7, #32
 8018840:	46bd      	mov	sp, r7
 8018842:	bd80      	pop	{r7, pc}
 8018844:	20000ea8 	.word	0x20000ea8
 8018848:	080198b4 	.word	0x080198b4

0801884c <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801884c:	b580      	push	{r7, lr}
 801884e:	b084      	sub	sp, #16
 8018850:	af00      	add	r7, sp, #0
 8018852:	6078      	str	r0, [r7, #4]
 8018854:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 8018856:	2300      	movs	r3, #0
 8018858:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 801885a:	687b      	ldr	r3, [r7, #4]
 801885c:	2b00      	cmp	r3, #0
 801885e:	d102      	bne.n	8018866 <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 8018860:	2301      	movs	r3, #1
 8018862:	73fb      	strb	r3, [r7, #15]
 8018864:	e014      	b.n	8018890 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 8018866:	4b0d      	ldr	r3, [pc, #52]	; (801889c <UTIL_TIMER_SetPeriod+0x50>)
 8018868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801886a:	6838      	ldr	r0, [r7, #0]
 801886c:	4798      	blx	r3
 801886e:	4602      	mov	r2, r0
 8018870:	687b      	ldr	r3, [r7, #4]
 8018872:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 8018874:	6878      	ldr	r0, [r7, #4]
 8018876:	f000 f8c1 	bl	80189fc <TimerExists>
 801887a:	4603      	mov	r3, r0
 801887c:	2b00      	cmp	r3, #0
 801887e:	d007      	beq.n	8018890 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 8018880:	6878      	ldr	r0, [r7, #4]
 8018882:	f7ff ff73 	bl	801876c <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 8018886:	6878      	ldr	r0, [r7, #4]
 8018888:	f7ff ff02 	bl	8018690 <UTIL_TIMER_Start>
 801888c:	4603      	mov	r3, r0
 801888e:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 8018890:	7bfb      	ldrb	r3, [r7, #15]
}
 8018892:	4618      	mov	r0, r3
 8018894:	3710      	adds	r7, #16
 8018896:	46bd      	mov	sp, r7
 8018898:	bd80      	pop	{r7, pc}
 801889a:	bf00      	nop
 801889c:	080198b4 	.word	0x080198b4

080188a0 <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 80188a0:	b590      	push	{r4, r7, lr}
 80188a2:	b089      	sub	sp, #36	; 0x24
 80188a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80188a6:	f3ef 8310 	mrs	r3, PRIMASK
 80188aa:	60bb      	str	r3, [r7, #8]
  return(result);
 80188ac:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 80188ae:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 80188b0:	b672      	cpsid	i
}
 80188b2:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 80188b4:	4b38      	ldr	r3, [pc, #224]	; (8018998 <UTIL_TIMER_IRQ_Handler+0xf8>)
 80188b6:	695b      	ldr	r3, [r3, #20]
 80188b8:	4798      	blx	r3
 80188ba:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 80188bc:	4b36      	ldr	r3, [pc, #216]	; (8018998 <UTIL_TIMER_IRQ_Handler+0xf8>)
 80188be:	691b      	ldr	r3, [r3, #16]
 80188c0:	4798      	blx	r3
 80188c2:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 80188c4:	693a      	ldr	r2, [r7, #16]
 80188c6:	697b      	ldr	r3, [r7, #20]
 80188c8:	1ad3      	subs	r3, r2, r3
 80188ca:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 80188cc:	4b33      	ldr	r3, [pc, #204]	; (801899c <UTIL_TIMER_IRQ_Handler+0xfc>)
 80188ce:	681b      	ldr	r3, [r3, #0]
 80188d0:	2b00      	cmp	r3, #0
 80188d2:	d037      	beq.n	8018944 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 80188d4:	4b31      	ldr	r3, [pc, #196]	; (801899c <UTIL_TIMER_IRQ_Handler+0xfc>)
 80188d6:	681b      	ldr	r3, [r3, #0]
 80188d8:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 80188da:	69fb      	ldr	r3, [r7, #28]
 80188dc:	681b      	ldr	r3, [r3, #0]
 80188de:	68fa      	ldr	r2, [r7, #12]
 80188e0:	429a      	cmp	r2, r3
 80188e2:	d206      	bcs.n	80188f2 <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 80188e4:	69fb      	ldr	r3, [r7, #28]
 80188e6:	681a      	ldr	r2, [r3, #0]
 80188e8:	68fb      	ldr	r3, [r7, #12]
 80188ea:	1ad2      	subs	r2, r2, r3
 80188ec:	69fb      	ldr	r3, [r7, #28]
 80188ee:	601a      	str	r2, [r3, #0]
 80188f0:	e002      	b.n	80188f8 <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 80188f2:	69fb      	ldr	r3, [r7, #28]
 80188f4:	2200      	movs	r2, #0
 80188f6:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 80188f8:	69fb      	ldr	r3, [r7, #28]
 80188fa:	695b      	ldr	r3, [r3, #20]
 80188fc:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 80188fe:	69fb      	ldr	r3, [r7, #28]
 8018900:	2b00      	cmp	r3, #0
 8018902:	d1ea      	bne.n	80188da <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 8018904:	e01e      	b.n	8018944 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 8018906:	4b25      	ldr	r3, [pc, #148]	; (801899c <UTIL_TIMER_IRQ_Handler+0xfc>)
 8018908:	681b      	ldr	r3, [r3, #0]
 801890a:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 801890c:	4b23      	ldr	r3, [pc, #140]	; (801899c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801890e:	681b      	ldr	r3, [r3, #0]
 8018910:	695b      	ldr	r3, [r3, #20]
 8018912:	4a22      	ldr	r2, [pc, #136]	; (801899c <UTIL_TIMER_IRQ_Handler+0xfc>)
 8018914:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 8018916:	69fb      	ldr	r3, [r7, #28]
 8018918:	2200      	movs	r2, #0
 801891a:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 801891c:	69fb      	ldr	r3, [r7, #28]
 801891e:	2200      	movs	r2, #0
 8018920:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 8018922:	69fb      	ldr	r3, [r7, #28]
 8018924:	68db      	ldr	r3, [r3, #12]
 8018926:	69fa      	ldr	r2, [r7, #28]
 8018928:	6912      	ldr	r2, [r2, #16]
 801892a:	4610      	mov	r0, r2
 801892c:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801892e:	69fb      	ldr	r3, [r7, #28]
 8018930:	7adb      	ldrb	r3, [r3, #11]
 8018932:	2b01      	cmp	r3, #1
 8018934:	d106      	bne.n	8018944 <UTIL_TIMER_IRQ_Handler+0xa4>
 8018936:	69fb      	ldr	r3, [r7, #28]
 8018938:	7a9b      	ldrb	r3, [r3, #10]
 801893a:	2b00      	cmp	r3, #0
 801893c:	d102      	bne.n	8018944 <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 801893e:	69f8      	ldr	r0, [r7, #28]
 8018940:	f7ff fea6 	bl	8018690 <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 8018944:	4b15      	ldr	r3, [pc, #84]	; (801899c <UTIL_TIMER_IRQ_Handler+0xfc>)
 8018946:	681b      	ldr	r3, [r3, #0]
 8018948:	2b00      	cmp	r3, #0
 801894a:	d00d      	beq.n	8018968 <UTIL_TIMER_IRQ_Handler+0xc8>
 801894c:	4b13      	ldr	r3, [pc, #76]	; (801899c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801894e:	681b      	ldr	r3, [r3, #0]
 8018950:	681b      	ldr	r3, [r3, #0]
 8018952:	2b00      	cmp	r3, #0
 8018954:	d0d7      	beq.n	8018906 <UTIL_TIMER_IRQ_Handler+0x66>
 8018956:	4b11      	ldr	r3, [pc, #68]	; (801899c <UTIL_TIMER_IRQ_Handler+0xfc>)
 8018958:	681b      	ldr	r3, [r3, #0]
 801895a:	681c      	ldr	r4, [r3, #0]
 801895c:	4b0e      	ldr	r3, [pc, #56]	; (8018998 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801895e:	699b      	ldr	r3, [r3, #24]
 8018960:	4798      	blx	r3
 8018962:	4603      	mov	r3, r0
 8018964:	429c      	cmp	r4, r3
 8018966:	d3ce      	bcc.n	8018906 <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 8018968:	4b0c      	ldr	r3, [pc, #48]	; (801899c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801896a:	681b      	ldr	r3, [r3, #0]
 801896c:	2b00      	cmp	r3, #0
 801896e:	d009      	beq.n	8018984 <UTIL_TIMER_IRQ_Handler+0xe4>
 8018970:	4b0a      	ldr	r3, [pc, #40]	; (801899c <UTIL_TIMER_IRQ_Handler+0xfc>)
 8018972:	681b      	ldr	r3, [r3, #0]
 8018974:	7a1b      	ldrb	r3, [r3, #8]
 8018976:	2b00      	cmp	r3, #0
 8018978:	d104      	bne.n	8018984 <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 801897a:	4b08      	ldr	r3, [pc, #32]	; (801899c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801897c:	681b      	ldr	r3, [r3, #0]
 801897e:	4618      	mov	r0, r3
 8018980:	f000 f858 	bl	8018a34 <TimerSetTimeout>
 8018984:	69bb      	ldr	r3, [r7, #24]
 8018986:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018988:	687b      	ldr	r3, [r7, #4]
 801898a:	f383 8810 	msr	PRIMASK, r3
}
 801898e:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 8018990:	bf00      	nop
 8018992:	3724      	adds	r7, #36	; 0x24
 8018994:	46bd      	mov	sp, r7
 8018996:	bd90      	pop	{r4, r7, pc}
 8018998:	080198b4 	.word	0x080198b4
 801899c:	20000ea8 	.word	0x20000ea8

080189a0 <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 80189a0:	b580      	push	{r7, lr}
 80189a2:	b082      	sub	sp, #8
 80189a4:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 80189a6:	4b06      	ldr	r3, [pc, #24]	; (80189c0 <UTIL_TIMER_GetCurrentTime+0x20>)
 80189a8:	69db      	ldr	r3, [r3, #28]
 80189aa:	4798      	blx	r3
 80189ac:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 80189ae:	4b04      	ldr	r3, [pc, #16]	; (80189c0 <UTIL_TIMER_GetCurrentTime+0x20>)
 80189b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80189b2:	6878      	ldr	r0, [r7, #4]
 80189b4:	4798      	blx	r3
 80189b6:	4603      	mov	r3, r0
}
 80189b8:	4618      	mov	r0, r3
 80189ba:	3708      	adds	r7, #8
 80189bc:	46bd      	mov	sp, r7
 80189be:	bd80      	pop	{r7, pc}
 80189c0:	080198b4 	.word	0x080198b4

080189c4 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 80189c4:	b580      	push	{r7, lr}
 80189c6:	b084      	sub	sp, #16
 80189c8:	af00      	add	r7, sp, #0
 80189ca:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 80189cc:	4b0a      	ldr	r3, [pc, #40]	; (80189f8 <UTIL_TIMER_GetElapsedTime+0x34>)
 80189ce:	69db      	ldr	r3, [r3, #28]
 80189d0:	4798      	blx	r3
 80189d2:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 80189d4:	4b08      	ldr	r3, [pc, #32]	; (80189f8 <UTIL_TIMER_GetElapsedTime+0x34>)
 80189d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80189d8:	6878      	ldr	r0, [r7, #4]
 80189da:	4798      	blx	r3
 80189dc:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 80189de:	4b06      	ldr	r3, [pc, #24]	; (80189f8 <UTIL_TIMER_GetElapsedTime+0x34>)
 80189e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80189e2:	68f9      	ldr	r1, [r7, #12]
 80189e4:	68ba      	ldr	r2, [r7, #8]
 80189e6:	1a8a      	subs	r2, r1, r2
 80189e8:	4610      	mov	r0, r2
 80189ea:	4798      	blx	r3
 80189ec:	4603      	mov	r3, r0
}
 80189ee:	4618      	mov	r0, r3
 80189f0:	3710      	adds	r7, #16
 80189f2:	46bd      	mov	sp, r7
 80189f4:	bd80      	pop	{r7, pc}
 80189f6:	bf00      	nop
 80189f8:	080198b4 	.word	0x080198b4

080189fc <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 80189fc:	b480      	push	{r7}
 80189fe:	b085      	sub	sp, #20
 8018a00:	af00      	add	r7, sp, #0
 8018a02:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8018a04:	4b0a      	ldr	r3, [pc, #40]	; (8018a30 <TimerExists+0x34>)
 8018a06:	681b      	ldr	r3, [r3, #0]
 8018a08:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 8018a0a:	e008      	b.n	8018a1e <TimerExists+0x22>
  {
    if( cur == TimerObject )
 8018a0c:	68fa      	ldr	r2, [r7, #12]
 8018a0e:	687b      	ldr	r3, [r7, #4]
 8018a10:	429a      	cmp	r2, r3
 8018a12:	d101      	bne.n	8018a18 <TimerExists+0x1c>
    {
      return true;
 8018a14:	2301      	movs	r3, #1
 8018a16:	e006      	b.n	8018a26 <TimerExists+0x2a>
    }
    cur = cur->Next;
 8018a18:	68fb      	ldr	r3, [r7, #12]
 8018a1a:	695b      	ldr	r3, [r3, #20]
 8018a1c:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 8018a1e:	68fb      	ldr	r3, [r7, #12]
 8018a20:	2b00      	cmp	r3, #0
 8018a22:	d1f3      	bne.n	8018a0c <TimerExists+0x10>
  }
  return false;
 8018a24:	2300      	movs	r3, #0
}
 8018a26:	4618      	mov	r0, r3
 8018a28:	3714      	adds	r7, #20
 8018a2a:	46bd      	mov	sp, r7
 8018a2c:	bc80      	pop	{r7}
 8018a2e:	4770      	bx	lr
 8018a30:	20000ea8 	.word	0x20000ea8

08018a34 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 8018a34:	b590      	push	{r4, r7, lr}
 8018a36:	b085      	sub	sp, #20
 8018a38:	af00      	add	r7, sp, #0
 8018a3a:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 8018a3c:	4b11      	ldr	r3, [pc, #68]	; (8018a84 <TimerSetTimeout+0x50>)
 8018a3e:	6a1b      	ldr	r3, [r3, #32]
 8018a40:	4798      	blx	r3
 8018a42:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 8018a44:	687b      	ldr	r3, [r7, #4]
 8018a46:	2201      	movs	r2, #1
 8018a48:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 8018a4a:	687b      	ldr	r3, [r7, #4]
 8018a4c:	681c      	ldr	r4, [r3, #0]
 8018a4e:	4b0d      	ldr	r3, [pc, #52]	; (8018a84 <TimerSetTimeout+0x50>)
 8018a50:	699b      	ldr	r3, [r3, #24]
 8018a52:	4798      	blx	r3
 8018a54:	4602      	mov	r2, r0
 8018a56:	68fb      	ldr	r3, [r7, #12]
 8018a58:	4413      	add	r3, r2
 8018a5a:	429c      	cmp	r4, r3
 8018a5c:	d207      	bcs.n	8018a6e <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 8018a5e:	4b09      	ldr	r3, [pc, #36]	; (8018a84 <TimerSetTimeout+0x50>)
 8018a60:	699b      	ldr	r3, [r3, #24]
 8018a62:	4798      	blx	r3
 8018a64:	4602      	mov	r2, r0
 8018a66:	68fb      	ldr	r3, [r7, #12]
 8018a68:	441a      	add	r2, r3
 8018a6a:	687b      	ldr	r3, [r7, #4]
 8018a6c:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 8018a6e:	4b05      	ldr	r3, [pc, #20]	; (8018a84 <TimerSetTimeout+0x50>)
 8018a70:	689b      	ldr	r3, [r3, #8]
 8018a72:	687a      	ldr	r2, [r7, #4]
 8018a74:	6812      	ldr	r2, [r2, #0]
 8018a76:	4610      	mov	r0, r2
 8018a78:	4798      	blx	r3
}
 8018a7a:	bf00      	nop
 8018a7c:	3714      	adds	r7, #20
 8018a7e:	46bd      	mov	sp, r7
 8018a80:	bd90      	pop	{r4, r7, pc}
 8018a82:	bf00      	nop
 8018a84:	080198b4 	.word	0x080198b4

08018a88 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 8018a88:	b480      	push	{r7}
 8018a8a:	b085      	sub	sp, #20
 8018a8c:	af00      	add	r7, sp, #0
 8018a8e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8018a90:	4b14      	ldr	r3, [pc, #80]	; (8018ae4 <TimerInsertTimer+0x5c>)
 8018a92:	681b      	ldr	r3, [r3, #0]
 8018a94:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 8018a96:	4b13      	ldr	r3, [pc, #76]	; (8018ae4 <TimerInsertTimer+0x5c>)
 8018a98:	681b      	ldr	r3, [r3, #0]
 8018a9a:	695b      	ldr	r3, [r3, #20]
 8018a9c:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 8018a9e:	e012      	b.n	8018ac6 <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 8018aa0:	687b      	ldr	r3, [r7, #4]
 8018aa2:	681a      	ldr	r2, [r3, #0]
 8018aa4:	68bb      	ldr	r3, [r7, #8]
 8018aa6:	681b      	ldr	r3, [r3, #0]
 8018aa8:	429a      	cmp	r2, r3
 8018aaa:	d905      	bls.n	8018ab8 <TimerInsertTimer+0x30>
    {
        cur = next;
 8018aac:	68bb      	ldr	r3, [r7, #8]
 8018aae:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 8018ab0:	68bb      	ldr	r3, [r7, #8]
 8018ab2:	695b      	ldr	r3, [r3, #20]
 8018ab4:	60bb      	str	r3, [r7, #8]
 8018ab6:	e006      	b.n	8018ac6 <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 8018ab8:	68fb      	ldr	r3, [r7, #12]
 8018aba:	687a      	ldr	r2, [r7, #4]
 8018abc:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 8018abe:	687b      	ldr	r3, [r7, #4]
 8018ac0:	68ba      	ldr	r2, [r7, #8]
 8018ac2:	615a      	str	r2, [r3, #20]
        return;
 8018ac4:	e009      	b.n	8018ada <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 8018ac6:	68fb      	ldr	r3, [r7, #12]
 8018ac8:	695b      	ldr	r3, [r3, #20]
 8018aca:	2b00      	cmp	r3, #0
 8018acc:	d1e8      	bne.n	8018aa0 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 8018ace:	68fb      	ldr	r3, [r7, #12]
 8018ad0:	687a      	ldr	r2, [r7, #4]
 8018ad2:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 8018ad4:	687b      	ldr	r3, [r7, #4]
 8018ad6:	2200      	movs	r2, #0
 8018ad8:	615a      	str	r2, [r3, #20]
}
 8018ada:	3714      	adds	r7, #20
 8018adc:	46bd      	mov	sp, r7
 8018ade:	bc80      	pop	{r7}
 8018ae0:	4770      	bx	lr
 8018ae2:	bf00      	nop
 8018ae4:	20000ea8 	.word	0x20000ea8

08018ae8 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 8018ae8:	b580      	push	{r7, lr}
 8018aea:	b084      	sub	sp, #16
 8018aec:	af00      	add	r7, sp, #0
 8018aee:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8018af0:	4b0b      	ldr	r3, [pc, #44]	; (8018b20 <TimerInsertNewHeadTimer+0x38>)
 8018af2:	681b      	ldr	r3, [r3, #0]
 8018af4:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 8018af6:	68fb      	ldr	r3, [r7, #12]
 8018af8:	2b00      	cmp	r3, #0
 8018afa:	d002      	beq.n	8018b02 <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 8018afc:	68fb      	ldr	r3, [r7, #12]
 8018afe:	2200      	movs	r2, #0
 8018b00:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 8018b02:	687b      	ldr	r3, [r7, #4]
 8018b04:	68fa      	ldr	r2, [r7, #12]
 8018b06:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 8018b08:	4a05      	ldr	r2, [pc, #20]	; (8018b20 <TimerInsertNewHeadTimer+0x38>)
 8018b0a:	687b      	ldr	r3, [r7, #4]
 8018b0c:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 8018b0e:	4b04      	ldr	r3, [pc, #16]	; (8018b20 <TimerInsertNewHeadTimer+0x38>)
 8018b10:	681b      	ldr	r3, [r3, #0]
 8018b12:	4618      	mov	r0, r3
 8018b14:	f7ff ff8e 	bl	8018a34 <TimerSetTimeout>
}
 8018b18:	bf00      	nop
 8018b1a:	3710      	adds	r7, #16
 8018b1c:	46bd      	mov	sp, r7
 8018b1e:	bd80      	pop	{r7, pc}
 8018b20:	20000ea8 	.word	0x20000ea8

08018b24 <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 8018b24:	b580      	push	{r7, lr}
 8018b26:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 8018b28:	2218      	movs	r2, #24
 8018b2a:	2100      	movs	r1, #0
 8018b2c:	4807      	ldr	r0, [pc, #28]	; (8018b4c <UTIL_ADV_TRACE_Init+0x28>)
 8018b2e:	f7ff f80e 	bl	8017b4e <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 8018b32:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8018b36:	2100      	movs	r1, #0
 8018b38:	4805      	ldr	r0, [pc, #20]	; (8018b50 <UTIL_ADV_TRACE_Init+0x2c>)
 8018b3a:	f7ff f808 	bl	8017b4e <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 8018b3e:	4b05      	ldr	r3, [pc, #20]	; (8018b54 <UTIL_ADV_TRACE_Init+0x30>)
 8018b40:	681b      	ldr	r3, [r3, #0]
 8018b42:	4805      	ldr	r0, [pc, #20]	; (8018b58 <UTIL_ADV_TRACE_Init+0x34>)
 8018b44:	4798      	blx	r3
 8018b46:	4603      	mov	r3, r0
}
 8018b48:	4618      	mov	r0, r3
 8018b4a:	bd80      	pop	{r7, pc}
 8018b4c:	20000eac 	.word	0x20000eac
 8018b50:	20000ec4 	.word	0x20000ec4
 8018b54:	080198f4 	.word	0x080198f4
 8018b58:	08018dc9 	.word	0x08018dc9

08018b5c <UTIL_ADV_TRACE_IsBufferEmpty>:
  /* Un-initialize the Low Level interface */
  return UTIL_TraceDriver.DeInit();
}

uint8_t UTIL_ADV_TRACE_IsBufferEmpty(void)
{
 8018b5c:	b480      	push	{r7}
 8018b5e:	af00      	add	r7, sp, #0
  /* check of the buffer is empty */
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 8018b60:	4b06      	ldr	r3, [pc, #24]	; (8018b7c <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 8018b62:	8a5a      	ldrh	r2, [r3, #18]
 8018b64:	4b05      	ldr	r3, [pc, #20]	; (8018b7c <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 8018b66:	8a1b      	ldrh	r3, [r3, #16]
 8018b68:	429a      	cmp	r2, r3
 8018b6a:	d101      	bne.n	8018b70 <UTIL_ADV_TRACE_IsBufferEmpty+0x14>
    return 1;
 8018b6c:	2301      	movs	r3, #1
 8018b6e:	e000      	b.n	8018b72 <UTIL_ADV_TRACE_IsBufferEmpty+0x16>
  return 0;
 8018b70:	2300      	movs	r3, #0
}
 8018b72:	4618      	mov	r0, r3
 8018b74:	46bd      	mov	sp, r7
 8018b76:	bc80      	pop	{r7}
 8018b78:	4770      	bx	lr
 8018b7a:	bf00      	nop
 8018b7c:	20000eac 	.word	0x20000eac

08018b80 <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 8018b80:	b408      	push	{r3}
 8018b82:	b580      	push	{r7, lr}
 8018b84:	b08d      	sub	sp, #52	; 0x34
 8018b86:	af00      	add	r7, sp, #0
 8018b88:	60f8      	str	r0, [r7, #12]
 8018b8a:	60b9      	str	r1, [r7, #8]
 8018b8c:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 8018b8e:	2300      	movs	r3, #0
 8018b90:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 8018b92:	2300      	movs	r3, #0
 8018b94:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 8018b96:	4b38      	ldr	r3, [pc, #224]	; (8018c78 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 8018b98:	7a1b      	ldrb	r3, [r3, #8]
 8018b9a:	461a      	mov	r2, r3
 8018b9c:	68fb      	ldr	r3, [r7, #12]
 8018b9e:	4293      	cmp	r3, r2
 8018ba0:	d902      	bls.n	8018ba8 <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 8018ba2:	f06f 0304 	mvn.w	r3, #4
 8018ba6:	e05f      	b.n	8018c68 <UTIL_ADV_TRACE_COND_FSend+0xe8>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 8018ba8:	4b33      	ldr	r3, [pc, #204]	; (8018c78 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 8018baa:	68da      	ldr	r2, [r3, #12]
 8018bac:	68bb      	ldr	r3, [r7, #8]
 8018bae:	4013      	ands	r3, r2
 8018bb0:	68ba      	ldr	r2, [r7, #8]
 8018bb2:	429a      	cmp	r2, r3
 8018bb4:	d002      	beq.n	8018bbc <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 8018bb6:	f06f 0305 	mvn.w	r3, #5
 8018bba:	e055      	b.n	8018c68 <UTIL_ADV_TRACE_COND_FSend+0xe8>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 8018bbc:	4b2e      	ldr	r3, [pc, #184]	; (8018c78 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 8018bbe:	685b      	ldr	r3, [r3, #4]
 8018bc0:	2b00      	cmp	r3, #0
 8018bc2:	d00a      	beq.n	8018bda <UTIL_ADV_TRACE_COND_FSend+0x5a>
 8018bc4:	687b      	ldr	r3, [r7, #4]
 8018bc6:	2b00      	cmp	r3, #0
 8018bc8:	d007      	beq.n	8018bda <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 8018bca:	4b2b      	ldr	r3, [pc, #172]	; (8018c78 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 8018bcc:	685b      	ldr	r3, [r3, #4]
 8018bce:	f107 0116 	add.w	r1, r7, #22
 8018bd2:	f107 0218 	add.w	r2, r7, #24
 8018bd6:	4610      	mov	r0, r2
 8018bd8:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 8018bda:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8018bde:	62bb      	str	r3, [r7, #40]	; 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8018be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018be2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8018be4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8018be8:	4824      	ldr	r0, [pc, #144]	; (8018c7c <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 8018bea:	f7ff fa3f 	bl	801806c <tiny_vsnprintf_like>
 8018bee:	4603      	mov	r3, r0
 8018bf0:	85bb      	strh	r3, [r7, #44]	; 0x2c

  TRACE_Lock();
 8018bf2:	f000 f9f3 	bl	8018fdc <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 8018bf6:	8afa      	ldrh	r2, [r7, #22]
 8018bf8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8018bfa:	4413      	add	r3, r2
 8018bfc:	b29b      	uxth	r3, r3
 8018bfe:	f107 0214 	add.w	r2, r7, #20
 8018c02:	4611      	mov	r1, r2
 8018c04:	4618      	mov	r0, r3
 8018c06:	f000 f96b 	bl	8018ee0 <TRACE_AllocateBufer>
 8018c0a:	4603      	mov	r3, r0
 8018c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018c10:	d026      	beq.n	8018c60 <UTIL_ADV_TRACE_COND_FSend+0xe0>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 8018c12:	2300      	movs	r3, #0
 8018c14:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8018c16:	e00f      	b.n	8018c38 <UTIL_ADV_TRACE_COND_FSend+0xb8>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 8018c18:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8018c1a:	8aba      	ldrh	r2, [r7, #20]
 8018c1c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8018c20:	440b      	add	r3, r1
 8018c22:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 8018c26:	4b16      	ldr	r3, [pc, #88]	; (8018c80 <UTIL_ADV_TRACE_COND_FSend+0x100>)
 8018c28:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 8018c2a:	8abb      	ldrh	r3, [r7, #20]
 8018c2c:	3301      	adds	r3, #1
 8018c2e:	b29b      	uxth	r3, r3
 8018c30:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 8018c32:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8018c34:	3301      	adds	r3, #1
 8018c36:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8018c38:	8afb      	ldrh	r3, [r7, #22]
 8018c3a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8018c3c:	429a      	cmp	r2, r3
 8018c3e:	d3eb      	bcc.n	8018c18 <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8018c40:	8abb      	ldrh	r3, [r7, #20]
 8018c42:	461a      	mov	r2, r3
 8018c44:	4b0e      	ldr	r3, [pc, #56]	; (8018c80 <UTIL_ADV_TRACE_COND_FSend+0x100>)
 8018c46:	18d0      	adds	r0, r2, r3
 8018c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018c4a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8018c4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8018c50:	f7ff fa0c 	bl	801806c <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 8018c54:	f000 f9e0 	bl	8019018 <TRACE_UnLock>

    return TRACE_Send();
 8018c58:	f000 f832 	bl	8018cc0 <TRACE_Send>
 8018c5c:	4603      	mov	r3, r0
 8018c5e:	e003      	b.n	8018c68 <UTIL_ADV_TRACE_COND_FSend+0xe8>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 8018c60:	f000 f9da 	bl	8019018 <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 8018c64:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 8018c68:	4618      	mov	r0, r3
 8018c6a:	3734      	adds	r7, #52	; 0x34
 8018c6c:	46bd      	mov	sp, r7
 8018c6e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8018c72:	b001      	add	sp, #4
 8018c74:	4770      	bx	lr
 8018c76:	bf00      	nop
 8018c78:	20000eac 	.word	0x20000eac
 8018c7c:	200012c4 	.word	0x200012c4
 8018c80:	20000ec4 	.word	0x20000ec4

08018c84 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 8018c84:	b480      	push	{r7}
 8018c86:	b083      	sub	sp, #12
 8018c88:	af00      	add	r7, sp, #0
 8018c8a:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 8018c8c:	4a03      	ldr	r2, [pc, #12]	; (8018c9c <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 8018c8e:	687b      	ldr	r3, [r7, #4]
 8018c90:	6053      	str	r3, [r2, #4]
}
 8018c92:	bf00      	nop
 8018c94:	370c      	adds	r7, #12
 8018c96:	46bd      	mov	sp, r7
 8018c98:	bc80      	pop	{r7}
 8018c9a:	4770      	bx	lr
 8018c9c:	20000eac 	.word	0x20000eac

08018ca0 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 8018ca0:	b480      	push	{r7}
 8018ca2:	b083      	sub	sp, #12
 8018ca4:	af00      	add	r7, sp, #0
 8018ca6:	4603      	mov	r3, r0
 8018ca8:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 8018caa:	4a04      	ldr	r2, [pc, #16]	; (8018cbc <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 8018cac:	79fb      	ldrb	r3, [r7, #7]
 8018cae:	7213      	strb	r3, [r2, #8]
}
 8018cb0:	bf00      	nop
 8018cb2:	370c      	adds	r7, #12
 8018cb4:	46bd      	mov	sp, r7
 8018cb6:	bc80      	pop	{r7}
 8018cb8:	4770      	bx	lr
 8018cba:	bf00      	nop
 8018cbc:	20000eac 	.word	0x20000eac

08018cc0 <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 8018cc0:	b580      	push	{r7, lr}
 8018cc2:	b088      	sub	sp, #32
 8018cc4:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 8018cc6:	2300      	movs	r3, #0
 8018cc8:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 8018cca:	2300      	movs	r3, #0
 8018ccc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018cce:	f3ef 8310 	mrs	r3, PRIMASK
 8018cd2:	613b      	str	r3, [r7, #16]
  return(result);
 8018cd4:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 8018cd6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8018cd8:	b672      	cpsid	i
}
 8018cda:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 8018cdc:	f000 f9ba 	bl	8019054 <TRACE_IsLocked>
 8018ce0:	4603      	mov	r3, r0
 8018ce2:	2b00      	cmp	r3, #0
 8018ce4:	d15d      	bne.n	8018da2 <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 8018ce6:	f000 f979 	bl	8018fdc <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 8018cea:	4b34      	ldr	r3, [pc, #208]	; (8018dbc <TRACE_Send+0xfc>)
 8018cec:	8a1a      	ldrh	r2, [r3, #16]
 8018cee:	4b33      	ldr	r3, [pc, #204]	; (8018dbc <TRACE_Send+0xfc>)
 8018cf0:	8a5b      	ldrh	r3, [r3, #18]
 8018cf2:	429a      	cmp	r2, r3
 8018cf4:	d04d      	beq.n	8018d92 <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 8018cf6:	4b31      	ldr	r3, [pc, #196]	; (8018dbc <TRACE_Send+0xfc>)
 8018cf8:	789b      	ldrb	r3, [r3, #2]
 8018cfa:	2b01      	cmp	r3, #1
 8018cfc:	d117      	bne.n	8018d2e <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 8018cfe:	4b2f      	ldr	r3, [pc, #188]	; (8018dbc <TRACE_Send+0xfc>)
 8018d00:	881a      	ldrh	r2, [r3, #0]
 8018d02:	4b2e      	ldr	r3, [pc, #184]	; (8018dbc <TRACE_Send+0xfc>)
 8018d04:	8a1b      	ldrh	r3, [r3, #16]
 8018d06:	1ad3      	subs	r3, r2, r3
 8018d08:	b29a      	uxth	r2, r3
 8018d0a:	4b2c      	ldr	r3, [pc, #176]	; (8018dbc <TRACE_Send+0xfc>)
 8018d0c:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 8018d0e:	4b2b      	ldr	r3, [pc, #172]	; (8018dbc <TRACE_Send+0xfc>)
 8018d10:	2202      	movs	r2, #2
 8018d12:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 8018d14:	4b29      	ldr	r3, [pc, #164]	; (8018dbc <TRACE_Send+0xfc>)
 8018d16:	2200      	movs	r2, #0
 8018d18:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 8018d1a:	4b28      	ldr	r3, [pc, #160]	; (8018dbc <TRACE_Send+0xfc>)
 8018d1c:	8a9b      	ldrh	r3, [r3, #20]
 8018d1e:	2b00      	cmp	r3, #0
 8018d20:	d105      	bne.n	8018d2e <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8018d22:	4b26      	ldr	r3, [pc, #152]	; (8018dbc <TRACE_Send+0xfc>)
 8018d24:	2200      	movs	r2, #0
 8018d26:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 8018d28:	4b24      	ldr	r3, [pc, #144]	; (8018dbc <TRACE_Send+0xfc>)
 8018d2a:	2200      	movs	r2, #0
 8018d2c:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 8018d2e:	4b23      	ldr	r3, [pc, #140]	; (8018dbc <TRACE_Send+0xfc>)
 8018d30:	789b      	ldrb	r3, [r3, #2]
 8018d32:	2b00      	cmp	r3, #0
 8018d34:	d115      	bne.n	8018d62 <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8018d36:	4b21      	ldr	r3, [pc, #132]	; (8018dbc <TRACE_Send+0xfc>)
 8018d38:	8a5a      	ldrh	r2, [r3, #18]
 8018d3a:	4b20      	ldr	r3, [pc, #128]	; (8018dbc <TRACE_Send+0xfc>)
 8018d3c:	8a1b      	ldrh	r3, [r3, #16]
 8018d3e:	429a      	cmp	r2, r3
 8018d40:	d908      	bls.n	8018d54 <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 8018d42:	4b1e      	ldr	r3, [pc, #120]	; (8018dbc <TRACE_Send+0xfc>)
 8018d44:	8a5a      	ldrh	r2, [r3, #18]
 8018d46:	4b1d      	ldr	r3, [pc, #116]	; (8018dbc <TRACE_Send+0xfc>)
 8018d48:	8a1b      	ldrh	r3, [r3, #16]
 8018d4a:	1ad3      	subs	r3, r2, r3
 8018d4c:	b29a      	uxth	r2, r3
 8018d4e:	4b1b      	ldr	r3, [pc, #108]	; (8018dbc <TRACE_Send+0xfc>)
 8018d50:	829a      	strh	r2, [r3, #20]
 8018d52:	e006      	b.n	8018d62 <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 8018d54:	4b19      	ldr	r3, [pc, #100]	; (8018dbc <TRACE_Send+0xfc>)
 8018d56:	8a1b      	ldrh	r3, [r3, #16]
 8018d58:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8018d5c:	b29a      	uxth	r2, r3
 8018d5e:	4b17      	ldr	r3, [pc, #92]	; (8018dbc <TRACE_Send+0xfc>)
 8018d60:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 8018d62:	4b16      	ldr	r3, [pc, #88]	; (8018dbc <TRACE_Send+0xfc>)
 8018d64:	8a1b      	ldrh	r3, [r3, #16]
 8018d66:	461a      	mov	r2, r3
 8018d68:	4b15      	ldr	r3, [pc, #84]	; (8018dc0 <TRACE_Send+0x100>)
 8018d6a:	4413      	add	r3, r2
 8018d6c:	61bb      	str	r3, [r7, #24]
 8018d6e:	697b      	ldr	r3, [r7, #20]
 8018d70:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018d72:	68fb      	ldr	r3, [r7, #12]
 8018d74:	f383 8810 	msr	PRIMASK, r3
}
 8018d78:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 8018d7a:	f7e8 fc93 	bl	80016a4 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 8018d7e:	4b11      	ldr	r3, [pc, #68]	; (8018dc4 <TRACE_Send+0x104>)
 8018d80:	68db      	ldr	r3, [r3, #12]
 8018d82:	4a0e      	ldr	r2, [pc, #56]	; (8018dbc <TRACE_Send+0xfc>)
 8018d84:	8a92      	ldrh	r2, [r2, #20]
 8018d86:	4611      	mov	r1, r2
 8018d88:	69b8      	ldr	r0, [r7, #24]
 8018d8a:	4798      	blx	r3
 8018d8c:	4603      	mov	r3, r0
 8018d8e:	77fb      	strb	r3, [r7, #31]
 8018d90:	e00d      	b.n	8018dae <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 8018d92:	f000 f941 	bl	8019018 <TRACE_UnLock>
 8018d96:	697b      	ldr	r3, [r7, #20]
 8018d98:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018d9a:	68bb      	ldr	r3, [r7, #8]
 8018d9c:	f383 8810 	msr	PRIMASK, r3
}
 8018da0:	e005      	b.n	8018dae <TRACE_Send+0xee>
 8018da2:	697b      	ldr	r3, [r7, #20]
 8018da4:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018da6:	687b      	ldr	r3, [r7, #4]
 8018da8:	f383 8810 	msr	PRIMASK, r3
}
 8018dac:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 8018dae:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8018db2:	4618      	mov	r0, r3
 8018db4:	3720      	adds	r7, #32
 8018db6:	46bd      	mov	sp, r7
 8018db8:	bd80      	pop	{r7, pc}
 8018dba:	bf00      	nop
 8018dbc:	20000eac 	.word	0x20000eac
 8018dc0:	20000ec4 	.word	0x20000ec4
 8018dc4:	080198f4 	.word	0x080198f4

08018dc8 <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 8018dc8:	b580      	push	{r7, lr}
 8018dca:	b088      	sub	sp, #32
 8018dcc:	af00      	add	r7, sp, #0
 8018dce:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 8018dd0:	2300      	movs	r3, #0
 8018dd2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018dd4:	f3ef 8310 	mrs	r3, PRIMASK
 8018dd8:	617b      	str	r3, [r7, #20]
  return(result);
 8018dda:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 8018ddc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 8018dde:	b672      	cpsid	i
}
 8018de0:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 8018de2:	4b3c      	ldr	r3, [pc, #240]	; (8018ed4 <TRACE_TxCpltCallback+0x10c>)
 8018de4:	789b      	ldrb	r3, [r3, #2]
 8018de6:	2b02      	cmp	r3, #2
 8018de8:	d106      	bne.n	8018df8 <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8018dea:	4b3a      	ldr	r3, [pc, #232]	; (8018ed4 <TRACE_TxCpltCallback+0x10c>)
 8018dec:	2200      	movs	r2, #0
 8018dee:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 8018df0:	4b38      	ldr	r3, [pc, #224]	; (8018ed4 <TRACE_TxCpltCallback+0x10c>)
 8018df2:	2200      	movs	r2, #0
 8018df4:	821a      	strh	r2, [r3, #16]
 8018df6:	e00a      	b.n	8018e0e <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 8018df8:	4b36      	ldr	r3, [pc, #216]	; (8018ed4 <TRACE_TxCpltCallback+0x10c>)
 8018dfa:	8a1a      	ldrh	r2, [r3, #16]
 8018dfc:	4b35      	ldr	r3, [pc, #212]	; (8018ed4 <TRACE_TxCpltCallback+0x10c>)
 8018dfe:	8a9b      	ldrh	r3, [r3, #20]
 8018e00:	4413      	add	r3, r2
 8018e02:	b29b      	uxth	r3, r3
 8018e04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8018e08:	b29a      	uxth	r2, r3
 8018e0a:	4b32      	ldr	r3, [pc, #200]	; (8018ed4 <TRACE_TxCpltCallback+0x10c>)
 8018e0c:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 8018e0e:	4b31      	ldr	r3, [pc, #196]	; (8018ed4 <TRACE_TxCpltCallback+0x10c>)
 8018e10:	8a1a      	ldrh	r2, [r3, #16]
 8018e12:	4b30      	ldr	r3, [pc, #192]	; (8018ed4 <TRACE_TxCpltCallback+0x10c>)
 8018e14:	8a5b      	ldrh	r3, [r3, #18]
 8018e16:	429a      	cmp	r2, r3
 8018e18:	d04d      	beq.n	8018eb6 <TRACE_TxCpltCallback+0xee>
 8018e1a:	4b2e      	ldr	r3, [pc, #184]	; (8018ed4 <TRACE_TxCpltCallback+0x10c>)
 8018e1c:	8adb      	ldrh	r3, [r3, #22]
 8018e1e:	2b01      	cmp	r3, #1
 8018e20:	d149      	bne.n	8018eb6 <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 8018e22:	4b2c      	ldr	r3, [pc, #176]	; (8018ed4 <TRACE_TxCpltCallback+0x10c>)
 8018e24:	789b      	ldrb	r3, [r3, #2]
 8018e26:	2b01      	cmp	r3, #1
 8018e28:	d117      	bne.n	8018e5a <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 8018e2a:	4b2a      	ldr	r3, [pc, #168]	; (8018ed4 <TRACE_TxCpltCallback+0x10c>)
 8018e2c:	881a      	ldrh	r2, [r3, #0]
 8018e2e:	4b29      	ldr	r3, [pc, #164]	; (8018ed4 <TRACE_TxCpltCallback+0x10c>)
 8018e30:	8a1b      	ldrh	r3, [r3, #16]
 8018e32:	1ad3      	subs	r3, r2, r3
 8018e34:	b29a      	uxth	r2, r3
 8018e36:	4b27      	ldr	r3, [pc, #156]	; (8018ed4 <TRACE_TxCpltCallback+0x10c>)
 8018e38:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 8018e3a:	4b26      	ldr	r3, [pc, #152]	; (8018ed4 <TRACE_TxCpltCallback+0x10c>)
 8018e3c:	2202      	movs	r2, #2
 8018e3e:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 8018e40:	4b24      	ldr	r3, [pc, #144]	; (8018ed4 <TRACE_TxCpltCallback+0x10c>)
 8018e42:	2200      	movs	r2, #0
 8018e44:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 8018e46:	4b23      	ldr	r3, [pc, #140]	; (8018ed4 <TRACE_TxCpltCallback+0x10c>)
 8018e48:	8a9b      	ldrh	r3, [r3, #20]
 8018e4a:	2b00      	cmp	r3, #0
 8018e4c:	d105      	bne.n	8018e5a <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8018e4e:	4b21      	ldr	r3, [pc, #132]	; (8018ed4 <TRACE_TxCpltCallback+0x10c>)
 8018e50:	2200      	movs	r2, #0
 8018e52:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 8018e54:	4b1f      	ldr	r3, [pc, #124]	; (8018ed4 <TRACE_TxCpltCallback+0x10c>)
 8018e56:	2200      	movs	r2, #0
 8018e58:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 8018e5a:	4b1e      	ldr	r3, [pc, #120]	; (8018ed4 <TRACE_TxCpltCallback+0x10c>)
 8018e5c:	789b      	ldrb	r3, [r3, #2]
 8018e5e:	2b00      	cmp	r3, #0
 8018e60:	d115      	bne.n	8018e8e <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8018e62:	4b1c      	ldr	r3, [pc, #112]	; (8018ed4 <TRACE_TxCpltCallback+0x10c>)
 8018e64:	8a5a      	ldrh	r2, [r3, #18]
 8018e66:	4b1b      	ldr	r3, [pc, #108]	; (8018ed4 <TRACE_TxCpltCallback+0x10c>)
 8018e68:	8a1b      	ldrh	r3, [r3, #16]
 8018e6a:	429a      	cmp	r2, r3
 8018e6c:	d908      	bls.n	8018e80 <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 8018e6e:	4b19      	ldr	r3, [pc, #100]	; (8018ed4 <TRACE_TxCpltCallback+0x10c>)
 8018e70:	8a5a      	ldrh	r2, [r3, #18]
 8018e72:	4b18      	ldr	r3, [pc, #96]	; (8018ed4 <TRACE_TxCpltCallback+0x10c>)
 8018e74:	8a1b      	ldrh	r3, [r3, #16]
 8018e76:	1ad3      	subs	r3, r2, r3
 8018e78:	b29a      	uxth	r2, r3
 8018e7a:	4b16      	ldr	r3, [pc, #88]	; (8018ed4 <TRACE_TxCpltCallback+0x10c>)
 8018e7c:	829a      	strh	r2, [r3, #20]
 8018e7e:	e006      	b.n	8018e8e <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 8018e80:	4b14      	ldr	r3, [pc, #80]	; (8018ed4 <TRACE_TxCpltCallback+0x10c>)
 8018e82:	8a1b      	ldrh	r3, [r3, #16]
 8018e84:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8018e88:	b29a      	uxth	r2, r3
 8018e8a:	4b12      	ldr	r3, [pc, #72]	; (8018ed4 <TRACE_TxCpltCallback+0x10c>)
 8018e8c:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 8018e8e:	4b11      	ldr	r3, [pc, #68]	; (8018ed4 <TRACE_TxCpltCallback+0x10c>)
 8018e90:	8a1b      	ldrh	r3, [r3, #16]
 8018e92:	461a      	mov	r2, r3
 8018e94:	4b10      	ldr	r3, [pc, #64]	; (8018ed8 <TRACE_TxCpltCallback+0x110>)
 8018e96:	4413      	add	r3, r2
 8018e98:	61fb      	str	r3, [r7, #28]
 8018e9a:	69bb      	ldr	r3, [r7, #24]
 8018e9c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018e9e:	693b      	ldr	r3, [r7, #16]
 8018ea0:	f383 8810 	msr	PRIMASK, r3
}
 8018ea4:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 8018ea6:	4b0d      	ldr	r3, [pc, #52]	; (8018edc <TRACE_TxCpltCallback+0x114>)
 8018ea8:	68db      	ldr	r3, [r3, #12]
 8018eaa:	4a0a      	ldr	r2, [pc, #40]	; (8018ed4 <TRACE_TxCpltCallback+0x10c>)
 8018eac:	8a92      	ldrh	r2, [r2, #20]
 8018eae:	4611      	mov	r1, r2
 8018eb0:	69f8      	ldr	r0, [r7, #28]
 8018eb2:	4798      	blx	r3
 8018eb4:	e00a      	b.n	8018ecc <TRACE_TxCpltCallback+0x104>
 8018eb6:	69bb      	ldr	r3, [r7, #24]
 8018eb8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018eba:	68fb      	ldr	r3, [r7, #12]
 8018ebc:	f383 8810 	msr	PRIMASK, r3
}
 8018ec0:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 8018ec2:	f7e8 fbf7 	bl	80016b4 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 8018ec6:	f000 f8a7 	bl	8019018 <TRACE_UnLock>
  }
}
 8018eca:	bf00      	nop
 8018ecc:	bf00      	nop
 8018ece:	3720      	adds	r7, #32
 8018ed0:	46bd      	mov	sp, r7
 8018ed2:	bd80      	pop	{r7, pc}
 8018ed4:	20000eac 	.word	0x20000eac
 8018ed8:	20000ec4 	.word	0x20000ec4
 8018edc:	080198f4 	.word	0x080198f4

08018ee0 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 8018ee0:	b480      	push	{r7}
 8018ee2:	b087      	sub	sp, #28
 8018ee4:	af00      	add	r7, sp, #0
 8018ee6:	4603      	mov	r3, r0
 8018ee8:	6039      	str	r1, [r7, #0]
 8018eea:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 8018eec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018ef0:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018ef2:	f3ef 8310 	mrs	r3, PRIMASK
 8018ef6:	60fb      	str	r3, [r7, #12]
  return(result);
 8018ef8:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 8018efa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8018efc:	b672      	cpsid	i
}
 8018efe:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 8018f00:	4b35      	ldr	r3, [pc, #212]	; (8018fd8 <TRACE_AllocateBufer+0xf8>)
 8018f02:	8a5a      	ldrh	r2, [r3, #18]
 8018f04:	4b34      	ldr	r3, [pc, #208]	; (8018fd8 <TRACE_AllocateBufer+0xf8>)
 8018f06:	8a1b      	ldrh	r3, [r3, #16]
 8018f08:	429a      	cmp	r2, r3
 8018f0a:	d11b      	bne.n	8018f44 <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8018f0c:	4b32      	ldr	r3, [pc, #200]	; (8018fd8 <TRACE_AllocateBufer+0xf8>)
 8018f0e:	8a5b      	ldrh	r3, [r3, #18]
 8018f10:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8018f14:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 8018f16:	88fa      	ldrh	r2, [r7, #6]
 8018f18:	8afb      	ldrh	r3, [r7, #22]
 8018f1a:	429a      	cmp	r2, r3
 8018f1c:	d33a      	bcc.n	8018f94 <TRACE_AllocateBufer+0xb4>
 8018f1e:	4b2e      	ldr	r3, [pc, #184]	; (8018fd8 <TRACE_AllocateBufer+0xf8>)
 8018f20:	8a1b      	ldrh	r3, [r3, #16]
 8018f22:	88fa      	ldrh	r2, [r7, #6]
 8018f24:	429a      	cmp	r2, r3
 8018f26:	d235      	bcs.n	8018f94 <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 8018f28:	4b2b      	ldr	r3, [pc, #172]	; (8018fd8 <TRACE_AllocateBufer+0xf8>)
 8018f2a:	2201      	movs	r2, #1
 8018f2c:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 8018f2e:	4b2a      	ldr	r3, [pc, #168]	; (8018fd8 <TRACE_AllocateBufer+0xf8>)
 8018f30:	8a5a      	ldrh	r2, [r3, #18]
 8018f32:	4b29      	ldr	r3, [pc, #164]	; (8018fd8 <TRACE_AllocateBufer+0xf8>)
 8018f34:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 8018f36:	4b28      	ldr	r3, [pc, #160]	; (8018fd8 <TRACE_AllocateBufer+0xf8>)
 8018f38:	8a1b      	ldrh	r3, [r3, #16]
 8018f3a:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 8018f3c:	4b26      	ldr	r3, [pc, #152]	; (8018fd8 <TRACE_AllocateBufer+0xf8>)
 8018f3e:	2200      	movs	r2, #0
 8018f40:	825a      	strh	r2, [r3, #18]
 8018f42:	e027      	b.n	8018f94 <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8018f44:	4b24      	ldr	r3, [pc, #144]	; (8018fd8 <TRACE_AllocateBufer+0xf8>)
 8018f46:	8a5a      	ldrh	r2, [r3, #18]
 8018f48:	4b23      	ldr	r3, [pc, #140]	; (8018fd8 <TRACE_AllocateBufer+0xf8>)
 8018f4a:	8a1b      	ldrh	r3, [r3, #16]
 8018f4c:	429a      	cmp	r2, r3
 8018f4e:	d91b      	bls.n	8018f88 <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8018f50:	4b21      	ldr	r3, [pc, #132]	; (8018fd8 <TRACE_AllocateBufer+0xf8>)
 8018f52:	8a5b      	ldrh	r3, [r3, #18]
 8018f54:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8018f58:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 8018f5a:	88fa      	ldrh	r2, [r7, #6]
 8018f5c:	8afb      	ldrh	r3, [r7, #22]
 8018f5e:	429a      	cmp	r2, r3
 8018f60:	d318      	bcc.n	8018f94 <TRACE_AllocateBufer+0xb4>
 8018f62:	4b1d      	ldr	r3, [pc, #116]	; (8018fd8 <TRACE_AllocateBufer+0xf8>)
 8018f64:	8a1b      	ldrh	r3, [r3, #16]
 8018f66:	88fa      	ldrh	r2, [r7, #6]
 8018f68:	429a      	cmp	r2, r3
 8018f6a:	d213      	bcs.n	8018f94 <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 8018f6c:	4b1a      	ldr	r3, [pc, #104]	; (8018fd8 <TRACE_AllocateBufer+0xf8>)
 8018f6e:	2201      	movs	r2, #1
 8018f70:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 8018f72:	4b19      	ldr	r3, [pc, #100]	; (8018fd8 <TRACE_AllocateBufer+0xf8>)
 8018f74:	8a5a      	ldrh	r2, [r3, #18]
 8018f76:	4b18      	ldr	r3, [pc, #96]	; (8018fd8 <TRACE_AllocateBufer+0xf8>)
 8018f78:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 8018f7a:	4b17      	ldr	r3, [pc, #92]	; (8018fd8 <TRACE_AllocateBufer+0xf8>)
 8018f7c:	8a1b      	ldrh	r3, [r3, #16]
 8018f7e:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 8018f80:	4b15      	ldr	r3, [pc, #84]	; (8018fd8 <TRACE_AllocateBufer+0xf8>)
 8018f82:	2200      	movs	r2, #0
 8018f84:	825a      	strh	r2, [r3, #18]
 8018f86:	e005      	b.n	8018f94 <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 8018f88:	4b13      	ldr	r3, [pc, #76]	; (8018fd8 <TRACE_AllocateBufer+0xf8>)
 8018f8a:	8a1a      	ldrh	r2, [r3, #16]
 8018f8c:	4b12      	ldr	r3, [pc, #72]	; (8018fd8 <TRACE_AllocateBufer+0xf8>)
 8018f8e:	8a5b      	ldrh	r3, [r3, #18]
 8018f90:	1ad3      	subs	r3, r2, r3
 8018f92:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 8018f94:	8afa      	ldrh	r2, [r7, #22]
 8018f96:	88fb      	ldrh	r3, [r7, #6]
 8018f98:	429a      	cmp	r2, r3
 8018f9a:	d90f      	bls.n	8018fbc <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 8018f9c:	4b0e      	ldr	r3, [pc, #56]	; (8018fd8 <TRACE_AllocateBufer+0xf8>)
 8018f9e:	8a5a      	ldrh	r2, [r3, #18]
 8018fa0:	683b      	ldr	r3, [r7, #0]
 8018fa2:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 8018fa4:	4b0c      	ldr	r3, [pc, #48]	; (8018fd8 <TRACE_AllocateBufer+0xf8>)
 8018fa6:	8a5a      	ldrh	r2, [r3, #18]
 8018fa8:	88fb      	ldrh	r3, [r7, #6]
 8018faa:	4413      	add	r3, r2
 8018fac:	b29b      	uxth	r3, r3
 8018fae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8018fb2:	b29a      	uxth	r2, r3
 8018fb4:	4b08      	ldr	r3, [pc, #32]	; (8018fd8 <TRACE_AllocateBufer+0xf8>)
 8018fb6:	825a      	strh	r2, [r3, #18]
    ret = 0;
 8018fb8:	2300      	movs	r3, #0
 8018fba:	82bb      	strh	r3, [r7, #20]
 8018fbc:	693b      	ldr	r3, [r7, #16]
 8018fbe:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018fc0:	68bb      	ldr	r3, [r7, #8]
 8018fc2:	f383 8810 	msr	PRIMASK, r3
}
 8018fc6:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 8018fc8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 8018fcc:	4618      	mov	r0, r3
 8018fce:	371c      	adds	r7, #28
 8018fd0:	46bd      	mov	sp, r7
 8018fd2:	bc80      	pop	{r7}
 8018fd4:	4770      	bx	lr
 8018fd6:	bf00      	nop
 8018fd8:	20000eac 	.word	0x20000eac

08018fdc <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 8018fdc:	b480      	push	{r7}
 8018fde:	b085      	sub	sp, #20
 8018fe0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018fe2:	f3ef 8310 	mrs	r3, PRIMASK
 8018fe6:	607b      	str	r3, [r7, #4]
  return(result);
 8018fe8:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 8018fea:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8018fec:	b672      	cpsid	i
}
 8018fee:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 8018ff0:	4b08      	ldr	r3, [pc, #32]	; (8019014 <TRACE_Lock+0x38>)
 8018ff2:	8adb      	ldrh	r3, [r3, #22]
 8018ff4:	3301      	adds	r3, #1
 8018ff6:	b29a      	uxth	r2, r3
 8018ff8:	4b06      	ldr	r3, [pc, #24]	; (8019014 <TRACE_Lock+0x38>)
 8018ffa:	82da      	strh	r2, [r3, #22]
 8018ffc:	68fb      	ldr	r3, [r7, #12]
 8018ffe:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019000:	68bb      	ldr	r3, [r7, #8]
 8019002:	f383 8810 	msr	PRIMASK, r3
}
 8019006:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 8019008:	bf00      	nop
 801900a:	3714      	adds	r7, #20
 801900c:	46bd      	mov	sp, r7
 801900e:	bc80      	pop	{r7}
 8019010:	4770      	bx	lr
 8019012:	bf00      	nop
 8019014:	20000eac 	.word	0x20000eac

08019018 <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 8019018:	b480      	push	{r7}
 801901a:	b085      	sub	sp, #20
 801901c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801901e:	f3ef 8310 	mrs	r3, PRIMASK
 8019022:	607b      	str	r3, [r7, #4]
  return(result);
 8019024:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 8019026:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8019028:	b672      	cpsid	i
}
 801902a:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 801902c:	4b08      	ldr	r3, [pc, #32]	; (8019050 <TRACE_UnLock+0x38>)
 801902e:	8adb      	ldrh	r3, [r3, #22]
 8019030:	3b01      	subs	r3, #1
 8019032:	b29a      	uxth	r2, r3
 8019034:	4b06      	ldr	r3, [pc, #24]	; (8019050 <TRACE_UnLock+0x38>)
 8019036:	82da      	strh	r2, [r3, #22]
 8019038:	68fb      	ldr	r3, [r7, #12]
 801903a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801903c:	68bb      	ldr	r3, [r7, #8]
 801903e:	f383 8810 	msr	PRIMASK, r3
}
 8019042:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 8019044:	bf00      	nop
 8019046:	3714      	adds	r7, #20
 8019048:	46bd      	mov	sp, r7
 801904a:	bc80      	pop	{r7}
 801904c:	4770      	bx	lr
 801904e:	bf00      	nop
 8019050:	20000eac 	.word	0x20000eac

08019054 <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 8019054:	b480      	push	{r7}
 8019056:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 8019058:	4b05      	ldr	r3, [pc, #20]	; (8019070 <TRACE_IsLocked+0x1c>)
 801905a:	8adb      	ldrh	r3, [r3, #22]
 801905c:	2b00      	cmp	r3, #0
 801905e:	bf14      	ite	ne
 8019060:	2301      	movne	r3, #1
 8019062:	2300      	moveq	r3, #0
 8019064:	b2db      	uxtb	r3, r3
}
 8019066:	4618      	mov	r0, r3
 8019068:	46bd      	mov	sp, r7
 801906a:	bc80      	pop	{r7}
 801906c:	4770      	bx	lr
 801906e:	bf00      	nop
 8019070:	20000eac 	.word	0x20000eac
 8019074:	00000000 	.word	0x00000000

08019078 <floor>:
 8019078:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801907c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8019080:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8019084:	2e13      	cmp	r6, #19
 8019086:	4602      	mov	r2, r0
 8019088:	460b      	mov	r3, r1
 801908a:	4607      	mov	r7, r0
 801908c:	460c      	mov	r4, r1
 801908e:	4605      	mov	r5, r0
 8019090:	dc34      	bgt.n	80190fc <floor+0x84>
 8019092:	2e00      	cmp	r6, #0
 8019094:	da15      	bge.n	80190c2 <floor+0x4a>
 8019096:	a334      	add	r3, pc, #208	; (adr r3, 8019168 <floor+0xf0>)
 8019098:	e9d3 2300 	ldrd	r2, r3, [r3]
 801909c:	f7e7 f87a 	bl	8000194 <__adddf3>
 80190a0:	2200      	movs	r2, #0
 80190a2:	2300      	movs	r3, #0
 80190a4:	f7e7 faaa 	bl	80005fc <__aeabi_dcmpgt>
 80190a8:	b140      	cbz	r0, 80190bc <floor+0x44>
 80190aa:	2c00      	cmp	r4, #0
 80190ac:	da59      	bge.n	8019162 <floor+0xea>
 80190ae:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80190b2:	ea57 0503 	orrs.w	r5, r7, r3
 80190b6:	d001      	beq.n	80190bc <floor+0x44>
 80190b8:	4c2d      	ldr	r4, [pc, #180]	; (8019170 <floor+0xf8>)
 80190ba:	2500      	movs	r5, #0
 80190bc:	4623      	mov	r3, r4
 80190be:	462f      	mov	r7, r5
 80190c0:	e025      	b.n	801910e <floor+0x96>
 80190c2:	4a2c      	ldr	r2, [pc, #176]	; (8019174 <floor+0xfc>)
 80190c4:	fa42 f806 	asr.w	r8, r2, r6
 80190c8:	ea01 0208 	and.w	r2, r1, r8
 80190cc:	4302      	orrs	r2, r0
 80190ce:	d01e      	beq.n	801910e <floor+0x96>
 80190d0:	a325      	add	r3, pc, #148	; (adr r3, 8019168 <floor+0xf0>)
 80190d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80190d6:	f7e7 f85d 	bl	8000194 <__adddf3>
 80190da:	2200      	movs	r2, #0
 80190dc:	2300      	movs	r3, #0
 80190de:	f7e7 fa8d 	bl	80005fc <__aeabi_dcmpgt>
 80190e2:	2800      	cmp	r0, #0
 80190e4:	d0ea      	beq.n	80190bc <floor+0x44>
 80190e6:	2c00      	cmp	r4, #0
 80190e8:	bfbe      	ittt	lt
 80190ea:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80190ee:	fa43 f606 	asrlt.w	r6, r3, r6
 80190f2:	19a4      	addlt	r4, r4, r6
 80190f4:	ea24 0408 	bic.w	r4, r4, r8
 80190f8:	2500      	movs	r5, #0
 80190fa:	e7df      	b.n	80190bc <floor+0x44>
 80190fc:	2e33      	cmp	r6, #51	; 0x33
 80190fe:	dd0a      	ble.n	8019116 <floor+0x9e>
 8019100:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8019104:	d103      	bne.n	801910e <floor+0x96>
 8019106:	f7e7 f845 	bl	8000194 <__adddf3>
 801910a:	4607      	mov	r7, r0
 801910c:	460b      	mov	r3, r1
 801910e:	4638      	mov	r0, r7
 8019110:	4619      	mov	r1, r3
 8019112:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019116:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 801911a:	f04f 32ff 	mov.w	r2, #4294967295
 801911e:	fa22 f808 	lsr.w	r8, r2, r8
 8019122:	ea18 0f00 	tst.w	r8, r0
 8019126:	d0f2      	beq.n	801910e <floor+0x96>
 8019128:	a30f      	add	r3, pc, #60	; (adr r3, 8019168 <floor+0xf0>)
 801912a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801912e:	f7e7 f831 	bl	8000194 <__adddf3>
 8019132:	2200      	movs	r2, #0
 8019134:	2300      	movs	r3, #0
 8019136:	f7e7 fa61 	bl	80005fc <__aeabi_dcmpgt>
 801913a:	2800      	cmp	r0, #0
 801913c:	d0be      	beq.n	80190bc <floor+0x44>
 801913e:	2c00      	cmp	r4, #0
 8019140:	da02      	bge.n	8019148 <floor+0xd0>
 8019142:	2e14      	cmp	r6, #20
 8019144:	d103      	bne.n	801914e <floor+0xd6>
 8019146:	3401      	adds	r4, #1
 8019148:	ea25 0508 	bic.w	r5, r5, r8
 801914c:	e7b6      	b.n	80190bc <floor+0x44>
 801914e:	2301      	movs	r3, #1
 8019150:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8019154:	fa03 f606 	lsl.w	r6, r3, r6
 8019158:	4435      	add	r5, r6
 801915a:	42bd      	cmp	r5, r7
 801915c:	bf38      	it	cc
 801915e:	18e4      	addcc	r4, r4, r3
 8019160:	e7f2      	b.n	8019148 <floor+0xd0>
 8019162:	2500      	movs	r5, #0
 8019164:	462c      	mov	r4, r5
 8019166:	e7a9      	b.n	80190bc <floor+0x44>
 8019168:	8800759c 	.word	0x8800759c
 801916c:	7e37e43c 	.word	0x7e37e43c
 8019170:	bff00000 	.word	0xbff00000
 8019174:	000fffff 	.word	0x000fffff

08019178 <__libc_init_array>:
 8019178:	b570      	push	{r4, r5, r6, lr}
 801917a:	4d0d      	ldr	r5, [pc, #52]	; (80191b0 <__libc_init_array+0x38>)
 801917c:	4c0d      	ldr	r4, [pc, #52]	; (80191b4 <__libc_init_array+0x3c>)
 801917e:	1b64      	subs	r4, r4, r5
 8019180:	10a4      	asrs	r4, r4, #2
 8019182:	2600      	movs	r6, #0
 8019184:	42a6      	cmp	r6, r4
 8019186:	d109      	bne.n	801919c <__libc_init_array+0x24>
 8019188:	4d0b      	ldr	r5, [pc, #44]	; (80191b8 <__libc_init_array+0x40>)
 801918a:	4c0c      	ldr	r4, [pc, #48]	; (80191bc <__libc_init_array+0x44>)
 801918c:	f000 f820 	bl	80191d0 <_init>
 8019190:	1b64      	subs	r4, r4, r5
 8019192:	10a4      	asrs	r4, r4, #2
 8019194:	2600      	movs	r6, #0
 8019196:	42a6      	cmp	r6, r4
 8019198:	d105      	bne.n	80191a6 <__libc_init_array+0x2e>
 801919a:	bd70      	pop	{r4, r5, r6, pc}
 801919c:	f855 3b04 	ldr.w	r3, [r5], #4
 80191a0:	4798      	blx	r3
 80191a2:	3601      	adds	r6, #1
 80191a4:	e7ee      	b.n	8019184 <__libc_init_array+0xc>
 80191a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80191aa:	4798      	blx	r3
 80191ac:	3601      	adds	r6, #1
 80191ae:	e7f2      	b.n	8019196 <__libc_init_array+0x1e>
 80191b0:	08019dcc 	.word	0x08019dcc
 80191b4:	08019dcc 	.word	0x08019dcc
 80191b8:	08019dcc 	.word	0x08019dcc
 80191bc:	08019dd0 	.word	0x08019dd0

080191c0 <memset>:
 80191c0:	4402      	add	r2, r0
 80191c2:	4603      	mov	r3, r0
 80191c4:	4293      	cmp	r3, r2
 80191c6:	d100      	bne.n	80191ca <memset+0xa>
 80191c8:	4770      	bx	lr
 80191ca:	f803 1b01 	strb.w	r1, [r3], #1
 80191ce:	e7f9      	b.n	80191c4 <memset+0x4>

080191d0 <_init>:
 80191d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80191d2:	bf00      	nop
 80191d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80191d6:	bc08      	pop	{r3}
 80191d8:	469e      	mov	lr, r3
 80191da:	4770      	bx	lr

080191dc <_fini>:
 80191dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80191de:	bf00      	nop
 80191e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80191e2:	bc08      	pop	{r3}
 80191e4:	469e      	mov	lr, r3
 80191e6:	4770      	bx	lr
